{"ast":null,"code":"import _asyncToGenerator from \"F:/statvalu/AR_DocuExpert_Test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * When a poller is manually stopped through the `stopPolling` method,\n * the poller will be rejected with an instance of the PollerStoppedError.\n */\nexport class PollerStoppedError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"PollerStoppedError\";\n    Object.setPrototypeOf(this, PollerStoppedError.prototype);\n  }\n\n}\n/**\n * When a poller is cancelled through the `cancelOperation` method,\n * the poller will be rejected with an instance of the PollerCancelledError.\n */\n\nexport class PollerCancelledError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"PollerCancelledError\";\n    Object.setPrototypeOf(this, PollerCancelledError.prototype);\n  }\n\n}\n/**\n * A class that represents the definition of a program that polls through consecutive requests\n * until it reaches a state of completion.\n *\n * A poller can be executed manually, by polling request by request by calling to the `poll()` method repeatedly, until its operation is completed.\n * It also provides a way to wait until the operation completes, by calling `pollUntilDone()` and waiting until the operation finishes.\n * Pollers can also request the cancellation of the ongoing process to whom is providing the underlying long running operation.\n *\n * ```ts\n * const poller = new MyPoller();\n *\n * // Polling just once:\n * await poller.poll();\n *\n * // We can try to cancel the request here, by calling:\n * //\n * //     await poller.cancelOperation();\n * //\n *\n * // Getting the final result:\n * const result = await poller.pollUntilDone();\n * ```\n *\n * The Poller is defined by two types, a type representing the state of the poller, which\n * must include a basic set of properties from `PollOperationState<TResult>`,\n * and a return type defined by `TResult`, which can be anything.\n *\n * The Poller class implements the `PollerLike` interface, which allows poller implementations to avoid having\n * to export the Poller's class directly, and instead only export the already instantiated poller with the PollerLike type.\n *\n * ```ts\n * class Client {\n *   public async makePoller: PollerLike<MyOperationState, MyResult> {\n *     const poller = new MyPoller({});\n *     // It might be preferred to return the poller after the first request is made,\n *     // so that some information can be obtained right away.\n *     await poller.poll();\n *     return poller;\n *   }\n * }\n *\n * const poller: PollerLike<MyOperationState, MyResult> = myClient.makePoller();\n * ```\n *\n * A poller can be created through its constructor, then it can be polled until it's completed.\n * At any point in time, the state of the poller can be obtained without delay through the getOperationState method.\n * At any point in time, the intermediate forms of the result type can be requested without delay.\n * Once the underlying operation is marked as completed, the poller will stop and the final value will be returned.\n *\n * ```ts\n * const poller = myClient.makePoller();\n * const state: MyOperationState = poller.getOperationState();\n *\n * // The intermediate result can be obtained at any time.\n * const result: MyResult | undefined = poller.getResult();\n *\n * // The final result can only be obtained after the poller finishes.\n * const result: MyResult = await poller.pollUntilDone();\n * ```\n *\n */\n// eslint-disable-next-line no-use-before-define\n\nexport class Poller {\n  /**\n   * A poller needs to be initialized by passing in at least the basic properties of the `PollOperation<TState, TResult>`.\n   *\n   * When writing an implementation of a Poller, this implementation needs to deal with the initialization\n   * of any custom state beyond the basic definition of the poller. The basic poller assumes that the poller's\n   * operation has already been defined, at least its basic properties. The code below shows how to approach\n   * the definition of the constructor of a new custom poller.\n   *\n   * ```ts\n   * export class MyPoller extends Poller<MyOperationState, string> {\n   *   constructor({\n   *     // Anything you might need outside of the basics\n   *   }) {\n   *     let state: MyOperationState = {\n   *       privateProperty: private,\n   *       publicProperty: public,\n   *     };\n   *\n   *     const operation = {\n   *       state,\n   *       update,\n   *       cancel,\n   *       toString\n   *     }\n   *\n   *     // Sending the operation to the parent's constructor.\n   *     super(operation);\n   *\n   *     // You can assign more local properties here.\n   *   }\n   * }\n   * ```\n   *\n   * Inside of this constructor, a new promise is created. This will be used to\n   * tell the user when the poller finishes (see `pollUntilDone()`). The promise's\n   * resolve and reject methods are also used internally to control when to resolve\n   * or reject anyone waiting for the poller to finish.\n   *\n   * The constructor of a custom implementation of a poller is where any serialized version of\n   * a previous poller's operation should be deserialized into the operation sent to the\n   * base constructor. For example:\n   *\n   * ```ts\n   * export class MyPoller extends Poller<MyOperationState, string> {\n   *   constructor(\n   *     baseOperation: string | undefined\n   *   ) {\n   *     let state: MyOperationState = {};\n   *     if (baseOperation) {\n   *       state = {\n   *         ...JSON.parse(baseOperation).state,\n   *         ...state\n   *       };\n   *     }\n   *     const operation = {\n   *       state,\n   *       // ...\n   *     }\n   *     super(operation);\n   *   }\n   * }\n   * ```\n   *\n   * @param operation - Must contain the basic properties of `PollOperation<State, TResult>`.\n   */\n  constructor(operation) {\n    this.stopped = true;\n    this.pollProgressCallbacks = [];\n    this.operation = operation;\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    }); // This prevents the UnhandledPromiseRejectionWarning in node.js from being thrown.\n    // The above warning would get thrown if `poller.poll` is called, it returns an error,\n    // and pullUntilDone did not have a .catch or await try/catch on it's return value.\n\n    this.promise.catch(() => {\n      /* intentionally blank */\n    });\n  }\n  /**\n   * @internal\n   * Starts a loop that will break only if the poller is done\n   * or if the poller is stopped.\n   */\n\n\n  startPolling() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this.stopped) {\n        _this.stopped = false;\n      }\n\n      while (!_this.isStopped() && !_this.isDone()) {\n        yield _this.poll();\n        yield _this.delay();\n      }\n    })();\n  }\n  /**\n   * @internal\n   * pollOnce does one polling, by calling to the update method of the underlying\n   * poll operation to make any relevant change effective.\n   *\n   * It only optionally receives an object with an abortSignal property, from \\@azure/abort-controller's AbortSignalLike.\n   *\n   * @param options - Optional properties passed to the operation's update method.\n   */\n\n\n  pollOnce(options = {}) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        if (!_this2.isDone()) {\n          _this2.operation = yield _this2.operation.update({\n            abortSignal: options.abortSignal,\n            fireProgress: _this2.fireProgress.bind(_this2)\n          });\n\n          if (_this2.isDone() && _this2.resolve) {\n            // If the poller has finished polling, this means we now have a result.\n            // However, it can be the case that TResult is instantiated to void, so\n            // we are not expecting a result anyway. To assert that we might not\n            // have a result eventually after finishing polling, we cast the result\n            // to TResult.\n            _this2.resolve(_this2.operation.state.result);\n          }\n        }\n      } catch (e) {\n        _this2.operation.state.error = e;\n\n        if (_this2.reject) {\n          _this2.reject(e);\n        }\n\n        throw e;\n      }\n    })();\n  }\n  /**\n   * @internal\n   * fireProgress calls the functions passed in via onProgress the method of the poller.\n   *\n   * It loops over all of the callbacks received from onProgress, and executes them, sending them\n   * the current operation state.\n   *\n   * @param state - The current operation state.\n   */\n\n\n  fireProgress(state) {\n    for (const callback of this.pollProgressCallbacks) {\n      callback(state);\n    }\n  }\n  /**\n   * @internal\n   * Invokes the underlying operation's cancel method, and rejects the\n   * pollUntilDone promise.\n   */\n\n\n  cancelOnce(options = {}) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      _this3.operation = yield _this3.operation.cancel(options);\n\n      if (_this3.reject) {\n        _this3.reject(new PollerCancelledError(\"Poller cancelled\"));\n      }\n    })();\n  }\n  /**\n   * Returns a promise that will resolve once a single polling request finishes.\n   * It does this by calling the update method of the Poller's operation.\n   *\n   * It only optionally receives an object with an abortSignal property, from \\@azure/abort-controller's AbortSignalLike.\n   *\n   * @param options - Optional properties passed to the operation's update method.\n   */\n\n\n  poll(options = {}) {\n    if (!this.pollOncePromise) {\n      this.pollOncePromise = this.pollOnce(options);\n\n      const clearPollOncePromise = () => {\n        this.pollOncePromise = undefined;\n      };\n\n      this.pollOncePromise.then(clearPollOncePromise, clearPollOncePromise).catch(this.reject);\n    }\n\n    return this.pollOncePromise;\n  }\n  /**\n   * Returns a promise that will resolve once the underlying operation is completed.\n   */\n\n\n  pollUntilDone() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this4.stopped) {\n        _this4.startPolling().catch(_this4.reject);\n      }\n\n      return _this4.promise;\n    })();\n  }\n  /**\n   * Invokes the provided callback after each polling is completed,\n   * sending the current state of the poller's operation.\n   *\n   * It returns a method that can be used to stop receiving updates on the given callback function.\n   */\n\n\n  onProgress(callback) {\n    this.pollProgressCallbacks.push(callback);\n    return () => {\n      this.pollProgressCallbacks = this.pollProgressCallbacks.filter(c => c !== callback);\n    };\n  }\n  /**\n   * Returns true if the poller has finished polling.\n   */\n\n\n  isDone() {\n    const state = this.operation.state;\n    return Boolean(state.isCompleted || state.isCancelled || state.error);\n  }\n  /**\n   * Stops the poller from continuing to poll.\n   */\n\n\n  stopPolling() {\n    if (!this.stopped) {\n      this.stopped = true;\n\n      if (this.reject) {\n        this.reject(new PollerStoppedError(\"This poller is already stopped\"));\n      }\n    }\n  }\n  /**\n   * Returns true if the poller is stopped.\n   */\n\n\n  isStopped() {\n    return this.stopped;\n  }\n  /**\n   * Attempts to cancel the underlying operation.\n   *\n   * It only optionally receives an object with an abortSignal property, from \\@azure/abort-controller's AbortSignalLike.\n   *\n   * If it's called again before it finishes, it will throw an error.\n   *\n   * @param options - Optional properties passed to the operation's update method.\n   */\n\n\n  cancelOperation(options = {}) {\n    if (!this.stopped) {\n      this.stopped = true;\n    }\n\n    if (!this.cancelPromise) {\n      this.cancelPromise = this.cancelOnce(options);\n    } else if (options.abortSignal) {\n      throw new Error(\"A cancel request is currently pending\");\n    }\n\n    return this.cancelPromise;\n  }\n  /**\n   * Returns the state of the operation.\n   *\n   * Even though TState will be the same type inside any of the methods of any extension of the Poller class,\n   * implementations of the pollers can customize what's shared with the public by writing their own\n   * version of the `getOperationState` method, and by defining two types, one representing the internal state of the poller\n   * and a public type representing a safe to share subset of the properties of the internal state.\n   * Their definition of getOperationState can then return their public type.\n   *\n   * Example:\n   *\n   * ```ts\n   * // Let's say we have our poller's operation state defined as:\n   * interface MyOperationState extends PollOperationState<ResultType> {\n   *   privateProperty?: string;\n   *   publicProperty?: string;\n   * }\n   *\n   * // To allow us to have a true separation of public and private state, we have to define another interface:\n   * interface PublicState extends PollOperationState<ResultType> {\n   *   publicProperty?: string;\n   * }\n   *\n   * // Then, we define our Poller as follows:\n   * export class MyPoller extends Poller<MyOperationState, ResultType> {\n   *   // ... More content is needed here ...\n   *\n   *   public getOperationState(): PublicState {\n   *     const state: PublicState = this.operation.state;\n   *     return {\n   *       // Properties from PollOperationState<TResult>\n   *       isStarted: state.isStarted,\n   *       isCompleted: state.isCompleted,\n   *       isCancelled: state.isCancelled,\n   *       error: state.error,\n   *       result: state.result,\n   *\n   *       // The only other property needed by PublicState.\n   *       publicProperty: state.publicProperty\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * You can see this in the tests of this repository, go to the file:\n   * `../test/utils/testPoller.ts`\n   * and look for the getOperationState implementation.\n   */\n\n\n  getOperationState() {\n    return this.operation.state;\n  }\n  /**\n   * Returns the result value of the operation,\n   * regardless of the state of the poller.\n   * It can return undefined or an incomplete form of the final TResult value\n   * depending on the implementation.\n   */\n\n\n  getResult() {\n    const state = this.operation.state;\n    return state.result;\n  }\n  /**\n   * Returns a serialized version of the poller's operation\n   * by invoking the operation's toString method.\n   */\n\n\n  toString() {\n    return this.operation.toString();\n  }\n\n} //# sourceMappingURL=poller.js.map","map":{"version":3,"sources":["F:/statvalu/AR_DocuExpert_Test/node_modules/@azure/core-lro/dist-esm/src/poller.js"],"names":["PollerStoppedError","Error","constructor","message","name","Object","setPrototypeOf","prototype","PollerCancelledError","Poller","operation","stopped","pollProgressCallbacks","promise","Promise","resolve","reject","catch","startPolling","isStopped","isDone","poll","delay","pollOnce","options","update","abortSignal","fireProgress","bind","state","result","e","error","callback","cancelOnce","cancel","pollOncePromise","clearPollOncePromise","undefined","then","pollUntilDone","onProgress","push","filter","c","Boolean","isCompleted","isCancelled","stopPolling","cancelOperation","cancelPromise","getOperationState","getResult","toString"],"mappings":";AAAA;AACA;;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,kBAAN,SAAiCC,KAAjC,CAAuC;AAC1CC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,UAAMA,OAAN;AACA,SAAKC,IAAL,GAAY,oBAAZ;AACAC,IAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BN,kBAAkB,CAACO,SAA/C;AACH;;AALyC;AAO9C;AACA;AACA;AACA;;AACA,OAAO,MAAMC,oBAAN,SAAmCP,KAAnC,CAAyC;AAC5CC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,UAAMA,OAAN;AACA,SAAKC,IAAL,GAAY,sBAAZ;AACAC,IAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BE,oBAAoB,CAACD,SAAjD;AACH;;AAL2C;AAOhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAME,MAAN,CAAa;AAChB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIP,EAAAA,WAAW,CAACQ,SAAD,EAAY;AACnB,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,qBAAL,GAA6B,EAA7B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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * When a poller is manually stopped through the `stopPolling` method,\n * the poller will be rejected with an instance of the PollerStoppedError.\n */\nexport class PollerStoppedError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"PollerStoppedError\";\n        Object.setPrototypeOf(this, PollerStoppedError.prototype);\n    }\n}\n/**\n * When a poller is cancelled through the `cancelOperation` method,\n * the poller will be rejected with an instance of the PollerCancelledError.\n */\nexport class PollerCancelledError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"PollerCancelledError\";\n        Object.setPrototypeOf(this, PollerCancelledError.prototype);\n    }\n}\n/**\n * A class that represents the definition of a program that polls through consecutive requests\n * until it reaches a state of completion.\n *\n * A poller can be executed manually, by polling request by request by calling to the `poll()` method repeatedly, until its operation is completed.\n * It also provides a way to wait until the operation completes, by calling `pollUntilDone()` and waiting until the operation finishes.\n * Pollers can also request the cancellation of the ongoing process to whom is providing the underlying long running operation.\n *\n * ```ts\n * const poller = new MyPoller();\n *\n * // Polling just once:\n * await poller.poll();\n *\n * // We can try to cancel the request here, by calling:\n * //\n * //     await poller.cancelOperation();\n * //\n *\n * // Getting the final result:\n * const result = await poller.pollUntilDone();\n * ```\n *\n * The Poller is defined by two types, a type representing the state of the poller, which\n * must include a basic set of properties from `PollOperationState<TResult>`,\n * and a return type defined by `TResult`, which can be anything.\n *\n * The Poller class implements the `PollerLike` interface, which allows poller implementations to avoid having\n * to export the Poller's class directly, and instead only export the already instantiated poller with the PollerLike type.\n *\n * ```ts\n * class Client {\n *   public async makePoller: PollerLike<MyOperationState, MyResult> {\n *     const poller = new MyPoller({});\n *     // It might be preferred to return the poller after the first request is made,\n *     // so that some information can be obtained right away.\n *     await poller.poll();\n *     return poller;\n *   }\n * }\n *\n * const poller: PollerLike<MyOperationState, MyResult> = myClient.makePoller();\n * ```\n *\n * A poller can be created through its constructor, then it can be polled until it's completed.\n * At any point in time, the state of the poller can be obtained without delay through the getOperationState method.\n * At any point in time, the intermediate forms of the result type can be requested without delay.\n * Once the underlying operation is marked as completed, the poller will stop and the final value will be returned.\n *\n * ```ts\n * const poller = myClient.makePoller();\n * const state: MyOperationState = poller.getOperationState();\n *\n * // The intermediate result can be obtained at any time.\n * const result: MyResult | undefined = poller.getResult();\n *\n * // The final result can only be obtained after the poller finishes.\n * const result: MyResult = await poller.pollUntilDone();\n * ```\n *\n */\n// eslint-disable-next-line no-use-before-define\nexport class Poller {\n    /**\n     * A poller needs to be initialized by passing in at least the basic properties of the `PollOperation<TState, TResult>`.\n     *\n     * When writing an implementation of a Poller, this implementation needs to deal with the initialization\n     * of any custom state beyond the basic definition of the poller. The basic poller assumes that the poller's\n     * operation has already been defined, at least its basic properties. The code below shows how to approach\n     * the definition of the constructor of a new custom poller.\n     *\n     * ```ts\n     * export class MyPoller extends Poller<MyOperationState, string> {\n     *   constructor({\n     *     // Anything you might need outside of the basics\n     *   }) {\n     *     let state: MyOperationState = {\n     *       privateProperty: private,\n     *       publicProperty: public,\n     *     };\n     *\n     *     const operation = {\n     *       state,\n     *       update,\n     *       cancel,\n     *       toString\n     *     }\n     *\n     *     // Sending the operation to the parent's constructor.\n     *     super(operation);\n     *\n     *     // You can assign more local properties here.\n     *   }\n     * }\n     * ```\n     *\n     * Inside of this constructor, a new promise is created. This will be used to\n     * tell the user when the poller finishes (see `pollUntilDone()`). The promise's\n     * resolve and reject methods are also used internally to control when to resolve\n     * or reject anyone waiting for the poller to finish.\n     *\n     * The constructor of a custom implementation of a poller is where any serialized version of\n     * a previous poller's operation should be deserialized into the operation sent to the\n     * base constructor. For example:\n     *\n     * ```ts\n     * export class MyPoller extends Poller<MyOperationState, string> {\n     *   constructor(\n     *     baseOperation: string | undefined\n     *   ) {\n     *     let state: MyOperationState = {};\n     *     if (baseOperation) {\n     *       state = {\n     *         ...JSON.parse(baseOperation).state,\n     *         ...state\n     *       };\n     *     }\n     *     const operation = {\n     *       state,\n     *       // ...\n     *     }\n     *     super(operation);\n     *   }\n     * }\n     * ```\n     *\n     * @param operation - Must contain the basic properties of `PollOperation<State, TResult>`.\n     */\n    constructor(operation) {\n        this.stopped = true;\n        this.pollProgressCallbacks = [];\n        this.operation = operation;\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n        // This prevents the UnhandledPromiseRejectionWarning in node.js from being thrown.\n        // The above warning would get thrown if `poller.poll` is called, it returns an error,\n        // and pullUntilDone did not have a .catch or await try/catch on it's return value.\n        this.promise.catch(() => {\n            /* intentionally blank */\n        });\n    }\n    /**\n     * @internal\n     * Starts a loop that will break only if the poller is done\n     * or if the poller is stopped.\n     */\n    async startPolling() {\n        if (this.stopped) {\n            this.stopped = false;\n        }\n        while (!this.isStopped() && !this.isDone()) {\n            await this.poll();\n            await this.delay();\n        }\n    }\n    /**\n     * @internal\n     * pollOnce does one polling, by calling to the update method of the underlying\n     * poll operation to make any relevant change effective.\n     *\n     * It only optionally receives an object with an abortSignal property, from \\@azure/abort-controller's AbortSignalLike.\n     *\n     * @param options - Optional properties passed to the operation's update method.\n     */\n    async pollOnce(options = {}) {\n        try {\n            if (!this.isDone()) {\n                this.operation = await this.operation.update({\n                    abortSignal: options.abortSignal,\n                    fireProgress: this.fireProgress.bind(this)\n                });\n                if (this.isDone() && this.resolve) {\n                    // If the poller has finished polling, this means we now have a result.\n                    // However, it can be the case that TResult is instantiated to void, so\n                    // we are not expecting a result anyway. To assert that we might not\n                    // have a result eventually after finishing polling, we cast the result\n                    // to TResult.\n                    this.resolve(this.operation.state.result);\n                }\n            }\n        }\n        catch (e) {\n            this.operation.state.error = e;\n            if (this.reject) {\n                this.reject(e);\n            }\n            throw e;\n        }\n    }\n    /**\n     * @internal\n     * fireProgress calls the functions passed in via onProgress the method of the poller.\n     *\n     * It loops over all of the callbacks received from onProgress, and executes them, sending them\n     * the current operation state.\n     *\n     * @param state - The current operation state.\n     */\n    fireProgress(state) {\n        for (const callback of this.pollProgressCallbacks) {\n            callback(state);\n        }\n    }\n    /**\n     * @internal\n     * Invokes the underlying operation's cancel method, and rejects the\n     * pollUntilDone promise.\n     */\n    async cancelOnce(options = {}) {\n        this.operation = await this.operation.cancel(options);\n        if (this.reject) {\n            this.reject(new PollerCancelledError(\"Poller cancelled\"));\n        }\n    }\n    /**\n     * Returns a promise that will resolve once a single polling request finishes.\n     * It does this by calling the update method of the Poller's operation.\n     *\n     * It only optionally receives an object with an abortSignal property, from \\@azure/abort-controller's AbortSignalLike.\n     *\n     * @param options - Optional properties passed to the operation's update method.\n     */\n    poll(options = {}) {\n        if (!this.pollOncePromise) {\n            this.pollOncePromise = this.pollOnce(options);\n            const clearPollOncePromise = () => {\n                this.pollOncePromise = undefined;\n            };\n            this.pollOncePromise.then(clearPollOncePromise, clearPollOncePromise).catch(this.reject);\n        }\n        return this.pollOncePromise;\n    }\n    /**\n     * Returns a promise that will resolve once the underlying operation is completed.\n     */\n    async pollUntilDone() {\n        if (this.stopped) {\n            this.startPolling().catch(this.reject);\n        }\n        return this.promise;\n    }\n    /**\n     * Invokes the provided callback after each polling is completed,\n     * sending the current state of the poller's operation.\n     *\n     * It returns a method that can be used to stop receiving updates on the given callback function.\n     */\n    onProgress(callback) {\n        this.pollProgressCallbacks.push(callback);\n        return () => {\n            this.pollProgressCallbacks = this.pollProgressCallbacks.filter((c) => c !== callback);\n        };\n    }\n    /**\n     * Returns true if the poller has finished polling.\n     */\n    isDone() {\n        const state = this.operation.state;\n        return Boolean(state.isCompleted || state.isCancelled || state.error);\n    }\n    /**\n     * Stops the poller from continuing to poll.\n     */\n    stopPolling() {\n        if (!this.stopped) {\n            this.stopped = true;\n            if (this.reject) {\n                this.reject(new PollerStoppedError(\"This poller is already stopped\"));\n            }\n        }\n    }\n    /**\n     * Returns true if the poller is stopped.\n     */\n    isStopped() {\n        return this.stopped;\n    }\n    /**\n     * Attempts to cancel the underlying operation.\n     *\n     * It only optionally receives an object with an abortSignal property, from \\@azure/abort-controller's AbortSignalLike.\n     *\n     * If it's called again before it finishes, it will throw an error.\n     *\n     * @param options - Optional properties passed to the operation's update method.\n     */\n    cancelOperation(options = {}) {\n        if (!this.stopped) {\n            this.stopped = true;\n        }\n        if (!this.cancelPromise) {\n            this.cancelPromise = this.cancelOnce(options);\n        }\n        else if (options.abortSignal) {\n            throw new Error(\"A cancel request is currently pending\");\n        }\n        return this.cancelPromise;\n    }\n    /**\n     * Returns the state of the operation.\n     *\n     * Even though TState will be the same type inside any of the methods of any extension of the Poller class,\n     * implementations of the pollers can customize what's shared with the public by writing their own\n     * version of the `getOperationState` method, and by defining two types, one representing the internal state of the poller\n     * and a public type representing a safe to share subset of the properties of the internal state.\n     * Their definition of getOperationState can then return their public type.\n     *\n     * Example:\n     *\n     * ```ts\n     * // Let's say we have our poller's operation state defined as:\n     * interface MyOperationState extends PollOperationState<ResultType> {\n     *   privateProperty?: string;\n     *   publicProperty?: string;\n     * }\n     *\n     * // To allow us to have a true separation of public and private state, we have to define another interface:\n     * interface PublicState extends PollOperationState<ResultType> {\n     *   publicProperty?: string;\n     * }\n     *\n     * // Then, we define our Poller as follows:\n     * export class MyPoller extends Poller<MyOperationState, ResultType> {\n     *   // ... More content is needed here ...\n     *\n     *   public getOperationState(): PublicState {\n     *     const state: PublicState = this.operation.state;\n     *     return {\n     *       // Properties from PollOperationState<TResult>\n     *       isStarted: state.isStarted,\n     *       isCompleted: state.isCompleted,\n     *       isCancelled: state.isCancelled,\n     *       error: state.error,\n     *       result: state.result,\n     *\n     *       // The only other property needed by PublicState.\n     *       publicProperty: state.publicProperty\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * You can see this in the tests of this repository, go to the file:\n     * `../test/utils/testPoller.ts`\n     * and look for the getOperationState implementation.\n     */\n    getOperationState() {\n        return this.operation.state;\n    }\n    /**\n     * Returns the result value of the operation,\n     * regardless of the state of the poller.\n     * It can return undefined or an incomplete form of the final TResult value\n     * depending on the implementation.\n     */\n    getResult() {\n        const state = this.operation.state;\n        return state.result;\n    }\n    /**\n     * Returns a serialized version of the poller's operation\n     * by invoking the operation's toString method.\n     */\n    toString() {\n        return this.operation.toString();\n    }\n}\n//# sourceMappingURL=poller.js.map"]},"metadata":{},"sourceType":"module"}