{"ast":null,"code":"import _asyncToGenerator from \"F:/statvalu/project/AR_DocuExpert_Test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Helps the core-http token authentication policies with requesting a new token if we're not currently waiting for a new token.\n *\n * @deprecated No longer used in the bearer authorization policy.\n */\nexport class AccessTokenRefresher {\n  constructor(credential, scopes, requiredMillisecondsBeforeNewRefresh = 30000) {\n    this.credential = credential;\n    this.scopes = scopes;\n    this.requiredMillisecondsBeforeNewRefresh = requiredMillisecondsBeforeNewRefresh;\n    this.lastCalled = 0;\n  }\n  /**\n   * Returns true if the required milliseconds(defaulted to 30000) have been passed signifying\n   * that we are ready for a new refresh.\n   */\n\n\n  isReady() {\n    // We're only ready for a new refresh if the required milliseconds have passed.\n    return !this.lastCalled || Date.now() - this.lastCalled > this.requiredMillisecondsBeforeNewRefresh;\n  }\n  /**\n   * Stores the time in which it is called,\n   * then requests a new token,\n   * then sets this.promise to undefined,\n   * then returns the token.\n   */\n\n\n  getToken(options) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.lastCalled = Date.now();\n      const token = yield _this.credential.getToken(_this.scopes, options);\n      _this.promise = undefined;\n      return token || undefined;\n    })();\n  }\n  /**\n   * Requests a new token if we're not currently waiting for a new token.\n   * Returns null if the required time between each call hasn't been reached.\n   */\n\n\n  refresh(options) {\n    if (!this.promise) {\n      this.promise = this.getToken(options);\n    }\n\n    return this.promise;\n  }\n\n} //# sourceMappingURL=accessTokenRefresher.js.map","map":{"version":3,"sources":["F:/statvalu/project/AR_DocuExpert_Test/node_modules/@azure/core-http/dist-esm/src/credentials/accessTokenRefresher.js"],"names":["AccessTokenRefresher","constructor","credential","scopes","requiredMillisecondsBeforeNewRefresh","lastCalled","isReady","Date","now","getToken","options","token","promise","undefined","refresh"],"mappings":";AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,oBAAN,CAA2B;AAC9BC,EAAAA,WAAW,CAACC,UAAD,EAAaC,MAAb,EAAqBC,oCAAoC,GAAG,KAA5D,EAAmE;AAC1E,SAAKF,UAAL,GAAkBA,UAAlB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,oCAAL,GAA4CA,oCAA5C;AACA,SAAKC,UAAL,GAAkB,CAAlB;AACH;AACD;AACJ;AACA;AACA;;;AACIC,EAAAA,OAAO,GAAG;AACN;AACA,WAAQ,CAAC,KAAKD,UAAN,IAAoBE,IAAI,CAACC,GAAL,KAAa,KAAKH,UAAlB,GAA+B,KAAKD,oCAAhE;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACUK,EAAAA,QAAQ,CAACC,OAAD,EAAU;AAAA;;AAAA;AACpB,MAAA,KAAI,CAACL,UAAL,GAAkBE,IAAI,CAACC,GAAL,EAAlB;AACA,YAAMG,KAAK,SAAS,KAAI,CAACT,UAAL,CAAgBO,QAAhB,CAAyB,KAAI,CAACN,MAA9B,EAAsCO,OAAtC,CAApB;AACA,MAAA,KAAI,CAACE,OAAL,GAAeC,SAAf;AACA,aAAOF,KAAK,IAAIE,SAAhB;AAJoB;AAKvB;AACD;AACJ;AACA;AACA;;;AACIC,EAAAA,OAAO,CAACJ,OAAD,EAAU;AACb,QAAI,CAAC,KAAKE,OAAV,EAAmB;AACf,WAAKA,OAAL,GAAe,KAAKH,QAAL,CAAcC,OAAd,CAAf;AACH;;AACD,WAAO,KAAKE,OAAZ;AACH;;AApC6B,C,CAsClC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * Helps the core-http token authentication policies with requesting a new token if we're not currently waiting for a new token.\n *\n * @deprecated No longer used in the bearer authorization policy.\n */\nexport class AccessTokenRefresher {\n    constructor(credential, scopes, requiredMillisecondsBeforeNewRefresh = 30000) {\n        this.credential = credential;\n        this.scopes = scopes;\n        this.requiredMillisecondsBeforeNewRefresh = requiredMillisecondsBeforeNewRefresh;\n        this.lastCalled = 0;\n    }\n    /**\n     * Returns true if the required milliseconds(defaulted to 30000) have been passed signifying\n     * that we are ready for a new refresh.\n     */\n    isReady() {\n        // We're only ready for a new refresh if the required milliseconds have passed.\n        return (!this.lastCalled || Date.now() - this.lastCalled > this.requiredMillisecondsBeforeNewRefresh);\n    }\n    /**\n     * Stores the time in which it is called,\n     * then requests a new token,\n     * then sets this.promise to undefined,\n     * then returns the token.\n     */\n    async getToken(options) {\n        this.lastCalled = Date.now();\n        const token = await this.credential.getToken(this.scopes, options);\n        this.promise = undefined;\n        return token || undefined;\n    }\n    /**\n     * Requests a new token if we're not currently waiting for a new token.\n     * Returns null if the required time between each call hasn't been reached.\n     */\n    refresh(options) {\n        if (!this.promise) {\n            this.promise = this.getToken(options);\n        }\n        return this.promise;\n    }\n}\n//# sourceMappingURL=accessTokenRefresher.js.map"]},"metadata":{},"sourceType":"module"}