{"ast":null,"code":"import _asyncToGenerator from \"F:/statvalu/project/AR_DocuExpert_Test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { DirectoryService } from 'src/app/featuremodules/input-folder/services/directory.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/auth/auth.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"src/app/_helpers/common/commonn.service\";\nimport * as i4 from \"src/app/featuremodules/input-folder/services/directory.service\";\nimport * as i5 from \"@angular/router\";\nimport * as i6 from \"@angular/material/tree\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/icon\";\nimport * as i9 from \"@angular/material/progress-spinner\";\n\nfunction FolderTreeviewComponent_mat_tree_node_1_mat_icon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r2 = i0.ɵɵnextContext().$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"hide\", node_r2.item[0].total_count <= 0);\n    i0.ɵɵattribute(\"aria-label\", \"Toggle \" + node_r2.item[0].name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.treeControl.isExpanded(node_r2) ? \"expand_more\" : \"chevron_right\", \" \");\n  }\n}\n\nfunction FolderTreeviewComponent_mat_tree_node_1_mat_icon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(\"folder\");\n  }\n}\n\nfunction FolderTreeviewComponent_mat_tree_node_1_mat_icon_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(\"image\");\n  }\n}\n\nfunction FolderTreeviewComponent_mat_tree_node_1_mat_icon_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", \"picture_as_pdf\", \" \");\n  }\n}\n\nfunction FolderTreeviewComponent_mat_tree_node_1_mat_spinner_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\", 14);\n  }\n\n  if (rf & 2) {\n    i0.ɵɵproperty(\"diameter\", 20);\n  }\n}\n\nfunction FolderTreeviewComponent_mat_tree_node_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 3);\n    i0.ɵɵlistener(\"click\", function FolderTreeviewComponent_mat_tree_node_1_Template_mat_tree_node_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const node_r2 = restoredCtx.$implicit;\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.selectedNode(node_r2);\n    });\n    i0.ɵɵtemplate(1, FolderTreeviewComponent_mat_tree_node_1_mat_icon_1_Template, 2, 4, \"mat-icon\", 4);\n    i0.ɵɵtemplate(2, FolderTreeviewComponent_mat_tree_node_1_mat_icon_2_Template, 2, 1, \"mat-icon\", 5);\n    i0.ɵɵtemplate(3, FolderTreeviewComponent_mat_tree_node_1_mat_icon_3_Template, 2, 1, \"mat-icon\", 6);\n    i0.ɵɵtemplate(4, FolderTreeviewComponent_mat_tree_node_1_mat_icon_4_Template, 2, 1, \"mat-icon\", 7);\n    i0.ɵɵelementStart(5, \"span\", 8);\n    i0.ɵɵlistener(\"click\", function FolderTreeviewComponent_mat_tree_node_1_Template_span_click_5_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r10);\n      const node_r2 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.selectedNode(node_r2);\n    });\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, FolderTreeviewComponent_mat_tree_node_1_mat_spinner_7_Template, 1, 1, \"mat-spinner\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", node_r2.item[0].type != \"txt\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", node_r2.item[0].type == \"directory\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", node_r2.item[0].type == \"png\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", node_r2.item[0].type == \"pdf\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(node_r2.item[0].name + \"(\" + node_r2.item[0].total_count + \")\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", node_r2.isLoading);\n  }\n}\n\nfunction FolderTreeviewComponent_mat_tree_node_2_mat_icon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r12 = i0.ɵɵnextContext().$implicit;\n    const ctx_r13 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"hide\", node_r12.item[0].total_count <= 0);\n    i0.ɵɵattribute(\"aria-label\", \"Toggle \" + node_r12.item[0].name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r13.treeControl.isExpanded(node_r12) ? \"expand_more\" : \"chevron_right\", \" \");\n  }\n}\n\nfunction FolderTreeviewComponent_mat_tree_node_2_mat_icon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(\"folder\");\n  }\n}\n\nfunction FolderTreeviewComponent_mat_tree_node_2_mat_icon_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(\"image\");\n  }\n}\n\nfunction FolderTreeviewComponent_mat_tree_node_2_mat_icon_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(\"picture_as_pdf\");\n  }\n}\n\nfunction FolderTreeviewComponent_mat_tree_node_2_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r12 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(node_r12.item[0].name + \"(\" + node_r12.item[0].total_count + \")\");\n  }\n}\n\nfunction FolderTreeviewComponent_mat_tree_node_2_mat_spinner_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\", 14);\n  }\n\n  if (rf & 2) {\n    i0.ɵɵproperty(\"diameter\", 20);\n  }\n}\n\nfunction FolderTreeviewComponent_mat_tree_node_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"mat-tree-node\", 3);\n    i0.ɵɵlistener(\"click\", function FolderTreeviewComponent_mat_tree_node_2_Template_mat_tree_node_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r22);\n      const node_r12 = restoredCtx.$implicit;\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.selectedNode(node_r12);\n    });\n    i0.ɵɵtemplate(1, FolderTreeviewComponent_mat_tree_node_2_mat_icon_1_Template, 2, 4, \"mat-icon\", 4);\n    i0.ɵɵtemplate(2, FolderTreeviewComponent_mat_tree_node_2_mat_icon_2_Template, 2, 1, \"mat-icon\", 5);\n    i0.ɵɵtemplate(3, FolderTreeviewComponent_mat_tree_node_2_mat_icon_3_Template, 2, 1, \"mat-icon\", 5);\n    i0.ɵɵtemplate(4, FolderTreeviewComponent_mat_tree_node_2_mat_icon_4_Template, 2, 1, \"mat-icon\", 5);\n    i0.ɵɵtemplate(5, FolderTreeviewComponent_mat_tree_node_2_span_5_Template, 2, 1, \"span\", 15);\n    i0.ɵɵtemplate(6, FolderTreeviewComponent_mat_tree_node_2_mat_spinner_6_Template, 1, 1, \"mat-spinner\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r12 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", node_r12.item[0].type != \"txt\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", node_r12.item[0].type == \"directory\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", node_r12.item[0].type == \"png\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", node_r12.item[0].type == \"pdf\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", node_r12.item[0].type != \"txt\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", node_r12.isLoading);\n  }\n}\n/** Flat node with expandable and level information */\n\n\nexport class DynamicFlatNode {\n  constructor(item, level = 1, expandable = false, count, isLoading = false) {\n    this.item = item;\n    this.level = level;\n    this.expandable = expandable;\n    this.count = count;\n    this.isLoading = isLoading;\n  }\n\n} // injactable \n\nexport class DynamicDatabase {\n  constructor(_auth, http, _common) {\n    this._auth = _auth;\n    this.http = http;\n    this._common = _common;\n    this.dataMap = new Map([]);\n    this.count = 0;\n    this.alphabatesArray = [];\n    this.charArray = [];\n    this.rootLevelNodes = [];\n\n    this._common.$selectedFolderData.subscribe(res => {\n      this.rootLevelNodes = [res];\n      console.log(\"rootLevelNodes ??????????????????????????????????????????\", this.rootLevelNodes);\n    });\n  }\n\n  getChildNodeData(path) {\n    let formData = new FormData();\n    formData.append(\"user_id\", this._auth.user_id);\n    formData.append(\"dir_path\", path);\n    formData.append(\"is_select\", \"false\");\n    return this.http.post('/filestorage_features/recursiontree/', formData);\n  }\n\n  initialChild() {\n    this._common.$selectedFolderData.subscribe(res => {\n      this.rootLevelNodes = [res];\n    });\n  } // rootLevelNodes: object[] = [{\n  //   \"name\": this._auth.user_name,\n  //   \"id\": 0,\n  //   \"path\":'Output_Folder/' + this._auth.org_name + '/' + this._auth.user_name,\n  //   \"type\": \"directory\",\n  //   \"expanded\": false,\n  // }];\n\n  /** Initial data from database */\n\n\n  initialData() {\n    // this.initialChild()\n    return this.rootLevelNodes.map(item => new DynamicFlatNode([item], 0, true, this.count));\n  }\n\n  getNumbers() {\n    return Array.from(Array(11).keys());\n  }\n\n  getLetters(n) {\n    return String.fromCharCode(65 + n);\n  }\n\n  getNodeChildrenData(node) {\n    let latterArr = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K'];\n    return new Promise((resolve, reject) => {\n      if (latterArr.includes(node[0].name)) {\n        resolve([]);\n      } else {\n        console.log(\"in new data get section\", node[0].path);\n        this.getChildNodeData(node[0].path).subscribe(res => {\n          console.log(\"RESSSSSSSS\", res);\n          console.log(\"child response\", res.res_data.jsonData.children);\n          let splitval = node[0].path.split('/');\n          let buildVal = splitval[splitval.length - 1];\n          console.log(\">>>>>>>>>>?????\", buildVal);\n\n          if (buildVal.includes('Build Delivery Bible')) {\n            console.log(\"in build bible sec\"); // if (res.res_data.jsonData.is_bible) {\n            // console.log(\"true bible\")\n            // let chararr=res.res_data.jsonData.children\n\n            console.log(this.getNumbers().push(12));\n            this.getNumbers().forEach(c => {\n              console.log(\">>>\", c, this.getLetters(c), [this.getLetters(c)]);\n              node[0].path, res.res_data.jsonData.children.forEach(ele => {\n                console.log(\"elements are\", ele.name.charAt(0));\n\n                if (ele.name.charAt(0) == this.getLetters(c)) {\n                  ele.total_count = ele.total_count - 1;\n                  this.charArray.push(ele);\n                }\n              });\n              this.charArray.sort((a, b) => {\n                let fa = a.name.toLowerCase(),\n                    fb = b.name.toLowerCase();\n\n                if (fa < fb) {\n                  return -1;\n                }\n\n                if (fa > fb) {\n                  return 1;\n                }\n\n                return 0;\n              });\n              let childPath;\n              childPath = node[0].path + \"/\" + this.getLetters(c); // if ((node[0].path).includes('Build Delivery Bible')) {\n              //   childPath = node[0].path + \"/\" + this.getLetters(c)\n              // } else {\n              //   let p = res.res_data.jsonData.path.split(\"/\")\n              //   p.pop()\n              //   let s = p.join(\"/\")\n              //   childPath = s + \"/\" +this.getLetters(c)\n              //   console.log(\"....child path\")\n              // }\n\n              console.log(\"element and its array\", this.getLetters(c), this.charArray);\n              let obj = {\n                \"name\": this.getLetters(c),\n                \"path\": childPath,\n                \"type\": res.res_data.jsonData.type,\n                \"total_count\": this.charArray.length\n              };\n              console.log(\">>>\", obj);\n              this.alphabatesArray.push(obj);\n              this.dataMap.set(childPath, this.charArray);\n              this.charArray = [];\n            });\n            console.log(\"alphabates array\", this.alphabatesArray);\n            this.dataMap.set(node[0].path, this.alphabatesArray);\n            console.log(\"final dataMap\", this.dataMap);\n            resolve(this.dataMap); // }\n            //  else {\n            //   console.log(\"false bible\")\n            //   console.log(\"not build bible sec\")\n            //   if (res.res_data.jsonData.children.length > 0) {\n            //     this.dataMap.set(node[0].path, res.res_data.jsonData.children)\n            //     resolve(this.dataMap)\n            //   }\n            // }\n          } else {\n            console.log(\"not build bible sec\");\n            var index = res.res_data.jsonData.children.findIndex(el => el.name == \"myfile.txt\");\n            console.log(\"index\", index);\n\n            if (index > -1) {\n              res.res_data.jsonData.children.splice(index, 1);\n            }\n\n            if (res.res_data.jsonData.children.length > 0) {\n              this.dataMap.set(node[0].path, res.res_data.jsonData.children);\n              resolve(this.dataMap);\n            }\n          }\n        });\n      }\n    });\n  }\n\n  getChildren(node) {\n    console.log(\"*****\", node, node[0].name, this.dataMap.get(node[0].path));\n    return this.dataMap.get(node[0].path);\n  }\n\n  isExpandable(node) {\n    console.log(\">>>>>>>\", node); // console.log(\">>>>>>>\", node, this.dataMap.has(node.path))\n\n    return this.dataMap.has(node.path);\n  }\n\n}\n\nDynamicDatabase.ɵfac = function DynamicDatabase_Factory(t) {\n  return new (t || DynamicDatabase)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.CommonnService));\n};\n\nDynamicDatabase.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DynamicDatabase,\n  factory: DynamicDatabase.ɵfac,\n  providedIn: 'root'\n}); ///////\n\nexport class DynamicDataSource {\n  constructor(_treeControl, _database) {\n    this._treeControl = _treeControl;\n    this._database = _database;\n    this.dataChange = new BehaviorSubject([]);\n  }\n\n  get data() {\n    return this.dataChange.value;\n  }\n\n  set data(value) {\n    this._treeControl.dataNodes = value;\n    this.dataChange.next(value);\n  }\n\n  connect(collectionViewer) {\n    this._treeControl.expansionModel.changed.subscribe(change => {\n      if (change.added || change.removed) {\n        this.handleTreeControl(change);\n      }\n    });\n\n    return merge(collectionViewer.viewChange, this.dataChange).pipe(map(() => this.data));\n  }\n\n  disconnect(collectionViewer) {}\n  /** Handle expand/collapse behaviors */\n\n\n  handleTreeControl(change) {\n    if (change.added) {\n      change.added.forEach(node => this.toggleNode(node, true));\n    }\n\n    if (change.removed) {\n      change.removed.slice().reverse().forEach(node => this.toggleNode(node, false));\n    }\n  }\n  /**\r\n   * Toggle the node, remove from display list\r\n   */\n\n\n  toggleNode(node, expand) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      node.isLoading = true;\n      console.log(\"start here .......>>>>\", node, node.item[0], expand);\n      const result = yield _this._database.getNodeChildrenData(node.item);\n      console.log(\"promise result is ....\", result);\n      const children = yield _this._database.getChildren(node.item);\n      console.log('childrens are', children);\n      console.log('data is', _this.data);\n\n      const index = _this.data.indexOf(node);\n\n      console.log('index is', index, !children || index < 0);\n\n      if (!children || index < 0) {\n        // If no children, or cannot find the node, no op\n        return;\n      }\n\n      setTimeout(() => {\n        if (expand) {\n          const nodes = children.map(name => new DynamicFlatNode([name], node.level + 1, _this._database.isExpandable(name), children.length));\n\n          _this.data.splice(index + 1, 0, ...nodes);\n        } else {\n          let count = 0;\n\n          for (let i = index + 1; i < _this.data.length && _this.data[i].level > node.level; i++, count++) {}\n\n          _this.data.splice(index + 1, count);\n        } // notify the change\n\n\n        _this.dataChange.next(_this.data);\n\n        node.isLoading = false;\n      });\n    })();\n  }\n\n} // export class TreeviewComponent implements OnInit {\n//   constructor() { }\n// }\n\nexport class FolderTreeviewComponent {\n  constructor(database, _common, _directory, route, router) {\n    // this.router.routeReuseStrategy.shouldReuseRoute = () => {\n    //   console.log(\"change param\")\n    //   this.initialFunction()\n    //   return false;\n    // }\n    this.database = database;\n    this._common = _common;\n    this._directory = _directory;\n    this.route = route;\n    this.router = router;\n\n    this.getLevel = node => node.level;\n\n    this.isExpandable = node => node.expandable;\n\n    this.hasChild = (_, _nodeData) => _nodeData.expandable;\n\n    this._common.$selectedFolderData.subscribe(res => {\n      console.log(\"rootLevelNodes changed ??????????????????????????????????????????\", res);\n      this.ngOnInit();\n    });\n  }\n\n  ngOnInit() {\n    console.log(\"ngoninit called\");\n    this.initialFunction();\n  }\n\n  initialFunction() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.treeControl = new FlatTreeControl(_this2.getLevel, _this2.isExpandable);\n      _this2.dataSource = new DynamicDataSource(_this2.treeControl, _this2.database);\n      _this2.dataSource.data = yield _this2.database.initialData();\n      console.log(\"initial data\", _this2.dataSource.data);\n    })();\n  }\n\n  selectedNode(val) {\n    console.log(\"selectedNode is\", val);\n    console.log(\"addd val\", this.database.dataMap);\n\n    if (val.item[0].type == 'directory') {\n      this.redirectUserToDir(val.item[0].path);\n    } //     this._directory.getChildNodeData(val.item[0].path).subscribe((res: any) => {\n    //   console.log(\"child response\",res.res_data.jsonData.children)\n    //   if(res.res_data.jsonData.children.length>0){\n    //   this.database.dataMap.set(val.item[0].path,res.res_data.jsonData.children)\n    //   }\n    // });\n    // this.database.dataMap.set(\"Output_Folder/ORG@STS/shubham21/BibleData\", [\n    //   {\n    //     \"name\": \"02_Certified Non-Incident Statement_2021.06.12 (002)_output\",\n    //     \"id\": 1,\n    //     \"path\": \"Output_Folder/ORG@STS/shubham21/BibleData/02_Certified Non-Incident Statement_2021.06.12 (002)_output\",\n    //     \"type\": \"directory\",\n    //     \"expanded\": false,\n    //     \"children\": []\n    //   },\n    //   {\n    //     \"name\": \"00___086_output\",\n    //     \"id\": 1,\n    //     \"path\": \"Output_Folder/ORG@STS/shubham21/BibleData/00___086_output\",\n    //     \"type\": \"directory\",\n    //     \"expanded\": false,\n    //     \"children\": []\n    //   },\n    //   {\n    //     \"name\": \"1. Current Time In Service 13-May-2019_output\",\n    //     \"id\": 1,\n    //     \"path\": \"Output_Folder/ORG@STS/shubham21/BibleData/1. Current Time In Service 13-May-2019_output\",\n    //     \"type\": \"directory\",\n    //     \"expanded\": false,\n    //     \"children\": []\n    //   },\n    //   {\n    //     \"name\": \"output\",\n    //     \"id\": 1,\n    //     \"path\": \"Output_Folder/ORG@STS/shubham21/BibleData/output\",\n    //     \"type\": \"directory\",\n    //     \"expanded\": false,\n    //     \"children\": []\n    //   }\n    // ])\n\n\n    console.log(\"addd val\", this.database.dataMap);\n  }\n\n  redirectUserToDir(path) {\n    console.log(\"reditect path is ?????\", path);\n\n    if (path.includes('Build Delivery Bible')) {\n      let latterArr = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K']; // if(latterArr.includes(node[0].name)){\n      //   resolve([])\n      //  }\n\n      let splitVal = path.split('/');\n      console.log(\"splitval\", splitVal);\n      let checkval = splitVal[splitVal.length - 1];\n      console.log(\"checkval is\", checkval);\n      let index = latterArr.indexOf(checkval.charAt(0));\n\n      if (index >= 0) {\n        localStorage.setItem(\"buildBibleSubDir\", index.toString());\n      }\n\n      if (latterArr.includes(checkval)) {\n        splitVal.pop();\n        console.log(\"splitval\", splitVal);\n        path = splitVal.join('/') + '/';\n      } else {\n        path = path + '/';\n      }\n    } else {\n      path = path + '/';\n    }\n\n    console.log(\"in redirect user to dir>>>>>>>>>>>>>\", path); // if (path.includes('Input')) {\n    //   this._common.redirectToNestedFolder(path, 'input');\n    // } else if (path.includes('Req')) {\n    //   this._common.redirectToNestedFolder(path, 'req');\n    // } else if (path.includes('Err_Info')) {\n    //   this._common.redirectToNestedFolder(path, 'err');\n    // } else if (path.includes('Output')) {\n    //   this._common.redirectToNestedFolder(path, 'output');\n    // }\n\n    if (path.includes('Input')) {\n      if (this.router.url.includes('myfiles')) {\n        this._common.redirectToNestedFolder(path, 'input');\n      } else {\n        this._common.redirectToDir(path, 'input');\n      }\n    } else if (path.includes('Req')) {\n      if (this.router.url.includes('request-folder')) {\n        this._common.redirectToNestedFolder(path, 'req');\n      } else {\n        this._common.redirectToDir(path, 'req');\n      }\n    } else if (path.includes('Err_Info')) {\n      if (this.router.url.includes('error-folder')) {\n        this._common.redirectToNestedFolder(path, 'err');\n      } else {\n        this._common.redirectToDir(path, 'err');\n      }\n    } else if (path.includes('Output')) {\n      if (this.router.url.includes('output-folder')) {\n        console.log(\"redirect to same\");\n\n        this._common.redirectToNestedFolder(path, 'output');\n      } else {\n        console.log(\"redirect to diff\");\n\n        this._common.redirectToDir(path, 'output');\n      }\n    }\n  }\n\n}\n\nFolderTreeviewComponent.ɵfac = function FolderTreeviewComponent_Factory(t) {\n  return new (t || FolderTreeviewComponent)(i0.ɵɵdirectiveInject(DynamicDatabase), i0.ɵɵdirectiveInject(i3.CommonnService), i0.ɵɵdirectiveInject(i4.DirectoryService), i0.ɵɵdirectiveInject(i5.ActivatedRoute), i0.ɵɵdirectiveInject(i5.Router));\n};\n\nFolderTreeviewComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FolderTreeviewComponent,\n  selectors: [[\"app-folder-treeview\"]],\n  features: [i0.ɵɵProvidersFeature([DirectoryService])],\n  decls: 3,\n  vars: 3,\n  consts: [[3, \"dataSource\", \"treeControl\"], [\"matTreeNodePadding\", \"\", 3, \"click\", 4, \"matTreeNodeDef\"], [\"matTreeNodePadding\", \"\", 3, \"click\", 4, \"matTreeNodeDef\", \"matTreeNodeDefWhen\"], [\"matTreeNodePadding\", \"\", 3, \"click\"], [\"class\", \"mat-icon-rtl-mirror\", \"style\", \"cursor:pointer;\", \"matTreeNodeToggle\", \"\", 3, \"hide\", 4, \"ngIf\"], [\"class\", \"folder-icon\", 4, \"ngIf\"], [\"style\", \"color: rgb(0, 0, 255);\", \"class\", \"folder-icon\", 4, \"ngIf\"], [\"style\", \"color: rgb(255, 0, 0);\", \"class\", \"folder-icon\", 4, \"ngIf\"], [3, \"click\"], [\"mode\", \"indeterminate\", \"class\", \"example-tree-progress-bar\", 3, \"diameter\", 4, \"ngIf\"], [\"matTreeNodeToggle\", \"\", 1, \"mat-icon-rtl-mirror\", 2, \"cursor\", \"pointer\"], [1, \"folder-icon\"], [1, \"folder-icon\", 2, \"color\", \"rgb(0, 0, 255)\"], [1, \"folder-icon\", 2, \"color\", \"rgb(255, 0, 0)\"], [\"mode\", \"indeterminate\", 1, \"example-tree-progress-bar\", 3, \"diameter\"], [4, \"ngIf\"]],\n  template: function FolderTreeviewComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-tree\", 0);\n      i0.ɵɵtemplate(1, FolderTreeviewComponent_mat_tree_node_1_Template, 8, 6, \"mat-tree-node\", 1);\n      i0.ɵɵtemplate(2, FolderTreeviewComponent_mat_tree_node_2_Template, 7, 6, \"mat-tree-node\", 2);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"dataSource\", ctx.dataSource)(\"treeControl\", ctx.treeControl);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"matTreeNodeDefWhen\", ctx.hasChild);\n    }\n  },\n  directives: [i6.MatTree, i6.MatTreeNodeDef, i6.MatTreeNode, i6.MatTreeNodePadding, i7.NgIf, i8.MatIcon, i6.MatTreeNodeToggle, i9.MatSpinner],\n  styles: [\".example-tree-progress-bar[_ngcontent-%COMP%] {\\n  margin-left: 30px;\\n}\\n\\n#aria-level[_ngcontent-%COMP%] {\\n  padding-left: 20px;\\n}\\n\\n.fa-folder[_ngcontent-%COMP%] {\\n  color: #ffb32c;\\n  margin-right: 10px;\\n  position: relative;\\n  top: 1px;\\n}\\n\\n.fa-file[_ngcontent-%COMP%] {\\n  color: #ffb32c;\\n  margin-right: 10px;\\n  position: relative;\\n  top: 1px;\\n}\\n\\n.mat-tree[_ngcontent-%COMP%] {\\n  background: #c0c0c0;\\n}\\n\\n.mat-tree-node[_ngcontent-%COMP%] {\\n  min-height: 25px;\\n}\\n\\n.folder-icon[_ngcontent-%COMP%] {\\n  color: #ffb32c;\\n  position: relative;\\n  font-size: 20px;\\n  top: 2px;\\n}\\n\\n.mat-tree-node[_ngcontent-%COMP%]:hover {\\n  background-color: #a7a9ad;\\n}\\n\\n.hide[_ngcontent-%COMP%] {\\n  visibility: hidden;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZvbGRlci10cmVldmlldy5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGlCQUFBO0FBQ0o7O0FBRUU7RUFDRSxrQkFBQTtBQUNKOztBQUVFO0VBQ0UsY0FBQTtFQUNBLGtCQUFBO0VBQ0Esa0JBQUE7RUFDQSxRQUFBO0FBQ0o7O0FBRUU7RUFDRSxjQUFBO0VBQ0Esa0JBQUE7RUFDQSxrQkFBQTtFQUNBLFFBQUE7QUFDSjs7QUFFRTtFQUNFLG1CQUFBO0FBQ0o7O0FBRUU7RUFDRSxnQkFBQTtBQUNKOztBQUVFO0VBQ0UsY0FBQTtFQUNBLGtCQUFBO0VBQ0EsZUFBQTtFQUNBLFFBQUE7QUFDSjs7QUFFRTtFQUNFLHlCQUFBO0FBQ0o7O0FBRUU7RUFDRSxrQkFBQTtBQUNKIiwiZmlsZSI6ImZvbGRlci10cmVldmlldy5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIi5leGFtcGxlLXRyZWUtcHJvZ3Jlc3MtYmFyIHtcclxuICAgIG1hcmdpbi1sZWZ0OiAzMHB4O1xyXG4gIH1cclxuICBcclxuICAjYXJpYS1sZXZlbCB7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDIwcHg7XHJcbiAgfVxyXG4gIFxyXG4gIC5mYS1mb2xkZXIge1xyXG4gICAgY29sb3I6ICNmZmIzMmM7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICB0b3A6IDFweDtcclxuICB9XHJcbiAgXHJcbiAgLmZhLWZpbGUge1xyXG4gICAgY29sb3I6ICNmZmIzMmM7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICB0b3A6IDFweDtcclxuICB9XHJcbiAgXHJcbiAgLm1hdC10cmVlIHtcclxuICAgIGJhY2tncm91bmQ6ICNjMGMwYzAgO1xyXG4gIH1cclxuICBcclxuICAubWF0LXRyZWUtbm9kZSB7XHJcbiAgICBtaW4taGVpZ2h0OiAyNXB4O1xyXG4gIH1cclxuICBcclxuICAuZm9sZGVyLWljb257XHJcbiAgICBjb2xvcjogI2ZmYjMyYztcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIGZvbnQtc2l6ZTogMjBweDtcclxuICAgIHRvcDogMnB4O1xyXG4gIH1cclxuICBcclxuICAubWF0LXRyZWUtbm9kZTpob3ZlcntcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNhN2E5YWQ7XHJcbiAgfVxyXG4gIFxyXG4gIC5oaWRle1xyXG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xyXG4gIH1cclxuICAiXX0= */\"]\n});","map":{"version":3,"sources":["F:\\statvalu\\project\\AR_DocuExpert_Test\\src\\app\\shared\\folder-treeview\\folder-treeview.component.ts","F:\\statvalu\\project\\AR_DocuExpert_Test\\src\\app\\shared\\folder-treeview\\folder-treeview.component.html"],"names":[],"mappings":";AAMA,SAAS,eAAT,QAAgC,mBAAhC;AACA,SAAS,eAAT,EAA0B,KAA1B,QAAmD,MAAnD;AACA,SAAS,GAAT,QAAoB,gBAApB;AAEA,SAAS,gBAAT,QAAiC,gEAAjC;;;;;;;;;;;;;;ACRM,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,UAAA,EAAA,EAAA;AAEE,IAAA,EAAA,CAAA,MAAA,CAAA,CAAA;AACF,IAAA,EAAA,CAAA,YAAA;;;;;;AAHsC,IAAA,EAAA,CAAA,WAAA,CAAA,MAAA,EAAA,OAAA,CAAA,IAAA,CAAA,CAAA,EAAA,WAAA,IAAA,CAAA;AACpC,IAAA,EAAA,CAAA,WAAA,CAAA,YAAA,EAAA,YAAA,OAAA,CAAA,IAAA,CAAA,CAAA,EAAA,IAAA;AACA,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,kBAAA,CAAA,GAAA,EAAA,MAAA,CAAA,WAAA,CAAA,UAAA,CAAA,OAAA,IAAA,aAAA,GAAA,eAAA,EAAA,GAAA;;;;;;AAKF,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,UAAA,EAAA,EAAA;AAAqE,IAAA,EAAA,CAAA,MAAA,CAAA,CAAA;AAAY,IAAA,EAAA,CAAA,YAAA;;;;AAAZ,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,iBAAA,CAAA,QAAA;;;;;;AACrE,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,UAAA,EAAA,EAAA;AAA8F,IAAA,EAAA,CAAA,MAAA,CAAA,CAAA;AAAW,IAAA,EAAA,CAAA,YAAA;;;;AAAX,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,iBAAA,CAAA,OAAA;;;;;;AAC9F,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,UAAA,EAAA,EAAA;AAA8F,IAAA,EAAA,CAAA,MAAA,CAAA,CAAA;AAC9F,IAAA,EAAA,CAAA,YAAA;;;;AAD8F,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,kBAAA,CAAA,EAAA,EAAA,gBAAA,EAAA,GAAA;;;;;;AAG9F,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA,EAAA,aAAA,EAAA,EAAA;;;;AAAa,IAAA,EAAA,CAAA,UAAA,CAAA,UAAA,EAAA,EAAA;;;;;;;;AAbf,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,eAAA,EAAA,CAAA;AAA6D,IAAA,EAAA,CAAA,UAAA,CAAA,OAAA,EAAA,SAAA,+EAAA,GAAA;AAAA,YAAA,WAAA,GAAA,EAAA,CAAA,aAAA,CAAA,IAAA,CAAA;AAAA,YAAA,OAAA,GAAA,WAAA,CAAA,SAAA;AAAA,YAAA,MAAA,GAAA,EAAA,CAAA,aAAA,EAAA;AAAA,aAAA,MAAA,CAAA,YAAA,CAAA,OAAA,CAAA;AAAA,KAAA;AAC3D,IAAA,EAAA,CAAA,UAAA,CAAA,CAAA,EAAA,2DAAA,EAAA,CAAA,EAAA,CAAA,EAAA,UAAA,EAAA,CAAA;AAOA,IAAA,EAAA,CAAA,UAAA,CAAA,CAAA,EAAA,2DAAA,EAAA,CAAA,EAAA,CAAA,EAAA,UAAA,EAAA,CAAA;AACA,IAAA,EAAA,CAAA,UAAA,CAAA,CAAA,EAAA,2DAAA,EAAA,CAAA,EAAA,CAAA,EAAA,UAAA,EAAA,CAAA;AACA,IAAA,EAAA,CAAA,UAAA,CAAA,CAAA,EAAA,2DAAA,EAAA,CAAA,EAAA,CAAA,EAAA,UAAA,EAAA,CAAA;AAEA,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,MAAA,EAAA,CAAA;AAAM,IAAA,EAAA,CAAA,UAAA,CAAA,OAAA,EAAA,SAAA,sEAAA,GAAA;AAAA,YAAA,WAAA,GAAA,EAAA,CAAA,aAAA,CAAA,IAAA,CAAA;AAAA,YAAA,OAAA,GAAA,WAAA,CAAA,SAAA;AAAA,YAAA,OAAA,GAAA,EAAA,CAAA,aAAA,EAAA;AAAA,aAAA,OAAA,CAAA,YAAA,CAAA,OAAA,CAAA;AAAA,KAAA;AAA6B,IAAA,EAAA,CAAA,MAAA,CAAA,CAAA;AAAsD,IAAA,EAAA,CAAA,YAAA;AACzF,IAAA,EAAA,CAAA,UAAA,CAAA,CAAA,EAAA,8DAAA,EAAA,CAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA;AAEF,IAAA,EAAA,CAAA,YAAA;;;;;AAd4G,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,UAAA,CAAA,MAAA,EAAA,OAAA,CAAA,IAAA,CAAA,CAAA,EAAA,IAAA,IAAA,KAAA;AAO/F,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,UAAA,CAAA,MAAA,EAAA,OAAA,CAAA,IAAA,CAAA,CAAA,EAAA,IAAA,IAAA,WAAA;AACA,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,UAAA,CAAA,MAAA,EAAA,OAAA,CAAA,IAAA,CAAA,CAAA,EAAA,IAAA,IAAA,KAAA;AACA,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,UAAA,CAAA,MAAA,EAAA,OAAA,CAAA,IAAA,CAAA,CAAA,EAAA,IAAA,IAAA,KAAA;AAEwB,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,iBAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA,EAAA,IAAA,GAAA,GAAA,GAAA,OAAA,CAAA,IAAA,CAAA,CAAA,EAAA,WAAA,GAAA,GAAA;AACL,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,UAAA,CAAA,MAAA,EAAA,OAAA,CAAA,SAAA;;;;;;AAI9B,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,UAAA,EAAA,EAAA;AAEE,IAAA,EAAA,CAAA,MAAA,CAAA,CAAA;AACF,IAAA,EAAA,CAAA,YAAA;;;;;;AAHsC,IAAA,EAAA,CAAA,WAAA,CAAA,MAAA,EAAA,QAAA,CAAA,IAAA,CAAA,CAAA,EAAA,WAAA,IAAA,CAAA;AACpC,IAAA,EAAA,CAAA,WAAA,CAAA,YAAA,EAAA,YAAA,QAAA,CAAA,IAAA,CAAA,CAAA,EAAA,IAAA;AACA,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,kBAAA,CAAA,GAAA,EAAA,OAAA,CAAA,WAAA,CAAA,UAAA,CAAA,QAAA,IAAA,aAAA,GAAA,eAAA,EAAA,GAAA;;;;;;AAGF,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,UAAA,EAAA,EAAA;AAAqE,IAAA,EAAA,CAAA,MAAA,CAAA,CAAA;AAAY,IAAA,EAAA,CAAA,YAAA;;;;AAAZ,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,iBAAA,CAAA,QAAA;;;;;;AACrE,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,UAAA,EAAA,EAAA;AAA+D,IAAA,EAAA,CAAA,MAAA,CAAA,CAAA;AAAW,IAAA,EAAA,CAAA,YAAA;;;;AAAX,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,iBAAA,CAAA,OAAA;;;;;;AAC/D,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,UAAA,EAAA,EAAA;AAA+D,IAAA,EAAA,CAAA,MAAA,CAAA,CAAA;AAAoB,IAAA,EAAA,CAAA,YAAA;;;;AAApB,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,iBAAA,CAAA,gBAAA;;;;;;AAM/D,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,MAAA;AAAuC,IAAA,EAAA,CAAA,MAAA,CAAA,CAAA;AAAsD,IAAA,EAAA,CAAA,YAAA;;;;;AAAtD,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,iBAAA,CAAA,QAAA,CAAA,IAAA,CAAA,CAAA,EAAA,IAAA,GAAA,GAAA,GAAA,QAAA,CAAA,IAAA,CAAA,CAAA,EAAA,WAAA,GAAA,GAAA;;;;;;AACvC,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA,EAAA,aAAA,EAAA,EAAA;;;;AAAa,IAAA,EAAA,CAAA,UAAA,CAAA,UAAA,EAAA,EAAA;;;;;;;;AAff,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,eAAA,EAAA,CAAA;AAA6E,IAAA,EAAA,CAAA,UAAA,CAAA,OAAA,EAAA,SAAA,+EAAA,GAAA;AAAA,YAAA,WAAA,GAAA,EAAA,CAAA,aAAA,CAAA,IAAA,CAAA;AAAA,YAAA,QAAA,GAAA,WAAA,CAAA,SAAA;AAAA,YAAA,OAAA,GAAA,EAAA,CAAA,aAAA,EAAA;AAAA,aAAA,OAAA,CAAA,YAAA,CAAA,QAAA,CAAA;AAAA,KAAA;AAC3E,IAAA,EAAA,CAAA,UAAA,CAAA,CAAA,EAAA,2DAAA,EAAA,CAAA,EAAA,CAAA,EAAA,UAAA,EAAA,CAAA;AAKA,IAAA,EAAA,CAAA,UAAA,CAAA,CAAA,EAAA,2DAAA,EAAA,CAAA,EAAA,CAAA,EAAA,UAAA,EAAA,CAAA;AACA,IAAA,EAAA,CAAA,UAAA,CAAA,CAAA,EAAA,2DAAA,EAAA,CAAA,EAAA,CAAA,EAAA,UAAA,EAAA,CAAA;AACA,IAAA,EAAA,CAAA,UAAA,CAAA,CAAA,EAAA,2DAAA,EAAA,CAAA,EAAA,CAAA,EAAA,UAAA,EAAA,CAAA;AAMA,IAAA,EAAA,CAAA,UAAA,CAAA,CAAA,EAAA,uDAAA,EAAA,CAAA,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA;AACA,IAAA,EAAA,CAAA,UAAA,CAAA,CAAA,EAAA,8DAAA,EAAA,CAAA,EAAA,CAAA,EAAA,aAAA,EAAA,CAAA;AAEF,IAAA,EAAA,CAAA,YAAA;;;;;AAhB4G,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,UAAA,CAAA,MAAA,EAAA,QAAA,CAAA,IAAA,CAAA,CAAA,EAAA,IAAA,IAAA,KAAA;AAK/F,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,UAAA,CAAA,MAAA,EAAA,QAAA,CAAA,IAAA,CAAA,CAAA,EAAA,IAAA,IAAA,WAAA;AACA,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,UAAA,CAAA,MAAA,EAAA,QAAA,CAAA,IAAA,CAAA,CAAA,EAAA,IAAA,IAAA,KAAA;AACA,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,UAAA,CAAA,MAAA,EAAA,QAAA,CAAA,IAAA,CAAA,CAAA,EAAA,IAAA,IAAA,KAAA;AAMJ,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,UAAA,CAAA,MAAA,EAAA,QAAA,CAAA,IAAA,CAAA,CAAA,EAAA,IAAA,IAAA,KAAA;AACuB,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,UAAA,CAAA,MAAA,EAAA,QAAA,CAAA,SAAA;;;ADdpC;;;AACA,OAAM,MAAO,eAAP,CAAsB;AAC1B,EAAA,WAAA,CACS,IADT,EAES,KAAA,GAAQ,CAFjB,EAGS,UAAA,GAAa,KAHtB,EAIS,KAJT,EAKS,SAAA,GAAY,KALrB,EAK0B;AAJjB,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,KAAA,GAAA,KAAA;AACA,SAAA,UAAA,GAAA,UAAA;AACA,SAAA,KAAA,GAAA,KAAA;AACA,SAAA,SAAA,GAAA,SAAA;AACJ;;AAPqB,C,CAU5B;;AAEA,OAAM,MAAO,eAAP,CAAsB;AAC1B,EAAA,WAAA,CAAoB,KAApB,EAAgD,IAAhD,EAA0E,OAA1E,EAAiG;AAA7E,SAAA,KAAA,GAAA,KAAA;AAA4B,SAAA,IAAA,GAAA,IAAA;AAA0B,SAAA,OAAA,GAAA,OAAA;AAQ1E,SAAA,OAAA,GAAU,IAAI,GAAJ,CAA0B,EAA1B,CAAV;AACA,SAAA,KAAA,GAAgB,CAAhB;AACA,SAAA,eAAA,GAA4B,EAA5B;AACA,SAAA,SAAA,GAAc,EAAd;AAGA,SAAA,cAAA,GAA2B,EAA3B;;AAbE,SAAK,OAAL,CAAa,mBAAb,CAAiC,SAAjC,CAA4C,GAAD,IAAa;AACtD,WAAK,cAAL,GAAsB,CAAC,GAAD,CAAtB;AACA,MAAA,OAAO,CAAC,GAAR,CAAY,2DAAZ,EAAyE,KAAK,cAA9E;AACD,KAHD;AAID;;AAaD,EAAA,gBAAgB,CAAC,IAAD,EAAa;AAC3B,QAAI,QAAQ,GAAG,IAAI,QAAJ,EAAf;AACA,IAAA,QAAQ,CAAC,MAAT,CAAgB,SAAhB,EAA2B,KAAK,KAAL,CAAW,OAAtC;AACA,IAAA,QAAQ,CAAC,MAAT,CAAgB,UAAhB,EAA4B,IAA5B;AACA,IAAA,QAAQ,CAAC,MAAT,CAAgB,WAAhB,EAA6B,OAA7B;AAEA,WAAO,KAAK,IAAL,CAAU,IAAV,CAAe,sCAAf,EAAuD,QAAvD,CAAP;AACD;;AAED,EAAA,YAAY,GAAA;AACV,SAAK,OAAL,CAAa,mBAAb,CAAiC,SAAjC,CAA4C,GAAD,IAAa;AACtD,WAAK,cAAL,GAAsB,CAAC,GAAD,CAAtB;AACD,KAFD;AAGD,GAhCyB,CAkC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AACA,EAAA,WAAW,GAAA;AACT;AACA,WAAO,KAAK,cAAL,CAAoB,GAApB,CACJ,IAAD,IAAU,IAAI,eAAJ,CAAoB,CAAC,IAAD,CAApB,EAA4B,CAA5B,EAA+B,IAA/B,EAAqC,KAAK,KAA1C,CADL,CAAP;AAGD;;AAED,EAAA,UAAU,GAAA;AACR,WAAO,KAAK,CAAC,IAAN,CAAW,KAAK,CAAC,EAAD,CAAL,CAAU,IAAV,EAAX,CAAP;AACD;;AAED,EAAA,UAAU,CAAC,CAAD,EAAU;AAClB,WAAO,MAAM,CAAC,YAAP,CAAoB,KAAK,CAAzB,CAAP;AACD;;AAED,EAAA,mBAAmB,CAAC,IAAD,EAAU;AAC3B,QAAI,SAAS,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,CAAhB;AACA,WAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAoB;AACrC,UAAI,SAAS,CAAC,QAAV,CAAmB,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAA3B,CAAJ,EAAsC;AACpC,QAAA,OAAO,CAAC,EAAD,CAAP;AACD,OAFD,MAEO;AACL,QAAA,OAAO,CAAC,GAAR,CAAY,yBAAZ,EAAuC,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAA/C;AACA,aAAK,gBAAL,CAAsB,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAA9B,EAAoC,SAApC,CAA+C,GAAD,IAAa;AACzD,UAAA,OAAO,CAAC,GAAR,CAAY,YAAZ,EAAyB,GAAzB;AACA,UAAA,OAAO,CAAC,GAAR,CAAY,gBAAZ,EAA8B,GAAG,CAAC,QAAJ,CAAa,QAAb,CAAsB,QAApD;AACA,cAAI,QAAQ,GAAG,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,CAAa,KAAb,CAAmB,GAAnB,CAAf;AACA,cAAI,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAT,GAAkB,CAAnB,CAAvB;AACA,UAAA,OAAO,CAAC,GAAR,CAAY,iBAAZ,EAA+B,QAA/B;;AACA,cAAI,QAAQ,CAAC,QAAT,CAAkB,sBAAlB,CAAJ,EAA+C;AAC7C,YAAA,OAAO,CAAC,GAAR,CAAY,oBAAZ,EAD6C,CAE7C;AACA;AACA;;AACA,YAAA,OAAO,CAAC,GAAR,CAAY,KAAK,UAAL,GAAkB,IAAlB,CAAuB,EAAvB,CAAZ;AACA,iBAAK,UAAL,GAAkB,OAAlB,CAA2B,CAAD,IAAM;AAC9B,cAAA,OAAO,CAAC,GAAR,CAAY,KAAZ,EAAmB,CAAnB,EAAsB,KAAK,UAAL,CAAgB,CAAhB,CAAtB,EAA0C,CAAC,KAAK,UAAL,CAAgB,CAAhB,CAAD,CAA1C;AAEA,cAAA,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,EAAc,GAAG,CAAC,QAAJ,CAAa,QAAb,CAAsB,QAAtB,CAA+B,OAA/B,CAAwC,GAAD,IAAa;AAChE,gBAAA,OAAO,CAAC,GAAR,CAAY,cAAZ,EAA4B,GAAG,CAAC,IAAJ,CAAS,MAAT,CAAgB,CAAhB,CAA5B;;AACA,oBAAI,GAAG,CAAC,IAAJ,CAAS,MAAT,CAAgB,CAAhB,KAAsB,KAAK,UAAL,CAAgB,CAAhB,CAA1B,EAA8C;AAC5C,kBAAA,GAAG,CAAC,WAAJ,GAAgB,GAAG,CAAC,WAAJ,GAAgB,CAAhC;AACA,uBAAK,SAAL,CAAe,IAAf,CAAoB,GAApB;AACD;AACF,eANa,CAAd;AAOA,mBAAK,SAAL,CAAe,IAAf,CAAoB,CAAC,CAAD,EAAQ,CAAR,KAAiB;AACnC,oBAAI,EAAE,GAAG,CAAC,CAAC,IAAF,CAAO,WAAP,EAAT;AAAA,oBACE,EAAE,GAAG,CAAC,CAAC,IAAF,CAAO,WAAP,EADP;;AAGA,oBAAI,EAAE,GAAG,EAAT,EAAa;AACX,yBAAO,CAAC,CAAR;AACD;;AACD,oBAAI,EAAE,GAAG,EAAT,EAAa;AACX,yBAAO,CAAP;AACD;;AACD,uBAAO,CAAP;AACD,eAXD;AAYA,kBAAI,SAAJ;AACA,cAAA,SAAS,GAAG,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,GAAe,GAAf,GAAqB,KAAK,UAAL,CAAgB,CAAhB,CAAjC,CAvB8B,CAwB9B;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA,cAAA,OAAO,CAAC,GAAR,CAAY,uBAAZ,EAAqC,KAAK,UAAL,CAAgB,CAAhB,CAArC,EAAyD,KAAK,SAA9D;AACA,kBAAI,GAAG,GAAG;AACR,wBAAQ,KAAK,UAAL,CAAgB,CAAhB,CADA;AAER,wBAAQ,SAFA;AAGR,wBAAQ,GAAG,CAAC,QAAJ,CAAa,QAAb,CAAsB,IAHtB;AAIR,+BAAe,KAAK,SAAL,CAAe;AAJtB,eAAV;AAMA,cAAA,OAAO,CAAC,GAAR,CAAY,KAAZ,EAAmB,GAAnB;AACA,mBAAK,eAAL,CAAqB,IAArB,CAA0B,GAA1B;AACA,mBAAK,OAAL,CAAa,GAAb,CAAiB,SAAjB,EAA4B,KAAK,SAAjC;AACA,mBAAK,SAAL,GAAiB,EAAjB;AACD,aA7CD;AA8CA,YAAA,OAAO,CAAC,GAAR,CAAY,kBAAZ,EAAgC,KAAK,eAArC;AACA,iBAAK,OAAL,CAAa,GAAb,CAAiB,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAzB,EAA+B,KAAK,eAApC;AACA,YAAA,OAAO,CAAC,GAAR,CAAY,eAAZ,EAA6B,KAAK,OAAlC;AACA,YAAA,OAAO,CAAC,KAAK,OAAN,CAAP,CAvD6C,CAwD7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,WAjED,MAiEO;AACL,YAAA,OAAO,CAAC,GAAR,CAAY,qBAAZ;AACA,gBAAI,KAAK,GAAG,GAAG,CAAC,QAAJ,CAAa,QAAb,CAAsB,QAAtB,CAA+B,SAA/B,CAA0C,EAAD,IAAW,EAAE,CAAC,IAAH,IAAS,YAA7D,CAAZ;AACF,YAAA,OAAO,CAAC,GAAR,CAAY,OAAZ,EAAoB,KAApB;;AACA,gBAAG,KAAK,GAAC,CAAC,CAAV,EAAY;AACV,cAAA,GAAG,CAAC,QAAJ,CAAa,QAAb,CAAsB,QAAtB,CAA+B,MAA/B,CAAsC,KAAtC,EAA4C,CAA5C;AACD;;AACC,gBAAI,GAAG,CAAC,QAAJ,CAAa,QAAb,CAAsB,QAAtB,CAA+B,MAA/B,GAAwC,CAA5C,EAA+C;AAC7C,mBAAK,OAAL,CAAa,GAAb,CAAiB,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAzB,EAA+B,GAAG,CAAC,QAAJ,CAAa,QAAb,CAAsB,QAArD;AACA,cAAA,OAAO,CAAC,KAAK,OAAN,CAAP;AACD;AACF;AACF,SAnFD;AAoFD;AACF,KA1FM,CAAP;AA2FD;;AAED,EAAA,WAAW,CAAC,IAAD,EAAU;AACnB,IAAA,OAAO,CAAC,GAAR,CAAY,OAAZ,EAAqB,IAArB,EAA2B,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAnC,EAAyC,KAAK,OAAL,CAAa,GAAb,CAAiB,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAzB,CAAzC;AACA,WAAO,KAAK,OAAL,CAAa,GAAb,CAAiB,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAzB,CAAP;AACD;;AAED,EAAA,YAAY,CAAC,IAAD,EAAU;AACpB,IAAA,OAAO,CAAC,GAAR,CAAY,SAAZ,EAAuB,IAAvB,EADoB,CAEpB;;AACA,WAAO,KAAK,OAAL,CAAa,GAAb,CAAiB,IAAI,CAAC,IAAtB,CAAP;AACD;;AAlKyB;;;mBAAf,e,EAAe,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,WAAA,C,EAAA,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C,EAAA,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,cAAA,C;AAAA,C;;;SAAf,e;AAAe,EAAA,OAAA,EAAf,eAAe,CAAA,I;AAAA,EAAA,UAAA,EADF;IAsK1B;;AACA,OAAM,MAAO,iBAAP,CAAwB;AAW5B,EAAA,WAAA,CACU,YADV,EAEU,SAFV,EAEoC;AAD1B,SAAA,YAAA,GAAA,YAAA;AACA,SAAA,SAAA,GAAA,SAAA;AAZV,SAAA,UAAA,GAAa,IAAI,eAAJ,CAAuC,EAAvC,CAAb;AAaK;;AAXG,MAAJ,IAAI,GAAA;AACN,WAAO,KAAK,UAAL,CAAgB,KAAvB;AACD;;AACO,MAAJ,IAAI,CAAC,KAAD,EAAyB;AAC/B,SAAK,YAAL,CAAkB,SAAlB,GAA8B,KAA9B;AACA,SAAK,UAAL,CAAgB,IAAhB,CAAqB,KAArB;AACD;;AAOD,EAAA,OAAO,CAAC,gBAAD,EAAmC;AACxC,SAAK,YAAL,CAAkB,cAAlB,CAAiC,OAAjC,CAAyC,SAAzC,CAAoD,MAAD,IAAW;AAC5D,UACG,MAA2C,CAAC,KAA5C,IACA,MAA2C,CAAC,OAF/C,EAGE;AACA,aAAK,iBAAL,CAAuB,MAAvB;AACD;AACF,KAPD;;AASA,WAAO,KAAK,CAAC,gBAAgB,CAAC,UAAlB,EAA8B,KAAK,UAAnC,CAAL,CAAoD,IAApD,CACL,GAAG,CAAC,MAAM,KAAK,IAAZ,CADE,CAAP;AAGD;;AAED,EAAA,UAAU,CAAC,gBAAD,EAAmC,CAAW;AAExD;;;AACA,EAAA,iBAAiB,CAAC,MAAD,EAAyC;AACxD,QAAI,MAAM,CAAC,KAAX,EAAkB;AAChB,MAAA,MAAM,CAAC,KAAP,CAAa,OAAb,CAAsB,IAAD,IAAU,KAAK,UAAL,CAAgB,IAAhB,EAAsB,IAAtB,CAA/B;AACD;;AACD,QAAI,MAAM,CAAC,OAAX,EAAoB;AAClB,MAAA,MAAM,CAAC,OAAP,CACG,KADH,GAEG,OAFH,GAGG,OAHH,CAGY,IAAD,IAAU,KAAK,UAAL,CAAgB,IAAhB,EAAsB,KAAtB,CAHrB;AAID;AACF;AAED;;AAEG;;;AACG,EAAA,UAAU,CAAC,IAAD,EAAwB,MAAxB,EAAuC;AAAA;;AAAA;AACrD,MAAA,IAAI,CAAC,SAAL,GAAiB,IAAjB;AACA,MAAA,OAAO,CAAC,GAAR,CAAY,wBAAZ,EAAsC,IAAtC,EAA4C,IAAI,CAAC,IAAL,CAAU,CAAV,CAA5C,EAA0D,MAA1D;AACA,YAAM,MAAM,SAAS,KAAI,CAAC,SAAL,CAAe,mBAAf,CAAmC,IAAI,CAAC,IAAxC,CAArB;AACA,MAAA,OAAO,CAAC,GAAR,CAAY,wBAAZ,EAAsC,MAAtC;AACA,YAAM,QAAQ,SAAS,KAAI,CAAC,SAAL,CAAe,WAAf,CAA2B,IAAI,CAAC,IAAhC,CAAvB;AACA,MAAA,OAAO,CAAC,GAAR,CAAY,eAAZ,EAA6B,QAA7B;AACA,MAAA,OAAO,CAAC,GAAR,CAAY,SAAZ,EAAuB,KAAI,CAAC,IAA5B;;AACA,YAAM,KAAK,GAAG,KAAI,CAAC,IAAL,CAAU,OAAV,CAAkB,IAAlB,CAAd;;AACA,MAAA,OAAO,CAAC,GAAR,CAAY,UAAZ,EAAwB,KAAxB,EAAgC,CAAC,QAAD,IAAa,KAAK,GAAG,CAArD;;AACA,UAAI,CAAC,QAAD,IAAa,KAAK,GAAG,CAAzB,EAA4B;AAC1B;AACA;AACD;;AAGD,MAAA,UAAU,CAAC,MAAK;AACd,YAAI,MAAJ,EAAY;AACV,gBAAM,KAAK,GAAG,QAAQ,CAAC,GAAT,CACX,IAAD,IACE,IAAI,eAAJ,CACE,CAAC,IAAD,CADF,EAEE,IAAI,CAAC,KAAL,GAAa,CAFf,EAGE,KAAI,CAAC,SAAL,CAAe,YAAf,CAA4B,IAA5B,CAHF,EAIE,QAAQ,CAAC,MAJX,CAFU,CAAd;;AASA,UAAA,KAAI,CAAC,IAAL,CAAU,MAAV,CAAiB,KAAK,GAAG,CAAzB,EAA4B,CAA5B,EAA+B,GAAG,KAAlC;AACD,SAXD,MAWO;AACL,cAAI,KAAK,GAAG,CAAZ;;AACA,eACE,IAAI,CAAC,GAAG,KAAK,GAAG,CADlB,EAEE,CAAC,GAAG,KAAI,CAAC,IAAL,CAAU,MAAd,IAAwB,KAAI,CAAC,IAAL,CAAU,CAAV,EAAa,KAAb,GAAqB,IAAI,CAAC,KAFpD,EAGE,CAAC,IAAI,KAAK,EAHZ,EAIE,CAAG;;AACL,UAAA,KAAI,CAAC,IAAL,CAAU,MAAV,CAAiB,KAAK,GAAG,CAAzB,EAA4B,KAA5B;AACD,SApBa,CAsBd;;;AACA,QAAA,KAAI,CAAC,UAAL,CAAgB,IAAhB,CAAqB,KAAI,CAAC,IAA1B;;AACA,QAAA,IAAI,CAAC,SAAL,GAAiB,KAAjB;AACD,OAzBS,CAAV;AAhBqD;AA0CtD;;AA3F2B,C,CAwG9B;AAEA;AAIA;;AACA,OAAM,MAAO,uBAAP,CAA8B;AAClC,EAAA,WAAA,CAAoB,QAApB,EAAuD,OAAvD,EAAwF,UAAxF,EAA8H,KAA9H,EAA6J,MAA7J,EAA2K;AAEzK;AACA;AACA;AACA;AACA;AANkB,SAAA,QAAA,GAAA,QAAA;AAAmC,SAAA,OAAA,GAAA,OAAA;AAAiC,SAAA,UAAA,GAAA,UAAA;AAAsC,SAAA,KAAA,GAAA,KAAA;AAA+B,SAAA,MAAA,GAAA,MAAA;;AA0C7J,SAAA,QAAA,GAAY,IAAD,IAA2B,IAAI,CAAC,KAA3C;;AAEA,SAAA,YAAA,GAAgB,IAAD,IAA2B,IAAI,CAAC,UAA/C;;AAEA,SAAA,QAAA,GAAW,CAAC,CAAD,EAAY,SAAZ,KAA2C,SAAS,CAAC,UAAhE;;AAtCE,SAAK,OAAL,CAAa,mBAAb,CAAiC,SAAjC,CAA4C,GAAD,IAAa;AACtD,MAAA,OAAO,CAAC,GAAR,CAAY,mEAAZ,EAAiF,GAAjF;AACA,WAAK,QAAL;AACD,KAHD;AAMD;;AAED,EAAA,QAAQ,GAAA;AACN,IAAA,OAAO,CAAC,GAAR,CAAY,iBAAZ;AACA,SAAK,eAAL;AACD;;AAEK,EAAA,eAAe,GAAA;AAAA;;AAAA;AACnB,MAAA,MAAI,CAAC,WAAL,GAAmB,IAAI,eAAJ,CACjB,MAAI,CAAC,QADY,EAEjB,MAAI,CAAC,YAFY,CAAnB;AAIA,MAAA,MAAI,CAAC,UAAL,GAAkB,IAAI,iBAAJ,CAAsB,MAAI,CAAC,WAA3B,EAAwC,MAAI,CAAC,QAA7C,CAAlB;AAEA,MAAA,MAAI,CAAC,UAAL,CAAgB,IAAhB,SAA6B,MAAI,CAAC,QAAL,CAAc,WAAd,EAA7B;AACA,MAAA,OAAO,CAAC,GAAR,CAAY,cAAZ,EAA4B,MAAI,CAAC,UAAL,CAAgB,IAA5C;AARmB;AASpB;;AAkBD,EAAA,YAAY,CAAC,GAAD,EAAS;AACnB,IAAA,OAAO,CAAC,GAAR,CAAY,iBAAZ,EAA+B,GAA/B;AACA,IAAA,OAAO,CAAC,GAAR,CAAY,UAAZ,EAAwB,KAAK,QAAL,CAAc,OAAtC;;AACA,QAAG,GAAG,CAAC,IAAJ,CAAS,CAAT,EAAY,IAAZ,IAAkB,WAArB,EAAiC;AAC/B,WAAK,iBAAL,CAAuB,GAAG,CAAC,IAAJ,CAAS,CAAT,EAAY,IAAnC;AACD,KALkB,CAOnB;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,IAAA,OAAO,CAAC,GAAR,CAAY,UAAZ,EAAwB,KAAK,QAAL,CAAc,OAAtC;AACD;;AAED,EAAA,iBAAiB,CAAC,IAAD,EAAa;AAC5B,IAAA,OAAO,CAAC,GAAR,CAAY,wBAAZ,EAAsC,IAAtC;;AACA,QAAI,IAAI,CAAC,QAAL,CAAc,sBAAd,CAAJ,EAA2C;AACzC,UAAI,SAAS,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,CAAhB,CADyC,CAEzC;AACA;AACA;;AACA,UAAI,QAAQ,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,CAAf;AACA,MAAA,OAAO,CAAC,GAAR,CAAY,UAAZ,EAAwB,QAAxB;AACA,UAAI,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAT,GAAkB,CAAnB,CAAvB;AACA,MAAA,OAAO,CAAC,GAAR,CAAY,aAAZ,EAA2B,QAA3B;AACA,UAAI,KAAK,GAAG,SAAS,CAAC,OAAV,CAAkB,QAAQ,CAAC,MAAT,CAAgB,CAAhB,CAAlB,CAAZ;;AACA,UAAI,KAAK,IAAI,CAAb,EAAgB;AACd,QAAA,YAAY,CAAC,OAAb,CAAqB,kBAArB,EAAyC,KAAK,CAAC,QAAN,EAAzC;AACD;;AACD,UAAI,SAAS,CAAC,QAAV,CAAmB,QAAnB,CAAJ,EAAkC;AAChC,QAAA,QAAQ,CAAC,GAAT;AACA,QAAA,OAAO,CAAC,GAAR,CAAY,UAAZ,EAAwB,QAAxB;AACA,QAAA,IAAI,GAAG,QAAQ,CAAC,IAAT,CAAc,GAAd,IAAqB,GAA5B;AACD,OAJD,MAIO;AACL,QAAA,IAAI,GAAG,IAAI,GAAG,GAAd;AACD;AACF,KApBD,MAoBO;AACL,MAAA,IAAI,GAAG,IAAI,GAAG,GAAd;AACD;;AACD,IAAA,OAAO,CAAC,GAAR,CAAY,sCAAZ,EAAoD,IAApD,EAzB4B,CA2B5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAI,IAAI,CAAC,QAAL,CAAc,OAAd,CAAJ,EAA4B;AAC1B,UAAI,KAAK,MAAL,CAAY,GAAZ,CAAgB,QAAhB,CAAyB,SAAzB,CAAJ,EAAyC;AACvC,aAAK,OAAL,CAAa,sBAAb,CAAoC,IAApC,EAA0C,OAA1C;AACD,OAFD,MAEO;AACL,aAAK,OAAL,CAAa,aAAb,CAA2B,IAA3B,EAAiC,OAAjC;AACD;AACF,KAND,MAMO,IAAI,IAAI,CAAC,QAAL,CAAc,KAAd,CAAJ,EAA0B;AAC/B,UAAI,KAAK,MAAL,CAAY,GAAZ,CAAgB,QAAhB,CAAyB,gBAAzB,CAAJ,EAAgD;AAC9C,aAAK,OAAL,CAAa,sBAAb,CAAoC,IAApC,EAA0C,KAA1C;AACD,OAFD,MAEO;AACL,aAAK,OAAL,CAAa,aAAb,CAA2B,IAA3B,EAAiC,KAAjC;AACD;AACF,KANM,MAMA,IAAI,IAAI,CAAC,QAAL,CAAc,UAAd,CAAJ,EAA+B;AACpC,UAAI,KAAK,MAAL,CAAY,GAAZ,CAAgB,QAAhB,CAAyB,cAAzB,CAAJ,EAA8C;AAC5C,aAAK,OAAL,CAAa,sBAAb,CAAoC,IAApC,EAA0C,KAA1C;AACD,OAFD,MAEO;AACL,aAAK,OAAL,CAAa,aAAb,CAA2B,IAA3B,EAAiC,KAAjC;AACD;AACF,KANM,MAMA,IAAI,IAAI,CAAC,QAAL,CAAc,QAAd,CAAJ,EAA6B;AAClC,UAAI,KAAK,MAAL,CAAY,GAAZ,CAAgB,QAAhB,CAAyB,eAAzB,CAAJ,EAA+C;AAC7C,QAAA,OAAO,CAAC,GAAR,CAAY,kBAAZ;;AACA,aAAK,OAAL,CAAa,sBAAb,CAAoC,IAApC,EAA0C,QAA1C;AACD,OAHD,MAGO;AACL,QAAA,OAAO,CAAC,GAAR,CAAY,kBAAZ;;AAEA,aAAK,OAAL,CAAa,aAAb,CAA2B,IAA3B,EAAiC,QAAjC;AACD;AACF;AACF;;AAtKiC;;;mBAAvB,uB,EAAuB,EAAA,CAAA,iBAAA,CACJ,eADI,C,EACW,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,cAAA,C,EAAA,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,gBAAA,C,EAAA,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,cAAA,C,EAAA,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,MAAA,C;AAAA,C;;;QADlC,uB;AAAuB,EAAA,SAAA,EAAA,CAAA,CAAA,qBAAA,CAAA,C;AAAA,EAAA,QAAA,EAAA,CAAA,EAAA,CAAA,kBAAA,CAVvB,CAAC,gBAAD,CAUuB,CAAA,C;AAVL,EAAA,KAAA,EAAA,C;AAAA,EAAA,IAAA,EAAA,C;AAAA,EAAA,MAAA,EAAA,CAAA,CAAA,CAAA,EAAA,YAAA,EAAA,aAAA,CAAA,EAAA,CAAA,oBAAA,EAAA,EAAA,EAAA,CAAA,EAAA,OAAA,EAAA,CAAA,EAAA,gBAAA,CAAA,EAAA,CAAA,oBAAA,EAAA,EAAA,EAAA,CAAA,EAAA,OAAA,EAAA,CAAA,EAAA,gBAAA,EAAA,oBAAA,CAAA,EAAA,CAAA,oBAAA,EAAA,EAAA,EAAA,CAAA,EAAA,OAAA,CAAA,EAAA,CAAA,OAAA,EAAA,qBAAA,EAAA,OAAA,EAAA,iBAAA,EAAA,mBAAA,EAAA,EAAA,EAAA,CAAA,EAAA,MAAA,EAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,OAAA,EAAA,aAAA,EAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,OAAA,EAAA,wBAAA,EAAA,OAAA,EAAA,aAAA,EAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,OAAA,EAAA,wBAAA,EAAA,OAAA,EAAA,aAAA,EAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,CAAA,EAAA,OAAA,CAAA,EAAA,CAAA,MAAA,EAAA,eAAA,EAAA,OAAA,EAAA,2BAAA,EAAA,CAAA,EAAA,UAAA,EAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,mBAAA,EAAA,EAAA,EAAA,CAAA,EAAA,qBAAA,EAAA,CAAA,EAAA,QAAA,EAAA,SAAA,CAAA,EAAA,CAAA,CAAA,EAAA,aAAA,CAAA,EAAA,CAAA,CAAA,EAAA,aAAA,EAAA,CAAA,EAAA,OAAA,EAAA,gBAAA,CAAA,EAAA,CAAA,CAAA,EAAA,aAAA,EAAA,CAAA,EAAA,OAAA,EAAA,gBAAA,CAAA,EAAA,CAAA,MAAA,EAAA,eAAA,EAAA,CAAA,EAAA,2BAAA,EAAA,CAAA,EAAA,UAAA,CAAA,EAAA,CAAA,CAAA,EAAA,MAAA,CAAA,C;AAAA,EAAA,QAAA,EAAA,SAAA,gCAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;AC1S/B,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,UAAA,EAAA,CAAA;AACI,MAAA,EAAA,CAAA,UAAA,CAAA,CAAA,EAAA,gDAAA,EAAA,CAAA,EAAA,CAAA,EAAA,eAAA,EAAA,CAAA;AAgBA,MAAA,EAAA,CAAA,UAAA,CAAA,CAAA,EAAA,gDAAA,EAAA,CAAA,EAAA,CAAA,EAAA,eAAA,EAAA,CAAA;AAmBF,MAAA,EAAA,CAAA,YAAA;;;;AApCQ,MAAA,EAAA,CAAA,UAAA,CAAA,YAAA,EAAA,GAAA,CAAA,UAAA,EAAyB,aAAzB,EAAyB,GAAA,CAAA,WAAzB;AAiBoC,MAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,MAAA,EAAA,CAAA,UAAA,CAAA,oBAAA,EAAA,GAAA,CAAA,QAAA","sourcesContent":["import { Component, OnInit, Injectable } from '@angular/core';\nimport {\n  CollectionViewer,\n  SelectionChange,\n  DataSource,\n} from '@angular/cdk/collections';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CommonnService } from 'src/app/_helpers/common/commonn.service';\nimport { DirectoryService } from 'src/app/featuremodules/input-folder/services/directory.service';\nimport { AuthService } from 'src/app/auth/auth.service';\nimport { HttpClient } from '@angular/common/http';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n\n\n\n/** Flat node with expandable and level information */\nexport class DynamicFlatNode {\n  constructor(\n    public item: object[],\n    public level = 1,\n    public expandable = false,\n    public count: Number,\n    public isLoading = false\n  ) { }\n}\n\n// injactable \n@Injectable({ providedIn: 'root', })\nexport class DynamicDatabase {\n  constructor(private _auth: AuthService, private http: HttpClient, private _common: CommonnService) {\n    this._common.$selectedFolderData.subscribe((res: any) => {\n      this.rootLevelNodes = [res];\n      console.log(\"rootLevelNodes ??????????????????????????????????????????\", this.rootLevelNodes)\n    });\n  }\n\n\n  dataMap = new Map<string, object[]>([]);\n  count: Number = 0\n  alphabatesArray: object[] = []\n  charArray:any=[]\n\n\n  rootLevelNodes: object[] = [];\n\n\n\n  getChildNodeData(path: string) {\n    let formData = new FormData;\n    formData.append(\"user_id\", this._auth.user_id);\n    formData.append(\"dir_path\", path);\n    formData.append(\"is_select\", \"false\")\n\n    return this.http.post('/filestorage_features/recursiontree/', formData);\n  }\n\n  initialChild() {\n    this._common.$selectedFolderData.subscribe((res: any) => {\n      this.rootLevelNodes = [res];\n    });\n  }\n\n  // rootLevelNodes: object[] = [{\n  //   \"name\": this._auth.user_name,\n  //   \"id\": 0,\n  //   \"path\":'Output_Folder/' + this._auth.org_name + '/' + this._auth.user_name,\n  //   \"type\": \"directory\",\n  //   \"expanded\": false,\n  // }];\n\n  /** Initial data from database */\n  initialData(): DynamicFlatNode[] {\n    // this.initialChild()\n    return this.rootLevelNodes.map(\n      (item) => new DynamicFlatNode([item], 0, true, this.count)\n    );\n  }\n\n  getNumbers() {\n    return Array.from(Array(11).keys());\n  }\n\n  getLetters(n: number): any {\n    return String.fromCharCode(65 + n);\n  }\n\n  getNodeChildrenData(node: any) {\n    let latterArr = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K']\n    return new Promise((resolve, reject) => {\n      if (latterArr.includes(node[0].name)) {\n        resolve([])\n      } else {\n        console.log(\"in new data get section\", node[0].path)\n        this.getChildNodeData(node[0].path).subscribe((res: any) => {\n          console.log(\"RESSSSSSSS\",res)\n          console.log(\"child response\", res.res_data.jsonData.children)\n          let splitval = node[0].path.split('/')\n          let buildVal = splitval[splitval.length - 1]\n          console.log(\">>>>>>>>>>?????\", buildVal)\n          if (buildVal.includes('Build Delivery Bible')) {\n            console.log(\"in build bible sec\")\n            // if (res.res_data.jsonData.is_bible) {\n            // console.log(\"true bible\")\n            // let chararr=res.res_data.jsonData.children\n            console.log(this.getNumbers().push(12))\n            this.getNumbers().forEach((c) => {\n              console.log(\">>>\", c, this.getLetters(c), [this.getLetters(c)])\n\n              node[0].path, res.res_data.jsonData.children.forEach((ele: any) => {\n                console.log(\"elements are\", ele.name.charAt(0))\n                if (ele.name.charAt(0) == this.getLetters(c)) {\n                  ele.total_count=ele.total_count-1\n                  this.charArray.push(ele)\n                }\n              })\n              this.charArray.sort((a:any, b:any) => {\n                let fa = a.name.toLowerCase(),\n                  fb = b.name.toLowerCase();\n          \n                if (fa < fb) {\n                  return -1;\n                }\n                if (fa > fb) {\n                  return 1;\n                }\n                return 0;\n              });\n              let childPath\n              childPath = node[0].path + \"/\" + this.getLetters(c)\n              // if ((node[0].path).includes('Build Delivery Bible')) {\n              //   childPath = node[0].path + \"/\" + this.getLetters(c)\n              // } else {\n              //   let p = res.res_data.jsonData.path.split(\"/\")\n              //   p.pop()\n              //   let s = p.join(\"/\")\n\n              //   childPath = s + \"/\" +this.getLetters(c)\n              //   console.log(\"....child path\")\n              // }\n              console.log(\"element and its array\", this.getLetters(c), this.charArray)\n              let obj = {\n                \"name\": this.getLetters(c),\n                \"path\": childPath,\n                \"type\": res.res_data.jsonData.type,\n                \"total_count\": this.charArray.length\n              }\n              console.log(\">>>\", obj)\n              this.alphabatesArray.push(obj)\n              this.dataMap.set(childPath, this.charArray)\n              this.charArray = []\n            })\n            console.log(\"alphabates array\", this.alphabatesArray)\n            this.dataMap.set(node[0].path, this.alphabatesArray)\n            console.log(\"final dataMap\", this.dataMap)\n            resolve(this.dataMap)\n            // }\n            //  else {\n            //   console.log(\"false bible\")\n            //   console.log(\"not build bible sec\")\n            //   if (res.res_data.jsonData.children.length > 0) {\n            //     this.dataMap.set(node[0].path, res.res_data.jsonData.children)\n            //     resolve(this.dataMap)\n            //   }\n            // }\n          } else {\n            console.log(\"not build bible sec\")\n            var index = res.res_data.jsonData.children.findIndex((el:any) =>el.name==\"myfile.txt\");\n          console.log(\"index\",index)\n          if(index>-1){\n            res.res_data.jsonData.children.splice(index,1)\n          }\n            if (res.res_data.jsonData.children.length > 0) {\n              this.dataMap.set(node[0].path, res.res_data.jsonData.children)\n              resolve(this.dataMap)\n            }\n          }\n        });\n      }\n    })\n  }\n\n  getChildren(node: any) {\n    console.log(\"*****\", node, node[0].name, this.dataMap.get(node[0].path))\n    return this.dataMap.get(node[0].path);\n  }\n\n  isExpandable(node: any): boolean {\n    console.log(\">>>>>>>\", node)\n    // console.log(\">>>>>>>\", node, this.dataMap.has(node.path))\n    return this.dataMap.has(node.path);\n  }\n}\n\n///////\nexport class DynamicDataSource implements DataSource<DynamicFlatNode> {\n  dataChange = new BehaviorSubject<DynamicFlatNode[]>([]);\n\n  get data(): DynamicFlatNode[] {\n    return this.dataChange.value;\n  }\n  set data(value: DynamicFlatNode[]) {\n    this._treeControl.dataNodes = value;\n    this.dataChange.next(value);\n  }\n\n  constructor(\n    private _treeControl: FlatTreeControl<DynamicFlatNode>,\n    private _database: DynamicDatabase\n  ) { }\n\n  connect(collectionViewer: CollectionViewer): Observable<DynamicFlatNode[]> {\n    this._treeControl.expansionModel.changed.subscribe((change) => {\n      if (\n        (change as SelectionChange<DynamicFlatNode>).added ||\n        (change as SelectionChange<DynamicFlatNode>).removed\n      ) {\n        this.handleTreeControl(change as SelectionChange<DynamicFlatNode>);\n      }\n    });\n\n    return merge(collectionViewer.viewChange, this.dataChange).pipe(\n      map(() => this.data)\n    );\n  }\n\n  disconnect(collectionViewer: CollectionViewer): void { }\n\n  /** Handle expand/collapse behaviors */\n  handleTreeControl(change: SelectionChange<DynamicFlatNode>) {\n    if (change.added) {\n      change.added.forEach((node) => this.toggleNode(node, true));\n    }\n    if (change.removed) {\n      change.removed\n        .slice()\n        .reverse()\n        .forEach((node) => this.toggleNode(node, false));\n    }\n  }\n\n  /**\n   * Toggle the node, remove from display list\n   */\n  async toggleNode(node: DynamicFlatNode, expand: boolean) {\n    node.isLoading = true;\n    console.log(\"start here .......>>>>\", node, node.item[0], expand)\n    const result = await this._database.getNodeChildrenData(node.item)\n    console.log(\"promise result is ....\", result)\n    const children = await this._database.getChildren(node.item);\n    console.log('childrens are', children);\n    console.log('data is', this.data);\n    const index = this.data.indexOf(node);\n    console.log('index is', index, (!children || index < 0));\n    if (!children || index < 0) {\n      // If no children, or cannot find the node, no op\n      return;\n    }\n\n\n    setTimeout(() => {\n      if (expand) {\n        const nodes = children.map(\n          (name) =>\n            new DynamicFlatNode(\n              [name],\n              node.level + 1,\n              this._database.isExpandable(name),\n              children.length\n            )\n        );\n        this.data.splice(index + 1, 0, ...nodes);\n      } else {\n        let count = 0;\n        for (\n          let i = index + 1;\n          i < this.data.length && this.data[i].level > node.level;\n          i++, count++\n        ) { }\n        this.data.splice(index + 1, count);\n      }\n\n      // notify the change\n      this.dataChange.next(this.data);\n      node.isLoading = false;\n    });\n  }\n\n}\n\n\n\n@Component({\n  selector: 'app-folder-treeview',\n  templateUrl: './folder-treeview.component.html',\n  styleUrls: ['./folder-treeview.component.scss'],\n  providers: [DirectoryService]\n\n})\n// export class TreeviewComponent implements OnInit {\n\n//   constructor() { }\n\n\n\n// }\nexport class FolderTreeviewComponent implements OnInit {\n  constructor(private database: DynamicDatabase, private _common: CommonnService, private _directory: DirectoryService, private route: ActivatedRoute, private router: Router) {\n\n    // this.router.routeReuseStrategy.shouldReuseRoute = () => {\n    //   console.log(\"change param\")\n    //   this.initialFunction()\n    //   return false;\n    // }\n\n    this._common.$selectedFolderData.subscribe((res: any) => {\n      console.log(\"rootLevelNodes changed ??????????????????????????????????????????\", res)\n      this.ngOnInit()\n    });\n\n\n  }\n\n  ngOnInit(): void {\n    console.log(\"ngoninit called\")\n    this.initialFunction()\n  }\n\n  async initialFunction() {\n    this.treeControl = new FlatTreeControl<DynamicFlatNode>(\n      this.getLevel,\n      this.isExpandable\n    );\n    this.dataSource = new DynamicDataSource(this.treeControl, this.database);\n\n    this.dataSource.data = await this.database.initialData();\n    console.log(\"initial data\", this.dataSource.data)\n  }\n\n\n  //   ngOnInit(): void {\n  //    this.dataSource.data = await this.database.initialData();\n\n  // }\n\n  treeControl: FlatTreeControl<DynamicFlatNode>;\n\n  dataSource: DynamicDataSource;\n\n  getLevel = (node: DynamicFlatNode) => node.level;\n\n  isExpandable = (node: DynamicFlatNode) => node.expandable;\n\n  hasChild = (_: number, _nodeData: DynamicFlatNode) => _nodeData.expandable;\n\n  selectedNode(val: any) {\n    console.log(\"selectedNode is\", val)\n    console.log(\"addd val\", this.database.dataMap)\n    if(val.item[0].type=='directory'){\n      this.redirectUserToDir(val.item[0].path)\n    }\n\n    //     this._directory.getChildNodeData(val.item[0].path).subscribe((res: any) => {\n    //   console.log(\"child response\",res.res_data.jsonData.children)\n    //   if(res.res_data.jsonData.children.length>0){\n    //   this.database.dataMap.set(val.item[0].path,res.res_data.jsonData.children)\n    //   }\n    // });\n\n    // this.database.dataMap.set(\"Output_Folder/ORG@STS/shubham21/BibleData\", [\n    //   {\n    //     \"name\": \"02_Certified Non-Incident Statement_2021.06.12 (002)_output\",\n    //     \"id\": 1,\n    //     \"path\": \"Output_Folder/ORG@STS/shubham21/BibleData/02_Certified Non-Incident Statement_2021.06.12 (002)_output\",\n    //     \"type\": \"directory\",\n    //     \"expanded\": false,\n    //     \"children\": []\n    //   },\n    //   {\n    //     \"name\": \"00___086_output\",\n    //     \"id\": 1,\n    //     \"path\": \"Output_Folder/ORG@STS/shubham21/BibleData/00___086_output\",\n    //     \"type\": \"directory\",\n    //     \"expanded\": false,\n    //     \"children\": []\n    //   },\n    //   {\n    //     \"name\": \"1. Current Time In Service 13-May-2019_output\",\n    //     \"id\": 1,\n    //     \"path\": \"Output_Folder/ORG@STS/shubham21/BibleData/1. Current Time In Service 13-May-2019_output\",\n    //     \"type\": \"directory\",\n    //     \"expanded\": false,\n    //     \"children\": []\n    //   },\n    //   {\n    //     \"name\": \"output\",\n    //     \"id\": 1,\n    //     \"path\": \"Output_Folder/ORG@STS/shubham21/BibleData/output\",\n    //     \"type\": \"directory\",\n    //     \"expanded\": false,\n    //     \"children\": []\n    //   }\n    // ])\n\n    console.log(\"addd val\", this.database.dataMap)\n  }\n\n  redirectUserToDir(path: string) {\n    console.log(\"reditect path is ?????\", path)\n    if (path.includes('Build Delivery Bible')) {\n      let latterArr = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K']\n      // if(latterArr.includes(node[0].name)){\n      //   resolve([])\n      //  }\n      let splitVal = path.split('/')\n      console.log(\"splitval\", splitVal)\n      let checkval = splitVal[splitVal.length - 1]\n      console.log(\"checkval is\", checkval)\n      let index = latterArr.indexOf(checkval.charAt(0))\n      if (index >= 0) {\n        localStorage.setItem(\"buildBibleSubDir\", index.toString())\n      }\n      if (latterArr.includes(checkval)) {\n        splitVal.pop()\n        console.log(\"splitval\", splitVal)\n        path = splitVal.join('/') + '/'\n      } else {\n        path = path + '/'\n      }\n    } else {\n      path = path + '/'\n    }\n    console.log(\"in redirect user to dir>>>>>>>>>>>>>\", path)\n\n    // if (path.includes('Input')) {\n    //   this._common.redirectToNestedFolder(path, 'input');\n    // } else if (path.includes('Req')) {\n    //   this._common.redirectToNestedFolder(path, 'req');\n    // } else if (path.includes('Err_Info')) {\n    //   this._common.redirectToNestedFolder(path, 'err');\n    // } else if (path.includes('Output')) {\n    //   this._common.redirectToNestedFolder(path, 'output');\n    // }\n\n    if (path.includes('Input')) {\n      if (this.router.url.includes('myfiles')) {\n        this._common.redirectToNestedFolder(path, 'input');\n      } else {\n        this._common.redirectToDir(path, 'input');\n      }\n    } else if (path.includes('Req')) {\n      if (this.router.url.includes('request-folder')) {\n        this._common.redirectToNestedFolder(path, 'req');\n      } else {\n        this._common.redirectToDir(path, 'req');\n      }\n    } else if (path.includes('Err_Info')) {\n      if (this.router.url.includes('error-folder')) {\n        this._common.redirectToNestedFolder(path, 'err');\n      } else {\n        this._common.redirectToDir(path, 'err');\n      }\n    } else if (path.includes('Output')) {\n      if (this.router.url.includes('output-folder')) {\n        console.log(\"redirect to same\")\n        this._common.redirectToNestedFolder(path, 'output');\n      } else {\n        console.log(\"redirect to diff\")\n\n        this._common.redirectToDir(path, 'output');\n      }\n    }\n  }\n\n}","<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n    <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding (click)=\"selectedNode(node)\">\n      <mat-icon class=\"mat-icon-rtl-mirror\" [class.hide]=\"node.item[0].total_count<=0\" style=\"cursor:pointer;\" *ngIf=\"node.item[0].type!='txt'\"\n        [attr.aria-label]=\"'Toggle ' + node.item[0].name\" matTreeNodeToggle>\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n      <!-- <i class=\"fas\" [class.fa-folder]=\"node.item[0].type=='directory'\" [class.fa-file]=\"node.item[0].type=='pdf'\" [class.fa-image]=\"node.item[0].type=='png'\" ></i> -->\n  \n      <!-- <i class=\"fas\" [class.fa-folder]=\"node.item[0].type=='directory'\" [class.fa-file]=\"node.item[0].type!='directory'\"></i>  -->\n      <mat-icon *ngIf=\"node.item[0].type=='directory'\" class=\"folder-icon\">{{'folder'}}</mat-icon>\n      <mat-icon *ngIf=\"node.item[0].type=='png'\" style=\"color: rgb(0, 0, 255);\" class=\"folder-icon\">{{'image'}}</mat-icon>\n      <mat-icon *ngIf=\"node.item[0].type=='pdf'\" style=\"color: rgb(255, 0, 0);\" class=\"folder-icon\">{{'picture_as_pdf'}}\n      </mat-icon>\n      <span (click)=\"selectedNode(node)\">{{node.item[0].name+\"(\"+node.item[0].total_count+\")\"}}</span>\n      <mat-spinner [diameter]=\"20\" *ngIf=\"node.isLoading\" mode=\"indeterminate\" class=\"example-tree-progress-bar\">\n      </mat-spinner>\n    </mat-tree-node>\n    <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding (click)=\"selectedNode(node)\">\n      <mat-icon class=\"mat-icon-rtl-mirror\" [class.hide]=\"node.item[0].total_count<=0\" style=\"cursor:pointer;\" *ngIf=\"node.item[0].type!='txt'\"\n        [attr.aria-label]=\"'Toggle ' + node.item[0].name\" matTreeNodeToggle>\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n  \n      <mat-icon *ngIf=\"node.item[0].type=='directory'\" class=\"folder-icon\">{{'folder'}}</mat-icon>\n      <mat-icon *ngIf=\"node.item[0].type=='png'\" class=\"folder-icon\">{{'image'}}</mat-icon>\n      <mat-icon *ngIf=\"node.item[0].type=='pdf'\" class=\"folder-icon\">{{'picture_as_pdf'}}</mat-icon>\n  \n  \n  \n  \n      <!-- <i class=\"fas\" [class.fa-folder]=\"node.item[0].type=='directory'\" [class.fa-file-pdf-o]=\"node.item[0].type=='pdf'\" [class.fa-image]=\"node.item[0].type=='png'\" ></i> -->\n      <span *ngIf=\"node.item[0].type!='txt'\">{{node.item[0].name+\"(\"+node.item[0].total_count+\")\"}}</span>\n      <mat-spinner [diameter]=\"20\" *ngIf=\"node.isLoading\" mode=\"indeterminate\" class=\"example-tree-progress-bar\">\n      </mat-spinner>\n    </mat-tree-node>\n    <!-- <mat-spinner [diameter]=\"30\" *ngIf=\"nodeItems.length === 0\"></mat-spinner> -->\n  </mat-tree>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}