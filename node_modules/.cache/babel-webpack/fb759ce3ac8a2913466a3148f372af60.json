{"ast":null,"code":"import _asyncToGenerator from \"F:/statvalu/project/AR_DocuExpert_Test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Component, HostListener, ViewChild } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { NavigationEnd } from '@angular/router';\nimport { FeatureProcessService } from 'src/app/_helpers/services/feature-process.service';\nimport Swal from 'sweetalert2';\nimport { DirectoryService } from './services/directory.service';\nimport { HttpEventType } from '@angular/common/http';\nimport { moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\nlet InputFolderComponent = class InputFolderComponent {\n  constructor(_upload, _ngxService, _modal, _auth, _directory, _common, route, _process, _fb, _FileSaverService, authService, httpClient, sanitizer, router, location) {\n    this._upload = _upload;\n    this._ngxService = _ngxService;\n    this._modal = _modal;\n    this._auth = _auth;\n    this._directory = _directory;\n    this._common = _common;\n    this.route = route;\n    this._process = _process;\n    this._fb = _fb;\n    this._FileSaverService = _FileSaverService;\n    this.authService = authService;\n    this.httpClient = httpClient;\n    this.sanitizer = sanitizer;\n    this.router = router;\n    this.location = location;\n    this.options = ['One', 'Two', 'Three'];\n    this.addOnBlur = true;\n    this.separatorKeysCodes = [ENTER, COMMA];\n    this.tagList = []; //Feature Directory show and hide ====================================================\n\n    this.showAllFoldersFiles = true;\n    this.showAllPdfFoldersFiles = false;\n    this.showAllCsvFoldersFiles = false;\n    this.showImageFile = false;\n    this.showFilesMove = false; //Feature Directory show and hide ====================================================\n\n    this.searchTerm = \"\";\n    this.largeView = false;\n    this.listViewVal = true;\n    this.showCheckbox = false;\n    this.isAccess = true;\n    this.searchOption = \"All\";\n    this.selectedFeature = \"\";\n    this.progressPercentage = 0;\n    this.processing = false;\n    this.externalFolders = [];\n    this.pathList = []; //upload link from drive,cloud\n\n    this.showUploadDrive = false;\n    this.linkType = \"gd\";\n    this.inputLink1 = '';\n    this.inputLink2 = '';\n    this.varifyOptions = false;\n    this.isLoggedIn = false; //upload link from drive,cloud\n    //searching show and hide ====================================================\n\n    this.showFolder = true;\n    this.showFile = true;\n    this.showPdfFolder = true;\n    this.showPdfFile = true;\n    this.showCsvFolder = true;\n    this.showCsvFile = true; //searching show and hide ====================================================\n    // All Folders And Files Data =================================================\n\n    this.folderList = [];\n    this.filteredFolderList = this.folderList;\n    this.gfolderList = [];\n    this.gfilteredFolderList = this.gfolderList;\n    this.fileList = [];\n    this.filteredFileList = this.fileList;\n    this.pdfFolderList = [];\n    this.filteredPdfFolderList = this.pdfFolderList;\n    this.gpdfFolderList = [];\n    this.gfilteredPdfFolderList = this.gpdfFolderList;\n    this.pdfFileList = [];\n    this.filteredPdfFileList = this.pdfFileList;\n    this.csvFolderList = [];\n    this.filteredCsvFolderList = this.csvFolderList;\n    this.csvFileList = [];\n    this.filteredCsvFileList = this.csvFileList;\n    this.imageFileList = [];\n    this.filteredImageFileList = this.imageFileList;\n    this.csvFilesForMetadataUpdation = [];\n    this.history = [];\n    this.varifyQuestionList = []; // varifyQuestionList = [\n    //   { \"question\": \"is Msn date validate\", \"response\": \"\", \"note\": \"\" }, \n    //   { \"question\": \"is status file validate\", \"response\": \"\", \"note\": \"\" }\n    // ]\n    // All Folders And Files Data==============================================\n    // ***********************************single/two step feature list*******************************\n    // singleStepFeatures: any[] = [\"Redact People Terms\", \"Redact Place Terms\", \"Redact Date Terms\", \"Redact Numeric\", \"Highlight People Term\", \"Highlight Place Term\", \"Highlight Date Term\", \"Highlight Numeric Terms\", \"Language Detection\", \"Affirmative Sentences\", \"Sentiment Detection\", \"Color Detection\"];\n\n    this.twoStepFeatures = [\"Highlight Term\", \"Redaction Term\", \"Attribute Retrieval\"]; // ***********************************single/two step feature list*******************************\n\n    this.selectedStep = \"step1\"; // pagination of folder and files ====================================================\n\n    this.page = 1;\n    this.pageSize = 100;\n    this.gpage = 1;\n    this.gpageSize = 100;\n    this.filepage = 1;\n    this.filePageSize = 100;\n    this.pdfPage = 1;\n    this.pdfPageSize = 100;\n    this.gpdfPage = 1;\n    this.gpdfPageSize = 100;\n    this.pdfFilePage = 1;\n    this.pdfFilePageSize = 100;\n    this.csvPage = 1;\n    this.csvPageSize = 100;\n    this.csvFilepage = 1;\n    this.csvFilePageSize = 100; // pagination of folder and files ====================================================\n    // open pdf/csv files ====================================================\n\n    this.pdfFilePath = null;\n    this.showPdfViewer = false;\n    this.csvFilePath = null;\n    this.showCsvViewer = false;\n    this.txtFilePath = null;\n    this.showTxtViewer = false; // open pdf/csv files ====================================================\n    // Directory Properties ====================================================\n\n    this.directoryMetadataKeys = [];\n    this.directoryMetadata = {}; // Directory Properties ====================================================\n\n    this.featureOptions = {\n      search_on: 'Google',\n      word_list: [],\n      approx_search: false,\n      top_lines: '',\n      password: '',\n      del_attr_list: '',\n      rule_file_path: '',\n      page_pattern: '',\n      page_list_or_csv: '',\n      location: '',\n      img_aug_customval: '',\n      image_path: '',\n      watermark_string: '',\n      color: 'red',\n      opacity: '',\n      strokes: '',\n      bookmark_word_or_csv: '',\n      input_paths: [],\n      pattern_file: '',\n      redactPersonalInfo: {\n        email: false,\n        phone: false,\n        people: false,\n        address: false,\n        date_of_birth: false,\n        account_number: false,\n        pps_number: false\n      },\n      number_of_groups: '',\n      anchor_text: '',\n      region_size: '',\n      height: '',\n      split_pattern: '',\n      input_page_list: '',\n      order_list: [],\n      doc_merge_filename: '',\n      inPlace: false\n    }; // Show/Hide Feature Option Array ====================================================\n\n    this.approxSearchFeatureList = [\"Highlight Term\", \"Redaction Term\", \"Attribute Retrieval\", \"Anchor Text Extraction\", \"Anchor Text Page Classification\", \"Anchor Text Document Classification\"];\n    this.anchorTextFeatureList = [\"Anchor Text Extraction\", \"Anchor Text Page Ordering\", \"Anchor Text Page Classification\", \"Anchor Text Document Classification\", \"Anchor Text Document Ordering\"];\n    this.showOption = [\"Highlight Term\", \"Redaction Term\", \"Attribute Retrieval\", \"Image Augmentation\", \"Watermarking\", \"Encryption\", \"Decryption\", \"Metadata Deletion\", \"Metadata Updation\", \"Add Bookmarks\", \"Internal Linking\", \"Sentiment Detection\", \"Document Classification\", \"Redact Personal Information\", \"Content Based Grouping\", \"Extractive Summary\", \"Anchor Text Extraction\", \"Anchor Text Page Ordering\", \"Anchor Text Page Classification\", \"Anchor Text Document Classification\", \"Anchor Text Document Ordering\", \"Hight Based Highlight\", \"Split Pdf\"];\n    this.showCsvTableList = [\"Metadata Updation\", \"Image Augmentation\", \"Watermarking\", \"Add Bookmarks\", \"Internal Linking\", \"Document Classification\", 'AMP Build'];\n    this.showCsvTable = false; // Show/Hide Feature Option Array ====================================================\n    // metadata deleteion select field =============================================\n\n    this.metaDataDeleteList = [{\n      item_id: 1,\n      item_text: \"Author\"\n    }, {\n      item_id: 2,\n      item_text: \"Creator\"\n    }, {\n      item_id: 3,\n      item_text: \"Creator Tool\"\n    }, {\n      item_id: 4,\n      item_text: \"Create Date\"\n    }, {\n      item_id: 5,\n      item_text: \"Format\"\n    }, {\n      item_id: 6,\n      item_text: \"Instance ID\"\n    }, {\n      item_id: 7,\n      item_text: \"Document ID\"\n    }, {\n      item_id: 8,\n      item_text: \"History\"\n    }, {\n      item_id: 9,\n      item_text: \"History When\"\n    }, {\n      item_id: 10,\n      item_text: \"Modify Date\"\n    }, {\n      item_id: 11,\n      item_text: \"Metadata Date\"\n    }, {\n      item_id: 12,\n      item_text: \"Linearized\"\n    }, {\n      item_id: 13,\n      item_text: \"Producer\"\n    }, {\n      item_id: 14,\n      item_text: \"Title\"\n    }, {\n      item_id: 15,\n      item_text: \"XMP Toolkit\"\n    }];\n    this.dropdownSettings = {\n      singleSelection: false,\n      idField: 'item_id',\n      textField: 'item_text',\n      selectAllText: 'Select All',\n      unSelectAllText: 'UnSelect All',\n      itemsShowLimit: 3,\n      allowSearchFilter: true\n    }; // metadata deleteion select field =============================================\n    // img aug,watermark,addbookmark,interlinking select option =============================================\n\n    this.patterns = [{\n      value: 'every page',\n      viewValue: 'every page',\n      feature: 'Internal Linking'\n    }, {\n      value: 'every nth page',\n      viewValue: 'every nth page',\n      feature: ''\n    }, {\n      value: 'even pages',\n      viewValue: 'even pages',\n      feature: ''\n    }, {\n      value: 'odd pages',\n      viewValue: 'odd pages',\n      feature: ''\n    }, {\n      value: 'page range',\n      viewValue: 'page range',\n      feature: 'Internal Linking'\n    }, {\n      value: 'custom page numbers',\n      viewValue: 'custom page number',\n      feature: ''\n    }, {\n      value: 'csv',\n      viewValue: 'csv',\n      feature: ''\n    }];\n    this.showPaternOptionList = [\"Image Augmentation\", \"Watermarking\", \"Add Bookmarks\", \"Internal Linking\"];\n    this.showPatternInputList = [\"every nth page\", \"page range\", \"custom page numbers\"];\n    this.positions = [{\n      value: '',\n      viewValue: 'Standard Position'\n    }, {\n      value: 'topleft',\n      viewValue: 'top left'\n    }, {\n      value: 'topright',\n      viewValue: 'top right'\n    }, {\n      value: 'bottomleft',\n      viewValue: 'bottom left'\n    }, {\n      value: 'bottomright',\n      viewValue: 'bottom right'\n    }, {\n      value: 'custom positions',\n      viewValue: 'custom positions'\n    }]; // img aug,watermark,addbookmark,interlinking select option =============================================\n    // combined search =============================================\n\n    this.showCombinedSearch = false;\n    this.contentCheck = false;\n    this.documentFolderCheck = false;\n    this.metadataCheck = false;\n    this.aircraftMetadataCheck = false;\n    this.formsList = [{\n      name: 'FileName',\n      unit: \"\"\n    }, {\n      name: 'Directory',\n      unit: ''\n    }, {\n      name: 'FileSize',\n      unit: ''\n    }, {\n      name: 'FileModificationDate_Time',\n      unit: ''\n    }, {\n      name: 'FileAccessDate_Time',\n      unit: ''\n    }, {\n      name: 'FileInodeChangeDate_Time',\n      unit: ''\n    }, {\n      name: 'FilePermissions',\n      unit: '(eg. rwxrw-r--, r-read,  w-write, x-execute)'\n    }, {\n      name: 'PDFVersion',\n      unit: '(from 1.1 to 1.7)'\n    }, {\n      name: 'Author',\n      unit: ''\n    }, {\n      name: 'CreateDate',\n      unit: ''\n    }, {\n      name: 'ModifyDate',\n      unit: ''\n    }, {\n      name: 'Subject',\n      unit: ''\n    }, {\n      name: 'Creator',\n      unit: ''\n    }, {\n      name: 'Description',\n      unit: ''\n    }, {\n      name: 'Title',\n      unit: ''\n    }, {\n      name: 'CreatorTool',\n      unit: ''\n    }, {\n      name: 'MetadataDate',\n      unit: ''\n    }, {\n      name: 'Keywords',\n      unit: ''\n    }, {\n      name: 'Producer',\n      unit: ''\n    }, {\n      name: 'RenditionClass',\n      unit: ''\n    }, {\n      name: 'MaxPageSizeW',\n      unit: ''\n    }, {\n      name: 'MaxPageSizeH',\n      unit: ''\n    }, {\n      name: 'MaxPageSizeUnit',\n      unit: ''\n    }, {\n      name: 'FontName',\n      unit: '(eg. Times-Roman,Times-Bold,Courier,Courier-Bold)'\n    }, {\n      name: 'FontFamily',\n      unit: '(\"sans-serif\", e.g., Helvetica)'\n    }, {\n      name: 'PageCount',\n      unit: ''\n    }, {\n      name: 'BoundingBox',\n      unit: ''\n    }, {\n      name: 'ImageHeight',\n      unit: '(In pixels)'\n    }, {\n      name: 'ImageWidth',\n      unit: '(In pixels)'\n    }, {\n      name: 'ImageSize',\n      unit: '(In pixels)'\n    }, {\n      name: 'Megapixels',\n      unit: ''\n    }]; // Types Of Forms\n\n    this.integerArr = [\"ContainerVersion\", \"CreatorVersion\", \"FileSize\", \"FontVersion\", \"ImageHeight\", \"ImageSize\", \"ImageWidth\", \"MaxPageSizeH\", \"MaxPageSizeW\", \"Megapixels\", \"NPages\", \"PageCount\", \"FileModificationDate_Time\", \"FileAccessDate_Time\", \"FileInodeChangeDate_Time\", \"CreateDate\", \"ModifyDate\", \"MetadataDate\"];\n    this.boolArr = [\"Linearized\"]; // Types Of Forms\n    // Select Field optins data ==============================\n\n    this.conditionIntegerList = [{\n      label: 'isGreaterThan',\n      value: \"gt\"\n    }, {\n      label: 'isLessThan',\n      value: 'lt'\n    }, {\n      label: 'isEqualTo',\n      value: 'eq'\n    }, {\n      label: 'isGreaterThanOrEqualsTo',\n      value: 'gte'\n    }, {\n      label: 'isLessThanOrEqualsTo',\n      value: 'lte'\n    }, {\n      value: 'range',\n      label: 'Range'\n    }]; // conditionStringList = [{ label: 'contains', value: 'contains' }, { label: 'exact', value: 'exact' }, { label: 'iexact', value: 'iexact' }, { label: 'icontains', value: 'icontains' }, { value: 'startswith', label: 'StartsWith' }, { value: 'istartswith', label: 'IStartsWith' }, { value: 'endswith', label: 'EndsWith' }, { value: 'iendswith', label: 'IEndsWith' }];\n\n    this.conditionStringList = [{\n      label: 'contains',\n      value: 'contains'\n    }, {\n      label: 'exact',\n      value: 'exact'\n    }, {\n      value: 'startswith',\n      label: 'StartsWith'\n    }, {\n      value: 'endswith',\n      label: 'EndsWith'\n    }];\n    this.conditionBooleanList = [{\n      value: 'boolean',\n      label: 'boolean'\n    }];\n    this.combineOp = [];\n    this.metadataSearchData = {};\n    this.metadataSearchKeys = [];\n    this.advancedSearchType = 'File'; // Select Field optins data ==============================\n    // combined search =============================================\n    // Feature select All option\n\n    this.selectAllFoldersCheck = false;\n    this.gselectAllFoldersCheck = false;\n    this.selectAllFilesCheck = false;\n    this.selectAllPdfFoldersCheck = false;\n    this.gselectAllPdfFoldersCheck = false;\n    this.selectAllPdfFilesCheck = false;\n    this.selectAllCsvFoldersCheck = false;\n    this.selectAllCsvFilesCheck = false; // Feature select All option\n    //directory selection path\n\n    this.selectedPdfPaths = [];\n    this.selectedCsvPaths = []; //directory selection path\n\n    this.docMergePdf = [];\n    this.docMergeSelectedPdf = [];\n    this.pdfurl = '';\n    this.pdfpagenums = [];\n    this.excelExtensionList = ['csv', 'xls'];\n    this.imageExtensionList = ['png', 'jpg', 'jpeg'];\n    this.allFolderNames = [];\n    this.allFileNames = [];\n    this.user = null;\n    this.rootDirName = \"Myfiles\";\n    this.base_path = \"Input_Folder/\";\n    this.showBuildDeliveryUi2 = false;\n    this.ispdfClicked = false;\n    this.issearchClicked = false;\n    this.showQuestionList = false;\n    this.selectedFileForQuestion = '';\n    this.selectAllQues = '';\n    this.notes = false;\n    this.tag = false; // ***********************************Other Features*******************************\n    // ***********************************List Directories*******************************\n\n    this.showFetchDirSpinner = false; // ***********************************When Double Click On Folders Path handling*******************************\n    // ***********************************When Double Click On Files Open it / open only csv using paths*******************************\n\n    this.showImgViewer = false;\n    this.imgFilePath = \"\";\n    this.contextMenuPosition = {\n      x: '0px',\n      y: '0px'\n    };\n    this.router.events.subscribe(event => {\n      if (event instanceof NavigationEnd) {\n        this.history.push(event.urlAfterRedirects);\n      }\n    });\n\n    this._common.$resetMyFile.subscribe(res => {\n      let currentUrl = this.router.url;\n      console.log(\"currrrrr url my file\", currentUrl);\n\n      if (currentUrl == '/viewDir/myfiles') {\n        this.goToMyFiles();\n      } else {\n        localStorage.removeItem('input');\n      }\n    });\n  }\n\n  back() {\n    this.ispdfClicked = false;\n    this.issearchClicked = false;\n\n    this._common.$varifyFolder.next(''); // this.history.pop();\n\n\n    if (this.pathList.length > 0) {\n      this.pathList.pop();\n      console.log(\">>>>\", this.pathList[this.pathList.length - 1]);\n\n      if (this.pathList[this.pathList.length - 1] && this.pathList[this.pathList.length - 1].includes('External_Assigned')) {\n        this.isAccess = true;\n      }\n\n      if (this.pathList[this.pathList.length - 1] && this.pathList[this.pathList.length - 1].includes('Delivery Bible')) {\n        localStorage.removeItem(\"buildBibleSubDir\");\n      }\n\n      this.listDirectories();\n      this.storeCurrentDirPath();\n    } // else if (this.history.length > 0) {\n    //   this.location.back()\n    // }\n\n  }\n\n  ngOnInit() {\n    // autocomplete\n    // this.filteredOptions = this.myControl.valueChanges.pipe(\n    //   startWith(''),\n    //   map(value => this._filter(value || '')),\n    // );\n    this.externalFolders = [{\n      \"name\": \"HTD\",\n      \"is_directory\": true,\n      \"isSelected\": false,\n      \"isVirtualfolder\": true,\n      \"type\": \"empty\",\n      \"path\": \"G_input/StatValu/PriyankaMhatre\",\n      \"help_str\": \"/home/statvalu-local/mycontainer/G_input/StatValu/PriyankaMhatre/HTD\",\n      \"file_counts\": {},\n      \"total_files\": 0,\n      \"total_dirs\": 0,\n      \"directory\": \"Folder\",\n      \"role\": \"admin\"\n    }, {\n      \"name\": \"test\",\n      \"is_directory\": true,\n      \"isSelected\": false,\n      \"isVirtualfolder\": true,\n      \"type\": \"pdf\",\n      \"path\": \"G_input/StatValu/PriyankaMhatre\",\n      \"help_str\": \"/home/statvalu-local/mycontainer/G_input/StatValu/PriyankaMhatre/test\",\n      \"file_counts\": {\n        \"pdf\": 6\n      },\n      \"total_files\": 6,\n      \"total_dirs\": 0,\n      \"directory\": \"Folder\",\n      \"role\": \"user\"\n    }];\n    this.resetDirectoryFilterPageSize();\n    this.route.params.subscribe(params => {\n      console.log(\"inside param.......................\");\n      let input_dir_path = JSON.parse(localStorage.getItem('input')) || [];\n      let output_dir_path = JSON.parse(localStorage.getItem('output')) || [];\n      let req_dir_path = JSON.parse(localStorage.getItem('req')) || [];\n      let err_dir_path = JSON.parse(localStorage.getItem('err')) || [];\n      localStorage.setItem(params.type, JSON.stringify(this.pathList));\n      console.log(\"paramss\", params, input_dir_path);\n      this.ispdfClicked = false;\n      this.issearchClicked = false;\n\n      if (params.type === 'myfiles') {\n        this.base_path = \"Input_Folder/\";\n        this.pathList = input_dir_path;\n        this.rootDirName = \"Myfiles\";\n      } else if (params.type === 'output-folder') {\n        this.base_path = \"Output_Folder/\";\n        this.pathList = output_dir_path;\n        this.rootDirName = \"Output\";\n        this.hideContentMetaOnOtherRoutes();\n        this.resetFeatureSelection();\n      } else if (params.type === 'request-folder') {\n        this.base_path = \"Req_Output_Folder/\";\n        this.pathList = req_dir_path;\n        this.rootDirName = \"Request\";\n        this.hideContentMetaOnOtherRoutes();\n        this.resetFeatureSelection();\n      } else {\n        this.base_path = \"Err_Info_Folder/\";\n        this.pathList = err_dir_path;\n        this.rootDirName = \"Error\";\n        this.hideContentMetaOnOtherRoutes();\n        this.resetFeatureSelection();\n      }\n\n      this.getTreeNode();\n      this.listDirectories();\n      console.log(\">>>>>>>>>>>>\", this.listViewVal, this.largeView);\n    });\n\n    this._common.$featureName.subscribe(res => {\n      this.selectedFeature = res;\n      console.log(res);\n      this.pdfurl = null;\n      this._common.currSelectedFeature = res;\n      res === 'Metadata Updation' || res === 'Document Classification' || res === 'Hard time dashboard' ? this.showCsvTable = true : this.showCsvTable = false;\n      res === 'Image Augmentation' ? this.showImageFile = true : this.showImageFile = false;\n      this.unselectAllFoldersAndFiles();\n      this.unselectAllGFolders();\n      this.unselectAllPdfFoldersAndFiles();\n      this.unselectAllCsvFoldersAndFiles();\n      this.unselectAllImageFiles();\n      this.unselectAllGPdfFolders();\n      this.fillDocMergePdf();\n      this.selectedPdfPaths = [];\n      this.selectedCsvPaths = [];\n      this.docMergeSelectedPdf = [];\n\n      if (res) {\n        this.showAllFoldersFiles = false;\n        res === 'Document Classification' ? this.showDocClassificationPdfFolder() : this.showPdfDirectory();\n        this.featureOptions.page_pattern = \"\";\n        this.resetDirectoryFilter();\n        this.resetFeatureSelectAll();\n      } else {\n        this.showAllFoldersFiles = true;\n        this.showAllPdfFoldersFiles = false;\n        this.showAllCsvFoldersFiles = false;\n        this.selectedStep = \"step1\";\n        this.featureOptions.page_pattern = \"\";\n\n        this._common.$unselectFeatureCheckbox.next('');\n\n        this.resetDirectoryFilter();\n        this.resetFeatureSelectAll();\n      }\n    });\n\n    this._common.$updateDirectory.subscribe(res => {\n      this.listDirectories();\n    });\n\n    this._common.$unselectPdfCsvDirectory.subscribe(res => {\n      this.unselectAllFoldersAndFiles();\n      this.unselectAllGFolders();\n      this.unselectAllPdfFoldersAndFiles();\n      this.unselectAllCsvFoldersAndFiles();\n      this.unselectAllImageFiles();\n      this.unselectAllGPdfFolders();\n      this.featureOptions.page_pattern = \"every page\";\n      this.resetDirectoryFilter();\n      this.resetFeatureOptions();\n      this.selectedPdfPaths = [];\n      this.selectedCsvPaths = [];\n      this.docMergeSelectedPdf = [];\n    });\n\n    this.metadataSearchForm = this._fb.group({\n      formsArray: this._fb.array(this.createForms())\n    });\n    this.airCraftSearchForm = this._fb.group({\n      msn: [''],\n      owner: [''],\n      project: [''],\n      type: ['']\n    });\n    this.contentSearchForm = this._fb.group({\n      text: [false],\n      number: [false],\n      date: [false],\n      textOperator: ['AND'],\n      numberOperator: ['AND'],\n      textConditions: this._fb.array([this._fb.group({\n        search_string: [''],\n        condition: ['contains'],\n        operator: ['AND'],\n        value_type: ['text']\n      })]),\n      numberConditions: this._fb.array([this._fb.group({\n        search_value: [''],\n        condition: ['gt'],\n        operator: ['AND'],\n        start: [''],\n        end: ['']\n      })]),\n      dateConditions: this._fb.array([this._fb.group({\n        search_date: [''],\n        condition: ['gt'],\n        operator: ['AND'],\n        start: [''],\n        end: ['']\n      })]),\n      approx_search: [false]\n    });\n    this.documentFolderSearchForm = this._fb.group({\n      search_rule: ['', Validators.required],\n      is_pattern: ['false'],\n      fixed_left: ['', Validators.required],\n      fixed_right: ['', Validators.required]\n    });\n    this.authService.authState.subscribe(user => {\n      this.user = user;\n      console.log(user);\n    });\n    this.inputLinkForm = this._fb.group({\n      folderName: ['', Validators.required],\n      projectName: [''],\n      links: this._fb.array([this._fb.group({\n        input_link: ['', Validators.required],\n        name: ['', Validators.required],\n        uid: [this._common.getRandomString()]\n      })]),\n      outputLink: ['', Validators.required]\n    });\n\n    this._common.$openDirectory.subscribe(res => {\n      console.log(\"working\");\n      this.showBuildDeliveryUi = false;\n      this.pathList = [];\n      this.pathList = res.path.split('/').slice(3); // let lastPath=this.pathList[this.pathList.length-1]\n      // let showBible=lastPath.includes('Delivery Bible')\n      // console.log(\"is bible render\", this.pathList,showBible)\n\n      let showBible = this.pathList.some(path => {\n        return path.includes('Delivery Bible');\n      });\n      console.log(\"is bible render\", this.pathList, showBible);\n\n      if (showBible) {\n        localStorage.setItem('output', JSON.stringify(this.pathList));\n      } else {\n        this.storeCurrentDirPath();\n      }\n\n      this.listDirectories(res.name);\n      console.log(this.pathList);\n    });\n\n    this._common.$openFile.subscribe(res => {\n      this.openFile(res);\n    });\n\n    this._common.$refreshDirectories.subscribe(res => {\n      this.pathList = JSON.parse(localStorage.getItem('output'));\n      console.log(\"firing\");\n      this.listDirectories();\n    });\n\n    this._common.$pushDirForBiblePageReordering.subscribe(res => {\n      this.pdfFileList.length = 0;\n      this.docMergePdf.length = 0;\n      this.pdfFileList = res;\n      this.filteredPdfFileList = this.pdfFileList;\n      res.forEach(data => {\n        this.docMergePdf.push({\n          path: data.path + '/' + data.name,\n          isSelected: false\n        });\n      });\n    });\n\n    this._common.$hideExternalViewer.subscribe(res => {\n      this.showPdfViewer = false;\n      this.showCsvViewer = false;\n    });\n  }\n\n  dataChanged(val) {\n    console.log(\">>>>>>>>>>>>\", val); // autocomplete\n    // this.filteredOptions = this.myControl.valueChanges.pipe(\n    //   startWith(''),\n    //   map(value => this._filter(value || '')),\n    // );\n  }\n\n  _filter(value) {\n    const filterValue = value.toLowerCase();\n    return this.options.filter(option => option.toLowerCase().includes(filterValue));\n  }\n\n  addNotes() {\n    this.notes = true;\n  }\n\n  addTags() {\n    this.tag = true;\n  }\n\n  addKeywordFromInput(event) {\n    if (event.value) {\n      this.keywords.add(event.value);\n      event.chipInput.clear();\n    }\n  }\n\n  removeKeyword(keyword) {\n    this.keywords.delete(keyword);\n  }\n\n  ngAfterViewInit() {\n    this._common.containerRef = this.directoryContainerElem.nativeElement;\n  } // ***********************************Shortcut Keys*******************************\n\n\n  onSelectHandler(evt) {\n    if ((evt.ctrlKey || evt.metaKey) && evt.keyCode == 65) {\n      this.selectAllFoldersAndFiles();\n      this.selectAllGFolders();\n    } else if ((evt.ctrlKey || evt.metaKey) && evt.keyCode == 90) {\n      this.unselectAllFoldersAndFiles();\n      this.unselectAllGFolders();\n    }\n  }\n\n  onPopState(event) {\n    this.showPdfViewer = false;\n    this.showCsvViewer = false;\n  } // ***********************************Shortcut Keys*******************************\n  // ***********************************Other Features*******************************\n  //change folders,files view\n\n\n  changeView() {\n    this.largeView = !this.largeView;\n    this.listViewVal = false;\n\n    this._common.$largView.next(this.largeView);\n\n    this._common.$listView.next(this.listViewVal);\n\n    console.log(this.listViewVal, this.largeView);\n  }\n\n  showEmptyDirectory() {\n    return this.filteredFolderList.length === 0 && this.filteredFileList.length === 0 && this.gfilteredFolderList.length === 0;\n  }\n\n  toggleCsvTable() {\n    if (this.featureOptions.page_pattern === 'csv') {\n      this.showCsvTable = true;\n    } else {\n      this.showCsvTable = false;\n    }\n  }\n\n  resetFeatureSelection() {\n    this._common.$unselectPdfCsvDirectory.next('');\n\n    this._common.$unselectFeatureCheckbox.next('');\n\n    this._common.$featureName.next('');\n  }\n\n  resetDirectoryFilter() {\n    this.pdfPage = 1;\n    this.pdfPageSize = parseInt(localStorage.getItem('pdffolder')) || 100;\n    this.gpdfPage = 1;\n    this.gpdfPageSize = parseInt(localStorage.getItem('gpdffolder')) || 100;\n    this.pdfFilePage = 1;\n    this.pdfFilePageSize = parseInt(localStorage.getItem('pdffile')) || 100;\n    this.csvPage = 1;\n    this.csvPageSize = parseInt(localStorage.getItem('csvfolder')) || 100;\n    this.csvFilepage = 1;\n    this.csvFilePageSize = parseInt(localStorage.getItem('csvfile')) || 100;\n  }\n\n  resetFeatureSelectAll() {\n    this.selectAllPdfFoldersCheck = false;\n    this.gselectAllPdfFoldersCheck = false;\n    this.selectAllPdfFilesCheck = false;\n    this.selectAllCsvFoldersCheck = false;\n    this.selectAllCsvFilesCheck = false;\n  }\n\n  resetDirectoryFilterPageSize() {\n    this.pageSize = parseInt(localStorage.getItem('folder')) || 100;\n    this.gpageSize = parseInt(localStorage.getItem('gfolder')) || 100;\n    this.filePageSize = parseInt(localStorage.getItem('file')) || 100;\n  }\n\n  resetFeatureOptions() {\n    this.featureOptions = {\n      search_on: 'Google',\n      word_list: [],\n      approx_search: false,\n      top_lines: '',\n      password: '',\n      del_attr_list: '',\n      rule_file_path: '',\n      page_pattern: '',\n      page_list_or_csv: '',\n      location: '',\n      img_aug_customval: '',\n      image_path: '',\n      watermark_string: '',\n      color: 'red',\n      opacity: '',\n      strokes: '',\n      bookmark_word_or_csv: '',\n      input_paths: [],\n      pattern_file: '',\n      redactPersonalInfo: {\n        email: false,\n        phone: false,\n        people: false,\n        address: false,\n        date_of_birth: false,\n        account_number: false,\n        pps_number: false\n      },\n      number_of_groups: '',\n      anchor_text: '',\n      region_size: '',\n      height: '',\n      split_pattern: '',\n      input_page_list: '',\n      order_list: [],\n      doc_merge_filename: ''\n    };\n  } // store filter page size when change\n\n\n  storeFolderPageSize() {\n    localStorage.setItem('folder', this.pageSize.toString());\n  }\n\n  storegFolderPageSize() {\n    localStorage.setItem('gfolder', this.gpageSize.toString());\n  }\n\n  storeFilePageSize() {\n    localStorage.setItem('file', this.filePageSize.toString());\n  }\n\n  storePdfFolderPageSize() {\n    localStorage.setItem('pdffolder', this.pdfPageSize.toString());\n  }\n\n  storegPdfFolderPageSize() {\n    localStorage.setItem('gpdffolder', this.gpdfPageSize.toString());\n  }\n\n  storePdfFilePageSize() {\n    localStorage.setItem('pdffile', this.pdfFilePageSize.toString());\n  }\n\n  storeCsvFolderPageSize() {\n    localStorage.setItem('csvfolder', this.csvPageSize.toString());\n  }\n\n  storeCsvFilePageSize() {\n    localStorage.setItem('csvfile', this.csvFilePageSize.toString());\n  }\n\n  fullscreen() {\n    console.log(this.directoryContainerElem);\n\n    if (this.directoryContainerElem.nativeElement.requestFullscreen) {\n      this.directoryContainerElem.nativeElement.requestFullscreen();\n    } else if (this.directoryContainerElem.nativeElement.webkitRequestFullscreen) {\n      /* Safari */\n      this.directoryContainerElem.nativeElement.webkitRequestFullscreen();\n    } else if (this.directoryContainerElem.nativeElement.msRequestFullscreen) {\n      /* IE11 */\n      this.directoryContainerElem.nativeElement.msRequestFullscreen();\n    }\n  }\n\n  closeFullscreen() {\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } //@ts-ignore\n    else if (document.webkitExitFullscreen) {\n      /* Safari */\n      //@ts-ignore\n      document.webkitExitFullscreen();\n    } //@ts-ignore\n    else if (document.msExitFullscreen) {\n      /* IE11 */\n      //@ts-ignore\n      document.msExitFullscreen();\n    }\n  }\n\n  getTreeNode() {\n    this._common.$foldersTreeData.next({});\n\n    let rootDir = {};\n    let path = this.base_path + this._auth.org_name + '/' + this._auth.user_name;\n\n    this._directory.getChildNodeData(path).subscribe(res => {\n      // console.log(res);\n      console.log(\"parant node response\", res.res_data.jsonData);\n      rootDir = {\n        \"name\": this._auth.user_name,\n        \"id\": 0,\n        \"path\": this.base_path + this._auth.org_name + '/' + this._auth.user_name,\n        \"total_count\": res.res_data.jsonData.total_count,\n        \"type\": \"directory\",\n        \"expanded\": false\n      };\n      console.log(\"parant node created\", res.res_data.jsonData);\n\n      this._common.$foldersTreeData.next(rootDir);\n    });\n  }\n\n  showTreeView() {\n    this._common.$showTree.next(true);\n\n    this._common.$showFolderTree.next(false);\n\n    this._common.$showFeatureList.next(false);\n  }\n\n  listView() {\n    this.listViewVal = !this.listViewVal;\n\n    this._common.$listView.next(this.listViewVal);\n\n    this.largeView = false;\n\n    this._common.$largView.next(this.largeView);\n\n    console.log(\"list i input\", this.listViewVal, this.largeView);\n  }\n\n  changeDirNameMode() {\n    let nameMode = localStorage.getItem(\"namemode\") || \"short\";\n\n    if (nameMode === \"short\") {\n      localStorage.setItem(\"namemode\", \"full\");\n\n      this._common.$nameMode.next('full');\n    } else {\n      localStorage.setItem(\"namemode\", \"short\");\n\n      this._common.$nameMode.next('short');\n    }\n  }\n\n  listDirectories(path = \"\", externalpath = '') {\n    console.log(\"list dir path is \" + path + \"externalpath\" + externalpath);\n    this.showFetchDirSpinner = true;\n    this.folderList.length = 0;\n    this.gfolderList.length = 0;\n    this.gfilteredFolderList.length = 0;\n    this.fileList.length = 0;\n    this.pdfFolderList.length = 0;\n    this.gpdfFolderList.length = 0;\n    this.pdfFileList.length = 0;\n    this.docMergePdf.length = 0;\n    this.csvFolderList.length = 0;\n    this.csvFileList.length = 0;\n    this.filteredFolderList.length = 0;\n    this.filteredFileList.length = 0;\n    this.imageFileList.length = 0;\n    this.filteredImageFileList.length = 0;\n    this.allFolderNames.length = 0;\n    let dir_path = this.base_path + this._auth.org_name + '/' + this._auth.user_name;\n    let nameMode = localStorage.getItem(\"namemode\");\n\n    this._common.$nameMode.next(nameMode);\n\n    this.showBuildDeliveryUi = false; // let lastPath=this.pathList[this.pathList.length-1]\n    //   let showBible=lastPath.includes('Delivery Bible')\n    //   console.log(\"is bible render\", this.pathList,showBible)\n\n    let showBible = this.pathList.some(path => {\n      return path.includes('Delivery Bible');\n    });\n\n    if (showBible) {\n      this.varifyOptions = true;\n    } else {\n      this.varifyOptions = false;\n    }\n\n    console.log(\"?????????????\", this.showFilesMove, showBible && this.pathList[this.pathList.length - 1].includes(\"Delivery Bible\") || this.showFilesMove && this.pathList[this.pathList.length - 2].includes(\"Delivery Bible\")); // if (this.showFilesMove) {\n    //   if(showBible && this.pathList[this.pathList.length - 2].includes(\"Delivery Bible\")){\n    //   this._common.$showFileMov.next(true)\n    //     this.showBuildDeliveryUi = true;\n    //   this.showFetchDirSpinner = false;\n    //   console.log(\">>>>>>>path list\", this.pathList)\n    //   return;\n    //   }\n    // } else {\n    //   this.showBuildDeliveryUi = false;\n    //   this._common.$showFileMov.next(false)\n    // }\n    // if (showBible && this.pathList.length <= 4) {\n\n    if (showBible && this.pathList[this.pathList.length - 1].includes(\"Delivery Bible\")) {\n      this.showBuildDeliveryUi = true;\n      this.showFetchDirSpinner = false;\n      console.log(\">>>>>>>path list\", this.pathList);\n      return;\n    } // else if (showBible && this.pathList[this.pathList.length - 2].includes(\"Delivery Bible\")) {\n    //   this.showBuildDeliveryUi = true;\n    //   this.showFetchDirSpinner = false;\n    //   this._common.$showFileMov.next(true)\n    //   console.log(\">>>>>>>path list\", this.pathList)\n    //   return;\n    // }\n    else {\n      this.showBuildDeliveryUi = false;\n    }\n\n    console.log(this.showBuildDeliveryUi);\n    let gdir_path = '';\n\n    if (this.base_path === 'Input_Folder/') {\n      gdir_path = 'G_input/' + this._auth.org_name + '/' + this._auth.user_name;\n    } else if (this.base_path === 'Output_Folder/') {\n      gdir_path = 'G_output/' + this._auth.org_name + '/' + this._auth.user_name;\n    } else if (this.base_path === 'Req_Output_Folder/') {\n      gdir_path = 'G_Req_Output_Folder/' + this._auth.org_name + '/' + this._auth.user_name;\n    } else if (this.base_path === 'Err_Info_Folder/') {\n      gdir_path = 'G_Err_Info_Folder/' + this._auth.org_name + '/' + this._auth.user_name;\n    }\n\n    if (externalpath != '') {\n      let dir_path = externalpath.split('/').slice(4); // dir_path.pop()\n\n      console.log(\"external dir path is\", dir_path.join('/'));\n      let external = dir_path.join('/'); // let path=dir_path.substring(0, dir_path.length - 1);\n      // path=dir_path\n      // console.log(\"external dir path\",path)\n\n      this.showExternalFolders(external);\n    } else if (this.pathList.length > 0) {\n      dir_path = dir_path + '/' + this.pathList.join('/');\n      gdir_path = gdir_path + '/' + this.pathList.join('/');\n      this.createFoldersAndFiles(dir_path, gdir_path);\n    } else {\n      if (path) {\n        dir_path = dir_path + \"/\" + path;\n        gdir_path = gdir_path + \"/\" + path;\n      }\n\n      this.createFoldersAndFiles(dir_path, gdir_path);\n    }\n  } // listexternalDirect\n\n\n  showExternalFolders(path) {\n    let gfolderInfo = [];\n    let folderInfo;\n    this.getExternalFolder(path).subscribe(res => {\n      console.log(\"external folder res \", res);\n      this.csvFilesForMetadataUpdation = res.res_data.csv_path_list;\n      folderInfo = res.res_data.file_folder_info;\n      gfolderInfo = res.res_g_data.g_path_list;\n\n      for (let i = 0; i < folderInfo.length; i++) {\n        if (folderInfo[i].is_directory === true) {\n          this.allFolderNames.push(folderInfo[i].name);\n          folderInfo[i]['directory'] = 'Folder';\n          this.folderList.push(folderInfo[i]);\n          this.segregatePdfCsvFolders(folderInfo[i]);\n        } else {\n          if (folderInfo[i].name == \"myfile.txt\") {\n            continue;\n          }\n\n          let fileName = folderInfo[i].name.split('.');\n          fileName.pop();\n          this.allFileNames.push(fileName.join());\n          folderInfo[i]['directory'] = 'File';\n          this.fileList.push(folderInfo[i]);\n          this.segregatePdfCsvFiles(folderInfo[i]);\n        }\n      }\n\n      for (let i = 0; i < gfolderInfo.length; i++) {\n        if (gfolderInfo[i].is_directory === true) {\n          this.allFolderNames.push(gfolderInfo[i].name);\n          gfolderInfo[i]['directory'] = 'Folder';\n          this.gfolderList.push(gfolderInfo[i]);\n          this.segregateGPdfFolders(gfolderInfo[i]);\n        } else {\n          let fileName = gfolderInfo[i].name.split('.');\n          fileName.pop();\n          this.allFileNames.push(fileName.join());\n          gfolderInfo[i]['directory'] = 'File';\n          this.fileList.push(gfolderInfo[i]);\n          this.segregatePdfCsvFiles(gfolderInfo[i]);\n        }\n      }\n\n      this.searchFoldersAndFiles();\n      this.showFetchDirSpinner = false;\n    });\n  }\n\n  getExternalFolder(path) {\n    let formData = new FormData();\n    formData.append(\"user_id\", this._auth.user_id);\n    formData.append(\"is_external\", \"true\");\n    formData.append(\"dir_path\", path);\n    return this.httpClient.post('/filestorage_features/folder_and_files/', formData);\n  }\n\n  createFoldersAndFiles(path, gpath) {\n    this._directory.listDirectories(path, gpath).subscribe(res => {\n      console.log(\"directorys\", res, path, gpath);\n      let folderInfo = [];\n      let gfolderInfo = [];\n\n      if (path.includes('External_Assigned')) {\n        gfolderInfo = res.res_g_data.file_folder_info;\n      } else {\n        this.csvFilesForMetadataUpdation = res.res_data.csv_path_list;\n        folderInfo = res.res_data.file_folder_info;\n        gfolderInfo = res.res_g_data.g_path_list;\n      } // const index = folderArray.findIndex(obj => obj.name == value);\n\n\n      for (let i = 0; i < folderInfo.length; i++) {\n        if (folderInfo[i].is_directory === true) {\n          this.allFolderNames.push(folderInfo[i].name);\n          folderInfo[i]['directory'] = 'Folder';\n          this.folderList.push(folderInfo[i]);\n          this.segregatePdfCsvFolders(folderInfo[i]);\n        } else {\n          if (folderInfo[i].name == \"myfile.txt\") {\n            continue;\n          }\n\n          let fileName = folderInfo[i].name.split('.');\n          fileName.pop();\n          this.allFileNames.push(fileName.join());\n          folderInfo[i]['directory'] = 'File';\n          this.fileList.push(folderInfo[i]);\n          this.segregatePdfCsvFiles(folderInfo[i]);\n        }\n      }\n\n      for (let i = 0; i < gfolderInfo.length; i++) {\n        if (gfolderInfo[i].is_directory === true) {\n          this.allFolderNames.push(gfolderInfo[i].name);\n          gfolderInfo[i]['directory'] = 'Folder';\n          this.gfolderList.push(gfolderInfo[i]);\n          this.segregateGPdfFolders(gfolderInfo[i]);\n        } else {\n          let fileName = gfolderInfo[i].name.split('.');\n          fileName.pop();\n          this.allFileNames.push(fileName.join());\n          gfolderInfo[i]['directory'] = 'File';\n          this.fileList.push(gfolderInfo[i]);\n          this.segregatePdfCsvFiles(gfolderInfo[i]);\n        }\n      }\n\n      this.searchFoldersAndFiles();\n      this.showFetchDirSpinner = false; // var image = new Image();\n      // image.src = \"assets/images/filetypepdf.png\";\n      // console.log(\"directorys\", this.fileList);\n    });\n  }\n\n  segregatePdfCsvFolders(data) {\n    if (data.type.toLowerCase() === 'pdf') {\n      let folderpath = data.path + '/' + data.name;\n\n      if (this.selectedPdfPaths.includes(folderpath)) {\n        data.isSelected = true;\n      } else {\n        data.isSelected = false;\n      }\n\n      this.pdfFolderList.push(Object.assign({}, data));\n    } else if (this.excelExtensionList.includes(data.type.toLowerCase())) {\n      let folderpath = data.path + '/' + data.name;\n\n      if (this.selectedCsvPaths.includes(folderpath)) {\n        data.isSelected = true;\n      } else {\n        data.isSelected = false;\n      }\n\n      this.csvFolderList.push(Object.assign({}, data));\n    }\n  }\n\n  segregateGPdfFolders(data) {\n    // if (data.type.toLowerCase() === 'pdf') {\n    // }\n    let folderpath = data.path + '/' + data.name;\n\n    if (this.selectedPdfPaths.includes(folderpath)) {\n      data.isSelected = true;\n    } else {\n      data.isSelected = false;\n    }\n\n    this.gpdfFolderList.push(Object.assign({}, data));\n  }\n\n  segregatePdfCsvFiles(data) {\n    if (data.type.toLowerCase() === 'pdf') {\n      let fileData = Object.assign({}, data);\n      let filepath = fileData.path + '/' + fileData.name;\n\n      if (this.selectedPdfPaths.includes(filepath)) {\n        fileData.isSelected = true;\n      } else {\n        fileData.isSelected = false;\n      }\n\n      this.pdfFileList.push(fileData);\n\n      if (!this.docMergeSelectedPdf.includes(fileData.path + '/' + fileData.name)) {\n        this.docMergePdf.push({\n          path: fileData.path + '/' + fileData.name,\n          isSelected: false\n        });\n      }\n    } else if (this.excelExtensionList.includes(data.type.toLowerCase())) {\n      let fileData = Object.assign({}, data);\n      let filepath = fileData.path + '/' + fileData.name;\n\n      if (this.selectedCsvPaths.includes(filepath)) {\n        fileData.isSelected = true;\n      } else {\n        fileData.isSelected = false;\n      }\n\n      this.csvFileList.push(fileData);\n    } else if (this.imageExtensionList.includes(data.type.toLowerCase())) {\n      this.imageFileList.push(Object.assign({}, data));\n    }\n  }\n\n  fillDocMergePdf() {\n    this.docMergePdf.length = 0;\n    this.filteredPdfFileList.forEach(fileData => {\n      if (!this.docMergePdf.includes(fileData.path + '/' + fileData.name)) {\n        this.docMergePdf.push({\n          path: fileData.path + '/' + fileData.name,\n          isSelected: false\n        });\n      }\n    });\n  } // ***********************************List Directories*******************************\n  // ***********************************For Selecting And Downloading Files*******************************\n  // this.singleStepFeatures.includes(this.selectedFeature)\n\n\n  selectDirectory(directoryType) {\n    let dirType = directoryType[0];\n    let dirName = directoryType[1];\n    let dirPath = directoryType[2];\n    console.log(directoryType);\n\n    if (dirType === \"Folder\" && this.showAllFoldersFiles) {\n      this.selectFolder(dirName, dirPath);\n    } else if (dirType === \"File\" && this.showAllFoldersFiles) {\n      this.selectFile(dirName, dirPath);\n    } else if (dirType === \"Folder\" && this.selectedFeature && this.showAllPdfFoldersFiles === true) {\n      this.selectPdfFolder(dirName, dirPath);\n    } else if (dirType === \"File\" && this.selectedFeature && this.showAllPdfFoldersFiles === true) {\n      this.selectPdfFile(dirName);\n    } else if (dirType === \"Folder\" && this.selectedFeature && this.showAllCsvFoldersFiles === true) {\n      this.selectCsvFolder(dirName);\n    } else if (dirType === \"File\" && this.selectedFeature && this.showAllCsvFoldersFiles === true) {\n      console.log(dirName);\n      this.selectCsvFile(dirName);\n    } else if (dirType === \"File\" && this.selectedFeature && this.showImageFile === true) {\n      this.selectImageFile(dirName);\n    }\n  }\n\n  selectPdfFolder(dirName, dirPath) {\n    if (this.selectedFeature === 'Document Classification') {\n      this.selectSinglePdfFolder(dirName);\n      this.selectSingleGPdfFolder(dirName);\n    } // else if (this.selectedFeature === 'Avionics listing') {\n    //   this.selectTwoPdfFolder();\n    // }\n    else {\n      if (dirPath.includes('G_input')) {\n        let dirIndex = this.gfilteredPdfFolderList.findIndex(res => res.name === dirName);\n        this.gfilteredPdfFolderList[dirIndex].isSelected = !this.gfilteredPdfFolderList[dirIndex].isSelected;\n        this.addRemoveGFolderPdfPaths(dirIndex);\n      } else {\n        let dirIndex = this.filteredPdfFolderList.findIndex(res => res.name === dirName);\n        this.filteredPdfFolderList[dirIndex].isSelected = !this.filteredPdfFolderList[dirIndex].isSelected;\n        this.addRemoveFolderPdfPaths(dirIndex);\n      }\n    }\n  }\n\n  selectPdfFile(dirName) {\n    if (this.selectedFeature === 'Document Classification' || this.selectedFeature === 'Page Reordering') {\n      this.selectSinglePdfFile(dirName);\n    } else {\n      let dirIndex = this.filteredPdfFileList.findIndex(res => res.name === dirName);\n      this.filteredPdfFileList[dirIndex].isSelected = !this.filteredPdfFileList[dirIndex].isSelected;\n      this.addRemoveFilePdfPaths(dirIndex);\n    }\n  }\n\n  addRemoveFilePdfPaths(dirIndex) {\n    let isPresent = this.selectedPdfPaths.some(res => {\n      return res === this.filteredPdfFileList[dirIndex].path + '/' + this.filteredPdfFileList[dirIndex].name;\n    });\n\n    if (!isPresent && this.filteredPdfFileList[dirIndex].isSelected) {\n      if (this.selectedFeature === 'Document Classification' || this.selectedFeature === 'Page Reordering') {\n        this.selectedPdfPaths = [];\n        this.selectedPdfPaths.push(this.filteredPdfFileList[dirIndex].path + '/' + this.filteredPdfFileList[dirIndex].name);\n      } else {\n        this.selectedPdfPaths.push(this.filteredPdfFileList[dirIndex].path + '/' + this.filteredPdfFileList[dirIndex].name);\n      }\n    } else {\n      if (this.selectedFeature === 'Document Classification') {\n        this.selectedPdfPaths.splice(0, 1);\n      } else {\n        let dirPathIndex = this.selectedPdfPaths.findIndex(res => res === this.filteredPdfFileList[dirIndex].path + '/' + this.filteredPdfFileList[dirIndex].name);\n        this.selectedPdfPaths.splice(dirPathIndex, 1);\n      }\n    }\n\n    console.log(this.selectedPdfPaths);\n  }\n\n  addRemoveFileCsvPaths(dirIndex) {\n    console.log(dirIndex);\n    let isPresent = this.selectedCsvPaths.some(res => {\n      return res === this.filteredCsvFileList[dirIndex].path + '/' + this.filteredCsvFileList[dirIndex].name;\n    });\n\n    if (!isPresent && this.filteredCsvFileList[dirIndex].isSelected) {\n      if (this.selectedFeature === 'Document Classification') {\n        this.selectedCsvPaths = [];\n        this.selectedCsvPaths.push(this.filteredCsvFileList[dirIndex].path + '/' + this.filteredCsvFileList[dirIndex].name);\n      } else {\n        this.selectedCsvPaths.push(this.filteredCsvFileList[dirIndex].path + '/' + this.filteredCsvFileList[dirIndex].name);\n      }\n    } else {\n      if (this.selectedFeature === 'Document Classification') {\n        this.selectedCsvPaths.splice(0, 1);\n      } else {\n        let dirPathIndex = this.selectedCsvPaths.findIndex(res => res === this.filteredCsvFileList[dirIndex].path + '/' + this.filteredCsvFileList[dirIndex].name);\n        this.selectedCsvPaths.splice(dirPathIndex, 1);\n      }\n    }\n\n    console.log(this.selectedCsvPaths);\n  }\n\n  addRemoveFolderCsvPaths(dirIndex) {\n    console.log(dirIndex);\n    let isPresent = this.selectedCsvPaths.some(res => {\n      return res === this.filteredCsvFolderList[dirIndex].path + '/' + this.filteredCsvFolderList[dirIndex].name;\n    });\n\n    if (!isPresent && this.filteredCsvFolderList[dirIndex].isSelected) {\n      if (this.selectedFeature === 'Document Classification') {\n        this.selectedCsvPaths = [];\n        this.selectedCsvPaths.push(this.filteredCsvFolderList[dirIndex].path + '/' + this.filteredCsvFolderList[dirIndex].name);\n      } else {\n        this.selectedCsvPaths.push(this.filteredCsvFolderList[dirIndex].path + '/' + this.filteredCsvFolderList[dirIndex].name);\n      }\n    } else {\n      if (this.selectedFeature === 'Document Classification') {\n        this.selectedCsvPaths.splice(0, 1);\n      } else {\n        let dirPathIndex = this.selectedCsvPaths.findIndex(res => res === this.filteredCsvFolderList[dirIndex].path + '/' + this.filteredCsvFolderList[dirIndex].name);\n        this.selectedCsvPaths.splice(dirPathIndex, 1);\n      }\n    }\n\n    console.log(this.selectedCsvPaths);\n  }\n\n  addRemoveFolderPdfPaths(dirIndex) {\n    let isPresent = this.selectedPdfPaths.some(res => {\n      return res === this.filteredPdfFolderList[dirIndex].path + '/' + this.filteredPdfFolderList[dirIndex].name;\n    });\n\n    if (!isPresent && this.filteredPdfFolderList[dirIndex].isSelected) {\n      if (this.selectedFeature === 'Document Classification') {\n        this.selectedPdfPaths = [];\n        this.selectedPdfPaths.push(this.filteredPdfFolderList[dirIndex].path + '/' + this.filteredPdfFolderList[dirIndex].name);\n      } else {\n        this.selectedPdfPaths.push(this.filteredPdfFolderList[dirIndex].path + '/' + this.filteredPdfFolderList[dirIndex].name);\n      }\n    } else {\n      if (this.selectedFeature === 'Document Classification') {\n        this.selectedPdfPaths.splice(0, 1);\n      } else {\n        let dirPathIndex = this.selectedPdfPaths.findIndex(res => res === this.filteredPdfFolderList[dirIndex].path + '/' + this.filteredPdfFolderList[dirIndex].name);\n        this.selectedPdfPaths.splice(dirPathIndex, 1);\n      }\n    }\n\n    console.log(this.selectedPdfPaths);\n  }\n\n  addRemoveGFolderPdfPaths(dirIndex) {\n    let isPresent = this.selectedPdfPaths.some(res => {\n      return res === this.gfilteredPdfFolderList[dirIndex].path + '/' + this.gfilteredPdfFolderList[dirIndex].name;\n    });\n\n    if (!isPresent && this.gfilteredPdfFolderList[dirIndex].isSelected) {\n      if (this.selectedFeature === 'Document Classification') {\n        this.selectedPdfPaths = [];\n        this.selectedPdfPaths.push(this.gfilteredPdfFolderList[dirIndex].path + '/' + this.gfilteredPdfFolderList[dirIndex].name);\n      } else {\n        this.selectedPdfPaths.push(this.gfilteredPdfFolderList[dirIndex].path + '/' + this.gfilteredPdfFolderList[dirIndex].name);\n      }\n    } else {\n      if (this.selectedFeature === 'Document Classification') {\n        this.selectedPdfPaths.splice(0, 1);\n      } else {\n        let dirPathIndex = this.selectedPdfPaths.findIndex(res => res === this.gfilteredPdfFolderList[dirIndex].path + '/' + this.gfilteredPdfFolderList[dirIndex].name);\n        this.selectedPdfPaths.splice(dirPathIndex, 1);\n      }\n    }\n\n    console.log(this.selectedPdfPaths);\n  }\n\n  selectSinglePdfFolder(dirName) {\n    for (let i = 0; i < this.filteredPdfFolderList.length; i++) {\n      if (this.filteredPdfFolderList[i].name === dirName) {\n        this.filteredPdfFolderList[i].isSelected = true;\n        this.addRemoveFolderPdfPaths(i);\n      } else {\n        this.filteredPdfFolderList[i].isSelected = false;\n      }\n    }\n  } // selectTwoPdfFolder() {\n  //   console.log(\"selected two pdf folder\");\n  //   for (let i = 0; i < this.gfilteredPdfFolderList.length; i++) {\n  //     console.log(this.gfilteredPdfFolderList[i].path);\n  //     if ((this.gfilteredPdfFolderList[i].path !== this.selectedPdfPaths[0] || this.gfilteredPdfFolderList[i].path !== this.selectedPdfPaths[1]) && this.gfilteredPdfFolderList[i].isSelected) {\n  //       this.gfilteredPdfFolderList[i].isSelected = true;\n  //       this.addRemoveGFolderPdfPaths(i);\n  //     } else {\n  //       this.gfilteredPdfFolderList[i].isSelected = false;\n  //       this.selectedPdfPaths.splice(1, 1);\n  //     }\n  //   }\n  // }\n\n\n  selectSingleGPdfFolder(dirName) {\n    for (let i = 0; i < this.gfilteredPdfFolderList.length; i++) {\n      if (this.gfilteredPdfFolderList[i].name === dirName) {\n        this.gfilteredPdfFolderList[i].isSelected = true;\n        this.addRemoveGFolderPdfPaths(i);\n      } else {\n        this.gfilteredPdfFolderList[i].isSelected = false;\n      }\n    }\n  }\n\n  selectSinglePdfFile(dirName) {\n    for (let i = 0; i < this.filteredPdfFileList.length; i++) {\n      if (this.filteredPdfFileList[i].name === dirName) {\n        this.filteredPdfFileList[i].isSelected = true;\n        this.addRemoveFilePdfPaths(i);\n\n        if (this.selectedFeature === 'Page Reordering') {\n          this.selectedPdfPaths[0] ? this.readPdfFromServer(this.selectedPdfPaths[0]) : this.pdfurl = '';\n        }\n      } else {\n        this.filteredPdfFileList[i].isSelected = false;\n      }\n    }\n  }\n\n  selectCsvFolder(dirName) {\n    let dirIndex = this.filteredCsvFolderList.findIndex(res => res.name === dirName);\n    this.filteredCsvFolderList[dirIndex].isSelected = !this.filteredCsvFolderList[dirIndex].isSelected;\n    this.addRemoveFolderCsvPaths(dirIndex);\n  }\n\n  selectCsvFile(dirName) {\n    let dirIndex = this.filteredCsvFileList.findIndex(res => res.name === dirName);\n    this.filteredCsvFileList[dirIndex].isSelected = !this.filteredCsvFileList[dirIndex].isSelected;\n    console.log(dirName);\n    this.addRemoveFileCsvPaths(dirIndex);\n  }\n\n  selectImageFile(dirName) {\n    for (let i = 0; i < this.filteredImageFileList.length; i++) {\n      if (this.filteredImageFileList[i].name === dirName) {\n        this.filteredImageFileList[i].isSelected = true;\n      } else {\n        this.filteredImageFileList[i].isSelected = false;\n      }\n    }\n  }\n\n  selectFolder(dirName, dirPath) {\n    let dirPathName = dirPath.split('/')[0];\n\n    if (dirPathName === 'G_input') {\n      let dirIndex = this.gfilteredFolderList.findIndex(res => res.name === dirName);\n      this.gfilteredFolderList[dirIndex].isSelected = !this.gfilteredFolderList[dirIndex].isSelected;\n    } else {\n      let dirIndex = this.filteredFolderList.findIndex(res => res.name === dirName);\n      this.filteredFolderList[dirIndex].isSelected = !this.filteredFolderList[dirIndex].isSelected;\n    }\n  }\n\n  selectFile(dirName, dirPath) {\n    let dirPathName = dirPath.split('/')[0];\n    let dirIndex = this.filteredFileList.findIndex(res => res.name === dirName);\n    this.filteredFileList[dirIndex].isSelected = !this.filteredFileList[dirIndex].isSelected;\n  }\n\n  selectAllFolder() {\n    if (this.selectAllFoldersCheck) {\n      for (let i = 0; i < this.filteredFolderList.length; i++) {\n        this.filteredFolderList[i].isSelected = true;\n      }\n    } else {\n      for (let i = 0; i < this.filteredFolderList.length; i++) {\n        this.filteredFolderList[i].isSelected = false;\n      }\n    }\n  }\n\n  selectAllGFolder() {\n    if (this.gselectAllFoldersCheck) {\n      for (let i = 0; i < this.gfilteredFolderList.length; i++) {\n        this.gfilteredFolderList[i].isSelected = true;\n      }\n    } else {\n      for (let i = 0; i < this.gfilteredFolderList.length; i++) {\n        this.gfilteredFolderList[i].isSelected = false;\n      }\n    }\n  }\n\n  selectAllFile() {\n    if (this.selectAllFilesCheck) {\n      for (let i = 0; i < this.filteredFileList.length; i++) {\n        this.filteredFileList[i].isSelected = true;\n      }\n    } else {\n      for (let i = 0; i < this.filteredFileList.length; i++) {\n        this.filteredFileList[i].isSelected = false;\n      }\n    }\n  }\n\n  selectAllPdfFolder() {\n    if (this.selectAllPdfFoldersCheck) {\n      for (let i = 0; i < this.filteredPdfFolderList.length; i++) {\n        this.filteredPdfFolderList[i].isSelected = true;\n        this.addRemoveFolderPdfPaths(i);\n      }\n    } else {\n      for (let i = 0; i < this.filteredPdfFolderList.length; i++) {\n        this.filteredPdfFolderList[i].isSelected = false;\n        this.addRemoveFolderPdfPaths(i);\n      }\n    }\n  }\n\n  selectAllGPdfFolder() {\n    if (this.gselectAllPdfFoldersCheck) {\n      for (let i = 0; i < this.gfilteredPdfFolderList.length; i++) {\n        this.gfilteredPdfFolderList[i].isSelected = true;\n        this.addRemoveGFolderPdfPaths(i);\n      }\n    } else {\n      for (let i = 0; i < this.gfilteredPdfFolderList.length; i++) {\n        this.gfilteredPdfFolderList[i].isSelected = false;\n        this.addRemoveGFolderPdfPaths(i);\n      }\n    }\n  }\n\n  selectAllCsvFolder() {\n    if (this.selectAllCsvFoldersCheck) {\n      for (let i = 0; i < this.filteredCsvFolderList.length; i++) {\n        this.filteredCsvFolderList[i].isSelected = true;\n      }\n    } else {\n      for (let i = 0; i < this.filteredCsvFolderList.length; i++) {\n        this.filteredCsvFolderList[i].isSelected = false;\n      }\n    }\n  }\n\n  selectAllPdfFile() {\n    this.docMergeSelectedPdf = [];\n\n    if (this.selectAllPdfFilesCheck) {\n      for (let i = 0; i < this.docMergePdf.length; i++) {\n        this.docMergeSelectedPdf.push(this.docMergePdf[i]);\n      }\n\n      for (let i = 0; i < this.filteredPdfFileList.length; i++) {\n        this.filteredPdfFileList[i].isSelected = true;\n        this.addRemoveFilePdfPaths(i);\n      }\n    } else {\n      for (let i = 0; i < this.filteredPdfFileList.length; i++) {\n        this.filteredPdfFileList[i].isSelected = false;\n        this.addRemoveFilePdfPaths(i);\n      }\n\n      this.docMergeSelectedPdf = [];\n    }\n  }\n\n  selectAllCsvFile() {\n    if (this.selectAllCsvFilesCheck) {\n      for (let i = 0; i < this.filteredCsvFileList.length; i++) {\n        this.filteredCsvFileList[i].isSelected = true;\n      }\n    } else {\n      for (let i = 0; i < this.filteredCsvFileList.length; i++) {\n        this.filteredCsvFileList[i].isSelected = false;\n      }\n    }\n  }\n\n  selectAllFoldersAndFiles() {\n    for (let i = 0; i < this.filteredFolderList.length; i++) {\n      this.filteredFolderList[i].isSelected = true;\n    }\n\n    for (let i = 0; i < this.filteredFileList.length; i++) {\n      this.filteredFileList[i].isSelected = true;\n    }\n  }\n\n  selectAllGFolders() {\n    for (let i = 0; i < this.gfilteredFolderList.length; i++) {\n      this.gfilteredFolderList[i].isSelected = true;\n    }\n  }\n\n  selectAllPdfFoldersAndFiles() {\n    for (let i = 0; i < this.filteredPdfFolderList.length; i++) {\n      this.filteredPdfFolderList[i].isSelected = true;\n    }\n\n    for (let i = 0; i < this.filteredPdfFileList.length; i++) {\n      this.filteredPdfFileList[i].isSelected = true;\n    }\n  }\n\n  selectAllCsvFoldersAndFiles() {\n    for (let i = 0; i < this.filteredCsvFolderList.length; i++) {\n      this.filteredCsvFolderList[i].isSelected = true;\n    }\n\n    for (let i = 0; i < this.filteredCsvFileList.length; i++) {\n      this.filteredCsvFileList[i].isSelected = true;\n    }\n  }\n\n  unselectAllFoldersAndFiles() {\n    for (let i = 0; i < this.filteredFolderList.length; i++) {\n      this.filteredFolderList[i].isSelected = false;\n    }\n\n    for (let i = 0; i < this.filteredFileList.length; i++) {\n      this.filteredFileList[i].isSelected = false;\n    }\n  }\n\n  unselectAllGFolders() {\n    for (let i = 0; i < this.gfilteredFolderList.length; i++) {\n      this.gfilteredFolderList[i].isSelected = false;\n    }\n  }\n\n  unselectAllPdfFoldersAndFiles() {\n    for (let i = 0; i < this.filteredPdfFolderList.length; i++) {\n      this.filteredPdfFolderList[i].isSelected = false;\n    }\n\n    for (let i = 0; i < this.filteredPdfFileList.length; i++) {\n      this.filteredPdfFileList[i].isSelected = false;\n    }\n  }\n\n  unselectAllGPdfFolders() {\n    for (let i = 0; i < this.gfilteredPdfFolderList.length; i++) {\n      this.gfilteredPdfFolderList[i].isSelected = false;\n    }\n  }\n\n  unselectAllCsvFoldersAndFiles() {\n    for (let i = 0; i < this.filteredCsvFolderList.length; i++) {\n      this.filteredCsvFolderList[i].isSelected = false;\n    }\n\n    for (let i = 0; i < this.filteredCsvFileList.length; i++) {\n      this.filteredCsvFileList[i].isSelected = false;\n    }\n  }\n\n  unselectAllImageFiles() {\n    for (let i = 0; i < this.filteredImageFileList.length; i++) {\n      this.filteredImageFileList[i].isSelected = false;\n    }\n  }\n\n  download() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let showBible = _this.pathList.some(path => {\n        return path.includes('Delivery Bible');\n      });\n\n      if (showBible) {\n        _this._common.$downloadBible.next(true);\n\n        return;\n      }\n\n      let downloadFolderList = _this.filteredFolderList.filter(res => res.isSelected === true);\n\n      let downloadFileList = _this.filteredFileList.filter(res => res.isSelected === true);\n\n      let folderPathList = [];\n      let filePathList = [];\n      downloadFolderList.map(res => folderPathList.push(res.path.slice(13) + '/' + res.name));\n      downloadFileList.map(res => filePathList.push(res.path.slice(13) + '/' + res.name)); // downloadFolderList.map(res => folderPathList.push(res.path+ '/' + res.name));\n      // downloadFileList.map(res => filePathList.push(res.path + '/' + res.name));\n\n      let downloadPathList = [...folderPathList, ...filePathList];\n      console.log(\"???????\", downloadPathList);\n\n      if (downloadPathList.length <= 0) {\n        _this._modal.showMsg(\"No File Selected To Download\", \"Error!\", \"error\");\n\n        return;\n      }\n\n      _this._directory.download(downloadPathList, _this.base_path).subscribe(res => {\n        _this.unselectAllFoldersAndFiles();\n\n        _this.unselectAllGFolders();\n\n        if (res.type === HttpEventType.DownloadProgress) {\n          _this._common.showDownloadModal = true;\n\n          _this._ngxService.stop();\n\n          const percentDone = Math.round(100 * res.loaded / res.total);\n          _this._common.downloadedData = res.loaded;\n          _this._common.totalDownloadFileSize = res.total;\n          _this._common.downloadProgress = percentDone;\n        }\n\n        if (res.type === HttpEventType.Response) {\n          _this._common.downloadComplete = true;\n\n          _this._FileSaverService.save(res.body, \"DocuExpertDoc\");\n        }\n      });\n    })();\n  } // ***********************************For Selecting And Downloading Files*******************************\n  // ***********************************For Searching Folders and Files*******************************\n\n\n  searchFoldersAndFiles() {\n    if (this.searchOption === \"All\") {\n      this.filteredFolderList = this.folderList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\n      this.gfilteredFolderList = this.gfolderList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\n      this.filteredFileList = this.fileList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\n      this.filteredPdfFolderList = this.pdfFolderList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\n      this.gfilteredPdfFolderList = this.gpdfFolderList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\n      this.filteredPdfFileList = this.pdfFileList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\n      this.filteredCsvFolderList = this.csvFolderList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\n      this.filteredCsvFileList = this.csvFileList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\n      this.showFolder = true;\n      this.showFile = true;\n      this.showPdfFolder = true;\n      this.showPdfFile = true;\n      this.showCsvFolder = true;\n      this.showCsvFile = true;\n    } else if (this.searchOption === \"Folders\") {\n      this.filteredFolderList = this.folderList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\n      this.gfilteredFolderList = this.gfolderList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\n      this.filteredPdfFolderList = this.pdfFolderList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\n      this.gfilteredPdfFolderList = this.gpdfFolderList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\n      this.filteredCsvFolderList = this.csvFolderList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\n      this.showFolder = true;\n      this.showFile = false;\n      this.showPdfFolder = true;\n      this.showPdfFile = false;\n      this.showCsvFolder = true;\n      this.showCsvFile = false;\n    } else if (this.searchOption === \"Files\") {\n      this.filteredFileList = this.fileList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\n      this.filteredPdfFileList = this.pdfFileList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\n      this.filteredCsvFileList = this.csvFileList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\n      this.showFolder = false;\n      this.showFile = true;\n      this.showPdfFolder = false;\n      this.showPdfFile = true;\n      this.showCsvFolder = false;\n      this.showCsvFile = true;\n    }\n  }\n\n  resetFoldersAndFiles() {\n    if (this.searchOption === \"All\") {\n      this.searchFoldersAndFiles();\n    } else if (this.searchOption === \"Folders\") {\n      this.filteredFileList = this.fileList;\n      this.filteredPdfFileList = this.pdfFileList;\n      this.filteredCsvFileList = this.csvFileList;\n      this.searchFoldersAndFiles();\n    } else if (this.searchOption === \"Files\") {\n      this.filteredFolderList = this.folderList;\n      this.filteredPdfFolderList = this.pdfFolderList;\n      this.filteredCsvFolderList = this.csvFolderList;\n      this.searchFoldersAndFiles();\n    }\n  } // ***********************************For Searching Folders and Files*******************************\n  // ***********************************When Double Click On Folders Path handling*******************************\n\n\n  openDirectory(directoryData) {\n    // if (directoryData.isVirtualfolder) {\n    //   this._modal.showMsg('Not allowed', 'Not Allowed', 'info');\n    //   return;\n    // }\n    console.log(\"LLLLLpath\", directoryData.path.split('/')[0]);\n    localStorage.setItem(\"advParent\", directoryData.path.split('/')[0]);\n    let externalpath = '';\n    console.log(\"directoryDatadirectoryDatadirectoryData\", directoryData);\n\n    if ('role' in directoryData) {\n      console.log(\"role is \", directoryData.role);\n\n      if (directoryData.role == 'user') {\n        this.isAccess = false;\n      } else {\n        this.isAccess = true;\n      }\n    }\n\n    this.pathList.push(directoryData.name);\n    this.page = 1;\n    this.filepage = 1;\n    this.searchTerm = '';\n    this.storeCurrentDirPath(); // var image = new Image();\n    // image.src = \"assets/images/filetypepdf.png\";\n\n    if (this.pathList.includes('External_Assigned') && this.pathList[this.pathList.length - 1] != \"External_Assigned\") {\n      externalpath = directoryData.help_str;\n      console.log(\"in external path is\", externalpath);\n    } else {\n      externalpath = '';\n      console.log(\"in external path is\", externalpath);\n    }\n\n    this.listDirectories(directoryData.name, externalpath);\n  }\n\n  goToPath(path, index) {\n    this.ispdfClicked = false;\n    this.issearchClicked = false;\n\n    this._common.$varifyFolder.next('');\n\n    console.log(\"path is/// \", path, index);\n\n    if (path.includes('External_Assigned')) {\n      this.isAccess = true;\n    }\n\n    if (path.includes('Delivery Bible')) {\n      localStorage.removeItem(\"buildBibleSubDir\");\n    }\n\n    let pathListLen = index + 1;\n\n    if (pathListLen !== this.pathList.length) {\n      this.pathList.splice(index + 1);\n      this.listDirectories();\n      this.storeCurrentDirPath();\n    } else {\n      console.log(\"current dir\");\n    }\n  }\n\n  goToMyFiles() {\n    this.pathList = [];\n    this.storeCurrentDirPath();\n    this.listDirectories();\n  }\n\n  storeCurrentDirPath() {\n    console.log(\"pathlist is\", this.pathList);\n\n    if (this.base_path === \"Input_Folder/\") {\n      localStorage.setItem('input', JSON.stringify(this.pathList));\n    } else if (this.base_path === \"Output_Folder/\") {\n      localStorage.setItem('output', JSON.stringify(this.pathList));\n    } else if (this.base_path === \"Req_Output_Folder/\") {\n      localStorage.setItem('req', JSON.stringify(this.pathList));\n    } else {\n      localStorage.setItem('err', JSON.stringify(this.pathList));\n    }\n  }\n\n  openFile(directory, mergePdf = false) {\n    if (mergePdf) {\n      // this.pdfFilePath = directory.path;\n      // this.showPdfViewer = true;\n      this.readPdfFromServer(directory.path);\n    } else if (directory.type.toLowerCase() === 'pdf') {\n      this.showFullPdfPath = directory.path + '/' + directory.name; // this.pdfFilePath = directory.path + '/' + directory.name;\n      // this.showPdfViewer = true;\n\n      this.showPdfAtRight(directory.path + '/' + directory.name);\n    } else if (directory.type.toLowerCase() === 'csv' || directory.type.toLowerCase() === 'xls' || directory.type.toLowerCase() === 'xlsx') {\n      this.csvFilePath = directory.path + '/' + directory.name;\n      this.showCsvViewer = true;\n    } else if (directory.type.toLowerCase() === 'txt') {\n      this.txtFilePath = directory.path + '/' + directory.name;\n      this.showTxtViewer = true;\n    } else {\n      this.imgFilePath = directory.path + '/' + directory.name;\n      this.showImgViewer = true;\n    }\n  }\n\n  showPdfAtRight(path) {\n    // this.pdfFilePath=path\n    if (path.includes(\"/home/statvalu-local/mycontainer\")) {\n      path = path.replace(\"/home/statvalu-local/mycontainer/\", \"\");\n    }\n\n    console.log(path);\n    let formdata = new FormData();\n    formdata.append('dir_path', path);\n    this.httpClient.post('/document_upload/download_output_files/', formdata, {\n      reportProgress: true,\n      observe: 'events'\n    }).subscribe(res => {\n      if (res.type === HttpEventType.DownloadProgress) {\n        const percentDone = Math.round(100 * res.loaded / res.total);\n        this._common.loaderText = `Downloading PDF ${percentDone}%`;\n      }\n\n      if (res.type === HttpEventType.Response) {\n        console.log(\"////////res\", res);\n        res['body']['res_data'] && this.readPdfright(res['body']['res_data']['encoded_string'], \"viewPdf\");\n      }\n    });\n  }\n\n  readPdfright(res, type) {\n    const byteCharacters = atob(res);\n    const byteNumbers = new Array(byteCharacters.length);\n\n    for (let i = 0; i < byteCharacters.length; i++) {\n      byteNumbers[i] = byteCharacters.charCodeAt(i);\n    }\n\n    const byteArray = new Uint8Array(byteNumbers);\n    let objectUrl = URL.createObjectURL(new Blob([byteArray], {\n      type: \"application/pdf\"\n    }));\n\n    if (type == \"viewPdf\") {\n      this.pdfFilePathright = this.sanitizer.bypassSecurityTrustResourceUrl(objectUrl);\n      console.log(\"pdf>>??>>??>??>\", res, objectUrl, this.pdfFilePathright);\n\n      if (this.pdfFilePathright) {\n        this.ispdfClicked = true;\n      } else {\n        this.ispdfClicked = false;\n      }\n    } else if (type == \"searchPdf\") {\n      this.searchPathright = this.sanitizer.bypassSecurityTrustResourceUrl(objectUrl);\n      console.log(\"search>>??>>??>??>\", res, objectUrl, this.searchPathright);\n\n      if (this.searchPathright) {\n        this.ispdfClicked = false;\n        this.issearchClicked = true;\n      } else {\n        this.issearchClicked = false;\n      }\n    } // console.log(this.pdfFilePathright, this.ispdfClicked)\n\n  }\n\n  closeSearchView() {\n    this.issearchClicked = false;\n    this.ispdfClicked = true;\n  }\n\n  showFullPdf() {\n    this.pdfFilePath = this.showFullPdfPath;\n    this.showPdfViewer = true;\n  }\n\n  openCsv(path) {\n    this.csvFilePath = path;\n    this.showCsvViewer = true;\n  } // ***********************************When Double Click On Filess Open / open only csv using paths it*******************************\n  // ***********************************Processing When User Click On Process Button*******************************\n\n\n  process() {\n    if (this.selectedFeature === 'NIS calculation' || this.selectedFeature === 'Back2birth calculation' || this.selectedFeature === 'Avionics listing') {\n      localStorage.setItem('request_id', 'BFSSFFSV76');\n      localStorage.setItem('feature', this.selectedFeature);\n      localStorage.setItem('browsable_list_size', '1');\n\n      if (this.selectedPdfPaths.length === 1 && this.selectedFeature === 'Avionics listing') {\n        localStorage.setItem('Avionics Pdf count', '1');\n      } else if (this.selectedPdfPaths.length === 2 && this.selectedFeature === 'Avionics listing') {\n        localStorage.setItem('Avionics Pdf count', '2');\n      } else {\n        localStorage.removeItem('Avionics Pdf count');\n      }\n\n      this.router.navigate(['/viewDir/currentOutput']);\n      return;\n    }\n\n    this.closeFullscreen();\n\n    if (!this.selectedFeature) {\n      return;\n    }\n\n    let selectedPdfFolder = this.filteredPdfFolderList.filter(res => res.isSelected === true);\n    let selectedPdfFile = this.filteredPdfFileList.filter(res => res.isSelected === true);\n    let selectedCsvFolder = [];\n    let selectedCsvFile = [];\n    let csvFolderPathList = [];\n    let csvFilePathList = [];\n\n    if (this.twoStepFeatures.includes(this.selectedFeature)) {\n      selectedCsvFolder = this.filteredCsvFolderList.filter(res => res.isSelected === true);\n      selectedCsvFile = this.filteredCsvFileList.filter(res => res.isSelected === true);\n      selectedCsvFolder.map(res => csvFolderPathList.push(res.path.slice(13) + '/' + res.name));\n      selectedCsvFile.map(res => csvFilePathList.push(res.path.slice(13) + '/' + res.name));\n    } else if (this.selectedFeature === 'Image Augmentation') {\n      let image = this.filteredImageFileList.filter(res => res.isSelected === true)[0];\n      image ? this.featureOptions.image_path = image.path.slice(13) + '/' + image.name : this.featureOptions.image_path = '';\n    }\n\n    let pdfFolderPathList = [];\n    let pdfFilePathList = [];\n    selectedPdfFolder.map(res => pdfFolderPathList.push(res.path.slice(13) + '/' + res.name));\n    selectedPdfFile.map(res => pdfFilePathList.push(res.path.slice(13) + '/' + res.name)); // let pdfPathList = [...pdfFolderPathList, ...pdfFilePathList];\n\n    let pdfPathList = this.selectedPdfPaths;\n    console.log(this.selectedPdfPaths); // .map(res => {\n    //   let basePath = res.split('/')[0];\n    //   if (basePath === 'Input_Folder') {\n    //     return res.slice(13);\n    //   } else {\n    //     return res.slice(8);\n    //   }\n    // })\n\n    let csvPathList = [...csvFolderPathList, ...csvFilePathList];\n    console.log(pdfPathList); // let jsonString = JSON.stringify(pdfPathList);\n    // this.success(jsonString);\n\n    if (this.selectedFeature === 'Document Classification') {\n      this.featureOptions.input_paths = [selectedPdfFolder[0].path.slice(13) + '/' + selectedPdfFolder[0].name];\n      this.featureOptions.pattern_file = selectedPdfFile[0].path.slice(13) + '/' + selectedPdfFile[0].name;\n    } else if (this.selectedFeature === 'Document merge') {\n      pdfPathList = this.docMergeSelectedPdf.map(res => res.path);\n      console.log(pdfPathList);\n    } else if (this.selectedFeature === 'Page Reordering') {\n      console.log(pdfPathList);\n    }\n\n    this._process.getFeatureProcessData(pdfPathList, csvPathList, this.selectedFeature, this.featureOptions);\n  }\n\n  savePageReordering() {\n    let selectedPdfFile = this.filteredPdfFileList.filter(res => res.isSelected === true);\n    let pdfPathList = [selectedPdfFile[0].path + '/' + selectedPdfFile[0].name];\n    this.featureOptions.order_list = this.pdfpagenums;\n    console.log(pdfPathList, this.featureOptions.order_list);\n\n    this._process.getFeatureProcessData(pdfPathList, [], this.selectedFeature, this.featureOptions);\n  } // ***********************************Processing When User Click On Process Button*******************************\n  // ***********************************OnClick Step One,Two,Three Button Hide/Show Directory*******************************\n\n\n  showPdfDirectory() {\n    this.selectedStep = 'step1';\n    this.showAllPdfFoldersFiles = true;\n    this.showPdfFolder = true;\n    this.showPdfFile = true;\n    this.showAllCsvFoldersFiles = false;\n  }\n\n  showCsvDirectory() {\n    this.selectedStep = 'step2';\n    this.showAllPdfFoldersFiles = false;\n    this.showAllCsvFoldersFiles = true;\n  }\n\n  showOptions() {\n    this.selectedStep = 'step3';\n    this.showAllPdfFoldersFiles = false;\n    this.showAllCsvFoldersFiles = false;\n  }\n\n  showDocClassificationPdfFolder() {\n    this.selectedStep = 'step1';\n    this.showAllPdfFoldersFiles = true;\n    this.showPdfFolder = true;\n    this.showPdfFile = false;\n    this.showAllCsvFoldersFiles = false;\n  }\n\n  showDocClassificationPdfFile() {\n    this.selectedStep = 'step4';\n    this.showAllPdfFoldersFiles = true;\n    this.showPdfFolder = false;\n    this.showPdfFile = true;\n    this.showAllCsvFoldersFiles = false;\n  } // ***********************************OnClick Step One,Two,Three Button Hide/Show Directory*******************************\n  // ***********************************Upload Directory*******************************\n\n\n  checkUploadInprogress() {\n    console.log(this._upload.isUploadProcessing);\n\n    if (this._upload.isUploadProcessing === true) {\n      this._modal.showMsg('Upload in progress, please wait.', 'Not Allowed', 'info');\n    }\n  }\n\n  uploadFiles(event) {\n    if (this.base_path !== \"Input_Folder/\") {\n      this._modal.showMsg('Upload Only allowed in MyFiles', 'Not allowed', 'info');\n\n      return;\n    }\n\n    let files = event.target.files;\n\n    if (files.length > 1000) {\n      this._modal.showMsg('Upload is limited to 1000 files', 'Upload Limit', 'info');\n\n      return;\n    }\n\n    if (this.pathList.length > 0) {\n      this._upload.getFileSystemClient(this.pathList.join('/'));\n    } else {\n      this._upload.getFileSystemClient();\n    }\n\n    console.log(\"tt\", this.pathList.join('/'));\n\n    this._upload.uploadFiles(files);\n  }\n\n  uploadFromLink() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this2.inputLinkForm.value.projectName.trim() == '') {\n        _this2.inputLinkForm.value['projectName'] = _this2.inputLinkForm.value.projectName.trim();\n      }\n\n      console.log(\"upload form\", _this2.inputLinkForm.value);\n\n      if (_this2.inputLinkForm.valid) {\n        let isFolderCreated = yield _this2.createFolder(_this2.inputLinkForm.value.folderName);\n\n        if (isFolderCreated) {\n          _this2._directory.uploadFromLink(_this2.inputLinkForm.value).subscribe(res => {\n            _this2._modal.showMsg('Documents in these links are being accesses by DocuExpert for processing', 'Success!', \"success\");\n\n            _this2.showUploadDrive = false;\n\n            _this2.listDirectories();\n\n            localStorage.setItem('folder_name', _this2.inputLinkForm.value.folderName); // let isDocumentPresent = this.inputLinkForm.value.links.some((res:any) => {\n            //   return res.name === 'DOCUMENT';\n            // });\n\n            let uidList = [];\n\n            _this2.inputLinkForm.value.links.forEach(res => {\n              uidList.push(res.uid);\n            });\n\n            localStorage.setItem('uidList', JSON.stringify(uidList));\n            console.log(uidList);\n            _this2._common.showVUploadModal = true;\n            _this2.uploadInterval = setInterval(() => {\n              _this2._directory.vuploadProgress().subscribe(res => {\n                // console.log(res);\n                _this2._common.vuploadProgress = res.res_data;\n\n                if (res.res_data == 100) {\n                  clearInterval(_this2.uploadInterval);\n                  _this2._common.vuploadComplete = true; // this._modal.showFeatureProcessSuccess(\"Upload completed successfully\");\n                }\n              });\n\n              _this2._directory.vstatusProgress().subscribe(res => {\n                _this2._common.vdocumentProgress = res.res_data;\n              });\n            }, 5000);\n          });\n        } else {// this._modal.showMsg('Failed to create folder', 'Error', \"error\");\n        }\n      } else {\n        _this2._modal.showMsg('Please all required fields correctly', 'Error', 'error');\n\n        _this2.inputLinkForm.markAllAsTouched();\n      }\n    })();\n  } // ***********************************Upload Directory*******************************\n  // Directory Properties ====================================================\n\n\n  getDirectoryMetadata(directory) {\n    console.log(\"working\");\n\n    this._directory.getDirectoryMetadata(directory).subscribe(res => {\n      this.directoryMetadataKeys = Object.keys(res.res_data);\n      console.log(res.res_data); // this.directoryMetadataKeys.forEach(element => {\n      //   if (element.includes('Date')) {\n      //     res.res_data[element] = new Date(res.res_data[element]);\n      //     console.log(res.res_data[element]);\n      //   }\n      // });\n\n      this.directoryMetadata = res.res_data;\n    });\n  } // Directory Properties ====================================================\n  // All Feature Option, get values from feature options ====================================================\n\n\n  getSearchKeywords(target) {\n    this.featureOptions.word_list = target.value.trim() ? target.value.trim().split(',') : [];\n\n    if (this.featureOptions.word_list.length > 0) {\n      this.showCsvFolder = false;\n      this.showCsvFile = false;\n    } else {\n      this.showCsvFolder = true;\n      this.showCsvFile = true;\n    }\n  } // All Feature Option, get values from feature options ====================================================\n  // Delete Directory ====================================================\n\n\n  deleteDirectories() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      // if (this.base_path !== \"Input_Folder/\") {\n      //   this._modal.showMsg('Delete only allowed in myfiles', 'Not allowed', 'info');\n      //   return;\n      // }\n      let showBible = _this3.pathList.some(path => {\n        return path.includes('Delivery Bible');\n      });\n\n      if (showBible) {\n        _this3._common.$deleteBible.next(true);\n\n        return;\n      }\n\n      let deleteFolderList = _this3.filteredFolderList.filter(res => res.isSelected === true);\n\n      let deleteGFolderList = _this3.gfilteredFolderList.filter(res => res.isSelected === true);\n\n      let deleteFileList = _this3.filteredFileList.filter(res => res.isSelected === true);\n\n      let folderPathList = [];\n      let filePathList = [];\n      deleteFolderList.map(res => folderPathList.push(res.path + '/' + res.name));\n      deleteGFolderList.map(res => folderPathList.push(res.path + '/' + res.name));\n      deleteFileList.map(res => filePathList.push(res.path + '/' + res.name));\n      let deletePathList = [...folderPathList, ...filePathList];\n\n      if (deletePathList.length <= 0) {\n        _this3._modal.showMsg(\"No File Selected To Delete\", \"Error!\", \"error\");\n\n        return;\n      }\n\n      _this3._directory.delete(deletePathList, _this3.base_path).subscribe(res => {\n        _this3.unselectAllFoldersAndFiles();\n\n        _this3.unselectAllGFolders();\n\n        _this3.listDirectories();\n\n        _this3._modal.showMsg(res.res_str, \"Deleted!\", \"success\");\n\n        console.log(res);\n      });\n    })();\n  } // Delete Directory ====================================================\n  // Combined Search ====================================================\n\n\n  toggleAdvSearchForm() {\n    if (this.selectedFeature) {\n      this._modal.showMsg(\"Advanced Search Not Available If You Selected Feature\", \"Info!\", \"info\");\n\n      return;\n    } else {\n      this.showCombinedSearch = true;\n    }\n  }\n\n  hideAdvSearchForm() {\n    if (this.advancedSearchType === 'Folder') {\n      this.contentCheck = false;\n      this.metadataCheck = false;\n    }\n  }\n\n  hideContentMetaOnOtherRoutes() {\n    this.contentCheck = false;\n    this.metadataCheck = false;\n  }\n\n  validateForm(form) {\n    var _a, _b;\n\n    return ((_a = this.contentSearchForm.get(form)) === null || _a === void 0 ? void 0 : _a.errors) && ((_b = this.contentSearchForm.get(form)) === null || _b === void 0 ? void 0 : _b.touched);\n  }\n\n  validateDirSearchForm(form) {\n    var _a, _b;\n\n    return ((_a = this.documentFolderSearchForm.get(form)) === null || _a === void 0 ? void 0 : _a.errors) && ((_b = this.documentFolderSearchForm.get(form)) === null || _b === void 0 ? void 0 : _b.touched);\n  }\n\n  getForms() {\n    //@ts-ignore\n    return this.metadataSearchForm.get('formsArray').controls;\n  }\n\n  getContentTextConditionForms() {\n    //@ts-ignore\n    return this.contentSearchForm.get('textConditions').controls;\n  }\n\n  getContentNumberConditionForms() {\n    //@ts-ignore\n    return this.contentSearchForm.get('numberConditions').controls;\n  }\n\n  getContentDateConditionForms() {\n    //@ts-ignore\n    return this.contentSearchForm.get('dateConditions').controls;\n  }\n\n  addContentTextForm() {\n    //@ts-ignore\n    this.contentSearchForm.get('textConditions').push(this._fb.group({\n      search_string: ['', Validators.required],\n      condition: ['contains'],\n      operator: ['AND'],\n      value_type: ['text']\n    }));\n  }\n\n  addContentNumberForm() {\n    //@ts-ignore\n    this.contentSearchForm.get('numberConditions').push(this._fb.group({\n      search_value: [''],\n      condition: ['gt'],\n      operator: ['AND'],\n      start: [''],\n      end: ['']\n    }));\n  }\n\n  addContentDateForm() {\n    //@ts-ignore\n    this.contentSearchForm.get('dateConditions').push(this._fb.group({\n      search_date: [''],\n      condition: ['gt'],\n      operator: ['AND'],\n      start: [''],\n      end: ['']\n    }));\n  }\n\n  removeContentTextForm(index) {\n    //@ts-ignore\n    this.contentSearchForm.get('textConditions').removeAt(index);\n  }\n\n  removeContentNumberForm(index) {\n    //@ts-ignore\n    this.contentSearchForm.get('numberConditions').removeAt(index);\n  }\n\n  removeContentDateForm(index) {\n    //@ts-ignore\n    this.contentSearchForm.get('dateConditions').removeAt(index);\n  }\n\n  test() {\n    console.log(this.contentSearchForm.value);\n  }\n\n  getSelectFieldData(form) {\n    if (this.integerArr.includes(form)) {\n      return this.conditionIntegerList;\n    } else if (this.boolArr.includes(form)) {\n      return this.conditionBooleanList;\n    } else {\n      return this.conditionStringList;\n    }\n  }\n\n  addRangeValue(value1, value2, index) {\n    let range = [value1, value2];\n    console.log(range); //@ts-ignore\n\n    this.metadataSearchForm.get('formsArray').controls[index].value.value = range;\n  }\n\n  createForms() {\n    let forms = [];\n\n    for (let i = 0; i < this.formsList.length; i++) {\n      forms.push(this._fb.group({\n        formName: [this.formsList[i].name],\n        logical_op: [''],\n        value: ['']\n      }));\n      this.combineOp.push('');\n    }\n\n    return forms;\n  }\n\n  checkMetadataValue(index) {\n    //@ts-ignore\n    index && this.metadataSearchForm.get('formsArray').controls[index].value.logical_op === 'range' ? this.metadataSearchForm.get('formsArray').controls[index].value.value = ['', ''] : '';\n    this.metadataSearchForm.value.formsArray.forEach((element, index) => {\n      if (element.logical_op !== '') {\n        if (element.logical_op !== 'range') {\n          element.value ? this.metadataSearchData[this.formsList[index].name] = element : delete this.metadataSearchData[this.formsList[index].name];\n        } else {\n          element.value[0] && element.value[1] ? this.metadataSearchData[this.formsList[index].name] = element : delete this.metadataSearchData[this.formsList[index].name];\n        }\n      } else {\n        delete this.metadataSearchData[this.formsList[index].name];\n      }\n    });\n    console.log(this.metadataSearchData);\n    this.metadataSearchKeys = Object.keys(this.metadataSearchData);\n  }\n\n  getOp(formname) {\n    let formIndex = this.formsList.findIndex(res => res.name === formname);\n    return this.combineOp[formIndex];\n  }\n\n  removeMetadataForm(formname) {\n    delete this.metadataSearchData[formname];\n    this.metadataSearchKeys = Object.keys(this.metadataSearchData);\n  }\n\n  removeAllMetadataForm() {\n    this.metadataSearchData = {};\n    this.metadataSearchKeys = [];\n    this.combineOp = []; //@ts-ignore\n\n    this.metadataSearchForm.get('formsArray').controls.forEach((element, i) => {\n      element.reset();\n      element.patchValue({\n        formName: this.formsList[i].name,\n        logical_op: '',\n        value: ''\n      });\n      this.combineOp.push('');\n    });\n  }\n\n  combinedSearch() {\n    if (this.contentCheck && this.documentFolderCheck && this.metadataCheck) {\n      if (this.contentSearchForm.invalid || this.documentFolderSearchForm.invalid) {\n        this._modal.showError('Please Fill All Fields');\n\n        this.contentSearchForm.markAllAsTouched();\n        this.documentFolderSearchForm.markAllAsTouched();\n        return;\n      }\n\n      this.metadataSeach();\n    } else if (this.contentCheck && this.documentFolderCheck) {\n      if (this.contentSearchForm.invalid || this.documentFolderSearchForm.invalid) {\n        this._modal.showError('Please Fill All Fields');\n\n        this.contentSearchForm.markAllAsTouched();\n        this.documentFolderSearchForm.markAllAsTouched();\n        return;\n      }\n\n      let combineSearchData = {\n        content_search: this.contentSearchForm.value,\n        file_folder_search: this.documentFolderSearchForm.value\n      };\n      let pdfFolderPathList = this.getSelectedFolderPath();\n      console.log(\"LLLLLLLLLLLL\", pdfFolderPathList);\n      this.processCombinedSearch(combineSearchData, pdfFolderPathList);\n    } else if (this.contentCheck && this.metadataCheck) {\n      if (this.contentSearchForm.invalid) {\n        this._modal.showError('Please Fill All Fields');\n\n        this.contentSearchForm.markAllAsTouched();\n        return;\n      }\n\n      this.metadataSeach('content&metadata');\n    } else if (this.documentFolderCheck && this.metadataCheck) {\n      console.log(\"fired\");\n\n      if (this.documentFolderSearchForm.invalid) {\n        this._modal.showError('Please Fill All Fields');\n\n        this.contentSearchForm.markAllAsTouched();\n        return;\n      }\n\n      this.metadataSeach('document&metadata');\n    } else if (this.contentCheck) {\n      if (this.contentSearchForm.invalid) {\n        this._modal.showError('Please Fill All Fields');\n\n        this.contentSearchForm.markAllAsTouched();\n        return;\n      }\n\n      let combineSearchData = {\n        content_search: this.contentSearchForm.value\n      };\n      let pdfFolderPathList = this.getSelectedFolderPath();\n      console.log(\"LLLLLLLLLLLL\", pdfFolderPathList);\n      this.processCombinedSearch(combineSearchData, pdfFolderPathList);\n    } else if (this.documentFolderCheck) {\n      if (this.documentFolderSearchForm.invalid) {\n        this._modal.showError('Please Fill All Fields');\n\n        this.documentFolderSearchForm.markAllAsTouched();\n        return;\n      }\n\n      let combineSearchData = {\n        file_folder_search: this.documentFolderSearchForm.value\n      };\n      let pdfFolderPathList = this.getSelectedFolderPath();\n      console.log(\"LLLLLLLLLLLL\", pdfFolderPathList);\n\n      if (this.advancedSearchType === 'File') {\n        this.processCombinedSearch(combineSearchData, pdfFolderPathList);\n      } else {\n        this.processFolderSearch(this.documentFolderSearchForm.value, pdfFolderPathList);\n      }\n    } else if (this.metadataCheck) {\n      this.metadataSeach('metadata');\n    }\n  }\n\n  processCombinedSearch(combineSearchData, pdfFolderPathList) {\n    let advParent = localStorage.getItem('advParent');\n    let dir_path = this._auth.org_name + '/' + this._auth.user_name;\n    let parent_dir;\n\n    if (this.base_path.replace('/', '').trim().toString() == 'Input_Folder') {\n      if (dir_path == pdfFolderPathList[0]) {\n        parent_dir = 'Comnbine';\n      } else {\n        parent_dir = advParent;\n      }\n    } else {\n      parent_dir = this.base_path.replace('/', '').trim().toString();\n    }\n\n    console.log(\"LLLLLLprocessCombinedSearchadvParent\", parent_dir);\n\n    this._directory.combinedSearch(combineSearchData, pdfFolderPathList, parent_dir).subscribe(res => {\n      this.unselectAllFoldersAndFiles();\n      localStorage.setItem('feature', \"Advance File Search\");\n      localStorage.setItem('request_id', res.res_data.request_id);\n\n      this._common.$featureProgressStart.next('');\n\n      this._modal.showMsg(res.res_str, \"Success!\", \"success\");\n\n      this.resetCombinedSearchFields();\n    }, err => {\n      this.deleteExtraParamsMetadata();\n    });\n  }\n\n  processFolderSearch(searchData, pdfFolderPathList) {\n    this._directory.folderSearch(searchData, pdfFolderPathList, this.base_path).subscribe(res => {\n      this.unselectAllFoldersAndFiles();\n      localStorage.setItem('feature', \"Advance Folder Search\");\n      localStorage.setItem('request_id', res.res_data.request_id);\n\n      this._common.$featureProgressStart.next('');\n\n      this._modal.showMsg(res.res_str, \"Success!\", \"success\");\n\n      this.resetCombinedSearchFields();\n    });\n  }\n\n  metadataSeach(type = 'metadataall') {\n    if (this.metadataSearchKeys.length === 0) {\n      this._modal.showError('Please Fill Atleast One Metadata Field');\n\n      return;\n    }\n\n    let combineop = this.getCombineOp();\n    let metadataSize = this.metadataSearchKeys.length;\n    let combineOpSize = combineop.length;\n\n    if (combineOpSize === metadataSize - 1) {\n      this.deleteExtraParamsMetadata();\n      let combineSearchData = type === 'metadataall' ? {\n        content_search: this.contentSearchForm.value,\n        file_folder_search: this.documentFolderSearchForm.value,\n        metadata_search: {\n          search_metadata: this.metadataSearchData\n        },\n        condition_combine_operators: combineop\n      } : type === 'content&metadata' ? {\n        content_search: this.contentSearchForm.value,\n        metadata_search: {\n          search_metadata: this.metadataSearchData\n        },\n        condition_combine_operators: combineop\n      } : type === 'metadata' ? {\n        metadata_search: {\n          search_metadata: this.metadataSearchData\n        },\n        condition_combine_operators: combineop\n      } : {\n        file_folder_search: this.documentFolderSearchForm.value,\n        metadata_search: {\n          search_metadata: this.metadataSearchData\n        },\n        condition_combine_operators: combineop\n      };\n      let pdfFolderPathList = this.getSelectedFolderPath();\n      console.log(\"LLLLLLLLLLLL\", pdfFolderPathList);\n      this.processCombinedSearch(combineSearchData, pdfFolderPathList);\n    } else {\n      this._modal.showError('Combine Operator should be equal to total no of fields - 1');\n\n      return;\n    }\n  }\n\n  getCombineOp() {\n    let combineop = [];\n    this.metadataSearchKeys.forEach(element => {\n      let formIndex = this.formsList.findIndex(res => res.name === element);\n      combineop.push(this.combineOp[formIndex]);\n    });\n    combineop = this.combineOp.filter(res => res !== '');\n    return combineop;\n  }\n\n  deleteExtraParamsMetadata() {\n    this.metadataSearchKeys.forEach(element => {\n      delete this.metadataSearchData[element]['formName'];\n    });\n  }\n\n  getSelectedFolderPath() {\n    let folderPathList = [];\n    let dir_path = this._auth.org_name + '/' + this._auth.user_name;\n\n    if (this.pathList.length > 0) {\n      dir_path = dir_path + '/' + this.pathList.join('/');\n    }\n\n    folderPathList.push(dir_path);\n    return folderPathList;\n  }\n\n  resetCombinedSearchFields() {\n    this.contentSearchForm.reset();\n    this.documentFolderSearchForm.reset();\n    this.removeAllMetadataForm();\n    this.contentSearchForm.patchValue({\n      text: false,\n      number: false,\n      date: false,\n      approx_search: false,\n      textOperator: 'AND',\n      numberOperator: 'AND'\n    }); //@ts-ignore\n\n    this.contentSearchForm.get('textConditions').clear(); //@ts-ignore\n\n    this.contentSearchForm.get('numberConditions').clear(); //@ts-ignore\n\n    this.contentSearchForm.get('dateConditions').clear();\n    this.addContentTextForm();\n    this.addContentNumberForm();\n    this.addContentDateForm();\n    this.documentFolderSearchForm.patchValue({\n      search_rule: '',\n      is_pattern: 'false',\n      fixed_left: '',\n      fixed_right: ''\n    });\n  }\n\n  resetMetadataForm(index) {\n    //@ts-ignore\n    this.metadataSearchForm.get('formsArray').controls[index].reset(); //@ts-ignore\n\n    this.metadataSearchForm.get('formsArray').controls[index].patchValue({\n      formName: this.formsList[index].name,\n      logical_op: '',\n      value: ''\n    });\n    this.combineOp[index] = '';\n  } // Combined Search ====================================================\n  // Upload from Link\n\n\n  loginWithGoogle() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      _this4._directory.loginWithGoogle().subscribe(res => {\n        console.log(res);\n        window.location.href = res.res_str;\n      }); // this.authService.signIn(GoogleLoginProvider.PROVIDER_ID);\n\n    })();\n  } // Upload from Link\n  // ***********************************All Modals*******************************\n\n\n  createFolderModal() {\n    var _this5 = this;\n\n    if (this.base_path !== \"Input_Folder/\") {\n      this._modal.showMsg('Only allowed in MyFiles', 'Not allowed', 'info');\n\n      return;\n    }\n\n    Swal.fire({\n      title: 'Please Enter your Folder Name',\n      input: 'text',\n      inputAttributes: {\n        autocapitalize: 'off',\n        maxlength: '255'\n      },\n      // html:'<div style=\"text-align:left;\"><ul  style=\"padding-left:20px;font-size:16px;\"><li>must be uppercase</li><li>must be uppercase</li></ul></div>',\n      backdrop: true,\n      showCancelButton: true,\n      confirmButtonText: 'Create Folder',\n      showLoaderOnConfirm: true,\n      preConfirm: function () {\n        var _ref = _asyncToGenerator(function* (folderName) {\n          console.log(folderName, _this5.allFolderNames);\n          folderName = folderName.trim();\n\n          if (!folderName) {\n            Swal.showValidationMessage(\"please give proper value\");\n          } else if (folderName && folderName.includes('.')) {\n            Swal.showValidationMessage(\"should not contain dot(.)\");\n          } else if (folderName && folderName.includes(' ')) {\n            Swal.showValidationMessage(\"should not contain any space\");\n          } else if (_this5.allFileNames.includes(folderName)) {\n            Swal.showValidationMessage(\"file with same name exists\");\n          } else if (_this5.allFolderNames.includes(folderName)) {\n            Swal.showValidationMessage(\"folder with same name exists\");\n          } else {\n            // let fileSystemClient: DataLakeFileSystemClient = null;\n            // if (this.pathList.length > 0) {\n            //   fileSystemClient = this._upload.getFileSystemClient(this.pathList.join('/'));\n            // } else {\n            //   fileSystemClient = this._upload.getFileSystemClient();\n            // }\n            // const directoryClient: DataLakeDirectoryClient = fileSystemClient.getDirectoryClient(folderName);\n            // let createdFolder = await directoryClient.create();\n            // if (createdFolder) {\n            //   this.listDirectories();\n            // }\n            _this5._directory.createFolder(_this5.pathList.join('/'), folderName).subscribe(res => {\n              _this5.listDirectories();\n            });\n          }\n        });\n\n        return function preConfirm(_x) {\n          return _ref.apply(this, arguments);\n        };\n      }(),\n      allowOutsideClick: () => false\n    }).then(result => {\n      if (result.isConfirmed) {\n        Swal.fire({\n          icon: 'success',\n          title: `${result.value} Folder Created Successfully`,\n          showConfirmButton: false,\n          timer: 1500\n        });\n      }\n    });\n  } // ***********************************All Modals*******************************\n  // ***********************************upload link*******************************\n\n\n  get inputLinks() {\n    return this.inputLinkForm.get(\"links\");\n  }\n\n  addInputLinks() {\n    this.inputLinks.push(this._fb.group({\n      input_link: ['', Validators.required],\n      name: ['', Validators.required],\n      uid: [this._common.getRandomString()]\n    }));\n  }\n\n  removeInputLinks(i) {\n    this.inputLinks.removeAt(i);\n  }\n\n  uploadLinkLogout() {\n    this._directory.uploadLinkLogout().subscribe(res => {\n      this.isLoggedIn = false;\n    });\n  }\n\n  uploadLinkLoggedIn() {\n    this._directory.isLoggedIn().subscribe(res => {\n      this.isLoggedIn = res.res_data;\n      this.showUploadDrive = true;\n    });\n  }\n\n  uploadLinkValidation(i, name) {\n    //@ts-ignore\n    return this.inputLinks.controls[i].controls[name].errors && this.inputLinks.controls[i].controls[name].touched;\n  }\n\n  checkSelection(type) {\n    let isDocumentPresent = this.inputLinkForm.value.links.some(res => {\n      return res.name === type;\n    });\n    return isDocumentPresent;\n  } // ***********************************upload link*******************************\n  //create Folder\n\n\n  createFolder(folderName) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!folderName) {\n        _this6._modal.showMsg(\"please give proper value\", 'Error', 'error');\n\n        return false;\n      } else if (folderName && folderName.includes('.')) {\n        _this6._modal.showMsg(\"should not contain dot(.)\", 'Error', 'error');\n\n        return false;\n      } else if (folderName && folderName.includes(' ')) {\n        _this6._modal.showMsg(\"should not contain any space\", 'Error', 'error');\n\n        return false;\n      } else if (_this6.allFileNames.includes(folderName)) {\n        _this6._modal.showMsg(\"file with same name exists\", 'Error', 'error');\n\n        return false;\n      } // else if (this.allFolderNames.includes(folderName)) {\n      //   this._modal.showMsg(\"folder with same name exists\", 'Error', 'error');\n      //   return false;\n      // }\n      else {\n        let fileSystemClient = null;\n\n        if (_this6.pathList.length > 0) {\n          fileSystemClient = _this6._upload.getFileSystemClient(_this6.pathList.join('/'), \"docuexpertuat2/G_input/\");\n        } else {\n          fileSystemClient = _this6._upload.getFileSystemClient(\"\", \"docuexpertuat2/G_input/\");\n        }\n\n        const directoryClient = fileSystemClient.getDirectoryClient(folderName.trim());\n        let createdFolder = yield directoryClient.create();\n\n        if (createdFolder) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n    })();\n  } //create Folder\n  //Document merge=====================================================================\n\n\n  drop(event) {\n    if (event.previousContainer === event.container) {\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n    } else {\n      transferArrayItem(event.previousContainer.data, event.container.data, event.previousIndex, event.currentIndex);\n    }\n\n    console.log(event.container.data);\n    event.container.data.forEach((res, index) => {\n      if (!this.docMergePdf.includes(res)) {\n        res.isSelected = true;\n        this.docMergePdf.splice(index, 0, res);\n      }\n    });\n  }\n\n  getFileNameBeforeDrop(item) {\n    let pathArr = item.split('/');\n    return pathArr[pathArr.length - 1];\n  }\n\n  getFileNameAfterDrop(item) {\n    // let path = this.base_path + this._auth.org_name + '/' + this._auth.user_name;\n    // return item.slice(path.length+1);\n    return item.split('/').pop();\n  }\n\n  selectItem(item) {\n    this.docMergeSelectedPdf.push(item);\n  }\n\n  selectedItemColor(res) {\n    return this.docMergeSelectedPdf.includes(res);\n  }\n\n  removeItem(i) {\n    let itemIndex = this.docMergePdf.findIndex(res => {\n      return res.path === this.docMergeSelectedPdf[i].path;\n    });\n    this.docMergeSelectedPdf.splice(i, 1);\n    this.docMergePdf[itemIndex].isSelected = false;\n  }\n\n  noReturnPredicate() {\n    return false;\n  } //Document merge=====================================================================\n  // Page Reordering===================================================================\n\n\n  pdfNumPagedrop(event) {\n    moveItemInArray(this.pdfpagenums, event.previousIndex, event.currentIndex);\n  }\n\n  readPdfFromServer(path) {\n    let formdata = new FormData();\n    formdata.append('dir_path', path);\n    this.httpClient.post('/document_upload/download_output_files/', formdata, {\n      reportProgress: true,\n      observe: 'events'\n    }).subscribe(res => {\n      if (res.type === HttpEventType.DownloadProgress) {\n        const percentDone = Math.round(100 * res.loaded / res.total);\n        this._common.loaderText = `Downloading PDF ${percentDone}%`;\n      }\n\n      if (res.type === HttpEventType.Response) {\n        if (res['body']['res_data']) {\n          this.pdfpagenums = [];\n\n          for (let i = 0; i < parseInt(res.body.res_data.totalcount); i++) {\n            console.log(i);\n            this.pdfpagenums.push(i + 1);\n          }\n\n          this.readPdf(res['body']['res_data']['encoded_string']);\n        }\n      }\n    });\n  }\n\n  readPdf(res) {\n    const byteCharacters = atob(res);\n    const byteNumbers = new Array(byteCharacters.length);\n\n    for (let i = 0; i < byteCharacters.length; i++) {\n      byteNumbers[i] = byteCharacters.charCodeAt(i);\n    }\n\n    const byteArray = new Uint8Array(byteNumbers);\n    let objectUrl = URL.createObjectURL(new Blob([byteArray], {\n      type: \"application/pdf\"\n    }));\n    let url = this.sanitizer.bypassSecurityTrustResourceUrl(objectUrl);\n    this.pdfurl = url;\n  } // Page Reordering===================================================================\n\n\n  ngOnDestroy() {\n    this._common.$featureName.next('');\n  } // show tree view on selected folder\n\n\n  showTreeViewofFolder(val) {\n    // let arr=val.slice(3).split('/')\n    console.log(\"folder selected>>single click\", val);\n    this.selectedFileForQuestion = val.name;\n\n    if (val.is_directory) {\n      this._common.$selectedFolderData.next({});\n\n      let rootDir = {};\n      rootDir = {\n        \"name\": val.name,\n        \"id\": 0,\n        \"path\": val.path + \"/\" + val.name,\n        \"total_count\": val.total_dirs + val.total_files,\n        \"type\": \"directory\",\n        \"expanded\": false\n      };\n\n      this._common.$selectedFolderData.next(rootDir); // this._common.$showFolderTree.next(true);\n      // this._common.$showFeatureList.next(false);\n      // this._common.$showTree.next(false)\n\n\n      this.selectsingleFolder(val.name, val.path);\n    } else {\n      this.selectsingleFile(val.name);\n    }\n  }\n\n  selectsingleFolder(dirName, dirPath) {\n    let dirPathName = dirPath.split('/')[0];\n\n    if (dirPathName === 'G_input') {\n      let dirIndex = this.gfilteredFolderList.findIndex(res => res.name === dirName);\n\n      for (let i = 0; i < this.gfilteredFolderList.length; i++) {\n        if (i == dirIndex) {\n          this.gfilteredFolderList[i].isSelectedSingle = true;\n        } else {\n          this.gfilteredFolderList[i].isSelectedSingle = false;\n        }\n\n        for (let i = 0; i < this.filteredFolderList.length; i++) {\n          this.filteredFolderList[i].isSelectedSingle = false;\n        }\n\n        for (let i = 0; i < this.filteredFileList.length; i++) {\n          this.filteredFileList[i].isSelectedSingle = false;\n        }\n      }\n    } else {\n      let dirIndex = this.filteredFolderList.findIndex(res => res.name === dirName);\n\n      for (let i = 0; i < this.filteredFolderList.length; i++) {\n        if (i == dirIndex) {\n          this.filteredFolderList[i].isSelectedSingle = true;\n        } else {\n          this.filteredFolderList[i].isSelectedSingle = false;\n        }\n\n        for (let i = 0; i < this.gfilteredFolderList.length; i++) {\n          this.gfilteredFolderList[i].isSelectedSingle = false;\n        }\n\n        for (let i = 0; i < this.filteredFileList.length; i++) {\n          this.filteredFileList[i].isSelectedSingle = false;\n        }\n      }\n    }\n  }\n\n  selectsingleFile(dirName) {\n    let dirIndex = this.filteredFileList.findIndex(res => res.name === dirName);\n\n    for (let i = 0; i < this.filteredFileList.length; i++) {\n      if (i == dirIndex) {\n        this.filteredFileList[i].isSelectedSingle = true;\n      } else {\n        this.filteredFileList[i].isSelectedSingle = false;\n      }\n\n      for (let i = 0; i < this.filteredFolderList.length; i++) {\n        this.filteredFolderList[i].isSelectedSingle = false;\n      }\n\n      for (let i = 0; i < this.gfilteredFolderList.length; i++) {\n        this.gfilteredFolderList[i].isSelectedSingle = false;\n      }\n    }\n  }\n\n  onContextMenu(event, item) {\n    console.log(\"in mouse up event\", event, item);\n    event.preventDefault();\n    const button = document.getElementById(item.name);\n    console.log(button);\n    document.getElementById(item.name).click();\n    this.contextMenuPosition.x = event.clientX + 'px';\n    this.contextMenuPosition.y = event.clientY + 'px';\n    console.log(this.contextMenuPosition.x, this.contextMenuPosition.y); // this.contextMenu.menuData = { 'item': item };\n    // this.contextMenu.menu.focusFirstItem('mouse');\n    // this.contextMenu.openMenu();\n  }\n\n  onContextMenuAction1(item) {\n    alert(`Click on Action 1 for ${item}`);\n  }\n\n  onContextMenuAction2(item) {\n    alert(`Click on Action 2 for ${item}`);\n  }\n\n  verifyFunc(res) {\n    let operation;\n\n    if (res == \"verify\") {\n      operation = 1;\n    } else if (res == \"not-verify\") {\n      operation = 0;\n    } else if (res == \"tbd\") {\n      operation = 2;\n    }\n\n    this._common.$varifyFolder.next('');\n\n    let showBible = this.pathList.some(path => {\n      return path.includes('Delivery Bible');\n    });\n\n    if (showBible && this.pathList[this.pathList.length - 1].includes(\"Delivery Bible\")) {\n      this._common.$varifyFolder.next(res);\n\n      return;\n    }\n\n    let downloadFolderList = this.filteredFolderList.filter(res => res.isSelected === true);\n    let downloadFileList = this.filteredFileList.filter(res => res.isSelected === true);\n    let folderPathList = [];\n    let filePathList = [];\n    downloadFolderList.map(res => folderPathList.push(res.name));\n    downloadFileList.map(res => filePathList.push(res.name)); // downloadFolderList.map(res => folderPathList.push(res.path+ '/' + res.name));\n    // downloadFileList.map(res => filePathList.push(res.path + '/' + res.name));\n\n    let downloadPathList = [...folderPathList, ...filePathList];\n\n    if (downloadPathList.length <= 0) {\n      this._modal.showMsg(\"No file is selected\", \"Error!\", \"error\");\n\n      return;\n    }\n\n    let dir_path = this.base_path + this._auth.org_name + '/' + this._auth.user_name;\n    let path = dir_path + \"/\" + this.pathList.join(\"/\");\n    let projpath = path.substring(0, path.indexOf('/output'));\n    console.log(\"???????>>>\", downloadPathList);\n    console.log(\"???????>>>\", downloadPathList, projpath);\n    console.log(\"???????>>>\", downloadPathList, path);\n    this.verifyFuncAPI(path, projpath, operation, downloadPathList);\n  }\n\n  verifyFuncAPI(fullpath, projPath, operation, folderlist) {\n    // let ind= x.indexOf('output');\n    // var result =  x.substring(0, remove_after);\n    let formData = new FormData(); // formData.append(\"dir_path\", path);\n    // formData.append(\"dir_path_g\", gpath);\n\n    formData.append(\"user_id\", this._auth.user_id);\n    formData.append(\"proj_folder\", JSON.stringify(folderlist));\n    formData.append(\"projectpath\", projPath);\n    formData.append(\"is_operation\", operation);\n    formData.append(\"full_path\", fullpath);\n    this.httpClient.post('/delivery_bible/proj_approve/', formData).subscribe(res => {\n      console.log(\"varify res is \", res);\n\n      this._common.$varifyFolder.next('');\n\n      setTimeout(() => {\n        this._modal.showVarifyPopup(res.res_str);\n      }, 1000); // this.ngOnInit()\n\n      this.listDirectories();\n    });\n  }\n\n  openList() {\n    // formData.append(\"user_id\", this._auth.user_id);\n    // this.showOption=true \n    let dir_path = this.base_path + this._auth.org_name + '/' + this._auth.user_name; // let path=this.pathList\n\n    let fname = this.pathList[this.pathList.length - 1];\n    let path2 = this.pathList.join(\"/\");\n    let sub = path2.substring(0, path2.indexOf('/output'));\n    let subPath = dir_path + \"/\" + sub; // console.log(\"?????????\",this.pathList,dir_path,this.selectedFileForQuestion,this.pathList[this.pathList.length-1])\n\n    console.log(\"new path\", sub, subPath, this.selectedFileForQuestion, fname);\n    this.getQuery(subPath, this.selectedFileForQuestion, fname).subscribe(res => {\n      console.log(\"resssssssss\", res.res_data.Query);\n      this.varifyQuestionList = res.res_data.Query;\n      let varifycount = 0;\n      let cancelcount = 0;\n      let tbdcount = 0;\n      this.varifyQuestionList.map(res => {\n        if (res.question == null) {\n          res.question = \"\";\n        }\n\n        if (res.response == null) {\n          res.response = \"\";\n        }\n\n        if (res.note == null) {\n          res.note = \"\";\n        }\n\n        if (res.response == 'varified') {\n          varifycount = varifycount + 1;\n        } else if (res.response == 'cancel') {\n          cancelcount = varifycount + 1;\n        } else if (res.response == 'tbd') {\n          tbdcount = varifycount + 1;\n        }\n      });\n\n      if (varifycount == this.varifyQuestionList.length) {\n        this.selectAllQues = 'varified';\n      } else if (cancelcount == this.varifyQuestionList.length) {\n        this.selectAllQues = 'cancel';\n      } else if (tbdcount == this.varifyQuestionList.length) {\n        this.selectAllQues = 'tbd';\n      }\n\n      this.showQuestionList = true;\n    });\n  }\n\n  submitQuery() {\n    let dir_path = this.base_path + this._auth.org_name + '/' + this._auth.user_name;\n    console.log(\"path is\", this.pathList);\n    let fname = this.pathList[this.pathList.length - 1];\n    let path2 = this.pathList.join(\"/\");\n    let sub = path2.substring(0, path2.indexOf('/output'));\n    let subPath = dir_path + \"/\" + sub; // console.log(\"?????????\",this.pathList,dir_path,this.selectedFileForQuestion,this.pathList[this.pathList.length-1])\n\n    console.log(\"new path\", subPath, this.selectedFileForQuestion, fname);\n    this.submitQueryForValidation(subPath, this.selectedFileForQuestion, fname).subscribe(res => {\n      console.log(\"resssssssss\", res);\n      this.showQuestionList = false;\n\n      this._modal.showFeatureProcessSuccess(res.res_str);\n    });\n  }\n\n  getQuery(path, filename, folder) {\n    let formData = new FormData();\n    formData.append(\"user_id\", this._auth.user_id);\n    formData.append(\"file_name\", filename);\n    formData.append(\"folder_name\", folder);\n    formData.append(\"projectpath\", path);\n    return this.httpClient.post('/delivery_bible/fatch_query/', formData);\n  }\n\n  submitQueryForValidation(path, filename, folder) {\n    console.log(\"inside submit\");\n    let formData = new FormData();\n    formData.append(\"user_id\", this._auth.user_id);\n    formData.append(\"file_name\", filename);\n    formData.append(\"folder_name\", folder);\n    formData.append(\"projectpath\", path);\n    formData.append(\"query_set\", JSON.stringify(this.varifyQuestionList));\n    return this.httpClient.post('/delivery_bible/add_query/', formData);\n  }\n\n  setselectAllQues() {\n    setTimeout(() => {\n      console.log(\"?????????\", this.selectAllQues);\n      this.varifyQuestionList.map(res => res.response = this.selectAllQues);\n      console.log(this.varifyQuestionList);\n    });\n  }\n\n  undoFunc() {\n    setTimeout(() => {\n      console.log(\"?????????\", this.selectAllQues);\n      this.selectAllQues = \"\";\n      this.varifyQuestionList.map(res => {\n        res.response = \"\";\n        res.note = \"\";\n      });\n      console.log(this.varifyQuestionList);\n    });\n  } // getQuesToSub(obj:any){\n  //   return removeEmpty\n  // }\n  // showBilble file movement\n\n\n  showFileMovement() {\n    this.showFilesMove = !this.showFilesMove;\n\n    if (this.showFilesMove) {\n      this.showBuildDeliveryUi2 = true;\n      this.showFetchDirSpinner = false;\n      console.log(\">>>>>>>path list\", this.pathList);\n      return;\n    } else {\n      this.showBuildDeliveryUi2 = false;\n    } // this.openDirectory();\n    // this.listDirectories();\n\n\n    console.log(\"nbjhbjhbhb\", this.showFilesMove); // this._common.$showFileMov.next(this.showFilesMove)\n  } // add or remove tags\n\n\n  add(event) {\n    const value = (event.value || '').trim(); // Add our fruit\n\n    if (value) {\n      this.tagList.push({\n        name: value\n      });\n    } // Clear the input value\n\n\n    event.chipInput.clear();\n  }\n\n  remove(tag) {\n    const index = this.tagList.indexOf(tag);\n\n    if (index >= 0) {\n      this.tagList.splice(index, 1);\n    }\n  }\n\n  filecombinedSearch() {\n    if (this.contentSearchForm.invalid) {\n      this._modal.showError('Please Fill All Fields');\n\n      this.contentSearchForm.markAllAsTouched();\n      return;\n    }\n\n    let combineSearchData = {\n      content_search: this.contentSearchForm.value\n    };\n    let pdfFolderPathList = this.getSelectedFolderPath();\n    console.log(\"LLLLLLLLLLLL\", pdfFolderPathList);\n    this.fileCombinedSearch(combineSearchData, pdfFolderPathList);\n  }\n\n  fileCombinedSearch(data, path) {\n    let setpath = this.base_path.replace('/', '').trim().toString() + \"/\" + path[0];\n    console.log(\"????????//////\", data, this.showFullPdfPath);\n\n    this._directory.fileCombineSearch(data, this.showFullPdfPath).subscribe(res => {\n      console.log(\">>>>>>>>>>\", res); // if (res.type === HttpEventType.Response) {\n      //   console.log(\"////////res\", res)\n      // if(res)\n\n      res['res_data'] && this.readPdfright(res['res_data']['result'], 'searchPdf'); // }\n    });\n  }\n\n};\n\n__decorate([HostListener('document:keydown', ['$event'])], InputFolderComponent.prototype, \"onSelectHandler\", null);\n\n__decorate([HostListener('window:popstate', ['$event'])], InputFolderComponent.prototype, \"onPopState\", null);\n\n__decorate([ViewChild('directorycontainer')], InputFolderComponent.prototype, \"directoryContainerElem\", void 0);\n\nInputFolderComponent = __decorate([Component({\n  selector: 'app-input-folder',\n  templateUrl: './input-folder.component.html',\n  styleUrls: ['./input-folder.component.scss'],\n  providers: [DirectoryService, FeatureProcessService],\n  styles: []\n})], InputFolderComponent);\nexport { InputFolderComponent }; // { name: \"UI Design1\", directory: \"Folder\", isSelected: false, type: \"pdf\" }\n// { name: \"UI Design\", directory: \"File\", isSelected: false, type: \"pdf\" }\n// { name: \"Pdf UI Design\", directory: \"File\", isSelected: false, type: \"pdf\", path: \"subhasis/subhasis/Pdf UI Design\" }","map":{"version":3,"sources":["F:\\statvalu\\project\\AR_DocuExpert_Test\\src\\app\\featuremodules\\input-folder\\input-folder.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, ElementRef, HostListener, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router, NavigationEnd } from '@angular/router';\r\nimport { DataLakeDirectoryClient, DataLakeFileClient, DataLakeFileSystemClient, FileReadResponse } from '@azure/storage-file-datalake';\r\nimport { NgxUiLoaderService } from 'ngx-ui-loader';\r\nimport { AuthService } from 'src/app/auth/auth.service';\r\nimport { CommonnService } from 'src/app/_helpers/common/commonn.service';\r\nimport { FeatureProcessService } from 'src/app/_helpers/services/feature-process.service';\r\nimport { ModalService } from 'src/app/_helpers/services/modal.service';\r\nimport { UploadDirectoryService } from 'src/app/_helpers/services/upload-directory.service';\r\nimport Swal from 'sweetalert2';\r\nimport { DirectoryService } from './services/directory.service';\r\nimport * as JSZip from 'jszip';\r\nimport { FileSaverService } from 'ngx-filesaver';\r\nimport { HttpClient, HttpEventType } from '@angular/common/http';\r\nimport { SocialAuthService } from \"angularx-social-login\";\r\nimport { SocialUser } from \"angularx-social-login\";\r\nimport { GoogleLoginProvider } from \"angularx-social-login\";\r\nimport { CdkDrag, CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { MatMenuTrigger } from '@angular/material/menu';\r\nimport { Location } from '@angular/common'\r\nimport { AnyNsRecord } from 'dns';\r\nimport { MatChipInputEvent } from '@angular/material/chips';\r\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\r\nimport { log } from 'console';\r\n//autocomplete\r\nimport {Observable} from 'rxjs';\r\nimport {map, startWith} from 'rxjs/operators';\r\n// import { NavigationService } from './navigation.service';\r\n\r\nexport interface Fruit {\r\n  name: string;\r\n}\r\n\r\ndeclare var gapi: any;\r\n\r\n\r\n@Component({\r\n  selector: 'app-input-folder',\r\n  templateUrl: './input-folder.component.html',\r\n  styleUrls: ['./input-folder.component.scss'],\r\n  providers: [DirectoryService, FeatureProcessService]\r\n})\r\nexport class InputFolderComponent implements OnInit, OnDestroy {\r\n\r\n  //autocomplete\r\n  // myControl = new FormControl('');\r\n  msnFeild:any\r\n  options: string[] = ['One', 'Two', 'Three'];\r\n  filteredOptions: Observable<string[]>;\r\n\r\n  addOnBlur = true;\r\n  readonly separatorKeysCodes = [ENTER, COMMA] as const;\r\n  tagList: any = [];\r\n\r\n  //Feature Directory show and hide ====================================================\r\n  showAllFoldersFiles: boolean = true;\r\n  showAllPdfFoldersFiles: boolean = false;\r\n  showAllCsvFoldersFiles: boolean = false;\r\n  showImageFile: boolean = false;\r\n  showFilesMove: boolean = false;\r\n  \r\n\r\n  //Feature Directory show and hide ====================================================\r\n  searchTerm: string = \"\";\r\n  largeView: boolean = false;\r\n  listViewVal: boolean = true;\r\n  showCheckbox: boolean = false;\r\n  isAccess: boolean = true;\r\n  searchOption: string = \"All\";\r\n  selectedFeature: string = \"\";\r\n  progressPercentage: number = 0;\r\n  processing: boolean = false;\r\n  externalFolders: any = []\r\n  pathList: string[] = [];\r\n  showFullPdfPath: any\r\n  //upload link from drive,cloud\r\n\r\n  showUploadDrive: boolean = false;\r\n  linkType: string = \"gd\";\r\n  inputLink1: string = '';\r\n  inputLink2: string = '';\r\n  inputLinkForm: FormGroup;\r\n  varifyOptions: boolean = false\r\n  isLoggedIn: boolean = false;\r\n  //upload link from drive,cloud\r\n\r\n  //searching show and hide ====================================================\r\n  showFolder: boolean = true;\r\n  showFile: boolean = true;\r\n  showPdfFolder: boolean = true;\r\n  showPdfFile: boolean = true;\r\n  showCsvFolder: boolean = true;\r\n  showCsvFile: boolean = true;\r\n\r\n  //searching show and hide ====================================================\r\n\r\n\r\n  // All Folders And Files Data =================================================\r\n  folderList: any[] = [];\r\n  filteredFolderList: any[] = this.folderList;\r\n  gfolderList: any[] = [];\r\n  gfilteredFolderList: any[] = this.gfolderList;\r\n  fileList: any[] = [];\r\n  filteredFileList: any[] = this.fileList;\r\n  pdfFolderList: any[] = [];\r\n  filteredPdfFolderList: any[] = this.pdfFolderList;\r\n  gpdfFolderList: any[] = [];\r\n  gfilteredPdfFolderList: any[] = this.gpdfFolderList;\r\n  pdfFileList: any[] = [];\r\n  filteredPdfFileList: any[] = this.pdfFileList;\r\n  csvFolderList: any[] = [];\r\n  filteredCsvFolderList: any[] = this.csvFolderList;\r\n  csvFileList: any[] = [];\r\n  filteredCsvFileList: any[] = this.csvFileList;\r\n  imageFileList: any[] = [];\r\n  filteredImageFileList: any[] = this.imageFileList;\r\n  csvFilesForMetadataUpdation: any[] = [];\r\n  private history: string[] = []\r\n  varifyQuestionList: any = []\r\n  // varifyQuestionList = [\r\n  //   { \"question\": \"is Msn date validate\", \"response\": \"\", \"note\": \"\" }, \r\n  //   { \"question\": \"is status file validate\", \"response\": \"\", \"note\": \"\" }\r\n  // ]\r\n  // All Folders And Files Data==============================================\r\n\r\n  // ***********************************single/two step feature list*******************************\r\n  // singleStepFeatures: any[] = [\"Redact People Terms\", \"Redact Place Terms\", \"Redact Date Terms\", \"Redact Numeric\", \"Highlight People Term\", \"Highlight Place Term\", \"Highlight Date Term\", \"Highlight Numeric Terms\", \"Language Detection\", \"Affirmative Sentences\", \"Sentiment Detection\", \"Color Detection\"];\r\n\r\n  twoStepFeatures: any[] = [\"Highlight Term\", \"Redaction Term\", \"Attribute Retrieval\"];\r\n  // ***********************************single/two step feature list*******************************\r\n  selectedStep = \"step1\";\r\n\r\n  // pagination of folder and files ====================================================\r\n  page: number = 1;\r\n  pageSize: number = 100;\r\n  gpage: number = 1;\r\n  gpageSize: number = 100;\r\n  filepage: number = 1;\r\n  filePageSize: number = 100;\r\n  pdfPage: number = 1;\r\n  pdfPageSize: number = 100;\r\n  gpdfPage: number = 1;\r\n  gpdfPageSize: number = 100;\r\n  pdfFilePage: number = 1;\r\n  pdfFilePageSize: number = 100;\r\n  csvPage: number = 1;\r\n  csvPageSize: number = 100;\r\n  csvFilepage: number = 1;\r\n  csvFilePageSize: number = 100;\r\n  // pagination of folder and files ====================================================\r\n\r\n  // open pdf/csv files ====================================================\r\n  pdfFilePath: string = null;\r\n  showPdfViewer: boolean = false;\r\n  csvFilePath: string = null;\r\n  showCsvViewer: boolean = false;\r\n  txtFilePath: string = null;\r\n  showTxtViewer: boolean = false;\r\n  // open pdf/csv files ====================================================\r\n\r\n  // Directory Properties ====================================================\r\n  directoryMetadataKeys: any[] = [];\r\n  directoryMetadata: any = {};\r\n  // Directory Properties ====================================================\r\n  featureOptions: any = { search_on: 'Google', word_list: [], approx_search: false, top_lines: '', password: '', del_attr_list: '', rule_file_path: '', page_pattern: '', page_list_or_csv: '', location: '', img_aug_customval: '', image_path: '', watermark_string: '', color: 'red', opacity: '', strokes: '', bookmark_word_or_csv: '', input_paths: [], pattern_file: '', redactPersonalInfo: { email: false, phone: false, people: false, address: false, date_of_birth: false, account_number: false, pps_number: false }, number_of_groups: '', anchor_text: '', region_size: '', height: '', split_pattern: '', input_page_list: '', order_list: [], doc_merge_filename: '', inPlace: false };\r\n\r\n  // Show/Hide Feature Option Array ====================================================\r\n  approxSearchFeatureList: any[] = [\"Highlight Term\", \"Redaction Term\", \"Attribute Retrieval\", \"Anchor Text Extraction\", \"Anchor Text Page Classification\", \"Anchor Text Document Classification\"];\r\n\r\n  anchorTextFeatureList: any[] = [\"Anchor Text Extraction\", \"Anchor Text Page Ordering\", \"Anchor Text Page Classification\", \"Anchor Text Document Classification\", \"Anchor Text Document Ordering\"];\r\n\r\n  showOption: string[] = [\"Highlight Term\", \"Redaction Term\", \"Attribute Retrieval\", \"Image Augmentation\", \"Watermarking\", \"Encryption\", \"Decryption\", \"Metadata Deletion\", \"Metadata Updation\", \"Add Bookmarks\", \"Internal Linking\", \"Sentiment Detection\", \"Document Classification\", \"Redact Personal Information\", \"Content Based Grouping\", \"Extractive Summary\", \"Anchor Text Extraction\", \"Anchor Text Page Ordering\", \"Anchor Text Page Classification\", \"Anchor Text Document Classification\", \"Anchor Text Document Ordering\", \"Hight Based Highlight\", \"Split Pdf\"];\r\n\r\n  showCsvTableList: any[] = [\"Metadata Updation\", \"Image Augmentation\", \"Watermarking\", \"Add Bookmarks\", \"Internal Linking\", \"Document Classification\", 'AMP Build'];\r\n\r\n  showCsvTable: boolean = false;\r\n  // Show/Hide Feature Option Array ====================================================\r\n\r\n  // metadata deleteion select field =============================================\r\n  metaDataDeleteList: any[] = [{ item_id: 1, item_text: \"Author\" }, { item_id: 2, item_text: \"Creator\" }, { item_id: 3, item_text: \"Creator Tool\" }, { item_id: 4, item_text: \"Create Date\" }, { item_id: 5, item_text: \"Format\" }, { item_id: 6, item_text: \"Instance ID\" }, { item_id: 7, item_text: \"Document ID\" }, { item_id: 8, item_text: \"History\" }, { item_id: 9, item_text: \"History When\" }, { item_id: 10, item_text: \"Modify Date\" }, { item_id: 11, item_text: \"Metadata Date\" }, { item_id: 12, item_text: \"Linearized\" }, { item_id: 13, item_text: \"Producer\" }, { item_id: 14, item_text: \"Title\" }, { item_id: 15, item_text: \"XMP Toolkit\" }];\r\n\r\n  dropdownSettings: any = {\r\n    singleSelection: false,\r\n    idField: 'item_id',\r\n    textField: 'item_text',\r\n    selectAllText: 'Select All',\r\n    unSelectAllText: 'UnSelect All',\r\n    itemsShowLimit: 3,\r\n    allowSearchFilter: true\r\n  };\r\n  // metadata deleteion select field =============================================\r\n\r\n  // img aug,watermark,addbookmark,interlinking select option =============================================\r\n  patterns: any[] = [\r\n    { value: 'every page', viewValue: 'every page', feature: 'Internal Linking' },\r\n    { value: 'every nth page', viewValue: 'every nth page', feature: '' },\r\n    { value: 'even pages', viewValue: 'even pages', feature: '' },\r\n    { value: 'odd pages', viewValue: 'odd pages', feature: '' },\r\n    { value: 'page range', viewValue: 'page range', feature: 'Internal Linking' },\r\n    { value: 'custom page numbers', viewValue: 'custom page number', feature: '' },\r\n    { value: 'csv', viewValue: 'csv', feature: '' }\r\n  ]\r\n  showPaternOptionList: any[] = [\"Image Augmentation\", \"Watermarking\", \"Add Bookmarks\", \"Internal Linking\"];\r\n  showPatternInputList: any[] = [\"every nth page\", \"page range\", \"custom page numbers\"];\r\n\r\n  positions: any[] = [\r\n    { value: '', viewValue: 'Standard Position' },\r\n    { value: 'topleft', viewValue: 'top left' },\r\n    { value: 'topright', viewValue: 'top right' },\r\n    { value: 'bottomleft', viewValue: 'bottom left' },\r\n    { value: 'bottomright', viewValue: 'bottom right' },\r\n    { value: 'custom positions', viewValue: 'custom positions' },\r\n  ]\r\n  // img aug,watermark,addbookmark,interlinking select option =============================================\r\n\r\n  // combined search =============================================\r\n  showCombinedSearch: boolean = false;\r\n\r\n  metadataSearchForm: FormGroup;\r\n  airCraftSearchForm:FormGroup;\r\n  contentSearchForm: FormGroup;\r\n  documentFolderSearchForm: FormGroup;\r\n\r\n  contentCheck: boolean = false;\r\n  documentFolderCheck: boolean = false;\r\n  metadataCheck: boolean = false;\r\n  aircraftMetadataCheck: boolean = false;\r\n\r\n\r\n  formsList: any[] = [{ name: 'FileName', unit: \"\" }, { name: 'Directory', unit: '' }, { name: 'FileSize', unit: '' }, { name: 'FileModificationDate_Time', unit: '' }, { name: 'FileAccessDate_Time', unit: '' }, { name: 'FileInodeChangeDate_Time', unit: '' }, { name: 'FilePermissions', unit: '(eg. rwxrw-r--, r-read,  w-write, x-execute)' }, { name: 'PDFVersion', unit: '(from 1.1 to 1.7)' }, { name: 'Author', unit: '' }, { name: 'CreateDate', unit: '' }, { name: 'ModifyDate', unit: '' }, { name: 'Subject', unit: '' }, { name: 'Creator', unit: '' }, { name: 'Description', unit: '' }, { name: 'Title', unit: '' }, { name: 'CreatorTool', unit: '' }, { name: 'MetadataDate', unit: '' }, { name: 'Keywords', unit: '' }, { name: 'Producer', unit: '' }, { name: 'RenditionClass', unit: '' }, { name: 'MaxPageSizeW', unit: '' }, { name: 'MaxPageSizeH', unit: '' }, { name: 'MaxPageSizeUnit', unit: '' }, { name: 'FontName', unit: '(eg. Times-Roman,Times-Bold,Courier,Courier-Bold)' }, { name: 'FontFamily', unit: '(\"sans-serif\", e.g., Helvetica)' }, { name: 'PageCount', unit: '' }, { name: 'BoundingBox', unit: '' }, { name: 'ImageHeight', unit: '(In pixels)' }, { name: 'ImageWidth', unit: '(In pixels)' }, { name: 'ImageSize', unit: '(In pixels)' }, { name: 'Megapixels', unit: '' }];\r\n\r\n  // Types Of Forms\r\n  integerArr: any[] = [\"ContainerVersion\", \"CreatorVersion\", \"FileSize\", \"FontVersion\", \"ImageHeight\", \"ImageSize\", \"ImageWidth\", \"MaxPageSizeH\", \"MaxPageSizeW\", \"Megapixels\", \"NPages\", \"PageCount\", \"FileModificationDate_Time\", \"FileAccessDate_Time\", \"FileInodeChangeDate_Time\", \"CreateDate\", \"ModifyDate\", \"MetadataDate\"];\r\n\r\n  boolArr: any[] = [\"Linearized\"]\r\n  // Types Of Forms\r\n\r\n  // Select Field optins data ==============================\r\n  conditionIntegerList: any[] = [{ label: 'isGreaterThan', value: \"gt\" }, { label: 'isLessThan', value: 'lt' }, { label: 'isEqualTo', value: 'eq' }, { label: 'isGreaterThanOrEqualsTo', value: 'gte' }, { label: 'isLessThanOrEqualsTo', value: 'lte' }, { value: 'range', label: 'Range' }];\r\n\r\n  // conditionStringList = [{ label: 'contains', value: 'contains' }, { label: 'exact', value: 'exact' }, { label: 'iexact', value: 'iexact' }, { label: 'icontains', value: 'icontains' }, { value: 'startswith', label: 'StartsWith' }, { value: 'istartswith', label: 'IStartsWith' }, { value: 'endswith', label: 'EndsWith' }, { value: 'iendswith', label: 'IEndsWith' }];\r\n\r\n  conditionStringList = [{ label: 'contains', value: 'contains' }, { label: 'exact', value: 'exact' }, { value: 'startswith', label: 'StartsWith' }, { value: 'endswith', label: 'EndsWith' }];\r\n\r\n  conditionBooleanList = [{ value: 'boolean', label: 'boolean' }];\r\n\r\n  combineOp: any[] = [];\r\n\r\n  metadataSearchData: any = {};\r\n  metadataSearchKeys: any[] = [];\r\n\r\n  advancedSearchType: 'File' | 'Folder' = 'File';\r\n  // Select Field optins data ==============================\r\n  // combined search =============================================\r\n\r\n  // Feature select All option\r\n  selectAllFoldersCheck: boolean = false;\r\n  gselectAllFoldersCheck: boolean = false;\r\n  selectAllFilesCheck: boolean = false;\r\n  selectAllPdfFoldersCheck: boolean = false;\r\n  gselectAllPdfFoldersCheck: boolean = false;\r\n  selectAllPdfFilesCheck: boolean = false;\r\n  selectAllCsvFoldersCheck: boolean = false;\r\n  selectAllCsvFilesCheck: boolean = false;\r\n  // Feature select All option\r\n\r\n  //directory selection path\r\n  selectedPdfPaths: string[] = [];\r\n  selectedCsvPaths: string[] = [];\r\n  //directory selection path\r\n\r\n  docMergePdf: any[] = [];\r\n  docMergeSelectedPdf: any[] = [];\r\n\r\n  pdfurl: any = '';\r\n  pdfpagenums: any[] = [];\r\n\r\n  excelExtensionList: any[] = ['csv', 'xls'];\r\n  imageExtensionList: any[] = ['png', 'jpg', 'jpeg'];\r\n\r\n  allFolderNames: string[] = [];\r\n  allFileNames: string[] = [];\r\n\r\n  public user: SocialUser = null;\r\n\r\n  rootDirName: string = \"Myfiles\";\r\n\r\n  base_path: string = \"Input_Folder/\";\r\n\r\n  showBuildDeliveryUi: boolean;\r\n  showBuildDeliveryUi2: boolean = false;\r\n  ispdfClicked: boolean = false;\r\n  issearchClicked:boolean=false\r\n  pdfFilePathright: any;\r\n  searchPathright:any;\r\n\r\n  showQuestionList: boolean = false;\r\n  selectedFileForQuestion = ''\r\n  selectAllQues = ''\r\n\r\n  notes: boolean = false\r\n  tag: boolean = false\r\n  keywords: any\r\n\r\n\r\n  constructor(public _upload: UploadDirectoryService, public _ngxService: NgxUiLoaderService, private _modal: ModalService, public _auth: AuthService, private _directory: DirectoryService, public _common: CommonnService, private route: ActivatedRoute, private _process: FeatureProcessService, private _fb: FormBuilder, private _FileSaverService: FileSaverService, private authService: SocialAuthService, private httpClient: HttpClient, private sanitizer: DomSanitizer, public router: Router, private location: Location) {\r\n    this.router.events.subscribe((event) => {\r\n      if (event instanceof NavigationEnd) {\r\n        this.history.push(event.urlAfterRedirects)\r\n      }\r\n    })\r\n    this._common.$resetMyFile.subscribe((res: any) => {\r\n      let currentUrl = this.router.url;\r\n      console.log(\"currrrrr url my file\", currentUrl)\r\n      if (currentUrl == '/viewDir/myfiles') {\r\n        this.goToMyFiles()\r\n      } else {\r\n        localStorage.removeItem('input');\r\n      }\r\n    })\r\n  }\r\n\r\n  back() {\r\n    this.ispdfClicked = false\r\n    this.issearchClicked=false\r\n    this._common.$varifyFolder.next('')\r\n    // this.history.pop();\r\n    if (this.pathList.length > 0) {\r\n      this.pathList.pop();\r\n      console.log(\">>>>\", this.pathList[this.pathList.length - 1])\r\n      if (this.pathList[this.pathList.length - 1] && this.pathList[this.pathList.length - 1].includes('External_Assigned')) {\r\n        this.isAccess = true\r\n      }\r\n      if (this.pathList[this.pathList.length - 1] && this.pathList[this.pathList.length - 1].includes('Delivery Bible')) {\r\n        localStorage.removeItem(\"buildBibleSubDir\")\r\n      }\r\n      this.listDirectories();\r\n      this.storeCurrentDirPath();\r\n    }\r\n    // else if (this.history.length > 0) {\r\n    //   this.location.back()\r\n    // }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n    // autocomplete\r\n\r\n    // this.filteredOptions = this.myControl.valueChanges.pipe(\r\n    //   startWith(''),\r\n    //   map(value => this._filter(value || '')),\r\n    // );\r\n\r\n    this.externalFolders = [\r\n      {\r\n        \"name\": \"HTD\",\r\n        \"is_directory\": true,\r\n        \"isSelected\": false,\r\n        \"isVirtualfolder\": true,\r\n        \"type\": \"empty\",\r\n        \"path\": \"G_input/StatValu/PriyankaMhatre\",\r\n        \"help_str\": \"/home/statvalu-local/mycontainer/G_input/StatValu/PriyankaMhatre/HTD\",\r\n        \"file_counts\": {},\r\n        \"total_files\": 0,\r\n        \"total_dirs\": 0,\r\n        \"directory\": \"Folder\",\r\n        \"role\": \"admin\"\r\n      },\r\n      {\r\n        \"name\": \"test\",\r\n        \"is_directory\": true,\r\n        \"isSelected\": false,\r\n        \"isVirtualfolder\": true,\r\n        \"type\": \"pdf\",\r\n        \"path\": \"G_input/StatValu/PriyankaMhatre\",\r\n        \"help_str\": \"/home/statvalu-local/mycontainer/G_input/StatValu/PriyankaMhatre/test\",\r\n        \"file_counts\": {\r\n          \"pdf\": 6\r\n        },\r\n        \"total_files\": 6,\r\n        \"total_dirs\": 0,\r\n        \"directory\": \"Folder\",\r\n        \"role\": \"user\"\r\n      },\r\n    ]\r\n\r\n    this.resetDirectoryFilterPageSize();\r\n    this.route.params.subscribe(params => {\r\n      console.log(\"inside param.......................\")\r\n      let input_dir_path = JSON.parse(localStorage.getItem('input')) || [];\r\n      let output_dir_path = JSON.parse(localStorage.getItem('output')) || [];\r\n      let req_dir_path = JSON.parse(localStorage.getItem('req')) || [];\r\n      let err_dir_path = JSON.parse(localStorage.getItem('err')) || [];\r\n\r\n      localStorage.setItem(params.type, JSON.stringify(this.pathList));\r\n      console.log(\"paramss\", params, input_dir_path);\r\n      this.ispdfClicked = false\r\n      this.issearchClicked=false\r\n\r\n      if (params.type === 'myfiles') {\r\n        this.base_path = \"Input_Folder/\";\r\n        this.pathList = input_dir_path;\r\n        this.rootDirName = \"Myfiles\";\r\n      }\r\n      else if (params.type === 'output-folder') {\r\n        this.base_path = \"Output_Folder/\";\r\n        this.pathList = output_dir_path;\r\n        this.rootDirName = \"Output\";\r\n        this.hideContentMetaOnOtherRoutes();\r\n        this.resetFeatureSelection();\r\n      }\r\n      else if (params.type === 'request-folder') {\r\n        this.base_path = \"Req_Output_Folder/\";\r\n        this.pathList = req_dir_path;\r\n        this.rootDirName = \"Request\";\r\n        this.hideContentMetaOnOtherRoutes();\r\n        this.resetFeatureSelection();\r\n      } else {\r\n        this.base_path = \"Err_Info_Folder/\";\r\n        this.pathList = err_dir_path;\r\n        this.rootDirName = \"Error\";\r\n        this.hideContentMetaOnOtherRoutes();\r\n        this.resetFeatureSelection();\r\n      }\r\n      this.getTreeNode()\r\n      this.listDirectories();\r\n      console.log(\">>>>>>>>>>>>\", this.listViewVal, this.largeView)\r\n    });\r\n\r\n    this._common.$featureName.subscribe(res => {\r\n      this.selectedFeature = res;\r\n      console.log(res);\r\n      this.pdfurl = null;\r\n\r\n      this._common.currSelectedFeature = res;\r\n\r\n      res === 'Metadata Updation' || res === 'Document Classification' || res === 'Hard time dashboard' ? this.showCsvTable = true : this.showCsvTable = false;\r\n      res === 'Image Augmentation' ? this.showImageFile = true : this.showImageFile = false;\r\n      this.unselectAllFoldersAndFiles();\r\n      this.unselectAllGFolders();\r\n      this.unselectAllPdfFoldersAndFiles();\r\n      this.unselectAllCsvFoldersAndFiles();\r\n      this.unselectAllImageFiles();\r\n      this.unselectAllGPdfFolders();\r\n      this.fillDocMergePdf();\r\n      this.selectedPdfPaths = [];\r\n      this.selectedCsvPaths = [];\r\n      this.docMergeSelectedPdf = [];\r\n      if (res) {\r\n        this.showAllFoldersFiles = false;\r\n        res === 'Document Classification' ? this.showDocClassificationPdfFolder() : this.showPdfDirectory();\r\n        this.featureOptions.page_pattern = \"\";\r\n        this.resetDirectoryFilter();\r\n        this.resetFeatureSelectAll();\r\n      } else {\r\n        this.showAllFoldersFiles = true;\r\n        this.showAllPdfFoldersFiles = false;\r\n        this.showAllCsvFoldersFiles = false;\r\n        this.selectedStep = \"step1\";\r\n        this.featureOptions.page_pattern = \"\";\r\n        this._common.$unselectFeatureCheckbox.next('');\r\n        this.resetDirectoryFilter();\r\n        this.resetFeatureSelectAll();\r\n      }\r\n    });\r\n    this._common.$updateDirectory.subscribe(res => {\r\n      this.listDirectories();\r\n    });\r\n\r\n    this._common.$unselectPdfCsvDirectory.subscribe(res => {\r\n      this.unselectAllFoldersAndFiles();\r\n      this.unselectAllGFolders();\r\n      this.unselectAllPdfFoldersAndFiles();\r\n      this.unselectAllCsvFoldersAndFiles();\r\n      this.unselectAllImageFiles();\r\n      this.unselectAllGPdfFolders();\r\n      this.featureOptions.page_pattern = \"every page\";\r\n      this.resetDirectoryFilter();\r\n      this.resetFeatureOptions();\r\n      this.selectedPdfPaths = [];\r\n      this.selectedCsvPaths = [];\r\n      this.docMergeSelectedPdf = [];\r\n    });\r\n\r\n\r\n    this.metadataSearchForm = this._fb.group({\r\n      formsArray: this._fb.array(this.createForms())\r\n    });\r\n\r\n    this.airCraftSearchForm=this._fb.group({\r\n      msn:[''],\r\n      owner:[''],\r\n      project:[''],\r\n      type:['']\r\n    })\r\n\r\n\r\n\r\n    this.contentSearchForm = this._fb.group({\r\n      text: [false],\r\n      number: [false],\r\n      date: [false],\r\n\r\n      textOperator: ['AND'],\r\n      numberOperator: ['AND'],\r\n\r\n      textConditions: this._fb.array([\r\n        this._fb.group({\r\n          search_string: [''],\r\n          condition: ['contains'],\r\n          operator: ['AND'],\r\n          value_type: ['text']\r\n        })\r\n      ]),\r\n\r\n      numberConditions: this._fb.array([\r\n        this._fb.group({\r\n          search_value: [''],\r\n          condition: ['gt'],\r\n          operator: ['AND'],\r\n          start: [''],\r\n          end: ['']\r\n        })\r\n      ]),\r\n\r\n      dateConditions: this._fb.array([\r\n        this._fb.group({\r\n          search_date: [''],\r\n          condition: ['gt'],\r\n          operator: ['AND'],\r\n          start: [''],\r\n          end: ['']\r\n        })\r\n      ]),\r\n      approx_search: [false]\r\n    })\r\n\r\n    this.documentFolderSearchForm = this._fb.group({\r\n      search_rule: ['', Validators.required],\r\n      is_pattern: ['false'],\r\n      fixed_left: ['', Validators.required],\r\n      fixed_right: ['', Validators.required]\r\n    })\r\n\r\n    this.authService.authState.subscribe(user => {\r\n      this.user = user;\r\n      console.log(user);\r\n    });\r\n\r\n    this.inputLinkForm = this._fb.group({\r\n      folderName: ['', Validators.required],\r\n      projectName: [''],\r\n      links: this._fb.array([this._fb.group({\r\n        input_link: ['', Validators.required],\r\n        name: ['', Validators.required],\r\n        uid: [this._common.getRandomString()]\r\n      })]),\r\n      outputLink: ['', Validators.required]\r\n    });\r\n\r\n    this._common.$openDirectory.subscribe((res: any) => {\r\n      console.log(\"working\");\r\n      this.showBuildDeliveryUi = false;\r\n\r\n      this.pathList = [];\r\n      this.pathList = res.path.split('/').slice(3);\r\n\r\n      // let lastPath=this.pathList[this.pathList.length-1]\r\n      // let showBible=lastPath.includes('Delivery Bible')\r\n      // console.log(\"is bible render\", this.pathList,showBible)\r\n\r\n      let showBible = this.pathList.some(path => {\r\n        return path.includes('Delivery Bible');\r\n      });\r\n\r\n      console.log(\"is bible render\", this.pathList, showBible)\r\n\r\n\r\n      if (showBible) {\r\n        localStorage.setItem('output', JSON.stringify(this.pathList));\r\n      } else {\r\n        this.storeCurrentDirPath();\r\n      }\r\n      this.listDirectories(res.name);\r\n      console.log(this.pathList);\r\n    });\r\n\r\n    this._common.$openFile.subscribe((res: any) => {\r\n      this.openFile(res);\r\n    });\r\n\r\n    this._common.$refreshDirectories.subscribe((res => {\r\n      this.pathList = JSON.parse(localStorage.getItem('output'));\r\n      console.log(\"firing\");\r\n\r\n      this.listDirectories();\r\n    }));\r\n\r\n    this._common.$pushDirForBiblePageReordering.subscribe((res: any) => {\r\n      this.pdfFileList.length = 0;\r\n      this.docMergePdf.length = 0;\r\n\r\n      this.pdfFileList = res;\r\n      this.filteredPdfFileList = this.pdfFileList;\r\n      res.forEach((data: any) => {\r\n        this.docMergePdf.push({ path: data.path + '/' + data.name, isSelected: false });\r\n      })\r\n    });\r\n\r\n    this._common.$hideExternalViewer.subscribe((res: any) => {\r\n      this.showPdfViewer = false;\r\n      this.showCsvViewer = false;\r\n    });\r\n  }\r\n\r\n  dataChanged(val:any){\r\n    console.log(\">>>>>>>>>>>>\",val)\r\n// autocomplete\r\n\r\n    // this.filteredOptions = this.myControl.valueChanges.pipe(\r\n    //   startWith(''),\r\n    //   map(value => this._filter(value || '')),\r\n    // );\r\n  }\r\n  \r\n\r\n  private _filter(value: string): string[] {\r\n    const filterValue = value.toLowerCase();\r\n\r\n    return this.options.filter(option => option.toLowerCase().includes(filterValue));\r\n  }\r\n\r\n  addNotes() {\r\n    this.notes = true\r\n  }\r\n  addTags() {\r\n    this.tag = true\r\n  }\r\n\r\n  addKeywordFromInput(event: MatChipInputEvent) {\r\n    if (event.value) {\r\n      this.keywords.add(event.value);\r\n      event.chipInput!.clear();\r\n    }\r\n  }\r\n\r\n  removeKeyword(keyword: string) {\r\n    this.keywords.delete(keyword);\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this._common.containerRef = this.directoryContainerElem.nativeElement;\r\n  }\r\n\r\n  // ***********************************Shortcut Keys*******************************\r\n  @HostListener('document:keydown', ['$event'])\r\n  onSelectHandler(evt: any) {\r\n    if ((evt.ctrlKey || evt.metaKey) && evt.keyCode == 65) {\r\n      this.selectAllFoldersAndFiles()\r\n      this.selectAllGFolders()\r\n    }\r\n    else if ((evt.ctrlKey || evt.metaKey) && evt.keyCode == 90) {\r\n      this.unselectAllFoldersAndFiles()\r\n      this.unselectAllGFolders()\r\n    }\r\n  }\r\n\r\n  @HostListener('window:popstate', ['$event'])\r\n  onPopState(event: any) {\r\n    this.showPdfViewer = false;\r\n    this.showCsvViewer = false;\r\n  }\r\n  // ***********************************Shortcut Keys*******************************\r\n\r\n\r\n  // ***********************************Other Features*******************************\r\n\r\n  //change folders,files view\r\n  changeView() {\r\n    this.largeView = !this.largeView;\r\n    this.listViewVal = false\r\n    this._common.$largView.next(this.largeView)\r\n    this._common.$listView.next(this.listViewVal)\r\n    console.log(this.listViewVal, this.largeView)\r\n  }\r\n\r\n  showEmptyDirectory(): boolean {\r\n    return (this.filteredFolderList.length === 0) && (this.filteredFileList.length === 0) && (this.gfilteredFolderList.length === 0);\r\n  }\r\n\r\n  toggleCsvTable() {\r\n    if (this.featureOptions.page_pattern === 'csv') {\r\n      this.showCsvTable = true;\r\n    } else {\r\n      this.showCsvTable = false;\r\n    }\r\n  }\r\n\r\n  resetFeatureSelection() {\r\n    this._common.$unselectPdfCsvDirectory.next('');\r\n    this._common.$unselectFeatureCheckbox.next('');\r\n    this._common.$featureName.next('');\r\n  }\r\n\r\n  resetDirectoryFilter() {\r\n    this.pdfPage = 1;\r\n    this.pdfPageSize = parseInt(localStorage.getItem('pdffolder')) || 100;\r\n\r\n    this.gpdfPage = 1;\r\n    this.gpdfPageSize = parseInt(localStorage.getItem('gpdffolder')) || 100;\r\n\r\n    this.pdfFilePage = 1;\r\n    this.pdfFilePageSize = parseInt(localStorage.getItem('pdffile')) || 100;\r\n\r\n    this.csvPage = 1;\r\n    this.csvPageSize = parseInt(localStorage.getItem('csvfolder')) || 100;\r\n\r\n    this.csvFilepage = 1;\r\n    this.csvFilePageSize = parseInt(localStorage.getItem('csvfile')) || 100;\r\n  }\r\n\r\n  resetFeatureSelectAll() {\r\n    this.selectAllPdfFoldersCheck = false;\r\n    this.gselectAllPdfFoldersCheck = false;\r\n    this.selectAllPdfFilesCheck = false;\r\n    this.selectAllCsvFoldersCheck = false;\r\n    this.selectAllCsvFilesCheck = false;\r\n  }\r\n\r\n  resetDirectoryFilterPageSize() {\r\n    this.pageSize = parseInt(localStorage.getItem('folder')) || 100;\r\n    this.gpageSize = parseInt(localStorage.getItem('gfolder')) || 100;\r\n    this.filePageSize = parseInt(localStorage.getItem('file')) || 100;\r\n  }\r\n\r\n  resetFeatureOptions() {\r\n    this.featureOptions = { search_on: 'Google', word_list: [], approx_search: false, top_lines: '', password: '', del_attr_list: '', rule_file_path: '', page_pattern: '', page_list_or_csv: '', location: '', img_aug_customval: '', image_path: '', watermark_string: '', color: 'red', opacity: '', strokes: '', bookmark_word_or_csv: '', input_paths: [], pattern_file: '', redactPersonalInfo: { email: false, phone: false, people: false, address: false, date_of_birth: false, account_number: false, pps_number: false }, number_of_groups: '', anchor_text: '', region_size: '', height: '', split_pattern: '', input_page_list: '', order_list: [], doc_merge_filename: '' };\r\n  }\r\n\r\n  // store filter page size when change\r\n  storeFolderPageSize() {\r\n    localStorage.setItem('folder', this.pageSize.toString());\r\n  }\r\n  storegFolderPageSize() {\r\n    localStorage.setItem('gfolder', this.gpageSize.toString());\r\n  }\r\n  storeFilePageSize() {\r\n    localStorage.setItem('file', this.filePageSize.toString());\r\n  }\r\n  storePdfFolderPageSize() {\r\n    localStorage.setItem('pdffolder', this.pdfPageSize.toString());\r\n  }\r\n  storegPdfFolderPageSize() {\r\n    localStorage.setItem('gpdffolder', this.gpdfPageSize.toString());\r\n  }\r\n  storePdfFilePageSize() {\r\n    localStorage.setItem('pdffile', this.pdfFilePageSize.toString());\r\n  }\r\n  storeCsvFolderPageSize() {\r\n    localStorage.setItem('csvfolder', this.csvPageSize.toString());\r\n  }\r\n  storeCsvFilePageSize() {\r\n    localStorage.setItem('csvfile', this.csvFilePageSize.toString());\r\n  }\r\n  // store filter page size when change\r\n\r\n  @ViewChild('directorycontainer') directoryContainerElem: ElementRef;\r\n  fullscreen() {\r\n    console.log(this.directoryContainerElem);\r\n\r\n    if (this.directoryContainerElem.nativeElement.requestFullscreen) {\r\n      this.directoryContainerElem.nativeElement.requestFullscreen();\r\n    } else if (this.directoryContainerElem.nativeElement.webkitRequestFullscreen) { /* Safari */\r\n      this.directoryContainerElem.nativeElement.webkitRequestFullscreen();\r\n    } else if (this.directoryContainerElem.nativeElement.msRequestFullscreen) { /* IE11 */\r\n      this.directoryContainerElem.nativeElement.msRequestFullscreen();\r\n    }\r\n  }\r\n\r\n  closeFullscreen() {\r\n    if (document.exitFullscreen) {\r\n      document.exitFullscreen();\r\n    }\r\n    //@ts-ignore\r\n    else if (document.webkitExitFullscreen) { /* Safari */\r\n      //@ts-ignore\r\n      document.webkitExitFullscreen();\r\n    }\r\n    //@ts-ignore\r\n    else if (document.msExitFullscreen) { /* IE11 */\r\n      //@ts-ignore\r\n      document.msExitFullscreen();\r\n    }\r\n  }\r\n\r\n  getTreeNode() {\r\n    this._common.$foldersTreeData.next({});\r\n    let rootDir = {}\r\n    let path = this.base_path + this._auth.org_name + '/' + this._auth.user_name;\r\n    this._directory.getChildNodeData(path).subscribe((res: any) => {\r\n      // console.log(res);\r\n      console.log(\"parant node response\", res.res_data.jsonData)\r\n      rootDir = {\r\n        \"name\": this._auth.user_name,\r\n        \"id\": 0,\r\n        \"path\": this.base_path + this._auth.org_name + '/' + this._auth.user_name,\r\n        \"total_count\": res.res_data.jsonData.total_count,\r\n        \"type\": \"directory\",\r\n        \"expanded\": false,\r\n      }\r\n      console.log(\"parant node created\", res.res_data.jsonData)\r\n      this._common.$foldersTreeData.next(rootDir);\r\n    });\r\n  }\r\n\r\n  showTreeView() {\r\n    this._common.$showTree.next(true);\r\n    this._common.$showFolderTree.next(false);\r\n    this._common.$showFeatureList.next(false)\r\n  }\r\n\r\n  listView() {\r\n    this.listViewVal = !this.listViewVal\r\n    this._common.$listView.next(this.listViewVal)\r\n    this.largeView = false\r\n    this._common.$largView.next(this.largeView)\r\n    console.log(\"list i input\", this.listViewVal, this.largeView)\r\n  }\r\n\r\n  changeDirNameMode() {\r\n    let nameMode = localStorage.getItem(\"namemode\") || \"short\";\r\n    if (nameMode === \"short\") {\r\n      localStorage.setItem(\"namemode\", \"full\");\r\n      this._common.$nameMode.next('full');\r\n    } else {\r\n      localStorage.setItem(\"namemode\", \"short\");\r\n      this._common.$nameMode.next('short');\r\n    }\r\n  }\r\n\r\n  // ***********************************Other Features*******************************\r\n\r\n\r\n\r\n  // ***********************************List Directories*******************************\r\n  showFetchDirSpinner: boolean = false;\r\n  listDirectories(path: string = \"\", externalpath: string = '') {\r\n    console.log(\"list dir path is \" + path + \"externalpath\" + externalpath)\r\n    this.showFetchDirSpinner = true;\r\n    this.folderList.length = 0;\r\n    this.gfolderList.length = 0;\r\n    this.gfilteredFolderList.length = 0;\r\n    this.fileList.length = 0;\r\n    this.pdfFolderList.length = 0;\r\n    this.gpdfFolderList.length = 0;\r\n    this.pdfFileList.length = 0;\r\n    this.docMergePdf.length = 0;\r\n    this.csvFolderList.length = 0;\r\n    this.csvFileList.length = 0;\r\n    this.filteredFolderList.length = 0;\r\n    this.filteredFileList.length = 0;\r\n    this.imageFileList.length = 0;\r\n    this.filteredImageFileList.length = 0;\r\n    this.allFolderNames.length = 0;\r\n    let dir_path = this.base_path + this._auth.org_name + '/' + this._auth.user_name;\r\n\r\n    let nameMode = localStorage.getItem(\"namemode\");\r\n    this._common.$nameMode.next(nameMode);\r\n\r\n    this.showBuildDeliveryUi = false;\r\n\r\n    // let lastPath=this.pathList[this.pathList.length-1]\r\n    //   let showBible=lastPath.includes('Delivery Bible')\r\n    //   console.log(\"is bible render\", this.pathList,showBible)\r\n    let showBible = this.pathList.some(path => {\r\n      return path.includes('Delivery Bible');\r\n    });\r\n    if (showBible) {\r\n      this.varifyOptions = true\r\n    } else {\r\n      this.varifyOptions = false\r\n    }\r\n    console.log(\"?????????????\", this.showFilesMove, ((showBible && this.pathList[this.pathList.length - 1].includes(\"Delivery Bible\")) || (this.showFilesMove && this.pathList[this.pathList.length - 2].includes(\"Delivery Bible\"))))\r\n\r\n    // if (this.showFilesMove) {\r\n    //   if(showBible && this.pathList[this.pathList.length - 2].includes(\"Delivery Bible\")){\r\n    //   this._common.$showFileMov.next(true)\r\n    //     this.showBuildDeliveryUi = true;\r\n    //   this.showFetchDirSpinner = false;\r\n    //   console.log(\">>>>>>>path list\", this.pathList)\r\n    //   return;\r\n    //   }\r\n    // } else {\r\n    //   this.showBuildDeliveryUi = false;\r\n    //   this._common.$showFileMov.next(false)\r\n    // }\r\n\r\n\r\n    // if (showBible && this.pathList.length <= 4) {\r\n    if (showBible && this.pathList[this.pathList.length - 1].includes(\"Delivery Bible\")) {\r\n      this.showBuildDeliveryUi = true;\r\n      this.showFetchDirSpinner = false;\r\n      console.log(\">>>>>>>path list\", this.pathList)\r\n      return;\r\n    }\r\n    // else if (showBible && this.pathList[this.pathList.length - 2].includes(\"Delivery Bible\")) {\r\n    //   this.showBuildDeliveryUi = true;\r\n    //   this.showFetchDirSpinner = false;\r\n    //   this._common.$showFileMov.next(true)\r\n    //   console.log(\">>>>>>>path list\", this.pathList)\r\n    //   return;\r\n    // }\r\n    else {\r\n      this.showBuildDeliveryUi = false;\r\n    }\r\n\r\n\r\n\r\n    console.log(this.showBuildDeliveryUi);\r\n\r\n\r\n    let gdir_path = '';\r\n    if (this.base_path === 'Input_Folder/') {\r\n      gdir_path = 'G_input/' + this._auth.org_name + '/' + this._auth.user_name;\r\n    }\r\n    else if (this.base_path === 'Output_Folder/') {\r\n      gdir_path = 'G_output/' + this._auth.org_name + '/' + this._auth.user_name;\r\n    }\r\n    else if (this.base_path === 'Req_Output_Folder/') {\r\n      gdir_path = 'G_Req_Output_Folder/' + this._auth.org_name + '/' + this._auth.user_name;\r\n    }\r\n    else if (this.base_path === 'Err_Info_Folder/') {\r\n      gdir_path = 'G_Err_Info_Folder/' + this._auth.org_name + '/' + this._auth.user_name;\r\n    }\r\n\r\n    if (externalpath != '') {\r\n      let dir_path = externalpath.split('/').slice(4);\r\n      // dir_path.pop()\r\n      console.log(\"external dir path is\", dir_path.join('/'))\r\n      let external = dir_path.join('/')\r\n      // let path=dir_path.substring(0, dir_path.length - 1);\r\n      // path=dir_path\r\n      // console.log(\"external dir path\",path)\r\n      this.showExternalFolders(external)\r\n    } else if (this.pathList.length > 0) {\r\n      dir_path = dir_path + '/' + this.pathList.join('/');\r\n      gdir_path = gdir_path + '/' + this.pathList.join('/');\r\n      this.createFoldersAndFiles(dir_path, gdir_path);\r\n    }\r\n    else {\r\n      if (path) {\r\n        dir_path = dir_path + \"/\" + path;\r\n        gdir_path = gdir_path + \"/\" + path;\r\n      }\r\n      this.createFoldersAndFiles(dir_path, gdir_path);\r\n    }\r\n  }\r\n\r\n\r\n  // listexternalDirect\r\n\r\n  showExternalFolders(path: string) {\r\n    let gfolderInfo: any = []\r\n    let folderInfo: any[]\r\n\r\n    this.getExternalFolder(path).subscribe((res: any) => {\r\n      console.log(\"external folder res \", res)\r\n      this.csvFilesForMetadataUpdation = res.res_data.csv_path_list;\r\n      folderInfo = res.res_data.file_folder_info;\r\n      gfolderInfo = res.res_g_data.g_path_list;\r\n\r\n      for (let i = 0; i < folderInfo.length; i++) {\r\n        if (folderInfo[i].is_directory === true) {\r\n          this.allFolderNames.push(folderInfo[i].name);\r\n          folderInfo[i]['directory'] = 'Folder';\r\n          this.folderList.push(folderInfo[i]);\r\n          this.segregatePdfCsvFolders(folderInfo[i]);\r\n        } else {\r\n          if (folderInfo[i].name == \"myfile.txt\") {\r\n            continue\r\n          }\r\n          let fileName = folderInfo[i].name.split('.');\r\n          fileName.pop();\r\n          this.allFileNames.push(fileName.join());\r\n          folderInfo[i]['directory'] = 'File';\r\n          this.fileList.push(folderInfo[i]);\r\n          this.segregatePdfCsvFiles(folderInfo[i]);\r\n        }\r\n      }\r\n\r\n      for (let i = 0; i < gfolderInfo.length; i++) {\r\n        if (gfolderInfo[i].is_directory === true) {\r\n          this.allFolderNames.push(gfolderInfo[i].name);\r\n          gfolderInfo[i]['directory'] = 'Folder';\r\n          this.gfolderList.push(gfolderInfo[i]);\r\n          this.segregateGPdfFolders(gfolderInfo[i]);\r\n        } else {\r\n          let fileName = gfolderInfo[i].name.split('.');\r\n          fileName.pop();\r\n          this.allFileNames.push(fileName.join());\r\n          gfolderInfo[i]['directory'] = 'File';\r\n          this.fileList.push(gfolderInfo[i]);\r\n          this.segregatePdfCsvFiles(gfolderInfo[i]);\r\n        }\r\n      }\r\n\r\n      this.searchFoldersAndFiles();\r\n      this.showFetchDirSpinner = false;\r\n    })\r\n\r\n\r\n\r\n  }\r\n\r\n  getExternalFolder(path: string) {\r\n    let formData = new FormData;\r\n    formData.append(\"user_id\", this._auth.user_id);\r\n    formData.append(\"is_external\", \"true\");\r\n    formData.append(\"dir_path\", path)\r\n    return this.httpClient.post('/filestorage_features/folder_and_files/', formData);\r\n  }\r\n\r\n\r\n  createFoldersAndFiles(path: string, gpath: string) {\r\n    this._directory.listDirectories(path, gpath).subscribe(res => {\r\n      console.log(\"directorys\", res, path, gpath);\r\n      let folderInfo = []\r\n      let gfolderInfo = []\r\n\r\n      if (path.includes('External_Assigned')) {\r\n        gfolderInfo = res.res_g_data.file_folder_info\r\n      } else {\r\n        this.csvFilesForMetadataUpdation = res.res_data.csv_path_list;\r\n        folderInfo = res.res_data.file_folder_info;\r\n        gfolderInfo = res.res_g_data.g_path_list;\r\n      }\r\n\r\n\r\n\r\n      // const index = folderArray.findIndex(obj => obj.name == value);\r\n\r\n      for (let i = 0; i < folderInfo.length; i++) {\r\n        if (folderInfo[i].is_directory === true) {\r\n          this.allFolderNames.push(folderInfo[i].name);\r\n          folderInfo[i]['directory'] = 'Folder';\r\n          this.folderList.push(folderInfo[i]);\r\n          this.segregatePdfCsvFolders(folderInfo[i]);\r\n        } else {\r\n          if (folderInfo[i].name == \"myfile.txt\") {\r\n            continue\r\n          }\r\n          let fileName = folderInfo[i].name.split('.');\r\n          fileName.pop();\r\n          this.allFileNames.push(fileName.join());\r\n          folderInfo[i]['directory'] = 'File';\r\n          this.fileList.push(folderInfo[i]);\r\n          this.segregatePdfCsvFiles(folderInfo[i]);\r\n        }\r\n      }\r\n\r\n      for (let i = 0; i < gfolderInfo.length; i++) {\r\n        if (gfolderInfo[i].is_directory === true) {\r\n          this.allFolderNames.push(gfolderInfo[i].name);\r\n          gfolderInfo[i]['directory'] = 'Folder';\r\n          this.gfolderList.push(gfolderInfo[i]);\r\n          this.segregateGPdfFolders(gfolderInfo[i]);\r\n        } else {\r\n          let fileName = gfolderInfo[i].name.split('.');\r\n          fileName.pop();\r\n          this.allFileNames.push(fileName.join());\r\n          gfolderInfo[i]['directory'] = 'File';\r\n          this.fileList.push(gfolderInfo[i]);\r\n          this.segregatePdfCsvFiles(gfolderInfo[i]);\r\n        }\r\n      }\r\n\r\n      this.searchFoldersAndFiles();\r\n      this.showFetchDirSpinner = false;\r\n      // var image = new Image();\r\n      // image.src = \"assets/images/filetypepdf.png\";\r\n      // console.log(\"directorys\", this.fileList);\r\n    })\r\n  }\r\n\r\n  segregatePdfCsvFolders(data: any) {\r\n    if (data.type.toLowerCase() === 'pdf') {\r\n      let folderpath = data.path + '/' + data.name;\r\n\r\n      if (this.selectedPdfPaths.includes(folderpath)) {\r\n        data.isSelected = true;\r\n      } else {\r\n        data.isSelected = false;\r\n      }\r\n      this.pdfFolderList.push({ ...data });\r\n    }\r\n    else if (this.excelExtensionList.includes(data.type.toLowerCase())) {\r\n      let folderpath = data.path + '/' + data.name;\r\n\r\n      if (this.selectedCsvPaths.includes(folderpath)) {\r\n        data.isSelected = true;\r\n      } else {\r\n        data.isSelected = false;\r\n      }\r\n      this.csvFolderList.push({ ...data });\r\n    }\r\n  }\r\n\r\n  segregateGPdfFolders(data: any) {\r\n    // if (data.type.toLowerCase() === 'pdf') {\r\n    // }\r\n    let folderpath = data.path + '/' + data.name;\r\n\r\n    if (this.selectedPdfPaths.includes(folderpath)) {\r\n      data.isSelected = true;\r\n    } else {\r\n      data.isSelected = false;\r\n    }\r\n    this.gpdfFolderList.push({ ...data });\r\n  }\r\n\r\n  segregatePdfCsvFiles(data: any) {\r\n    if (data.type.toLowerCase() === 'pdf') {\r\n      let fileData = { ...data };\r\n      let filepath = fileData.path + '/' + fileData.name;\r\n\r\n      if (this.selectedPdfPaths.includes(filepath)) {\r\n        fileData.isSelected = true;\r\n      } else {\r\n        fileData.isSelected = false;\r\n      }\r\n      this.pdfFileList.push(fileData);\r\n      if (!this.docMergeSelectedPdf.includes(fileData.path + '/' + fileData.name)) {\r\n        this.docMergePdf.push({ path: fileData.path + '/' + fileData.name, isSelected: false });\r\n      }\r\n    }\r\n    else if (this.excelExtensionList.includes(data.type.toLowerCase())) {\r\n      let fileData = { ...data };\r\n      let filepath = fileData.path + '/' + fileData.name;\r\n\r\n      if (this.selectedCsvPaths.includes(filepath)) {\r\n        fileData.isSelected = true;\r\n      } else {\r\n        fileData.isSelected = false;\r\n      }\r\n      this.csvFileList.push(fileData);\r\n    }\r\n    else if (this.imageExtensionList.includes(data.type.toLowerCase())) {\r\n      this.imageFileList.push({ ...data });\r\n    }\r\n  }\r\n\r\n  fillDocMergePdf() {\r\n    this.docMergePdf.length = 0;\r\n    this.filteredPdfFileList.forEach(fileData => {\r\n      if (!this.docMergePdf.includes(fileData.path + '/' + fileData.name)) {\r\n        this.docMergePdf.push({ path: fileData.path + '/' + fileData.name, isSelected: false });\r\n      }\r\n    })\r\n  }\r\n\r\n  // ***********************************List Directories*******************************\r\n\r\n  // ***********************************For Selecting And Downloading Files*******************************\r\n\r\n  // this.singleStepFeatures.includes(this.selectedFeature)\r\n  selectDirectory(directoryType: string[]) {\r\n    let dirType = directoryType[0];\r\n    let dirName = directoryType[1];\r\n    let dirPath = directoryType[2];\r\n    console.log(directoryType);\r\n\r\n    if (dirType === \"Folder\" && this.showAllFoldersFiles) {\r\n      this.selectFolder(dirName, dirPath);\r\n    }\r\n    else if (dirType === \"File\" && this.showAllFoldersFiles) {\r\n      this.selectFile(dirName, dirPath);\r\n    }\r\n    else if (dirType === \"Folder\" && this.selectedFeature && this.showAllPdfFoldersFiles === true) {\r\n      this.selectPdfFolder(dirName, dirPath);\r\n    }\r\n    else if (dirType === \"File\" && this.selectedFeature && this.showAllPdfFoldersFiles === true) {\r\n      this.selectPdfFile(dirName);\r\n    }\r\n    else if (dirType === \"Folder\" && this.selectedFeature && this.showAllCsvFoldersFiles === true) {\r\n      this.selectCsvFolder(dirName);\r\n    }\r\n    else if (dirType === \"File\" && this.selectedFeature && this.showAllCsvFoldersFiles === true) {\r\n      console.log(dirName);\r\n\r\n      this.selectCsvFile(dirName);\r\n    }\r\n    else if (dirType === \"File\" && this.selectedFeature && this.showImageFile === true) {\r\n      this.selectImageFile(dirName);\r\n    }\r\n  }\r\n\r\n  selectPdfFolder(dirName: string, dirPath: string) {\r\n    if (this.selectedFeature === 'Document Classification') {\r\n      this.selectSinglePdfFolder(dirName);\r\n      this.selectSingleGPdfFolder(dirName);\r\n    }\r\n    // else if (this.selectedFeature === 'Avionics listing') {\r\n    //   this.selectTwoPdfFolder();\r\n    // }\r\n    else {\r\n      if (dirPath.includes('G_input')) {\r\n        let dirIndex = this.gfilteredPdfFolderList.findIndex(res => res.name === dirName);\r\n        this.gfilteredPdfFolderList[dirIndex].isSelected = !this.gfilteredPdfFolderList[dirIndex].isSelected;\r\n        this.addRemoveGFolderPdfPaths(dirIndex);\r\n      } else {\r\n        let dirIndex = this.filteredPdfFolderList.findIndex(res => res.name === dirName);\r\n        this.filteredPdfFolderList[dirIndex].isSelected = !this.filteredPdfFolderList[dirIndex].isSelected;\r\n        this.addRemoveFolderPdfPaths(dirIndex);\r\n      }\r\n    }\r\n  }\r\n\r\n  selectPdfFile(dirName: string) {\r\n    if (this.selectedFeature === 'Document Classification' || this.selectedFeature === 'Page Reordering') {\r\n      this.selectSinglePdfFile(dirName);\r\n    } else {\r\n      let dirIndex = this.filteredPdfFileList.findIndex(res => res.name === dirName);\r\n      this.filteredPdfFileList[dirIndex].isSelected = !this.filteredPdfFileList[dirIndex].isSelected;\r\n\r\n      this.addRemoveFilePdfPaths(dirIndex);\r\n    }\r\n  }\r\n\r\n  addRemoveFilePdfPaths(dirIndex: any) {\r\n    let isPresent = this.selectedPdfPaths.some(res => {\r\n      return res === (this.filteredPdfFileList[dirIndex].path + '/' + this.filteredPdfFileList[dirIndex].name);\r\n    });\r\n\r\n    if (!isPresent && this.filteredPdfFileList[dirIndex].isSelected) {\r\n      if (this.selectedFeature === 'Document Classification' || this.selectedFeature === 'Page Reordering') {\r\n        this.selectedPdfPaths = [];\r\n        this.selectedPdfPaths.push(this.filteredPdfFileList[dirIndex].path + '/' + this.filteredPdfFileList[dirIndex].name);\r\n      } else {\r\n        this.selectedPdfPaths.push(this.filteredPdfFileList[dirIndex].path + '/' + this.filteredPdfFileList[dirIndex].name);\r\n      }\r\n    } else {\r\n      if (this.selectedFeature === 'Document Classification') {\r\n        this.selectedPdfPaths.splice(0, 1);\r\n      } else {\r\n        let dirPathIndex = this.selectedPdfPaths.findIndex(res => res === (this.filteredPdfFileList[dirIndex].path + '/' + this.filteredPdfFileList[dirIndex].name));\r\n        this.selectedPdfPaths.splice(dirPathIndex, 1);\r\n      }\r\n    }\r\n    console.log(this.selectedPdfPaths);\r\n  }\r\n\r\n  addRemoveFileCsvPaths(dirIndex: any) {\r\n    console.log(dirIndex);\r\n\r\n    let isPresent = this.selectedCsvPaths.some(res => {\r\n      return res === (this.filteredCsvFileList[dirIndex].path + '/' + this.filteredCsvFileList[dirIndex].name);\r\n    });\r\n\r\n    if (!isPresent && this.filteredCsvFileList[dirIndex].isSelected) {\r\n      if (this.selectedFeature === 'Document Classification') {\r\n        this.selectedCsvPaths = [];\r\n        this.selectedCsvPaths.push(this.filteredCsvFileList[dirIndex].path + '/' + this.filteredCsvFileList[dirIndex].name);\r\n      } else {\r\n        this.selectedCsvPaths.push(this.filteredCsvFileList[dirIndex].path + '/' + this.filteredCsvFileList[dirIndex].name);\r\n      }\r\n    } else {\r\n      if (this.selectedFeature === 'Document Classification') {\r\n        this.selectedCsvPaths.splice(0, 1);\r\n      } else {\r\n        let dirPathIndex = this.selectedCsvPaths.findIndex(res => res === (this.filteredCsvFileList[dirIndex].path + '/' + this.filteredCsvFileList[dirIndex].name));\r\n        this.selectedCsvPaths.splice(dirPathIndex, 1);\r\n      }\r\n    }\r\n    console.log(this.selectedCsvPaths);\r\n  }\r\n\r\n  addRemoveFolderCsvPaths(dirIndex: any) {\r\n    console.log(dirIndex);\r\n\r\n    let isPresent = this.selectedCsvPaths.some(res => {\r\n      return res === (this.filteredCsvFolderList[dirIndex].path + '/' + this.filteredCsvFolderList[dirIndex].name);\r\n    });\r\n\r\n    if (!isPresent && this.filteredCsvFolderList[dirIndex].isSelected) {\r\n      if (this.selectedFeature === 'Document Classification') {\r\n        this.selectedCsvPaths = [];\r\n        this.selectedCsvPaths.push(this.filteredCsvFolderList[dirIndex].path + '/' + this.filteredCsvFolderList[dirIndex].name);\r\n      } else {\r\n        this.selectedCsvPaths.push(this.filteredCsvFolderList[dirIndex].path + '/' + this.filteredCsvFolderList[dirIndex].name);\r\n      }\r\n    } else {\r\n      if (this.selectedFeature === 'Document Classification') {\r\n        this.selectedCsvPaths.splice(0, 1);\r\n      } else {\r\n        let dirPathIndex = this.selectedCsvPaths.findIndex(res => res === (this.filteredCsvFolderList[dirIndex].path + '/' + this.filteredCsvFolderList[dirIndex].name));\r\n        this.selectedCsvPaths.splice(dirPathIndex, 1);\r\n      }\r\n    }\r\n    console.log(this.selectedCsvPaths);\r\n  }\r\n\r\n  addRemoveFolderPdfPaths(dirIndex: any) {\r\n    let isPresent = this.selectedPdfPaths.some(res => {\r\n      return res === (this.filteredPdfFolderList[dirIndex].path + '/' + this.filteredPdfFolderList[dirIndex].name);\r\n    });\r\n\r\n    if (!isPresent && this.filteredPdfFolderList[dirIndex].isSelected) {\r\n      if (this.selectedFeature === 'Document Classification') {\r\n        this.selectedPdfPaths = [];\r\n        this.selectedPdfPaths.push(this.filteredPdfFolderList[dirIndex].path + '/' + this.filteredPdfFolderList[dirIndex].name);\r\n      } else {\r\n        this.selectedPdfPaths.push(this.filteredPdfFolderList[dirIndex].path + '/' + this.filteredPdfFolderList[dirIndex].name);\r\n      }\r\n    } else {\r\n      if (this.selectedFeature === 'Document Classification') {\r\n        this.selectedPdfPaths.splice(0, 1);\r\n      } else {\r\n        let dirPathIndex = this.selectedPdfPaths.findIndex(res => res === (this.filteredPdfFolderList[dirIndex].path + '/' + this.filteredPdfFolderList[dirIndex].name));\r\n        this.selectedPdfPaths.splice(dirPathIndex, 1);\r\n      }\r\n    }\r\n    console.log(this.selectedPdfPaths);\r\n  }\r\n\r\n  addRemoveGFolderPdfPaths(dirIndex: any) {\r\n    let isPresent = this.selectedPdfPaths.some(res => {\r\n      return res === (this.gfilteredPdfFolderList[dirIndex].path + '/' + this.gfilteredPdfFolderList[dirIndex].name);\r\n    });\r\n\r\n    if (!isPresent && this.gfilteredPdfFolderList[dirIndex].isSelected) {\r\n      if (this.selectedFeature === 'Document Classification') {\r\n        this.selectedPdfPaths = [];\r\n        this.selectedPdfPaths.push(this.gfilteredPdfFolderList[dirIndex].path + '/' + this.gfilteredPdfFolderList[dirIndex].name);\r\n      } else {\r\n        this.selectedPdfPaths.push(this.gfilteredPdfFolderList[dirIndex].path + '/' + this.gfilteredPdfFolderList[dirIndex].name);\r\n      }\r\n    } else {\r\n      if (this.selectedFeature === 'Document Classification') {\r\n        this.selectedPdfPaths.splice(0, 1);\r\n      } else {\r\n        let dirPathIndex = this.selectedPdfPaths.findIndex(res => res === (this.gfilteredPdfFolderList[dirIndex].path + '/' + this.gfilteredPdfFolderList[dirIndex].name));\r\n        this.selectedPdfPaths.splice(dirPathIndex, 1);\r\n      }\r\n    }\r\n    console.log(this.selectedPdfPaths);\r\n  }\r\n\r\n  selectSinglePdfFolder(dirName: string) {\r\n    for (let i = 0; i < this.filteredPdfFolderList.length; i++) {\r\n      if (this.filteredPdfFolderList[i].name === dirName) {\r\n        this.filteredPdfFolderList[i].isSelected = true;\r\n        this.addRemoveFolderPdfPaths(i);\r\n      } else {\r\n        this.filteredPdfFolderList[i].isSelected = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  // selectTwoPdfFolder() {\r\n  //   console.log(\"selected two pdf folder\");\r\n\r\n  //   for (let i = 0; i < this.gfilteredPdfFolderList.length; i++) {\r\n  //     console.log(this.gfilteredPdfFolderList[i].path);\r\n\r\n  //     if ((this.gfilteredPdfFolderList[i].path !== this.selectedPdfPaths[0] || this.gfilteredPdfFolderList[i].path !== this.selectedPdfPaths[1]) && this.gfilteredPdfFolderList[i].isSelected) {\r\n  //       this.gfilteredPdfFolderList[i].isSelected = true;\r\n  //       this.addRemoveGFolderPdfPaths(i);\r\n  //     } else {\r\n  //       this.gfilteredPdfFolderList[i].isSelected = false;\r\n  //       this.selectedPdfPaths.splice(1, 1);\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  selectSingleGPdfFolder(dirName: string) {\r\n    for (let i = 0; i < this.gfilteredPdfFolderList.length; i++) {\r\n      if (this.gfilteredPdfFolderList[i].name === dirName) {\r\n        this.gfilteredPdfFolderList[i].isSelected = true;\r\n        this.addRemoveGFolderPdfPaths(i);\r\n      } else {\r\n        this.gfilteredPdfFolderList[i].isSelected = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  selectSinglePdfFile(dirName: string) {\r\n    for (let i = 0; i < this.filteredPdfFileList.length; i++) {\r\n      if (this.filteredPdfFileList[i].name === dirName) {\r\n        this.filteredPdfFileList[i].isSelected = true;\r\n        this.addRemoveFilePdfPaths(i);\r\n\r\n        if (this.selectedFeature === 'Page Reordering') {\r\n          this.selectedPdfPaths[0] ? this.readPdfFromServer(this.selectedPdfPaths[0]) : this.pdfurl = '';\r\n        }\r\n      } else {\r\n        this.filteredPdfFileList[i].isSelected = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  selectCsvFolder(dirName: string) {\r\n    let dirIndex = this.filteredCsvFolderList.findIndex(res => res.name === dirName);\r\n    this.filteredCsvFolderList[dirIndex].isSelected = !this.filteredCsvFolderList[dirIndex].isSelected;\r\n\r\n    this.addRemoveFolderCsvPaths(dirIndex);\r\n  }\r\n\r\n  selectCsvFile(dirName: string) {\r\n    let dirIndex = this.filteredCsvFileList.findIndex(res => res.name === dirName);\r\n    this.filteredCsvFileList[dirIndex].isSelected = !this.filteredCsvFileList[dirIndex].isSelected;\r\n\r\n    console.log(dirName);\r\n\r\n    this.addRemoveFileCsvPaths(dirIndex);\r\n  }\r\n\r\n  selectImageFile(dirName: string) {\r\n    for (let i = 0; i < this.filteredImageFileList.length; i++) {\r\n      if (this.filteredImageFileList[i].name === dirName) {\r\n        this.filteredImageFileList[i].isSelected = true;\r\n      } else {\r\n        this.filteredImageFileList[i].isSelected = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  selectFolder(dirName: string, dirPath: string) {\r\n    let dirPathName = dirPath.split('/')[0];\r\n    if (dirPathName === 'G_input') {\r\n      let dirIndex = this.gfilteredFolderList.findIndex(res => res.name === dirName);\r\n      this.gfilteredFolderList[dirIndex].isSelected = !this.gfilteredFolderList[dirIndex].isSelected;\r\n    } else {\r\n      let dirIndex = this.filteredFolderList.findIndex(res => res.name === dirName);\r\n      this.filteredFolderList[dirIndex].isSelected = !this.filteredFolderList[dirIndex].isSelected;\r\n    }\r\n  }\r\n\r\n  selectFile(dirName: string, dirPath: string) {\r\n    let dirPathName = dirPath.split('/')[0];\r\n    let dirIndex = this.filteredFileList.findIndex(res => res.name === dirName);\r\n    this.filteredFileList[dirIndex].isSelected = !this.filteredFileList[dirIndex].isSelected;\r\n  }\r\n\r\n  selectAllFolder() {\r\n    if (this.selectAllFoldersCheck) {\r\n      for (let i = 0; i < this.filteredFolderList.length; i++) {\r\n        this.filteredFolderList[i].isSelected = true;\r\n      }\r\n    } else {\r\n      for (let i = 0; i < this.filteredFolderList.length; i++) {\r\n        this.filteredFolderList[i].isSelected = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  selectAllGFolder() {\r\n    if (this.gselectAllFoldersCheck) {\r\n      for (let i = 0; i < this.gfilteredFolderList.length; i++) {\r\n        this.gfilteredFolderList[i].isSelected = true;\r\n      }\r\n    } else {\r\n      for (let i = 0; i < this.gfilteredFolderList.length; i++) {\r\n        this.gfilteredFolderList[i].isSelected = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  selectAllFile() {\r\n    if (this.selectAllFilesCheck) {\r\n      for (let i = 0; i < this.filteredFileList.length; i++) {\r\n        this.filteredFileList[i].isSelected = true;\r\n      }\r\n    } else {\r\n      for (let i = 0; i < this.filteredFileList.length; i++) {\r\n        this.filteredFileList[i].isSelected = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  selectAllPdfFolder() {\r\n    if (this.selectAllPdfFoldersCheck) {\r\n      for (let i = 0; i < this.filteredPdfFolderList.length; i++) {\r\n        this.filteredPdfFolderList[i].isSelected = true;\r\n        this.addRemoveFolderPdfPaths(i);\r\n      }\r\n    } else {\r\n      for (let i = 0; i < this.filteredPdfFolderList.length; i++) {\r\n        this.filteredPdfFolderList[i].isSelected = false;\r\n        this.addRemoveFolderPdfPaths(i);\r\n      }\r\n    }\r\n  }\r\n\r\n  selectAllGPdfFolder() {\r\n    if (this.gselectAllPdfFoldersCheck) {\r\n      for (let i = 0; i < this.gfilteredPdfFolderList.length; i++) {\r\n        this.gfilteredPdfFolderList[i].isSelected = true;\r\n        this.addRemoveGFolderPdfPaths(i);\r\n      }\r\n    } else {\r\n      for (let i = 0; i < this.gfilteredPdfFolderList.length; i++) {\r\n        this.gfilteredPdfFolderList[i].isSelected = false;\r\n        this.addRemoveGFolderPdfPaths(i);\r\n      }\r\n    }\r\n  }\r\n\r\n  selectAllCsvFolder() {\r\n    if (this.selectAllCsvFoldersCheck) {\r\n      for (let i = 0; i < this.filteredCsvFolderList.length; i++) {\r\n        this.filteredCsvFolderList[i].isSelected = true;\r\n      }\r\n    } else {\r\n      for (let i = 0; i < this.filteredCsvFolderList.length; i++) {\r\n        this.filteredCsvFolderList[i].isSelected = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  selectAllPdfFile() {\r\n    this.docMergeSelectedPdf = [];\r\n    if (this.selectAllPdfFilesCheck) {\r\n      for (let i = 0; i < this.docMergePdf.length; i++) {\r\n        this.docMergeSelectedPdf.push(this.docMergePdf[i]);\r\n      }\r\n      for (let i = 0; i < this.filteredPdfFileList.length; i++) {\r\n        this.filteredPdfFileList[i].isSelected = true;\r\n        this.addRemoveFilePdfPaths(i);\r\n      }\r\n    } else {\r\n      for (let i = 0; i < this.filteredPdfFileList.length; i++) {\r\n        this.filteredPdfFileList[i].isSelected = false;\r\n        this.addRemoveFilePdfPaths(i);\r\n      }\r\n      this.docMergeSelectedPdf = [];\r\n    }\r\n  }\r\n\r\n  selectAllCsvFile() {\r\n    if (this.selectAllCsvFilesCheck) {\r\n      for (let i = 0; i < this.filteredCsvFileList.length; i++) {\r\n        this.filteredCsvFileList[i].isSelected = true;\r\n      }\r\n    } else {\r\n      for (let i = 0; i < this.filteredCsvFileList.length; i++) {\r\n        this.filteredCsvFileList[i].isSelected = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  selectAllFoldersAndFiles() {\r\n    for (let i = 0; i < this.filteredFolderList.length; i++) {\r\n      this.filteredFolderList[i].isSelected = true;\r\n    }\r\n    for (let i = 0; i < this.filteredFileList.length; i++) {\r\n      this.filteredFileList[i].isSelected = true;\r\n    }\r\n  }\r\n\r\n  selectAllGFolders() {\r\n    for (let i = 0; i < this.gfilteredFolderList.length; i++) {\r\n      this.gfilteredFolderList[i].isSelected = true;\r\n    }\r\n  }\r\n\r\n  selectAllPdfFoldersAndFiles() {\r\n    for (let i = 0; i < this.filteredPdfFolderList.length; i++) {\r\n      this.filteredPdfFolderList[i].isSelected = true;\r\n    }\r\n    for (let i = 0; i < this.filteredPdfFileList.length; i++) {\r\n      this.filteredPdfFileList[i].isSelected = true;\r\n    }\r\n  }\r\n\r\n  selectAllCsvFoldersAndFiles() {\r\n    for (let i = 0; i < this.filteredCsvFolderList.length; i++) {\r\n      this.filteredCsvFolderList[i].isSelected = true;\r\n    }\r\n    for (let i = 0; i < this.filteredCsvFileList.length; i++) {\r\n      this.filteredCsvFileList[i].isSelected = true;\r\n    }\r\n  }\r\n\r\n  unselectAllFoldersAndFiles() {\r\n    for (let i = 0; i < this.filteredFolderList.length; i++) {\r\n      this.filteredFolderList[i].isSelected = false;\r\n    }\r\n    for (let i = 0; i < this.filteredFileList.length; i++) {\r\n      this.filteredFileList[i].isSelected = false;\r\n    }\r\n  }\r\n\r\n  unselectAllGFolders() {\r\n    for (let i = 0; i < this.gfilteredFolderList.length; i++) {\r\n      this.gfilteredFolderList[i].isSelected = false;\r\n    }\r\n  }\r\n\r\n  unselectAllPdfFoldersAndFiles() {\r\n    for (let i = 0; i < this.filteredPdfFolderList.length; i++) {\r\n      this.filteredPdfFolderList[i].isSelected = false;\r\n    }\r\n    for (let i = 0; i < this.filteredPdfFileList.length; i++) {\r\n      this.filteredPdfFileList[i].isSelected = false;\r\n    }\r\n  }\r\n\r\n  unselectAllGPdfFolders() {\r\n    for (let i = 0; i < this.gfilteredPdfFolderList.length; i++) {\r\n      this.gfilteredPdfFolderList[i].isSelected = false;\r\n    }\r\n  }\r\n\r\n  unselectAllCsvFoldersAndFiles() {\r\n    for (let i = 0; i < this.filteredCsvFolderList.length; i++) {\r\n      this.filteredCsvFolderList[i].isSelected = false;\r\n    }\r\n    for (let i = 0; i < this.filteredCsvFileList.length; i++) {\r\n      this.filteredCsvFileList[i].isSelected = false;\r\n    }\r\n  }\r\n\r\n  unselectAllImageFiles() {\r\n    for (let i = 0; i < this.filteredImageFileList.length; i++) {\r\n      this.filteredImageFileList[i].isSelected = false;\r\n    }\r\n  }\r\n\r\n  async download() {\r\n    let showBible = this.pathList.some(path => {\r\n      return path.includes('Delivery Bible');\r\n    });\r\n\r\n    if (showBible) {\r\n      this._common.$downloadBible.next(true);\r\n      return;\r\n    }\r\n\r\n\r\n\r\n\r\n    let downloadFolderList = this.filteredFolderList.filter(res => res.isSelected === true);\r\n    let downloadFileList = this.filteredFileList.filter(res => res.isSelected === true);\r\n\r\n\r\n\r\n    let folderPathList: any[] = [];\r\n    let filePathList: any[] = [];\r\n\r\n\r\n    downloadFolderList.map(res => folderPathList.push(res.path.slice(13) + '/' + res.name));\r\n    downloadFileList.map(res => filePathList.push(res.path.slice(13) + '/' + res.name));\r\n\r\n\r\n    // downloadFolderList.map(res => folderPathList.push(res.path+ '/' + res.name));\r\n    // downloadFileList.map(res => filePathList.push(res.path + '/' + res.name));\r\n\r\n    let downloadPathList = [...folderPathList, ...filePathList];\r\n    console.log(\"???????\", downloadPathList)\r\n\r\n    if (downloadPathList.length <= 0) {\r\n      this._modal.showMsg(\"No File Selected To Download\", \"Error!\", \"error\");\r\n      return;\r\n    }\r\n\r\n\r\n    this._directory.download(downloadPathList, this.base_path).subscribe(res => {\r\n      this.unselectAllFoldersAndFiles();\r\n      this.unselectAllGFolders();\r\n      if (res.type === HttpEventType.DownloadProgress) {\r\n        this._common.showDownloadModal = true;\r\n        this._ngxService.stop();\r\n        const percentDone = Math.round(100 * res.loaded / res.total);\r\n        this._common.downloadedData = res.loaded;\r\n        this._common.totalDownloadFileSize = res.total;\r\n        this._common.downloadProgress = percentDone;\r\n      }\r\n      if (res.type === HttpEventType.Response) {\r\n        this._common.downloadComplete = true;\r\n        this._FileSaverService.save((<any>res).body, \"DocuExpertDoc\");\r\n      }\r\n    });\r\n  }\r\n\r\n  // ***********************************For Selecting And Downloading Files*******************************\r\n\r\n  // ***********************************For Searching Folders and Files*******************************\r\n  searchFoldersAndFiles() {\r\n    if (this.searchOption === \"All\") {\r\n      this.filteredFolderList = this.folderList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\r\n      this.gfilteredFolderList = this.gfolderList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\r\n      this.filteredFileList = this.fileList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\r\n\r\n      this.filteredPdfFolderList = this.pdfFolderList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\r\n      this.gfilteredPdfFolderList = this.gpdfFolderList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\r\n      this.filteredPdfFileList = this.pdfFileList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\r\n\r\n      this.filteredCsvFolderList = this.csvFolderList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\r\n      this.filteredCsvFileList = this.csvFileList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\r\n\r\n      this.showFolder = true;\r\n      this.showFile = true;\r\n\r\n      this.showPdfFolder = true;\r\n      this.showPdfFile = true;\r\n\r\n      this.showCsvFolder = true;\r\n      this.showCsvFile = true;\r\n    }\r\n    else if (this.searchOption === \"Folders\") {\r\n      this.filteredFolderList = this.folderList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\r\n\r\n      this.gfilteredFolderList = this.gfolderList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\r\n\r\n      this.filteredPdfFolderList = this.pdfFolderList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\r\n\r\n      this.gfilteredPdfFolderList = this.gpdfFolderList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\r\n\r\n      this.filteredCsvFolderList = this.csvFolderList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\r\n\r\n      this.showFolder = true;\r\n      this.showFile = false;\r\n\r\n      this.showPdfFolder = true;\r\n      this.showPdfFile = false;\r\n\r\n      this.showCsvFolder = true;\r\n      this.showCsvFile = false;\r\n    }\r\n    else if (this.searchOption === \"Files\") {\r\n      this.filteredFileList = this.fileList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\r\n\r\n      this.filteredPdfFileList = this.pdfFileList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\r\n\r\n      this.filteredCsvFileList = this.csvFileList.filter(res => res.name.toLowerCase().includes(this.searchTerm.toLowerCase()));\r\n\r\n      this.showFolder = false;\r\n      this.showFile = true;\r\n\r\n      this.showPdfFolder = false;\r\n      this.showPdfFile = true;\r\n\r\n      this.showCsvFolder = false;\r\n      this.showCsvFile = true;\r\n    }\r\n  }\r\n\r\n  resetFoldersAndFiles() {\r\n    if (this.searchOption === \"All\") {\r\n      this.searchFoldersAndFiles();\r\n    }\r\n    else if (this.searchOption === \"Folders\") {\r\n      this.filteredFileList = this.fileList;\r\n\r\n      this.filteredPdfFileList = this.pdfFileList;\r\n\r\n      this.filteredCsvFileList = this.csvFileList;\r\n\r\n      this.searchFoldersAndFiles();\r\n    }\r\n    else if (this.searchOption === \"Files\") {\r\n      this.filteredFolderList = this.folderList;\r\n\r\n      this.filteredPdfFolderList = this.pdfFolderList;\r\n\r\n      this.filteredCsvFolderList = this.csvFolderList;\r\n\r\n      this.searchFoldersAndFiles();\r\n    }\r\n  }\r\n  // ***********************************For Searching Folders and Files*******************************\r\n\r\n\r\n  // ***********************************When Double Click On Folders Path handling*******************************\r\n  openDirectory(directoryData: any) {\r\n    // if (directoryData.isVirtualfolder) {\r\n    //   this._modal.showMsg('Not allowed', 'Not Allowed', 'info');\r\n    //   return;\r\n    // }\r\n    console.log(\"LLLLLpath\", directoryData.path.split('/')[0])\r\n    localStorage.setItem(\"advParent\", directoryData.path.split('/')[0])\r\n    let externalpath = ''\r\n    console.log(\"directoryDatadirectoryDatadirectoryData\", directoryData)\r\n    if ('role' in directoryData) {\r\n      console.log(\"role is \", directoryData.role)\r\n      if (directoryData.role == 'user') {\r\n        this.isAccess = false\r\n      } else {\r\n        this.isAccess = true\r\n      }\r\n    }\r\n    this.pathList.push(directoryData.name)\r\n    this.page = 1;\r\n    this.filepage = 1;\r\n    this.searchTerm = '';\r\n\r\n    this.storeCurrentDirPath();\r\n\r\n    // var image = new Image();\r\n    // image.src = \"assets/images/filetypepdf.png\";\r\n\r\n    if (this.pathList.includes('External_Assigned') && this.pathList[this.pathList.length - 1] != \"External_Assigned\") {\r\n      externalpath = directoryData.help_str\r\n      console.log(\"in external path is\", externalpath)\r\n    } else {\r\n      externalpath = ''\r\n      console.log(\"in external path is\", externalpath)\r\n    }\r\n    this.listDirectories(directoryData.name, externalpath);\r\n  }\r\n\r\n\r\n\r\n  goToPath(path: string, index: any) {\r\n    this.ispdfClicked = false\r\n    this.issearchClicked=false\r\n    this._common.$varifyFolder.next('')\r\n    console.log(\"path is/// \", path, index)\r\n    if (path.includes('External_Assigned')) {\r\n      this.isAccess = true\r\n    }\r\n    if (path.includes('Delivery Bible')) {\r\n      localStorage.removeItem(\"buildBibleSubDir\")\r\n    }\r\n    let pathListLen = index + 1;\r\n    if (pathListLen !== this.pathList.length) {\r\n      this.pathList.splice(index + 1);\r\n      this.listDirectories();\r\n      this.storeCurrentDirPath();\r\n    } else {\r\n      console.log(\"current dir\");\r\n    }\r\n  }\r\n\r\n  goToMyFiles() {\r\n    this.pathList = [];\r\n    this.storeCurrentDirPath();\r\n    this.listDirectories();\r\n  }\r\n\r\n  storeCurrentDirPath() {\r\n    console.log(\"pathlist is\", this.pathList)\r\n    if (this.base_path === \"Input_Folder/\") {\r\n      localStorage.setItem('input', JSON.stringify(this.pathList));\r\n    }\r\n    else if (this.base_path === \"Output_Folder/\") {\r\n      localStorage.setItem('output', JSON.stringify(this.pathList));\r\n    }\r\n    else if (this.base_path === \"Req_Output_Folder/\") {\r\n      localStorage.setItem('req', JSON.stringify(this.pathList));\r\n    } else {\r\n      localStorage.setItem('err', JSON.stringify(this.pathList));\r\n    }\r\n  }\r\n  // ***********************************When Double Click On Folders Path handling*******************************\r\n\r\n  // ***********************************When Double Click On Files Open it / open only csv using paths*******************************\r\n  showImgViewer: boolean = false;\r\n  imgFilePath: string = \"\";\r\n  openFile(directory: any, mergePdf: boolean = false) {\r\n\r\n    if (mergePdf) {\r\n      // this.pdfFilePath = directory.path;\r\n      // this.showPdfViewer = true;\r\n      this.readPdfFromServer(directory.path);\r\n    }\r\n    else if (directory.type.toLowerCase() === 'pdf') {\r\n      this.showFullPdfPath = directory.path + '/' + directory.name;\r\n      // this.pdfFilePath = directory.path + '/' + directory.name;\r\n      // this.showPdfViewer = true;\r\n      this.showPdfAtRight(directory.path + '/' + directory.name)\r\n    }\r\n    else if (directory.type.toLowerCase() === 'csv' || directory.type.toLowerCase() === 'xls' || directory.type.toLowerCase() === 'xlsx') {\r\n      this.csvFilePath = directory.path + '/' + directory.name;\r\n      this.showCsvViewer = true;\r\n    }\r\n    else if (directory.type.toLowerCase() === 'txt') {\r\n      this.txtFilePath = directory.path + '/' + directory.name;\r\n      this.showTxtViewer = true;\r\n    }\r\n    else {\r\n      this.imgFilePath = directory.path + '/' + directory.name;\r\n      this.showImgViewer = true;\r\n    }\r\n  }\r\n\r\n  showPdfAtRight(path: string) {\r\n    // this.pdfFilePath=path\r\n\r\n    if (path.includes(\"/home/statvalu-local/mycontainer\")) {\r\n      path = path.replace(\"/home/statvalu-local/mycontainer/\", \"\")\r\n    }\r\n\r\n    console.log(path)\r\n    let formdata = new FormData;\r\n\r\n    formdata.append('dir_path', path);\r\n\r\n    this.httpClient.post(\r\n      '/document_upload/download_output_files/',\r\n      formdata, { reportProgress: true, observe: 'events' })\r\n      .subscribe((res: any) => {\r\n        if (res.type === HttpEventType.DownloadProgress) {\r\n          const percentDone = Math.round(100 * res.loaded / res.total);\r\n          this._common.loaderText = `Downloading PDF ${percentDone}%`;\r\n        }\r\n\r\n        if (res.type === HttpEventType.Response) {\r\n          console.log(\"////////res\", res)\r\n          res['body']['res_data'] && this.readPdfright(res['body']['res_data']['encoded_string'],\"viewPdf\");\r\n        }\r\n\r\n      });\r\n  }\r\n\r\n  readPdfright(res: any,type:string) {\r\n    const byteCharacters = atob(res);\r\n    const byteNumbers = new Array(byteCharacters.length);\r\n    for (let i = 0; i < byteCharacters.length; i++) {\r\n      byteNumbers[i] = byteCharacters.charCodeAt(i);\r\n    }\r\n    const byteArray = new Uint8Array(byteNumbers);\r\n    let objectUrl = URL.createObjectURL(new Blob([byteArray], { type: \"application/pdf\" }));\r\n    if(type==\"viewPdf\"){\r\n      this.pdfFilePathright = this.sanitizer.bypassSecurityTrustResourceUrl(objectUrl);\r\n      console.log(\"pdf>>??>>??>??>\", res, objectUrl, this.pdfFilePathright)\r\n      if (this.pdfFilePathright) {\r\n        this.ispdfClicked = true\r\n      } else {\r\n        this.ispdfClicked = false\r\n      }\r\n    }else if(type==\"searchPdf\"){\r\n      this.searchPathright = this.sanitizer.bypassSecurityTrustResourceUrl(objectUrl);\r\n      console.log(\"search>>??>>??>??>\", res, objectUrl, this.searchPathright)\r\n      if (this.searchPathright) {\r\n        this.ispdfClicked = false\r\n        this.issearchClicked = true\r\n      } else {\r\n        this.issearchClicked = false\r\n      }\r\n    }\r\n    \r\n\r\n    // console.log(this.pdfFilePathright, this.ispdfClicked)\r\n\r\n\r\n  }\r\n\r\n  closeSearchView(){\r\n    this.issearchClicked = false\r\n    this.ispdfClicked = true\r\n  }\r\n\r\n  showFullPdf() {\r\n    this.pdfFilePath = this.showFullPdfPath\r\n    this.showPdfViewer = true;\r\n  }\r\n  openCsv(path: string) {\r\n    this.csvFilePath = path;\r\n    this.showCsvViewer = true;\r\n  }\r\n  // ***********************************When Double Click On Filess Open / open only csv using paths it*******************************\r\n\r\n\r\n  // ***********************************Processing When User Click On Process Button*******************************\r\n  process() {\r\n\r\n    if (this.selectedFeature === 'NIS calculation' || this.selectedFeature === 'Back2birth calculation' || this.selectedFeature === 'Avionics listing') {\r\n      localStorage.setItem('request_id', 'BFSSFFSV76');\r\n      localStorage.setItem('feature', this.selectedFeature);\r\n      localStorage.setItem('browsable_list_size', '1');\r\n\r\n      if (this.selectedPdfPaths.length === 1 && this.selectedFeature === 'Avionics listing') {\r\n        localStorage.setItem('Avionics Pdf count', '1');\r\n      }\r\n      else if (this.selectedPdfPaths.length === 2 && this.selectedFeature === 'Avionics listing') {\r\n        localStorage.setItem('Avionics Pdf count', '2');\r\n      }\r\n      else {\r\n        localStorage.removeItem('Avionics Pdf count');\r\n      }\r\n\r\n      this.router.navigate(['/viewDir/currentOutput']);\r\n      return;\r\n    }\r\n\r\n    this.closeFullscreen();\r\n    if (!this.selectedFeature) {\r\n      return;\r\n    }\r\n\r\n    let selectedPdfFolder = this.filteredPdfFolderList.filter(res => res.isSelected === true);\r\n    let selectedPdfFile = this.filteredPdfFileList.filter(res => res.isSelected === true);\r\n\r\n    let selectedCsvFolder = [];\r\n    let selectedCsvFile = [];\r\n    let csvFolderPathList: any[] = [];\r\n    let csvFilePathList: any[] = [];\r\n    if (this.twoStepFeatures.includes(this.selectedFeature)) {\r\n      selectedCsvFolder = this.filteredCsvFolderList.filter(res => res.isSelected === true);\r\n      selectedCsvFile = this.filteredCsvFileList.filter(res => res.isSelected === true);\r\n\r\n      selectedCsvFolder.map(res => csvFolderPathList.push(res.path.slice(13) + '/' + res.name))\r\n      selectedCsvFile.map(res => csvFilePathList.push(res.path.slice(13) + '/' + res.name))\r\n    }\r\n    else if (this.selectedFeature === 'Image Augmentation') {\r\n      let image = this.filteredImageFileList.filter(res => res.isSelected === true)[0];\r\n      image ? this.featureOptions.image_path = image.path.slice(13) + '/' + image.name : this.featureOptions.image_path = '';\r\n    }\r\n\r\n    let pdfFolderPathList: any[] = [];\r\n    let pdfFilePathList: any[] = [];\r\n\r\n    selectedPdfFolder.map(res => pdfFolderPathList.push(res.path.slice(13) + '/' + res.name));\r\n    selectedPdfFile.map(res => pdfFilePathList.push(res.path.slice(13) + '/' + res.name));\r\n\r\n    // let pdfPathList = [...pdfFolderPathList, ...pdfFilePathList];\r\n    let pdfPathList = this.selectedPdfPaths;\r\n    console.log(this.selectedPdfPaths);\r\n\r\n\r\n    // .map(res => {\r\n    //   let basePath = res.split('/')[0];\r\n    //   if (basePath === 'Input_Folder') {\r\n    //     return res.slice(13);\r\n    //   } else {\r\n    //     return res.slice(8);\r\n    //   }\r\n    // })\r\n\r\n    let csvPathList = [...csvFolderPathList, ...csvFilePathList];\r\n    console.log(pdfPathList);\r\n\r\n    // let jsonString = JSON.stringify(pdfPathList);\r\n    // this.success(jsonString);\r\n    if (this.selectedFeature === 'Document Classification') {\r\n      this.featureOptions.input_paths = [selectedPdfFolder[0].path.slice(13) + '/' + selectedPdfFolder[0].name];\r\n      this.featureOptions.pattern_file = selectedPdfFile[0].path.slice(13) + '/' + selectedPdfFile[0].name;\r\n    }\r\n    else if (this.selectedFeature === 'Document merge') {\r\n\r\n      pdfPathList = this.docMergeSelectedPdf.map(res => res.path);\r\n      console.log(pdfPathList);\r\n    }\r\n    else if (this.selectedFeature === 'Page Reordering') {\r\n      console.log(pdfPathList);\r\n    }\r\n    this._process.getFeatureProcessData(pdfPathList, csvPathList, this.selectedFeature, this.featureOptions);\r\n  }\r\n\r\n  savePageReordering() {\r\n    let selectedPdfFile = this.filteredPdfFileList.filter(res => res.isSelected === true);\r\n\r\n\r\n    let pdfPathList = [selectedPdfFile[0].path + '/' + selectedPdfFile[0].name];\r\n    this.featureOptions.order_list = this.pdfpagenums;\r\n    console.log(pdfPathList, this.featureOptions.order_list);\r\n\r\n    this._process.getFeatureProcessData(pdfPathList, [], this.selectedFeature, this.featureOptions);\r\n  }\r\n  // ***********************************Processing When User Click On Process Button*******************************\r\n\r\n\r\n  // ***********************************OnClick Step One,Two,Three Button Hide/Show Directory*******************************\r\n  showPdfDirectory() {\r\n    this.selectedStep = 'step1';\r\n    this.showAllPdfFoldersFiles = true;\r\n    this.showPdfFolder = true;\r\n    this.showPdfFile = true;\r\n    this.showAllCsvFoldersFiles = false;\r\n  }\r\n  showCsvDirectory() {\r\n    this.selectedStep = 'step2';\r\n    this.showAllPdfFoldersFiles = false;\r\n    this.showAllCsvFoldersFiles = true;\r\n  }\r\n  showOptions() {\r\n    this.selectedStep = 'step3';\r\n    this.showAllPdfFoldersFiles = false;\r\n    this.showAllCsvFoldersFiles = false;\r\n  }\r\n  showDocClassificationPdfFolder() {\r\n    this.selectedStep = 'step1';\r\n    this.showAllPdfFoldersFiles = true;\r\n    this.showPdfFolder = true;\r\n    this.showPdfFile = false;\r\n    this.showAllCsvFoldersFiles = false;\r\n  }\r\n  showDocClassificationPdfFile() {\r\n    this.selectedStep = 'step4';\r\n    this.showAllPdfFoldersFiles = true;\r\n    this.showPdfFolder = false;\r\n    this.showPdfFile = true;\r\n    this.showAllCsvFoldersFiles = false;\r\n  }\r\n  // ***********************************OnClick Step One,Two,Three Button Hide/Show Directory*******************************\r\n\r\n\r\n  // ***********************************Upload Directory*******************************\r\n  checkUploadInprogress() {\r\n    console.log(this._upload.isUploadProcessing);\r\n\r\n    if (this._upload.isUploadProcessing === true) {\r\n      this._modal.showMsg('Upload in progress, please wait.', 'Not Allowed', 'info');\r\n    }\r\n  }\r\n  uploadFiles(event: any) {\r\n\r\n    if (this.base_path !== \"Input_Folder/\") {\r\n      this._modal.showMsg('Upload Only allowed in MyFiles', 'Not allowed', 'info');\r\n      return;\r\n    }\r\n\r\n    let files = event.target.files;\r\n\r\n    if (files.length > 1000) {\r\n      this._modal.showMsg('Upload is limited to 1000 files', 'Upload Limit', 'info');\r\n      return;\r\n    }\r\n\r\n    if (this.pathList.length > 0) {\r\n      this._upload.getFileSystemClient(this.pathList.join('/'));\r\n    } else {\r\n      this._upload.getFileSystemClient();\r\n    }\r\n\r\n    console.log(\"tt\", this.pathList.join('/'));\r\n\r\n    this._upload.uploadFiles(files);\r\n  }\r\n\r\n  uploadInterval: any;\r\n  async uploadFromLink() {\r\n    if (this.inputLinkForm.value.projectName.trim() == '') {\r\n      this.inputLinkForm.value['projectName'] = this.inputLinkForm.value.projectName.trim();\r\n    }\r\n    console.log(\"upload form\", this.inputLinkForm.value);\r\n    if (this.inputLinkForm.valid) {\r\n      let isFolderCreated = await this.createFolder(this.inputLinkForm.value.folderName)\r\n      if (isFolderCreated) {\r\n        this._directory.uploadFromLink(this.inputLinkForm.value).subscribe(res => {\r\n          this._modal.showMsg('Documents in these links are being accesses by DocuExpert for processing', 'Success!', \"success\");\r\n          this.showUploadDrive = false;\r\n          this.listDirectories();\r\n\r\n          localStorage.setItem('folder_name', this.inputLinkForm.value.folderName);\r\n\r\n          // let isDocumentPresent = this.inputLinkForm.value.links.some((res:any) => {\r\n          //   return res.name === 'DOCUMENT';\r\n          // });\r\n\r\n          let uidList: string[] = [];\r\n          this.inputLinkForm.value.links.forEach((res: any) => {\r\n            uidList.push(res.uid);\r\n          });\r\n\r\n          localStorage.setItem('uidList', JSON.stringify(uidList));\r\n          console.log(uidList);\r\n\r\n          this._common.showVUploadModal = true;\r\n          this.uploadInterval = setInterval(() => {\r\n            this._directory.vuploadProgress().subscribe((res: any) => {\r\n              // console.log(res);\r\n              this._common.vuploadProgress = res.res_data;\r\n\r\n              if (res.res_data == 100) {\r\n                clearInterval(this.uploadInterval);\r\n                this._common.vuploadComplete = true;\r\n                // this._modal.showFeatureProcessSuccess(\"Upload completed successfully\");\r\n              }\r\n            });\r\n\r\n            this._directory.vstatusProgress().subscribe((res: any) => {\r\n              this._common.vdocumentProgress = res.res_data;\r\n            })\r\n          }, 5000);\r\n\r\n        })\r\n      } else {\r\n        // this._modal.showMsg('Failed to create folder', 'Error', \"error\");\r\n      }\r\n    } else {\r\n      this._modal.showMsg('Please all required fields correctly', 'Error', 'error');\r\n      this.inputLinkForm.markAllAsTouched();\r\n    }\r\n  }\r\n  // ***********************************Upload Directory*******************************\r\n\r\n  // Directory Properties ====================================================\r\n  getDirectoryMetadata(directory: any) {\r\n    console.log(\"working\");\r\n\r\n    this._directory.getDirectoryMetadata(directory).subscribe(res => {\r\n      this.directoryMetadataKeys = Object.keys(res.res_data);\r\n\r\n      console.log(res.res_data);\r\n\r\n      // this.directoryMetadataKeys.forEach(element => {\r\n      //   if (element.includes('Date')) {\r\n      //     res.res_data[element] = new Date(res.res_data[element]);\r\n      //     console.log(res.res_data[element]);\r\n      //   }\r\n      // });\r\n      this.directoryMetadata = res.res_data;\r\n    });\r\n  }\r\n  // Directory Properties ====================================================\r\n\r\n\r\n  // All Feature Option, get values from feature options ====================================================\r\n  getSearchKeywords(target: any) {\r\n    this.featureOptions.word_list = target.value.trim() ? target.value.trim().split(',') : [];\r\n\r\n    if (this.featureOptions.word_list.length > 0) {\r\n      this.showCsvFolder = false;\r\n      this.showCsvFile = false;\r\n    } else {\r\n      this.showCsvFolder = true;\r\n      this.showCsvFile = true;\r\n    }\r\n  }\r\n  // All Feature Option, get values from feature options ====================================================\r\n\r\n\r\n  // Delete Directory ====================================================\r\n  async deleteDirectories() {\r\n    // if (this.base_path !== \"Input_Folder/\") {\r\n    //   this._modal.showMsg('Delete only allowed in myfiles', 'Not allowed', 'info');\r\n    //   return;\r\n    // }\r\n\r\n    let showBible = this.pathList.some(path => {\r\n      return path.includes('Delivery Bible');\r\n    });\r\n\r\n    if (showBible) {\r\n      this._common.$deleteBible.next(true);\r\n      return;\r\n    }\r\n\r\n    let deleteFolderList = this.filteredFolderList.filter(res => res.isSelected === true);\r\n    let deleteGFolderList = this.gfilteredFolderList.filter(res => res.isSelected === true);\r\n    let deleteFileList = this.filteredFileList.filter(res => res.isSelected === true);\r\n\r\n    let folderPathList: any[] = [];\r\n    let filePathList: any[] = [];\r\n\r\n    deleteFolderList.map(res => folderPathList.push(res.path + '/' + res.name));\r\n    deleteGFolderList.map(res => folderPathList.push(res.path + '/' + res.name));\r\n    deleteFileList.map(res => filePathList.push(res.path + '/' + res.name));\r\n\r\n    let deletePathList = [...folderPathList, ...filePathList];\r\n\r\n    if (deletePathList.length <= 0) {\r\n      this._modal.showMsg(\"No File Selected To Delete\", \"Error!\", \"error\");\r\n      return;\r\n    }\r\n\r\n    this._directory.delete(deletePathList, this.base_path).subscribe(res => {\r\n      this.unselectAllFoldersAndFiles();\r\n      this.unselectAllGFolders();\r\n      this.listDirectories();\r\n      this._modal.showMsg(res.res_str, \"Deleted!\", \"success\");\r\n      console.log(res);\r\n    })\r\n  }\r\n  // Delete Directory ====================================================\r\n\r\n\r\n  // Combined Search ====================================================\r\n  toggleAdvSearchForm() {\r\n    if (this.selectedFeature) {\r\n      this._modal.showMsg(\"Advanced Search Not Available If You Selected Feature\", \"Info!\", \"info\");\r\n      return;\r\n    } else {\r\n      this.showCombinedSearch = true;\r\n    }\r\n  }\r\n\r\n  hideAdvSearchForm() {\r\n    if (this.advancedSearchType === 'Folder') {\r\n      this.contentCheck = false;\r\n      this.metadataCheck = false;\r\n    }\r\n  }\r\n\r\n  hideContentMetaOnOtherRoutes() {\r\n    this.contentCheck = false;\r\n    this.metadataCheck = false;\r\n  }\r\n\r\n  validateForm(form: string) {\r\n    return this.contentSearchForm.get(form)?.errors && this.contentSearchForm.get(form)?.touched\r\n  }\r\n\r\n  validateDirSearchForm(form: string) {\r\n    return this.documentFolderSearchForm.get(form)?.errors && this.documentFolderSearchForm.get(form)?.touched\r\n  }\r\n\r\n  getForms() {\r\n    //@ts-ignore\r\n    return this.metadataSearchForm.get('formsArray').controls;\r\n  }\r\n\r\n  getContentTextConditionForms() {\r\n    //@ts-ignore\r\n    return this.contentSearchForm.get('textConditions').controls;\r\n  }\r\n\r\n  getContentNumberConditionForms() {\r\n    //@ts-ignore\r\n    return this.contentSearchForm.get('numberConditions').controls;\r\n  }\r\n\r\n  getContentDateConditionForms() {\r\n    //@ts-ignore\r\n    return this.contentSearchForm.get('dateConditions').controls;\r\n  }\r\n\r\n  addContentTextForm() {\r\n    //@ts-ignore\r\n    this.contentSearchForm.get('textConditions').push(this._fb.group({\r\n      search_string: ['', Validators.required],\r\n      condition: ['contains'],\r\n      operator: ['AND'],\r\n      value_type: ['text']\r\n    }));\r\n  }\r\n\r\n  addContentNumberForm() {\r\n    //@ts-ignore\r\n    this.contentSearchForm.get('numberConditions').push(this._fb.group({\r\n      search_value: [''],\r\n      condition: ['gt'],\r\n      operator: ['AND'],\r\n      start: [''],\r\n      end: ['']\r\n    }));\r\n  }\r\n\r\n  addContentDateForm() {\r\n    //@ts-ignore\r\n    this.contentSearchForm.get('dateConditions').push(this._fb.group({\r\n      search_date: [''],\r\n      condition: ['gt'],\r\n      operator: ['AND'],\r\n      start: [''],\r\n      end: ['']\r\n    }));\r\n  }\r\n\r\n  removeContentTextForm(index: any) {\r\n    //@ts-ignore\r\n    this.contentSearchForm.get('textConditions').removeAt(index);\r\n  }\r\n\r\n  removeContentNumberForm(index: any) {\r\n    //@ts-ignore\r\n    this.contentSearchForm.get('numberConditions').removeAt(index);\r\n  }\r\n\r\n  removeContentDateForm(index: any) {\r\n    //@ts-ignore\r\n    this.contentSearchForm.get('dateConditions').removeAt(index);\r\n  }\r\n\r\n  test() {\r\n    console.log(this.contentSearchForm.value);\r\n  }\r\n\r\n  getSelectFieldData(form: string) {\r\n    if (this.integerArr.includes(form)) {\r\n      return this.conditionIntegerList\r\n    }\r\n    else if (this.boolArr.includes(form)) {\r\n      return this.conditionBooleanList\r\n    }\r\n    else {\r\n      return this.conditionStringList\r\n    }\r\n  }\r\n\r\n  addRangeValue(value1: any, value2: any, index: any) {\r\n    let range = [value1, value2]\r\n    console.log(range);\r\n\r\n    //@ts-ignore\r\n    this.metadataSearchForm.get('formsArray').controls[index].value.value = range;\r\n  }\r\n\r\n  createForms(): FormGroup[] {\r\n    let forms = [];\r\n    for (let i = 0; i < this.formsList.length; i++) {\r\n      forms.push(this._fb.group({\r\n        formName: [this.formsList[i].name],\r\n        logical_op: [''],\r\n        value: ['']\r\n      }));\r\n      this.combineOp.push('');\r\n    }\r\n    return forms;\r\n  }\r\n\r\n  checkMetadataValue(index?: number) {\r\n\r\n    //@ts-ignore\r\n    index && (this.metadataSearchForm.get('formsArray').controls[index].value.logical_op === 'range') ? this.metadataSearchForm.get('formsArray').controls[index].value.value = ['', ''] : '';\r\n\r\n    this.metadataSearchForm.value.formsArray.forEach((element: any, index: any) => {\r\n      if (element.logical_op !== '') {\r\n        if (element.logical_op !== 'range') {\r\n          element.value ? this.metadataSearchData[this.formsList[index].name] = element : delete this.metadataSearchData[this.formsList[index].name];\r\n        } else {\r\n          element.value[0] && element.value[1] ? this.metadataSearchData[this.formsList[index].name] = element : delete this.metadataSearchData[this.formsList[index].name];\r\n        }\r\n      } else {\r\n        delete this.metadataSearchData[this.formsList[index].name]\r\n      }\r\n    });\r\n    console.log(this.metadataSearchData);\r\n    this.metadataSearchKeys = Object.keys(this.metadataSearchData);\r\n  }\r\n\r\n  getOp(formname: string) {\r\n    let formIndex = this.formsList.findIndex(res => res.name === formname);\r\n    return this.combineOp[formIndex];\r\n  }\r\n\r\n  removeMetadataForm(formname: string) {\r\n    delete this.metadataSearchData[formname];\r\n    this.metadataSearchKeys = Object.keys(this.metadataSearchData);\r\n  }\r\n\r\n  removeAllMetadataForm() {\r\n    this.metadataSearchData = {};\r\n    this.metadataSearchKeys = [];\r\n    this.combineOp = [];\r\n    //@ts-ignore\r\n    this.metadataSearchForm.get('formsArray').controls.forEach((element: any, i) => {\r\n      element.reset();\r\n      element.patchValue({\r\n        formName: this.formsList[i].name,\r\n        logical_op: '',\r\n        value: ''\r\n      });\r\n      this.combineOp.push('');\r\n    });\r\n  }\r\n\r\n  combinedSearch() {\r\n    if (this.contentCheck && this.documentFolderCheck && this.metadataCheck) {\r\n\r\n      if (this.contentSearchForm.invalid || this.documentFolderSearchForm.invalid) {\r\n        this._modal.showError('Please Fill All Fields');\r\n        this.contentSearchForm.markAllAsTouched();\r\n        this.documentFolderSearchForm.markAllAsTouched();\r\n        return;\r\n      }\r\n      this.metadataSeach();\r\n    }\r\n    else if (this.contentCheck && this.documentFolderCheck) {\r\n\r\n      if (this.contentSearchForm.invalid || this.documentFolderSearchForm.invalid) {\r\n        this._modal.showError('Please Fill All Fields');\r\n        this.contentSearchForm.markAllAsTouched();\r\n        this.documentFolderSearchForm.markAllAsTouched();\r\n        return;\r\n      }\r\n\r\n      let combineSearchData = { content_search: this.contentSearchForm.value, file_folder_search: this.documentFolderSearchForm.value };\r\n\r\n      let pdfFolderPathList = this.getSelectedFolderPath();\r\n      console.log(\"LLLLLLLLLLLL\", pdfFolderPathList)\r\n\r\n\r\n      this.processCombinedSearch(combineSearchData, pdfFolderPathList);\r\n    }\r\n    else if (this.contentCheck && this.metadataCheck) {\r\n      if (this.contentSearchForm.invalid) {\r\n        this._modal.showError('Please Fill All Fields');\r\n        this.contentSearchForm.markAllAsTouched();\r\n        return;\r\n      }\r\n      this.metadataSeach('content&metadata');\r\n    }\r\n    else if (this.documentFolderCheck && this.metadataCheck) {\r\n      console.log(\"fired\");\r\n\r\n      if (this.documentFolderSearchForm.invalid) {\r\n        this._modal.showError('Please Fill All Fields');\r\n        this.contentSearchForm.markAllAsTouched();\r\n        return;\r\n      }\r\n      this.metadataSeach('document&metadata');\r\n    }\r\n    else if (this.contentCheck) {\r\n      if (this.contentSearchForm.invalid) {\r\n        this._modal.showError('Please Fill All Fields');\r\n        this.contentSearchForm.markAllAsTouched();\r\n        return;\r\n      }\r\n\r\n      let combineSearchData = { content_search: this.contentSearchForm.value };\r\n\r\n      let pdfFolderPathList = this.getSelectedFolderPath();\r\n      console.log(\"LLLLLLLLLLLL\", pdfFolderPathList)\r\n\r\n\r\n      this.processCombinedSearch(combineSearchData, pdfFolderPathList);\r\n\r\n    }\r\n    else if (this.documentFolderCheck) {\r\n      if (this.documentFolderSearchForm.invalid) {\r\n        this._modal.showError('Please Fill All Fields');\r\n        this.documentFolderSearchForm.markAllAsTouched();\r\n        return;\r\n      }\r\n\r\n      let combineSearchData = { file_folder_search: this.documentFolderSearchForm.value };\r\n\r\n      let pdfFolderPathList = this.getSelectedFolderPath();\r\n      console.log(\"LLLLLLLLLLLL\", pdfFolderPathList)\r\n\r\n\r\n      if (this.advancedSearchType === 'File') {\r\n        this.processCombinedSearch(combineSearchData, pdfFolderPathList);\r\n      } else {\r\n        this.processFolderSearch(this.documentFolderSearchForm.value, pdfFolderPathList);\r\n      }\r\n    }\r\n    else if (this.metadataCheck) {\r\n      this.metadataSeach('metadata');\r\n    }\r\n  }\r\n\r\n  processCombinedSearch(combineSearchData: any, pdfFolderPathList: any[]) {\r\n    let advParent = localStorage.getItem('advParent')\r\n    let dir_path = this._auth.org_name + '/' + this._auth.user_name;\r\n    let parent_dir\r\n\r\n    if (this.base_path.replace('/', '').trim().toString() == 'Input_Folder') {\r\n      if (dir_path == pdfFolderPathList[0]) {\r\n        parent_dir = 'Comnbine'\r\n      } else {\r\n        parent_dir = advParent\r\n      }\r\n    } else {\r\n      parent_dir = this.base_path.replace('/', '').trim().toString()\r\n    }\r\n    console.log(\"LLLLLLprocessCombinedSearchadvParent\", parent_dir)\r\n\r\n\r\n    this._directory.combinedSearch(combineSearchData, pdfFolderPathList, parent_dir).subscribe((res: any) => {\r\n      this.unselectAllFoldersAndFiles();\r\n      localStorage.setItem('feature', \"Advance File Search\");\r\n      localStorage.setItem('request_id', res.res_data.request_id);\r\n      this._common.$featureProgressStart.next('');\r\n\r\n      this._modal.showMsg(res.res_str, \"Success!\", \"success\");\r\n      this.resetCombinedSearchFields();\r\n    }, (err: any) => { this.deleteExtraParamsMetadata(); });\r\n  }\r\n\r\n  processFolderSearch(searchData: any, pdfFolderPathList: any[]) {\r\n    this._directory.folderSearch(searchData, pdfFolderPathList, this.base_path).subscribe((res: any) => {\r\n      this.unselectAllFoldersAndFiles();\r\n      localStorage.setItem('feature', \"Advance Folder Search\");\r\n      localStorage.setItem('request_id', res.res_data.request_id);\r\n      this._common.$featureProgressStart.next('');\r\n\r\n      this._modal.showMsg(res.res_str, \"Success!\", \"success\");\r\n      this.resetCombinedSearchFields();\r\n    });\r\n  }\r\n\r\n  metadataSeach(type: string = 'metadataall') {\r\n    if (this.metadataSearchKeys.length === 0) {\r\n      this._modal.showError('Please Fill Atleast One Metadata Field');\r\n      return;\r\n    }\r\n\r\n    let combineop: any[] = this.getCombineOp();\r\n\r\n    let metadataSize = this.metadataSearchKeys.length;\r\n    let combineOpSize = combineop.length;\r\n\r\n    if (combineOpSize === (metadataSize - 1)) {\r\n      this.deleteExtraParamsMetadata();\r\n      let combineSearchData = type === 'metadataall' ? { content_search: this.contentSearchForm.value, file_folder_search: this.documentFolderSearchForm.value, metadata_search: { search_metadata: this.metadataSearchData }, condition_combine_operators: combineop } : type === 'content&metadata' ? { content_search: this.contentSearchForm.value, metadata_search: { search_metadata: this.metadataSearchData }, condition_combine_operators: combineop } : type === 'metadata' ? { metadata_search: { search_metadata: this.metadataSearchData }, condition_combine_operators: combineop } : { file_folder_search: this.documentFolderSearchForm.value, metadata_search: { search_metadata: this.metadataSearchData }, condition_combine_operators: combineop };\r\n\r\n      let pdfFolderPathList = this.getSelectedFolderPath();\r\n      console.log(\"LLLLLLLLLLLL\", pdfFolderPathList)\r\n\r\n      this.processCombinedSearch(combineSearchData, pdfFolderPathList);\r\n    } else {\r\n      this._modal.showError('Combine Operator should be equal to total no of fields - 1');\r\n      return;\r\n    }\r\n  }\r\n\r\n  getCombineOp() {\r\n    let combineop: any[] = [];\r\n\r\n    this.metadataSearchKeys.forEach((element: any) => {\r\n      let formIndex = this.formsList.findIndex(res => res.name === element);\r\n      combineop.push(this.combineOp[formIndex]);\r\n    });\r\n\r\n    combineop = this.combineOp.filter(res => res !== '');\r\n\r\n    return combineop;\r\n  }\r\n\r\n  deleteExtraParamsMetadata() {\r\n    this.metadataSearchKeys.forEach((element: any) => {\r\n      delete this.metadataSearchData[element]['formName'];\r\n    });\r\n  }\r\n\r\n  getSelectedFolderPath() {\r\n    let folderPathList: any[] = [];\r\n\r\n    let dir_path = this._auth.org_name + '/' + this._auth.user_name;\r\n    if (this.pathList.length > 0) {\r\n      dir_path = dir_path + '/' + this.pathList.join('/');\r\n    }\r\n\r\n    folderPathList.push(dir_path);\r\n\r\n    return folderPathList;\r\n  }\r\n\r\n  resetCombinedSearchFields() {\r\n    this.contentSearchForm.reset();\r\n    this.documentFolderSearchForm.reset();\r\n    this.removeAllMetadataForm();\r\n\r\n    this.contentSearchForm.patchValue({\r\n      text: false,\r\n      number: false,\r\n      date: false,\r\n      approx_search: false,\r\n      textOperator: 'AND',\r\n      numberOperator: 'AND'\r\n    });\r\n\r\n    //@ts-ignore\r\n    this.contentSearchForm.get('textConditions').clear();\r\n    //@ts-ignore\r\n    this.contentSearchForm.get('numberConditions').clear();\r\n    //@ts-ignore\r\n    this.contentSearchForm.get('dateConditions').clear();\r\n\r\n    this.addContentTextForm();\r\n    this.addContentNumberForm();\r\n    this.addContentDateForm();\r\n\r\n    this.documentFolderSearchForm.patchValue({\r\n      search_rule: '',\r\n      is_pattern: 'false',\r\n      fixed_left: '',\r\n      fixed_right: ''\r\n    });\r\n  }\r\n\r\n  resetMetadataForm(index: number) {\r\n    //@ts-ignore\r\n    this.metadataSearchForm.get('formsArray').controls[index].reset();\r\n    //@ts-ignore\r\n    this.metadataSearchForm.get('formsArray').controls[index].patchValue({\r\n      formName: this.formsList[index].name,\r\n      logical_op: '',\r\n      value: ''\r\n    });\r\n    this.combineOp[index] = '';\r\n  }\r\n  // Combined Search ====================================================\r\n\r\n\r\n  // Upload from Link\r\n  async loginWithGoogle() {\r\n    this._directory.loginWithGoogle().subscribe((res: any) => {\r\n      console.log(res);\r\n      window.location.href = res.res_str;\r\n    });\r\n    // this.authService.signIn(GoogleLoginProvider.PROVIDER_ID);\r\n  }\r\n  // Upload from Link\r\n\r\n\r\n\r\n  // ***********************************All Modals*******************************\r\n  createFolderModal() {\r\n    if (this.base_path !== \"Input_Folder/\") {\r\n      this._modal.showMsg('Only allowed in MyFiles', 'Not allowed', 'info');\r\n      return;\r\n    }\r\n\r\n    Swal.fire({\r\n      title: 'Please Enter your Folder Name',\r\n      input: 'text',\r\n      inputAttributes: {\r\n        autocapitalize: 'off',\r\n        maxlength: '255'\r\n      },\r\n      // html:'<div style=\"text-align:left;\"><ul  style=\"padding-left:20px;font-size:16px;\"><li>must be uppercase</li><li>must be uppercase</li></ul></div>',\r\n      backdrop: true,\r\n      showCancelButton: true,\r\n      confirmButtonText: 'Create Folder',\r\n      showLoaderOnConfirm: true,\r\n      preConfirm: async (folderName) => {\r\n        console.log(folderName, this.allFolderNames);\r\n        folderName = folderName.trim();\r\n        if (!folderName) {\r\n          Swal.showValidationMessage(\"please give proper value\")\r\n        }\r\n        else if (folderName && folderName.includes('.')) {\r\n          Swal.showValidationMessage(\"should not contain dot(.)\")\r\n        }\r\n        else if (folderName && folderName.includes(' ')) {\r\n          Swal.showValidationMessage(\"should not contain any space\")\r\n        }\r\n        else if (this.allFileNames.includes(folderName)) {\r\n          Swal.showValidationMessage(\"file with same name exists\")\r\n        }\r\n        else if (this.allFolderNames.includes(folderName)) {\r\n          Swal.showValidationMessage(\"folder with same name exists\");\r\n        }\r\n        else {\r\n          // let fileSystemClient: DataLakeFileSystemClient = null;\r\n          // if (this.pathList.length > 0) {\r\n          //   fileSystemClient = this._upload.getFileSystemClient(this.pathList.join('/'));\r\n          // } else {\r\n          //   fileSystemClient = this._upload.getFileSystemClient();\r\n          // }\r\n          // const directoryClient: DataLakeDirectoryClient = fileSystemClient.getDirectoryClient(folderName);\r\n          // let createdFolder = await directoryClient.create();\r\n          // if (createdFolder) {\r\n          //   this.listDirectories();\r\n          // }\r\n          this._directory.createFolder(this.pathList.join('/'), folderName).subscribe(res => {\r\n            this.listDirectories();\r\n          });\r\n        }\r\n      },\r\n      allowOutsideClick: () => false\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        Swal.fire({\r\n          icon: 'success',\r\n          title: `${result.value} Folder Created Successfully`,\r\n          showConfirmButton: false,\r\n          timer: 1500\r\n        })\r\n      }\r\n    })\r\n  }\r\n  // ***********************************All Modals*******************************\r\n\r\n\r\n  // ***********************************upload link*******************************\r\n  get inputLinks(): FormArray {\r\n    return this.inputLinkForm.get(\"links\") as FormArray;\r\n  }\r\n\r\n  addInputLinks() {\r\n    this.inputLinks.push(this._fb.group({\r\n      input_link: ['', Validators.required],\r\n      name: ['', Validators.required],\r\n      uid: [this._common.getRandomString()]\r\n    }));\r\n  }\r\n\r\n  removeInputLinks(i: number) {\r\n    this.inputLinks.removeAt(i);\r\n  }\r\n\r\n  uploadLinkLogout() {\r\n    this._directory.uploadLinkLogout().subscribe(res => {\r\n      this.isLoggedIn = false;\r\n    })\r\n  }\r\n\r\n  uploadLinkLoggedIn() {\r\n    this._directory.isLoggedIn().subscribe((res: any) => {\r\n      this.isLoggedIn = res.res_data;\r\n      this.showUploadDrive = true;\r\n    })\r\n  }\r\n\r\n  uploadLinkValidation(i: number, name: string) {\r\n    //@ts-ignore\r\n    return this.inputLinks.controls[i].controls[name].errors && this.inputLinks.controls[i].controls[name].touched;\r\n  }\r\n\r\n  checkSelection(type: string): boolean {\r\n    let isDocumentPresent = this.inputLinkForm.value.links.some((res: any) => {\r\n      return res.name === type;\r\n    });\r\n\r\n    return isDocumentPresent;\r\n  }\r\n  // ***********************************upload link*******************************\r\n\r\n  //create Folder\r\n  async createFolder(folderName: string): Promise<boolean> {\r\n    if (!folderName) {\r\n      this._modal.showMsg(\"please give proper value\", 'Error', 'error')\r\n      return false;\r\n    }\r\n    else if (folderName && folderName.includes('.')) {\r\n      this._modal.showMsg(\"should not contain dot(.)\", 'Error', 'error');\r\n      return false;\r\n    }\r\n    else if (folderName && folderName.includes(' ')) {\r\n      this._modal.showMsg(\"should not contain any space\", 'Error', 'error');\r\n      return false;\r\n    }\r\n    else if (this.allFileNames.includes(folderName)) {\r\n      this._modal.showMsg(\"file with same name exists\", 'Error', 'error');\r\n      return false;\r\n    }\r\n    // else if (this.allFolderNames.includes(folderName)) {\r\n    //   this._modal.showMsg(\"folder with same name exists\", 'Error', 'error');\r\n    //   return false;\r\n    // }\r\n    else {\r\n      let fileSystemClient: DataLakeFileSystemClient = null;\r\n      if (this.pathList.length > 0) {\r\n        fileSystemClient = this._upload.getFileSystemClient(this.pathList.join('/'), \"docuexpertuat2/G_input/\");\r\n      } else {\r\n        fileSystemClient = this._upload.getFileSystemClient(\"\", \"docuexpertuat2/G_input/\");\r\n      }\r\n      const directoryClient: DataLakeDirectoryClient = fileSystemClient.getDirectoryClient(folderName.trim());\r\n      let createdFolder = await directoryClient.create();\r\n      if (createdFolder) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  //create Folder\r\n\r\n  //Document merge=====================================================================\r\n  drop(event: CdkDragDrop<string[]>) {\r\n    if (event.previousContainer === event.container) {\r\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\r\n    } else {\r\n      transferArrayItem(\r\n        event.previousContainer.data,\r\n        event.container.data,\r\n        event.previousIndex,\r\n        event.currentIndex,\r\n      );\r\n    }\r\n    console.log(event.container.data);\r\n\r\n    event.container.data.forEach((res: any, index: number) => {\r\n      if (!this.docMergePdf.includes(res)) {\r\n        res.isSelected = true;\r\n        this.docMergePdf.splice(index, 0, res);\r\n      }\r\n    });\r\n  }\r\n\r\n  getFileNameBeforeDrop(item: string) {\r\n    let pathArr = item.split('/');\r\n    return pathArr[pathArr.length - 1];\r\n  }\r\n\r\n  getFileNameAfterDrop(item: string) {\r\n    // let path = this.base_path + this._auth.org_name + '/' + this._auth.user_name;\r\n    // return item.slice(path.length+1);\r\n    return item.split('/').pop();\r\n  }\r\n\r\n  selectItem(item: any) {\r\n    this.docMergeSelectedPdf.push(item);\r\n  }\r\n\r\n  selectedItemColor(res: any) {\r\n    return this.docMergeSelectedPdf.includes(res);\r\n  }\r\n\r\n  removeItem(i: number) {\r\n    let itemIndex = this.docMergePdf.findIndex((res: any) => {\r\n      return res.path === this.docMergeSelectedPdf[i].path;\r\n    });\r\n\r\n    this.docMergeSelectedPdf.splice(i, 1);\r\n\r\n    this.docMergePdf[itemIndex].isSelected = false;\r\n  }\r\n\r\n  noReturnPredicate() {\r\n    return false;\r\n  }\r\n  //Document merge=====================================================================\r\n\r\n  // Page Reordering===================================================================\r\n  pdfNumPagedrop(event: CdkDragDrop<string[]>) {\r\n    moveItemInArray(this.pdfpagenums, event.previousIndex, event.currentIndex);\r\n  }\r\n\r\n  readPdfFromServer(path: any) {\r\n\r\n    let formdata = new FormData;\r\n\r\n    formdata.append('dir_path', path);\r\n\r\n    this.httpClient.post(\r\n      '/document_upload/download_output_files/',\r\n      formdata, { reportProgress: true, observe: 'events' })\r\n      .subscribe((res: any) => {\r\n        if (res.type === HttpEventType.DownloadProgress) {\r\n          const percentDone = Math.round(100 * res.loaded / res.total);\r\n          this._common.loaderText = `Downloading PDF ${percentDone}%`;\r\n        }\r\n        if (res.type === HttpEventType.Response) {\r\n          if (res['body']['res_data']) {\r\n            this.pdfpagenums = [];\r\n            for (let i = 0; i < parseInt(res.body.res_data.totalcount); i++) {\r\n              console.log(i);\r\n\r\n              this.pdfpagenums.push(i + 1);\r\n            }\r\n\r\n            this.readPdf(res['body']['res_data']['encoded_string']);\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  readPdf(res: any) {\r\n    const byteCharacters = atob(res);\r\n\r\n    const byteNumbers = new Array(byteCharacters.length);\r\n    for (let i = 0; i < byteCharacters.length; i++) {\r\n      byteNumbers[i] = byteCharacters.charCodeAt(i);\r\n    }\r\n\r\n    const byteArray = new Uint8Array(byteNumbers);\r\n\r\n    let objectUrl = URL.createObjectURL(new Blob([byteArray], { type: \"application/pdf\" }));\r\n    let url = this.sanitizer.bypassSecurityTrustResourceUrl(objectUrl);\r\n\r\n    this.pdfurl = url;\r\n  }\r\n  // Page Reordering===================================================================\r\n\r\n  ngOnDestroy(): void {\r\n    this._common.$featureName.next('');\r\n  }\r\n  // show tree view on selected folder\r\n  showTreeViewofFolder(val: any) {\r\n    // let arr=val.slice(3).split('/')\r\n\r\n    console.log(\"folder selected>>single click\", val)\r\n    this.selectedFileForQuestion = val.name\r\n    if (val.is_directory) {\r\n      this._common.$selectedFolderData.next({});\r\n      let rootDir = {}\r\n      rootDir = {\r\n        \"name\": val.name,\r\n        \"id\": 0,\r\n        \"path\": val.path + \"/\" + val.name,\r\n        \"total_count\": val.total_dirs + val.total_files,\r\n        \"type\": \"directory\",\r\n        \"expanded\": false,\r\n      }\r\n      this._common.$selectedFolderData.next(rootDir);\r\n      // this._common.$showFolderTree.next(true);\r\n      // this._common.$showFeatureList.next(false);\r\n      // this._common.$showTree.next(false)\r\n\r\n      this.selectsingleFolder(val.name, val.path)\r\n    } else {\r\n      this.selectsingleFile(val.name)\r\n    }\r\n\r\n  }\r\n\r\n  selectsingleFolder(dirName: string, dirPath: string) {\r\n    let dirPathName = dirPath.split('/')[0];\r\n    if (dirPathName === 'G_input') {\r\n      let dirIndex = this.gfilteredFolderList.findIndex(res => res.name === dirName);\r\n      for (let i = 0; i < this.gfilteredFolderList.length; i++) {\r\n        if (i == dirIndex) {\r\n          this.gfilteredFolderList[i].isSelectedSingle = true;\r\n        } else {\r\n          this.gfilteredFolderList[i].isSelectedSingle = false;\r\n        }\r\n        for (let i = 0; i < this.filteredFolderList.length; i++) {\r\n          this.filteredFolderList[i].isSelectedSingle = false;\r\n        }\r\n        for (let i = 0; i < this.filteredFileList.length; i++) {\r\n          this.filteredFileList[i].isSelectedSingle = false;\r\n        }\r\n      }\r\n    } else {\r\n      let dirIndex = this.filteredFolderList.findIndex(res => res.name === dirName);\r\n      for (let i = 0; i < this.filteredFolderList.length; i++) {\r\n        if (i == dirIndex) {\r\n          this.filteredFolderList[i].isSelectedSingle = true;\r\n        } else {\r\n          this.filteredFolderList[i].isSelectedSingle = false;\r\n        }\r\n        for (let i = 0; i < this.gfilteredFolderList.length; i++) {\r\n          this.gfilteredFolderList[i].isSelectedSingle = false;\r\n        }\r\n        for (let i = 0; i < this.filteredFileList.length; i++) {\r\n          this.filteredFileList[i].isSelectedSingle = false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  selectsingleFile(dirName: string) {\r\n    let dirIndex = this.filteredFileList.findIndex(res => res.name === dirName);\r\n    for (let i = 0; i < this.filteredFileList.length; i++) {\r\n      if (i == dirIndex) {\r\n        this.filteredFileList[i].isSelectedSingle = true;\r\n      } else {\r\n        this.filteredFileList[i].isSelectedSingle = false;\r\n      }\r\n      for (let i = 0; i < this.filteredFolderList.length; i++) {\r\n        this.filteredFolderList[i].isSelectedSingle = false;\r\n      }\r\n      for (let i = 0; i < this.gfilteredFolderList.length; i++) {\r\n        this.gfilteredFolderList[i].isSelectedSingle = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  // ------------------------- Context menue-------------------------------------------\r\n\r\n  contextMenu: MatMenuTrigger;\r\n\r\n  contextMenuPosition = { x: '0px', y: '0px' };\r\n\r\n  onContextMenu(event: MouseEvent, item: any) {\r\n    console.log(\"in mouse up event\", event, item)\r\n    event.preventDefault();\r\n    const button = document.getElementById(item.name);\r\n    console.log(button)\r\n    document.getElementById(item.name).click()\r\n    this.contextMenuPosition.x = event.clientX + 'px';\r\n    this.contextMenuPosition.y = event.clientY + 'px';\r\n    console.log(this.contextMenuPosition.x, this.contextMenuPosition.y)\r\n    // this.contextMenu.menuData = { 'item': item };\r\n    // this.contextMenu.menu.focusFirstItem('mouse');\r\n    // this.contextMenu.openMenu();\r\n  }\r\n\r\n  onContextMenuAction1(item: any) {\r\n    alert(`Click on Action 1 for ${item}`);\r\n  }\r\n\r\n  onContextMenuAction2(item: any) {\r\n    alert(`Click on Action 2 for ${item}`);\r\n  }\r\n\r\n  verifyFunc(res: string) {\r\n    let operation: any\r\n    if (res == \"verify\") {\r\n      operation = 1\r\n    } else if (res == \"not-verify\") {\r\n      operation = 0\r\n    } else if (res == \"tbd\") {\r\n      operation = 2\r\n    }\r\n    this._common.$varifyFolder.next('')\r\n    let showBible = this.pathList.some(path => {\r\n      return path.includes('Delivery Bible');\r\n    });\r\n\r\n    if (showBible && this.pathList[this.pathList.length - 1].includes(\"Delivery Bible\")) {\r\n      this._common.$varifyFolder.next(res)\r\n      return;\r\n    }\r\n    let downloadFolderList = this.filteredFolderList.filter(res => res.isSelected === true);\r\n    let downloadFileList = this.filteredFileList.filter(res => res.isSelected === true);\r\n\r\n    let folderPathList: any[] = [];\r\n    let filePathList: any[] = [];\r\n\r\n    downloadFolderList.map(res => folderPathList.push(res.name));\r\n    downloadFileList.map(res => filePathList.push(res.name));\r\n\r\n    // downloadFolderList.map(res => folderPathList.push(res.path+ '/' + res.name));\r\n    // downloadFileList.map(res => filePathList.push(res.path + '/' + res.name));\r\n\r\n    let downloadPathList = [...folderPathList, ...filePathList];\r\n\r\n    if (downloadPathList.length <= 0) {\r\n      this._modal.showMsg(\"No file is selected\", \"Error!\", \"error\");\r\n      return;\r\n    }\r\n\r\n    let dir_path = this.base_path + this._auth.org_name + '/' + this._auth.user_name;\r\n\r\n    let path = dir_path + \"/\" + this.pathList.join(\"/\")\r\n    let projpath = path.substring(0, path.indexOf('/output'));\r\n    console.log(\"???????>>>\", downloadPathList,)\r\n    console.log(\"???????>>>\", downloadPathList, projpath)\r\n    console.log(\"???????>>>\", downloadPathList, path)\r\n    this.verifyFuncAPI(path, projpath, operation, downloadPathList)\r\n  }\r\n\r\n  verifyFuncAPI(fullpath: string, projPath: string, operation: any, folderlist: any) {\r\n\r\n    // let ind= x.indexOf('output');\r\n    // var result =  x.substring(0, remove_after);\r\n    let formData = new FormData;\r\n\r\n    // formData.append(\"dir_path\", path);\r\n    // formData.append(\"dir_path_g\", gpath);\r\n    formData.append(\"user_id\", this._auth.user_id);\r\n    formData.append(\"proj_folder\", JSON.stringify(folderlist));\r\n    formData.append(\"projectpath\", projPath);\r\n    formData.append(\"is_operation\", operation);\r\n    formData.append(\"full_path\", fullpath)\r\n\r\n\r\n    this.httpClient.post('/delivery_bible/proj_approve/', formData).subscribe((res: any) => {\r\n      console.log(\"varify res is \", res)\r\n      this._common.$varifyFolder.next('')\r\n      setTimeout(() => {\r\n        this._modal.showVarifyPopup(res.res_str);\r\n      }, 1000);\r\n      // this.ngOnInit()\r\n      this.listDirectories()\r\n    });\r\n  }\r\n\r\n  openList() {\r\n    // formData.append(\"user_id\", this._auth.user_id);\r\n    // this.showOption=true \r\n    let dir_path = this.base_path + this._auth.org_name + '/' + this._auth.user_name;\r\n    // let path=this.pathList\r\n    let fname = this.pathList[this.pathList.length - 1]\r\n    let path2 = this.pathList.join(\"/\")\r\n    let sub = path2.substring(0, path2.indexOf('/output'));\r\n    let subPath = dir_path + \"/\" + sub\r\n    // console.log(\"?????????\",this.pathList,dir_path,this.selectedFileForQuestion,this.pathList[this.pathList.length-1])\r\n    console.log(\"new path\", sub, subPath, this.selectedFileForQuestion, fname)\r\n    this.getQuery(subPath, this.selectedFileForQuestion, fname).subscribe((res: any) => {\r\n      console.log(\"resssssssss\", res.res_data.Query)\r\n      this.varifyQuestionList = res.res_data.Query\r\n      let varifycount = 0\r\n      let cancelcount = 0\r\n      let tbdcount = 0\r\n\r\n      this.varifyQuestionList.map((res: any) => {\r\n        if (res.question == null) {\r\n          res.question = \"\"\r\n        }\r\n        if (res.response == null) {\r\n          res.response = \"\"\r\n        }\r\n        if (res.note == null) {\r\n          res.note = \"\"\r\n        }\r\n        if (res.response == 'varified') {\r\n          varifycount = varifycount + 1\r\n        } else if (res.response == 'cancel') {\r\n          cancelcount = varifycount + 1\r\n        } else if (res.response == 'tbd') {\r\n          tbdcount = varifycount + 1\r\n        }\r\n      })\r\n      if (varifycount == this.varifyQuestionList.length) {\r\n        this.selectAllQues = 'varified'\r\n      } else if (cancelcount == this.varifyQuestionList.length) {\r\n        this.selectAllQues = 'cancel'\r\n      } else if (tbdcount == this.varifyQuestionList.length) {\r\n        this.selectAllQues = 'tbd'\r\n      }\r\n      this.showQuestionList = true\r\n    })\r\n  }\r\n\r\n  submitQuery() {\r\n    let dir_path = this.base_path + this._auth.org_name + '/' + this._auth.user_name;\r\n    console.log(\"path is\", this.pathList)\r\n    let fname = this.pathList[this.pathList.length - 1]\r\n    let path2 = this.pathList.join(\"/\")\r\n    let sub = path2.substring(0, path2.indexOf('/output'));\r\n    let subPath = dir_path + \"/\" + sub\r\n    // console.log(\"?????????\",this.pathList,dir_path,this.selectedFileForQuestion,this.pathList[this.pathList.length-1])\r\n    console.log(\"new path\", subPath, this.selectedFileForQuestion, fname)\r\n    this.submitQueryForValidation(subPath, this.selectedFileForQuestion, fname).subscribe((res: any) => {\r\n      console.log(\"resssssssss\", res)\r\n      this.showQuestionList = false\r\n      this._modal.showFeatureProcessSuccess(res.res_str);\r\n    })\r\n  }\r\n\r\n  getQuery(path: string, filename: string, folder: string) {\r\n    let formData = new FormData;\r\n    formData.append(\"user_id\", this._auth.user_id);\r\n    formData.append(\"file_name\", filename);\r\n    formData.append(\"folder_name\", folder);\r\n    formData.append(\"projectpath\", path);\r\n    return this.httpClient.post('/delivery_bible/fatch_query/', formData);\r\n\r\n  }\r\n\r\n  submitQueryForValidation(path: string, filename: string, folder: string) {\r\n    console.log(\"inside submit\")\r\n    let formData = new FormData;\r\n    formData.append(\"user_id\", this._auth.user_id);\r\n    formData.append(\"file_name\", filename);\r\n    formData.append(\"folder_name\", folder);\r\n    formData.append(\"projectpath\", path);\r\n    formData.append(\"query_set\", JSON.stringify(this.varifyQuestionList))\r\n    return this.httpClient.post('/delivery_bible/add_query/', formData);\r\n  }\r\n\r\n  setselectAllQues() {\r\n    setTimeout(() => {\r\n      console.log(\"?????????\", this.selectAllQues)\r\n      this.varifyQuestionList.map((res: any) => res.response = this.selectAllQues)\r\n      console.log(this.varifyQuestionList);\r\n    });\r\n  }\r\n  undoFunc() {\r\n    setTimeout(() => {\r\n      console.log(\"?????????\", this.selectAllQues)\r\n      this.selectAllQues = \"\"\r\n      this.varifyQuestionList.map((res: any) => {\r\n        res.response = \"\";\r\n        res.note = \"\"\r\n      }\r\n      )\r\n      console.log(this.varifyQuestionList);\r\n    });\r\n  }\r\n  // getQuesToSub(obj:any){\r\n\r\n  //   return removeEmpty\r\n  // }\r\n  // showBilble file movement\r\n  showFileMovement() {\r\n    this.showFilesMove = !this.showFilesMove\r\n    if (this.showFilesMove) {\r\n      this.showBuildDeliveryUi2 = true\r\n      this.showFetchDirSpinner = false;\r\n      console.log(\">>>>>>>path list\", this.pathList)\r\n      return\r\n    } else {\r\n      this.showBuildDeliveryUi2 = false\r\n    }\r\n    // this.openDirectory();\r\n    // this.listDirectories();\r\n    console.log(\"nbjhbjhbhb\", this.showFilesMove)\r\n    // this._common.$showFileMov.next(this.showFilesMove)\r\n  }\r\n\r\n  // add or remove tags\r\n  add(event: MatChipInputEvent): void {\r\n    const value = (event.value || '').trim();\r\n\r\n    // Add our fruit\r\n    if (value) {\r\n      this.tagList.push({ name: value });\r\n    }\r\n\r\n    // Clear the input value\r\n    event.chipInput!.clear();\r\n  }\r\n\r\n  remove(tag: any): void {\r\n    const index = this.tagList.indexOf(tag);\r\n\r\n    if (index >= 0) {\r\n      this.tagList.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  filecombinedSearch() {\r\n    if (this.contentSearchForm.invalid) {\r\n      this._modal.showError('Please Fill All Fields');\r\n      this.contentSearchForm.markAllAsTouched();\r\n      return;\r\n    }\r\n\r\n    let combineSearchData = { content_search: this.contentSearchForm.value };\r\n\r\n    let pdfFolderPathList = this.getSelectedFolderPath();\r\n    console.log(\"LLLLLLLLLLLL\", pdfFolderPathList)\r\n\r\n\r\n    this.fileCombinedSearch(combineSearchData, pdfFolderPathList);\r\n  }\r\n\r\n  fileCombinedSearch(data: any, path: any) {\r\n    let setpath=this.base_path.replace('/', '').trim().toString()+\"/\"+path[0]\r\n    console.log(\"????????//////\", data,this.showFullPdfPath)\r\n    this._directory.fileCombineSearch(data, this.showFullPdfPath).subscribe((res: any) => {\r\n      console.log(\">>>>>>>>>>\", res)\r\n      // if (res.type === HttpEventType.Response) {\r\n      //   console.log(\"////////res\", res)\r\n      // if(res)\r\n        res['res_data'] && this.readPdfright(res['res_data']['result'],'searchPdf');\r\n      // }\r\n    })\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// { name: \"UI Design1\", directory: \"Folder\", isSelected: false, type: \"pdf\" }\r\n// { name: \"UI Design\", directory: \"File\", isSelected: false, type: \"pdf\" }\r\n// { name: \"Pdf UI Design\", directory: \"File\", isSelected: false, type: \"pdf\", path: \"subhasis/subhasis/Pdf UI Design\" }\r\n\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}