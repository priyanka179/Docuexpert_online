{"ast":null,"code":"import _asyncToGenerator from \"F:/statvalu/AR_DocuExpert_Test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nvar MutexLockStatus;\n\n(function (MutexLockStatus) {\n  MutexLockStatus[MutexLockStatus[\"LOCKED\"] = 0] = \"LOCKED\";\n  MutexLockStatus[MutexLockStatus[\"UNLOCKED\"] = 1] = \"UNLOCKED\";\n})(MutexLockStatus || (MutexLockStatus = {}));\n/**\n * An async mutex lock.\n */\n\n\nexport class Mutex {\n  /**\n   * Lock for a specific key. If the lock has been acquired by another customer, then\n   * will wait until getting the lock.\n   *\n   * @param key - lock key\n   */\n  static lock(key) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise(resolve => {\n        if (_this.keys[key] === undefined || _this.keys[key] === MutexLockStatus.UNLOCKED) {\n          _this.keys[key] = MutexLockStatus.LOCKED;\n          resolve();\n        } else {\n          _this.onUnlockEvent(key, () => {\n            _this.keys[key] = MutexLockStatus.LOCKED;\n            resolve();\n          });\n        }\n      });\n    })();\n  }\n  /**\n   * Unlock a key.\n   *\n   * @param key -\n   */\n\n\n  static unlock(key) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise(resolve => {\n        if (_this2.keys[key] === MutexLockStatus.LOCKED) {\n          _this2.emitUnlockEvent(key);\n        }\n\n        delete _this2.keys[key];\n        resolve();\n      });\n    })();\n  }\n\n  static onUnlockEvent(key, handler) {\n    if (this.listeners[key] === undefined) {\n      this.listeners[key] = [handler];\n    } else {\n      this.listeners[key].push(handler);\n    }\n  }\n\n  static emitUnlockEvent(key) {\n    if (this.listeners[key] !== undefined && this.listeners[key].length > 0) {\n      const handler = this.listeners[key].shift();\n      setImmediate(() => {\n        handler.call(this);\n      });\n    }\n  }\n\n}\nMutex.keys = {};\nMutex.listeners = {}; //# sourceMappingURL=Mutex.js.map","map":{"version":3,"sources":["F:/statvalu/AR_DocuExpert_Test/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/utils/Mutex.js"],"names":["MutexLockStatus","Mutex","lock","key","Promise","resolve","keys","undefined","UNLOCKED","LOCKED","onUnlockEvent","unlock","emitUnlockEvent","handler","listeners","push","length","shift","setImmediate","call"],"mappings":";AAAA;AACA;AACA,IAAIA,eAAJ;;AACA,CAAC,UAAUA,eAAV,EAA2B;AACxBA,EAAAA,eAAe,CAACA,eAAe,CAAC,QAAD,CAAf,GAA4B,CAA7B,CAAf,GAAiD,QAAjD;AACAA,EAAAA,eAAe,CAACA,eAAe,CAAC,UAAD,CAAf,GAA8B,CAA/B,CAAf,GAAmD,UAAnD;AACH,CAHD,EAGGA,eAAe,KAAKA,eAAe,GAAG,EAAvB,CAHlB;AAIA;AACA;AACA;;;AACA,OAAO,MAAMC,KAAN,CAAY;AACf;AACJ;AACA;AACA;AACA;AACA;AACqB,SAAJC,IAAI,CAACC,GAAD,EAAM;AAAA;;AAAA;AACnB,aAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC5B,YAAI,KAAI,CAACC,IAAL,CAAUH,GAAV,MAAmBI,SAAnB,IAAgC,KAAI,CAACD,IAAL,CAAUH,GAAV,MAAmBH,eAAe,CAACQ,QAAvE,EAAiF;AAC7E,UAAA,KAAI,CAACF,IAAL,CAAUH,GAAV,IAAiBH,eAAe,CAACS,MAAjC;AACAJ,UAAAA,OAAO;AACV,SAHD,MAIK;AACD,UAAA,KAAI,CAACK,aAAL,CAAmBP,GAAnB,EAAwB,MAAM;AAC1B,YAAA,KAAI,CAACG,IAAL,CAAUH,GAAV,IAAiBH,eAAe,CAACS,MAAjC;AACAJ,YAAAA,OAAO;AACV,WAHD;AAIH;AACJ,OAXM,CAAP;AADmB;AAatB;AACD;AACJ;AACA;AACA;AACA;;;AACuB,SAANM,MAAM,CAACR,GAAD,EAAM;AAAA;;AAAA;AACrB,aAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC5B,YAAI,MAAI,CAACC,IAAL,CAAUH,GAAV,MAAmBH,eAAe,CAACS,MAAvC,EAA+C;AAC3C,UAAA,MAAI,CAACG,eAAL,CAAqBT,GAArB;AACH;;AACD,eAAO,MAAI,CAACG,IAAL,CAAUH,GAAV,CAAP;AACAE,QAAAA,OAAO;AACV,OANM,CAAP;AADqB;AAQxB;;AACmB,SAAbK,aAAa,CAACP,GAAD,EAAMU,OAAN,EAAe;AAC/B,QAAI,KAAKC,SAAL,CAAeX,GAAf,MAAwBI,SAA5B,EAAuC;AACnC,WAAKO,SAAL,CAAeX,GAAf,IAAsB,CAACU,OAAD,CAAtB;AACH,KAFD,MAGK;AACD,WAAKC,SAAL,CAAeX,GAAf,EAAoBY,IAApB,CAAyBF,OAAzB;AACH;AACJ;;AACqB,SAAfD,eAAe,CAACT,GAAD,EAAM;AACxB,QAAI,KAAKW,SAAL,CAAeX,GAAf,MAAwBI,SAAxB,IAAqC,KAAKO,SAAL,CAAeX,GAAf,EAAoBa,MAApB,GAA6B,CAAtE,EAAyE;AACrE,YAAMH,OAAO,GAAG,KAAKC,SAAL,CAAeX,GAAf,EAAoBc,KAApB,EAAhB;AACAC,MAAAA,YAAY,CAAC,MAAM;AACfL,QAAAA,OAAO,CAACM,IAAR,CAAa,IAAb;AACH,OAFW,CAAZ;AAGH;AACJ;;AAlDc;AAoDnBlB,KAAK,CAACK,IAAN,GAAa,EAAb;AACAL,KAAK,CAACa,SAAN,GAAkB,EAAlB,C,CACA","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nvar MutexLockStatus;\n(function (MutexLockStatus) {\n    MutexLockStatus[MutexLockStatus[\"LOCKED\"] = 0] = \"LOCKED\";\n    MutexLockStatus[MutexLockStatus[\"UNLOCKED\"] = 1] = \"UNLOCKED\";\n})(MutexLockStatus || (MutexLockStatus = {}));\n/**\n * An async mutex lock.\n */\nexport class Mutex {\n    /**\n     * Lock for a specific key. If the lock has been acquired by another customer, then\n     * will wait until getting the lock.\n     *\n     * @param key - lock key\n     */\n    static async lock(key) {\n        return new Promise((resolve) => {\n            if (this.keys[key] === undefined || this.keys[key] === MutexLockStatus.UNLOCKED) {\n                this.keys[key] = MutexLockStatus.LOCKED;\n                resolve();\n            }\n            else {\n                this.onUnlockEvent(key, () => {\n                    this.keys[key] = MutexLockStatus.LOCKED;\n                    resolve();\n                });\n            }\n        });\n    }\n    /**\n     * Unlock a key.\n     *\n     * @param key -\n     */\n    static async unlock(key) {\n        return new Promise((resolve) => {\n            if (this.keys[key] === MutexLockStatus.LOCKED) {\n                this.emitUnlockEvent(key);\n            }\n            delete this.keys[key];\n            resolve();\n        });\n    }\n    static onUnlockEvent(key, handler) {\n        if (this.listeners[key] === undefined) {\n            this.listeners[key] = [handler];\n        }\n        else {\n            this.listeners[key].push(handler);\n        }\n    }\n    static emitUnlockEvent(key) {\n        if (this.listeners[key] !== undefined && this.listeners[key].length > 0) {\n            const handler = this.listeners[key].shift();\n            setImmediate(() => {\n                handler.call(this);\n            });\n        }\n    }\n}\nMutex.keys = {};\nMutex.listeners = {};\n//# sourceMappingURL=Mutex.js.map"]},"metadata":{},"sourceType":"module"}