{"ast":null,"code":"import _asyncToGenerator from \"F:/statvalu/AR_DocuExpert_Test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { generateUuid } from \"@azure/core-http\";\nimport { StorageClientContext } from \"./generated/src/index\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { Blob as StorageBlob, Container } from \"./generated/src/operations\";\nimport { ETagNone } from \"./utils/constants\";\nimport { convertTracingToRequestOptionsBase, createSpan } from \"./utils/tracing\";\n/**\n * A client that manages leases for a {@link ContainerClient} or a {@link BlobClient}.\n */\n\nexport class BlobLeaseClient {\n  /**\n   * Creates an instance of BlobLeaseClient.\n   * @param client - The client to make the lease operation requests.\n   * @param leaseId - Initial proposed lease id.\n   */\n  constructor(client, leaseId) {\n    const clientContext = new StorageClientContext(client.url, client.pipeline.toServiceClientOptions());\n    this._url = client.url;\n\n    if (client.name === undefined) {\n      this._isContainer = true;\n      this._containerOrBlobOperation = new Container(clientContext);\n    } else {\n      this._isContainer = false;\n      this._containerOrBlobOperation = new StorageBlob(clientContext);\n    }\n\n    if (!leaseId) {\n      leaseId = generateUuid();\n    }\n\n    this._leaseId = leaseId;\n  }\n  /**\n   * Gets the lease Id.\n   *\n   * @readonly\n   */\n\n\n  get leaseId() {\n    return this._leaseId;\n  }\n  /**\n   * Gets the url.\n   *\n   * @readonly\n   */\n\n\n  get url() {\n    return this._url;\n  }\n  /**\n   * Establishes and manages a lock on a container for delete operations, or on a blob\n   * for write and delete operations.\n   * The lock duration can be 15 to 60 seconds, or can be infinite.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param duration - Must be between 15 to 60 seconds, or infinite (-1)\n   * @param options - option to configure lease management operations.\n   * @returns Response data for acquire lease operation.\n   */\n\n\n  acquireLease(duration, options = {}) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var _a, _b, _c, _d, _e, _f;\n\n      const {\n        span,\n        updatedOptions\n      } = createSpan(\"BlobLeaseClient-acquireLease\", options);\n\n      if (_this._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n        throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n      }\n\n      try {\n        return yield _this._containerOrBlobOperation.acquireLease(Object.assign({\n          abortSignal: options.abortSignal,\n          duration,\n          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {\n            ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions\n          }),\n          proposedLeaseId: _this._leaseId\n        }, convertTracingToRequestOptionsBase(updatedOptions)));\n      } catch (e) {\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message: e.message\n        });\n        throw e;\n      } finally {\n        span.end();\n      }\n    })();\n  }\n  /**\n   * To change the ID of the lease.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param proposedLeaseId - the proposed new lease Id.\n   * @param options - option to configure lease management operations.\n   * @returns Response data for change lease operation.\n   */\n\n\n  changeLease(proposedLeaseId, options = {}) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      var _a, _b, _c, _d, _e, _f;\n\n      const {\n        span,\n        updatedOptions\n      } = createSpan(\"BlobLeaseClient-changeLease\", options);\n\n      if (_this2._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n        throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n      }\n\n      try {\n        const response = yield _this2._containerOrBlobOperation.changeLease(_this2._leaseId, proposedLeaseId, Object.assign({\n          abortSignal: options.abortSignal,\n          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {\n            ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions\n          })\n        }, convertTracingToRequestOptionsBase(updatedOptions)));\n        _this2._leaseId = proposedLeaseId;\n        return response;\n      } catch (e) {\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message: e.message\n        });\n        throw e;\n      } finally {\n        span.end();\n      }\n    })();\n  }\n  /**\n   * To free the lease if it is no longer needed so that another client may\n   * immediately acquire a lease against the container or the blob.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param options - option to configure lease management operations.\n   * @returns Response data for release lease operation.\n   */\n\n\n  releaseLease(options = {}) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      var _a, _b, _c, _d, _e, _f;\n\n      const {\n        span,\n        updatedOptions\n      } = createSpan(\"BlobLeaseClient-releaseLease\", options);\n\n      if (_this3._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n        throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n      }\n\n      try {\n        return yield _this3._containerOrBlobOperation.releaseLease(_this3._leaseId, Object.assign({\n          abortSignal: options.abortSignal,\n          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {\n            ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions\n          })\n        }, convertTracingToRequestOptionsBase(updatedOptions)));\n      } catch (e) {\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message: e.message\n        });\n        throw e;\n      } finally {\n        span.end();\n      }\n    })();\n  }\n  /**\n   * To renew the lease.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param options - Optional option to configure lease management operations.\n   * @returns Response data for renew lease operation.\n   */\n\n\n  renewLease(options = {}) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      var _a, _b, _c, _d, _e, _f;\n\n      const {\n        span,\n        updatedOptions\n      } = createSpan(\"BlobLeaseClient-renewLease\", options);\n\n      if (_this4._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n        throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n      }\n\n      try {\n        return yield _this4._containerOrBlobOperation.renewLease(_this4._leaseId, Object.assign({\n          abortSignal: options.abortSignal,\n          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {\n            ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions\n          })\n        }, convertTracingToRequestOptionsBase(updatedOptions)));\n      } catch (e) {\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message: e.message\n        });\n        throw e;\n      } finally {\n        span.end();\n      }\n    })();\n  }\n  /**\n   * To end the lease but ensure that another client cannot acquire a new lease\n   * until the current lease period has expired.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n   * and\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n   *\n   * @param breakPeriod - Break period\n   * @param options - Optional options to configure lease management operations.\n   * @returns Response data for break lease operation.\n   */\n\n\n  breakLease(breakPeriod, options = {}) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      var _a, _b, _c, _d, _e, _f;\n\n      const {\n        span,\n        updatedOptions\n      } = createSpan(\"BlobLeaseClient-breakLease\", options);\n\n      if (_this5._isContainer && (((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone || ((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone || ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n        throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n      }\n\n      try {\n        const operationOptions = Object.assign({\n          abortSignal: options.abortSignal,\n          breakPeriod,\n          modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), {\n            ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions\n          })\n        }, convertTracingToRequestOptionsBase(updatedOptions));\n        return yield _this5._containerOrBlobOperation.breakLease(operationOptions);\n      } catch (e) {\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message: e.message\n        });\n        throw e;\n      } finally {\n        span.end();\n      }\n    })();\n  }\n\n} //# sourceMappingURL=BlobLeaseClient.js.map","map":{"version":3,"sources":["F:/statvalu/AR_DocuExpert_Test/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobLeaseClient.js"],"names":["generateUuid","StorageClientContext","SpanStatusCode","Blob","StorageBlob","Container","ETagNone","convertTracingToRequestOptionsBase","createSpan","BlobLeaseClient","constructor","client","leaseId","clientContext","url","pipeline","toServiceClientOptions","_url","name","undefined","_isContainer","_containerOrBlobOperation","_leaseId","acquireLease","duration","options","_a","_b","_c","_d","_e","_f","span","updatedOptions","conditions","ifMatch","ifNoneMatch","tagConditions","RangeError","Object","assign","abortSignal","modifiedAccessConditions","ifTags","proposedLeaseId","e","setStatus","code","ERROR","message","end","changeLease","response","releaseLease","renewLease","breakLease","breakPeriod","operationOptions"],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { generateUuid } from \"@azure/core-http\";\nimport { StorageClientContext } from \"./generated/src/index\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { Blob as StorageBlob, Container } from \"./generated/src/operations\";\nimport { ETagNone } from \"./utils/constants\";\nimport { convertTracingToRequestOptionsBase, createSpan } from \"./utils/tracing\";\n/**\n * A client that manages leases for a {@link ContainerClient} or a {@link BlobClient}.\n */\nexport class BlobLeaseClient {\n    /**\n     * Creates an instance of BlobLeaseClient.\n     * @param client - The client to make the lease operation requests.\n     * @param leaseId - Initial proposed lease id.\n     */\n    constructor(client, leaseId) {\n        const clientContext = new StorageClientContext(client.url, client.pipeline.toServiceClientOptions());\n        this._url = client.url;\n        if (client.name === undefined) {\n            this._isContainer = true;\n            this._containerOrBlobOperation = new Container(clientContext);\n        }\n        else {\n            this._isContainer = false;\n            this._containerOrBlobOperation = new StorageBlob(clientContext);\n        }\n        if (!leaseId) {\n            leaseId = generateUuid();\n        }\n        this._leaseId = leaseId;\n    }\n    /**\n     * Gets the lease Id.\n     *\n     * @readonly\n     */\n    get leaseId() {\n        return this._leaseId;\n    }\n    /**\n     * Gets the url.\n     *\n     * @readonly\n     */\n    get url() {\n        return this._url;\n    }\n    /**\n     * Establishes and manages a lock on a container for delete operations, or on a blob\n     * for write and delete operations.\n     * The lock duration can be 15 to 60 seconds, or can be infinite.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param duration - Must be between 15 to 60 seconds, or infinite (-1)\n     * @param options - option to configure lease management operations.\n     * @returns Response data for acquire lease operation.\n     */\n    async acquireLease(duration, options = {}) {\n        var _a, _b, _c, _d, _e, _f;\n        const { span, updatedOptions } = createSpan(\"BlobLeaseClient-acquireLease\", options);\n        if (this._isContainer &&\n            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone) ||\n                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone) ||\n                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n            throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n        }\n        try {\n            return await this._containerOrBlobOperation.acquireLease(Object.assign({ abortSignal: options.abortSignal, duration, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions }), proposedLeaseId: this._leaseId }, convertTracingToRequestOptionsBase(updatedOptions)));\n        }\n        catch (e) {\n            span.setStatus({\n                code: SpanStatusCode.ERROR,\n                message: e.message\n            });\n            throw e;\n        }\n        finally {\n            span.end();\n        }\n    }\n    /**\n     * To change the ID of the lease.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param proposedLeaseId - the proposed new lease Id.\n     * @param options - option to configure lease management operations.\n     * @returns Response data for change lease operation.\n     */\n    async changeLease(proposedLeaseId, options = {}) {\n        var _a, _b, _c, _d, _e, _f;\n        const { span, updatedOptions } = createSpan(\"BlobLeaseClient-changeLease\", options);\n        if (this._isContainer &&\n            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone) ||\n                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone) ||\n                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n            throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n        }\n        try {\n            const response = await this._containerOrBlobOperation.changeLease(this._leaseId, proposedLeaseId, Object.assign({ abortSignal: options.abortSignal, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions }) }, convertTracingToRequestOptionsBase(updatedOptions)));\n            this._leaseId = proposedLeaseId;\n            return response;\n        }\n        catch (e) {\n            span.setStatus({\n                code: SpanStatusCode.ERROR,\n                message: e.message\n            });\n            throw e;\n        }\n        finally {\n            span.end();\n        }\n    }\n    /**\n     * To free the lease if it is no longer needed so that another client may\n     * immediately acquire a lease against the container or the blob.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param options - option to configure lease management operations.\n     * @returns Response data for release lease operation.\n     */\n    async releaseLease(options = {}) {\n        var _a, _b, _c, _d, _e, _f;\n        const { span, updatedOptions } = createSpan(\"BlobLeaseClient-releaseLease\", options);\n        if (this._isContainer &&\n            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone) ||\n                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone) ||\n                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n            throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n        }\n        try {\n            return await this._containerOrBlobOperation.releaseLease(this._leaseId, Object.assign({ abortSignal: options.abortSignal, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions }) }, convertTracingToRequestOptionsBase(updatedOptions)));\n        }\n        catch (e) {\n            span.setStatus({\n                code: SpanStatusCode.ERROR,\n                message: e.message\n            });\n            throw e;\n        }\n        finally {\n            span.end();\n        }\n    }\n    /**\n     * To renew the lease.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param options - Optional option to configure lease management operations.\n     * @returns Response data for renew lease operation.\n     */\n    async renewLease(options = {}) {\n        var _a, _b, _c, _d, _e, _f;\n        const { span, updatedOptions } = createSpan(\"BlobLeaseClient-renewLease\", options);\n        if (this._isContainer &&\n            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone) ||\n                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone) ||\n                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n            throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n        }\n        try {\n            return await this._containerOrBlobOperation.renewLease(this._leaseId, Object.assign({ abortSignal: options.abortSignal, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions }) }, convertTracingToRequestOptionsBase(updatedOptions)));\n        }\n        catch (e) {\n            span.setStatus({\n                code: SpanStatusCode.ERROR,\n                message: e.message\n            });\n            throw e;\n        }\n        finally {\n            span.end();\n        }\n    }\n    /**\n     * To end the lease but ensure that another client cannot acquire a new lease\n     * until the current lease period has expired.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-container\n     * and\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/lease-blob\n     *\n     * @param breakPeriod - Break period\n     * @param options - Optional options to configure lease management operations.\n     * @returns Response data for break lease operation.\n     */\n    async breakLease(breakPeriod, options = {}) {\n        var _a, _b, _c, _d, _e, _f;\n        const { span, updatedOptions } = createSpan(\"BlobLeaseClient-breakLease\", options);\n        if (this._isContainer &&\n            ((((_a = options.conditions) === null || _a === void 0 ? void 0 : _a.ifMatch) && ((_b = options.conditions) === null || _b === void 0 ? void 0 : _b.ifMatch) !== ETagNone) ||\n                (((_c = options.conditions) === null || _c === void 0 ? void 0 : _c.ifNoneMatch) && ((_d = options.conditions) === null || _d === void 0 ? void 0 : _d.ifNoneMatch) !== ETagNone) ||\n                ((_e = options.conditions) === null || _e === void 0 ? void 0 : _e.tagConditions))) {\n            throw new RangeError(\"The IfMatch, IfNoneMatch and tags access conditions are ignored by the service. Values other than undefined or their default values are not acceptable.\");\n        }\n        try {\n            const operationOptions = Object.assign({ abortSignal: options.abortSignal, breakPeriod, modifiedAccessConditions: Object.assign(Object.assign({}, options.conditions), { ifTags: (_f = options.conditions) === null || _f === void 0 ? void 0 : _f.tagConditions }) }, convertTracingToRequestOptionsBase(updatedOptions));\n            return await this._containerOrBlobOperation.breakLease(operationOptions);\n        }\n        catch (e) {\n            span.setStatus({\n                code: SpanStatusCode.ERROR,\n                message: e.message\n            });\n            throw e;\n        }\n        finally {\n            span.end();\n        }\n    }\n}\n//# sourceMappingURL=BlobLeaseClient.js.map"]},"metadata":{},"sourceType":"module"}