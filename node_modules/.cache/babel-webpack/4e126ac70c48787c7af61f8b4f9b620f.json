{"ast":null,"code":"import _asyncToGenerator from \"F:/statvalu/AR_DocuExpert_Test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AbortError } from \"@azure/abort-controller\";\nimport { BaseRequestPolicy } from \"@azure/core-http\";\nimport { UrlConstants } from \"../utils/constants\";\nimport { delay, setURLHost, setURLParameter } from \"../utils/utils.common\";\nimport { logger } from \"../log\";\n/**\n * A factory method used to generated a RetryPolicy factory.\n *\n * @param retryOptions -\n */\n\nexport function NewRetryPolicyFactory(retryOptions) {\n  return {\n    create: (nextPolicy, options) => {\n      return new StorageRetryPolicy(nextPolicy, options, retryOptions);\n    }\n  };\n}\n/**\n * RetryPolicy types.\n */\n\nexport var StorageRetryPolicyType;\n\n(function (StorageRetryPolicyType) {\n  /**\n   * Exponential retry. Retry time delay grows exponentially.\n   */\n  StorageRetryPolicyType[StorageRetryPolicyType[\"EXPONENTIAL\"] = 0] = \"EXPONENTIAL\";\n  /**\n   * Linear retry. Retry time delay grows linearly.\n   */\n\n  StorageRetryPolicyType[StorageRetryPolicyType[\"FIXED\"] = 1] = \"FIXED\";\n})(StorageRetryPolicyType || (StorageRetryPolicyType = {})); // Default values of StorageRetryOptions\n\n\nconst DEFAULT_RETRY_OPTIONS = {\n  maxRetryDelayInMs: 120 * 1000,\n  maxTries: 4,\n  retryDelayInMs: 4 * 1000,\n  retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,\n  secondaryHost: \"\",\n  tryTimeoutInMs: undefined // Use server side default timeout strategy\n\n};\nconst RETRY_ABORT_ERROR = new AbortError(\"The operation was aborted.\");\n/**\n * Retry policy with exponential retry and linear retry implemented.\n */\n\nexport class StorageRetryPolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of RetryPolicy.\n   *\n   * @param nextPolicy -\n   * @param options -\n   * @param retryOptions -\n   */\n  constructor(nextPolicy, options, retryOptions = DEFAULT_RETRY_OPTIONS) {\n    super(nextPolicy, options); // Initialize retry options\n\n    this.retryOptions = {\n      retryPolicyType: retryOptions.retryPolicyType ? retryOptions.retryPolicyType : DEFAULT_RETRY_OPTIONS.retryPolicyType,\n      maxTries: retryOptions.maxTries && retryOptions.maxTries >= 1 ? Math.floor(retryOptions.maxTries) : DEFAULT_RETRY_OPTIONS.maxTries,\n      tryTimeoutInMs: retryOptions.tryTimeoutInMs && retryOptions.tryTimeoutInMs >= 0 ? retryOptions.tryTimeoutInMs : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs,\n      retryDelayInMs: retryOptions.retryDelayInMs && retryOptions.retryDelayInMs >= 0 ? Math.min(retryOptions.retryDelayInMs, retryOptions.maxRetryDelayInMs ? retryOptions.maxRetryDelayInMs : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs) : DEFAULT_RETRY_OPTIONS.retryDelayInMs,\n      maxRetryDelayInMs: retryOptions.maxRetryDelayInMs && retryOptions.maxRetryDelayInMs >= 0 ? retryOptions.maxRetryDelayInMs : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs,\n      secondaryHost: retryOptions.secondaryHost ? retryOptions.secondaryHost : DEFAULT_RETRY_OPTIONS.secondaryHost\n    };\n  }\n  /**\n   * Sends request.\n   *\n   * @param request -\n   */\n\n\n  sendRequest(request) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return _this.attemptSendRequest(request, false, 1);\n    })();\n  }\n  /**\n   * Decide and perform next retry. Won't mutate request parameter.\n   *\n   * @param request -\n   * @param secondaryHas404 -  If attempt was against the secondary & it returned a StatusNotFound (404), then\n   *                                   the resource was not found. This may be due to replication delay. So, in this\n   *                                   case, we'll never try the secondary again for this operation.\n   * @param attempt -           How many retries has been attempted to performed, starting from 1, which includes\n   *                                   the attempt will be performed by this method call.\n   */\n\n\n  attemptSendRequest(request, secondaryHas404, attempt) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const newRequest = request.clone();\n      const isPrimaryRetry = secondaryHas404 || !_this2.retryOptions.secondaryHost || !(request.method === \"GET\" || request.method === \"HEAD\" || request.method === \"OPTIONS\") || attempt % 2 === 1;\n\n      if (!isPrimaryRetry) {\n        newRequest.url = setURLHost(newRequest.url, _this2.retryOptions.secondaryHost);\n      } // Set the server-side timeout query parameter \"timeout=[seconds]\"\n\n\n      if (_this2.retryOptions.tryTimeoutInMs) {\n        newRequest.url = setURLParameter(newRequest.url, UrlConstants.Parameters.TIMEOUT, Math.floor(_this2.retryOptions.tryTimeoutInMs / 1000).toString());\n      }\n\n      let response;\n\n      try {\n        logger.info(`RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? \"Primary\" : \"Secondary\"}`);\n        response = yield _this2._nextPolicy.sendRequest(newRequest);\n\n        if (!_this2.shouldRetry(isPrimaryRetry, attempt, response)) {\n          return response;\n        }\n\n        secondaryHas404 = secondaryHas404 || !isPrimaryRetry && response.status === 404;\n      } catch (err) {\n        logger.error(`RetryPolicy: Caught error, message: ${err.message}, code: ${err.code}`);\n\n        if (!_this2.shouldRetry(isPrimaryRetry, attempt, response, err)) {\n          throw err;\n        }\n      }\n\n      yield _this2.delay(isPrimaryRetry, attempt, request.abortSignal);\n      return _this2.attemptSendRequest(request, secondaryHas404, ++attempt);\n    })();\n  }\n  /**\n   * Decide whether to retry according to last HTTP response and retry counters.\n   *\n   * @param isPrimaryRetry -\n   * @param attempt -\n   * @param response -\n   * @param err -\n   */\n\n\n  shouldRetry(isPrimaryRetry, attempt, response, err) {\n    if (attempt >= this.retryOptions.maxTries) {\n      logger.info(`RetryPolicy: Attempt(s) ${attempt} >= maxTries ${this.retryOptions.maxTries}, no further try.`);\n      return false;\n    } // Handle network failures, you may need to customize the list when you implement\n    // your own http client\n\n\n    const retriableErrors = [\"ETIMEDOUT\", \"ESOCKETTIMEDOUT\", \"ECONNREFUSED\", \"ECONNRESET\", \"ENOENT\", \"ENOTFOUND\", \"TIMEOUT\", \"EPIPE\", \"REQUEST_SEND_ERROR\" // For default xhr based http client provided in ms-rest-js\n    ];\n\n    if (err) {\n      for (const retriableError of retriableErrors) {\n        if (err.name.toUpperCase().includes(retriableError) || err.message.toUpperCase().includes(retriableError) || err.code && err.code.toString().toUpperCase() === retriableError) {\n          logger.info(`RetryPolicy: Network error ${retriableError} found, will retry.`);\n          return true;\n        }\n      }\n    } // If attempt was against the secondary & it returned a StatusNotFound (404), then\n    // the resource was not found. This may be due to replication delay. So, in this\n    // case, we'll never try the secondary again for this operation.\n\n\n    if (response || err) {\n      const statusCode = response ? response.status : err ? err.statusCode : 0;\n\n      if (!isPrimaryRetry && statusCode === 404) {\n        logger.info(`RetryPolicy: Secondary access with 404, will retry.`);\n        return true;\n      } // Server internal error or server timeout\n\n\n      if (statusCode === 503 || statusCode === 500) {\n        logger.info(`RetryPolicy: Will retry for status code ${statusCode}.`);\n        return true;\n      }\n    }\n\n    if ((err === null || err === void 0 ? void 0 : err.code) === \"PARSE_ERROR\" && (err === null || err === void 0 ? void 0 : err.message.startsWith(`Error \"Error: Unclosed root tag`))) {\n      logger.info(\"RetryPolicy: Incomplete XML response likely due to service timeout, will retry.\");\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Delay a calculated time between retries.\n   *\n   * @param isPrimaryRetry -\n   * @param attempt -\n   * @param abortSignal -\n   */\n\n\n  delay(isPrimaryRetry, attempt, abortSignal) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let delayTimeInMs = 0;\n\n      if (isPrimaryRetry) {\n        switch (_this3.retryOptions.retryPolicyType) {\n          case StorageRetryPolicyType.EXPONENTIAL:\n            delayTimeInMs = Math.min((Math.pow(2, attempt - 1) - 1) * _this3.retryOptions.retryDelayInMs, _this3.retryOptions.maxRetryDelayInMs);\n            break;\n\n          case StorageRetryPolicyType.FIXED:\n            delayTimeInMs = _this3.retryOptions.retryDelayInMs;\n            break;\n        }\n      } else {\n        delayTimeInMs = Math.random() * 1000;\n      }\n\n      logger.info(`RetryPolicy: Delay for ${delayTimeInMs}ms`);\n      return delay(delayTimeInMs, abortSignal, RETRY_ABORT_ERROR);\n    })();\n  }\n\n} //# sourceMappingURL=StorageRetryPolicy.js.map","map":{"version":3,"sources":["F:/statvalu/AR_DocuExpert_Test/node_modules/@azure/storage-file-datalake/dist-esm/storage-file-datalake/src/policies/StorageRetryPolicy.js"],"names":["AbortError","BaseRequestPolicy","UrlConstants","delay","setURLHost","setURLParameter","logger","NewRetryPolicyFactory","retryOptions","create","nextPolicy","options","StorageRetryPolicy","StorageRetryPolicyType","DEFAULT_RETRY_OPTIONS","maxRetryDelayInMs","maxTries","retryDelayInMs","retryPolicyType","EXPONENTIAL","secondaryHost","tryTimeoutInMs","undefined","RETRY_ABORT_ERROR","constructor","Math","floor","min","sendRequest","request","attemptSendRequest","secondaryHas404","attempt","newRequest","clone","isPrimaryRetry","method","url","Parameters","TIMEOUT","toString","response","info","_nextPolicy","shouldRetry","status","err","error","message","code","abortSignal","retriableErrors","retriableError","name","toUpperCase","includes","statusCode","startsWith","delayTimeInMs","pow","FIXED","random"],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AbortError } from \"@azure/abort-controller\";\nimport { BaseRequestPolicy } from \"@azure/core-http\";\nimport { UrlConstants } from \"../utils/constants\";\nimport { delay, setURLHost, setURLParameter } from \"../utils/utils.common\";\nimport { logger } from \"../log\";\n/**\n * A factory method used to generated a RetryPolicy factory.\n *\n * @param retryOptions -\n */\nexport function NewRetryPolicyFactory(retryOptions) {\n    return {\n        create: (nextPolicy, options) => {\n            return new StorageRetryPolicy(nextPolicy, options, retryOptions);\n        }\n    };\n}\n/**\n * RetryPolicy types.\n */\nexport var StorageRetryPolicyType;\n(function (StorageRetryPolicyType) {\n    /**\n     * Exponential retry. Retry time delay grows exponentially.\n     */\n    StorageRetryPolicyType[StorageRetryPolicyType[\"EXPONENTIAL\"] = 0] = \"EXPONENTIAL\";\n    /**\n     * Linear retry. Retry time delay grows linearly.\n     */\n    StorageRetryPolicyType[StorageRetryPolicyType[\"FIXED\"] = 1] = \"FIXED\";\n})(StorageRetryPolicyType || (StorageRetryPolicyType = {}));\n// Default values of StorageRetryOptions\nconst DEFAULT_RETRY_OPTIONS = {\n    maxRetryDelayInMs: 120 * 1000,\n    maxTries: 4,\n    retryDelayInMs: 4 * 1000,\n    retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,\n    secondaryHost: \"\",\n    tryTimeoutInMs: undefined // Use server side default timeout strategy\n};\nconst RETRY_ABORT_ERROR = new AbortError(\"The operation was aborted.\");\n/**\n * Retry policy with exponential retry and linear retry implemented.\n */\nexport class StorageRetryPolicy extends BaseRequestPolicy {\n    /**\n     * Creates an instance of RetryPolicy.\n     *\n     * @param nextPolicy -\n     * @param options -\n     * @param retryOptions -\n     */\n    constructor(nextPolicy, options, retryOptions = DEFAULT_RETRY_OPTIONS) {\n        super(nextPolicy, options);\n        // Initialize retry options\n        this.retryOptions = {\n            retryPolicyType: retryOptions.retryPolicyType\n                ? retryOptions.retryPolicyType\n                : DEFAULT_RETRY_OPTIONS.retryPolicyType,\n            maxTries: retryOptions.maxTries && retryOptions.maxTries >= 1\n                ? Math.floor(retryOptions.maxTries)\n                : DEFAULT_RETRY_OPTIONS.maxTries,\n            tryTimeoutInMs: retryOptions.tryTimeoutInMs && retryOptions.tryTimeoutInMs >= 0\n                ? retryOptions.tryTimeoutInMs\n                : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs,\n            retryDelayInMs: retryOptions.retryDelayInMs && retryOptions.retryDelayInMs >= 0\n                ? Math.min(retryOptions.retryDelayInMs, retryOptions.maxRetryDelayInMs\n                    ? retryOptions.maxRetryDelayInMs\n                    : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs)\n                : DEFAULT_RETRY_OPTIONS.retryDelayInMs,\n            maxRetryDelayInMs: retryOptions.maxRetryDelayInMs && retryOptions.maxRetryDelayInMs >= 0\n                ? retryOptions.maxRetryDelayInMs\n                : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs,\n            secondaryHost: retryOptions.secondaryHost\n                ? retryOptions.secondaryHost\n                : DEFAULT_RETRY_OPTIONS.secondaryHost\n        };\n    }\n    /**\n     * Sends request.\n     *\n     * @param request -\n     */\n    async sendRequest(request) {\n        return this.attemptSendRequest(request, false, 1);\n    }\n    /**\n     * Decide and perform next retry. Won't mutate request parameter.\n     *\n     * @param request -\n     * @param secondaryHas404 -  If attempt was against the secondary & it returned a StatusNotFound (404), then\n     *                                   the resource was not found. This may be due to replication delay. So, in this\n     *                                   case, we'll never try the secondary again for this operation.\n     * @param attempt -           How many retries has been attempted to performed, starting from 1, which includes\n     *                                   the attempt will be performed by this method call.\n     */\n    async attemptSendRequest(request, secondaryHas404, attempt) {\n        const newRequest = request.clone();\n        const isPrimaryRetry = secondaryHas404 ||\n            !this.retryOptions.secondaryHost ||\n            !(request.method === \"GET\" || request.method === \"HEAD\" || request.method === \"OPTIONS\") ||\n            attempt % 2 === 1;\n        if (!isPrimaryRetry) {\n            newRequest.url = setURLHost(newRequest.url, this.retryOptions.secondaryHost);\n        }\n        // Set the server-side timeout query parameter \"timeout=[seconds]\"\n        if (this.retryOptions.tryTimeoutInMs) {\n            newRequest.url = setURLParameter(newRequest.url, UrlConstants.Parameters.TIMEOUT, Math.floor(this.retryOptions.tryTimeoutInMs / 1000).toString());\n        }\n        let response;\n        try {\n            logger.info(`RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? \"Primary\" : \"Secondary\"}`);\n            response = await this._nextPolicy.sendRequest(newRequest);\n            if (!this.shouldRetry(isPrimaryRetry, attempt, response)) {\n                return response;\n            }\n            secondaryHas404 = secondaryHas404 || (!isPrimaryRetry && response.status === 404);\n        }\n        catch (err) {\n            logger.error(`RetryPolicy: Caught error, message: ${err.message}, code: ${err.code}`);\n            if (!this.shouldRetry(isPrimaryRetry, attempt, response, err)) {\n                throw err;\n            }\n        }\n        await this.delay(isPrimaryRetry, attempt, request.abortSignal);\n        return this.attemptSendRequest(request, secondaryHas404, ++attempt);\n    }\n    /**\n     * Decide whether to retry according to last HTTP response and retry counters.\n     *\n     * @param isPrimaryRetry -\n     * @param attempt -\n     * @param response -\n     * @param err -\n     */\n    shouldRetry(isPrimaryRetry, attempt, response, err) {\n        if (attempt >= this.retryOptions.maxTries) {\n            logger.info(`RetryPolicy: Attempt(s) ${attempt} >= maxTries ${this.retryOptions\n                .maxTries}, no further try.`);\n            return false;\n        }\n        // Handle network failures, you may need to customize the list when you implement\n        // your own http client\n        const retriableErrors = [\n            \"ETIMEDOUT\",\n            \"ESOCKETTIMEDOUT\",\n            \"ECONNREFUSED\",\n            \"ECONNRESET\",\n            \"ENOENT\",\n            \"ENOTFOUND\",\n            \"TIMEOUT\",\n            \"EPIPE\",\n            \"REQUEST_SEND_ERROR\" // For default xhr based http client provided in ms-rest-js\n        ];\n        if (err) {\n            for (const retriableError of retriableErrors) {\n                if (err.name.toUpperCase().includes(retriableError) ||\n                    err.message.toUpperCase().includes(retriableError) ||\n                    (err.code && err.code.toString().toUpperCase() === retriableError)) {\n                    logger.info(`RetryPolicy: Network error ${retriableError} found, will retry.`);\n                    return true;\n                }\n            }\n        }\n        // If attempt was against the secondary & it returned a StatusNotFound (404), then\n        // the resource was not found. This may be due to replication delay. So, in this\n        // case, we'll never try the secondary again for this operation.\n        if (response || err) {\n            const statusCode = response ? response.status : err ? err.statusCode : 0;\n            if (!isPrimaryRetry && statusCode === 404) {\n                logger.info(`RetryPolicy: Secondary access with 404, will retry.`);\n                return true;\n            }\n            // Server internal error or server timeout\n            if (statusCode === 503 || statusCode === 500) {\n                logger.info(`RetryPolicy: Will retry for status code ${statusCode}.`);\n                return true;\n            }\n        }\n        if ((err === null || err === void 0 ? void 0 : err.code) === \"PARSE_ERROR\" && (err === null || err === void 0 ? void 0 : err.message.startsWith(`Error \"Error: Unclosed root tag`))) {\n            logger.info(\"RetryPolicy: Incomplete XML response likely due to service timeout, will retry.\");\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Delay a calculated time between retries.\n     *\n     * @param isPrimaryRetry -\n     * @param attempt -\n     * @param abortSignal -\n     */\n    async delay(isPrimaryRetry, attempt, abortSignal) {\n        let delayTimeInMs = 0;\n        if (isPrimaryRetry) {\n            switch (this.retryOptions.retryPolicyType) {\n                case StorageRetryPolicyType.EXPONENTIAL:\n                    delayTimeInMs = Math.min((Math.pow(2, attempt - 1) - 1) * this.retryOptions.retryDelayInMs, this.retryOptions.maxRetryDelayInMs);\n                    break;\n                case StorageRetryPolicyType.FIXED:\n                    delayTimeInMs = this.retryOptions.retryDelayInMs;\n                    break;\n            }\n        }\n        else {\n            delayTimeInMs = Math.random() * 1000;\n        }\n        logger.info(`RetryPolicy: Delay for ${delayTimeInMs}ms`);\n        return delay(delayTimeInMs, abortSignal, RETRY_ABORT_ERROR);\n    }\n}\n//# sourceMappingURL=StorageRetryPolicy.js.map"]},"metadata":{},"sourceType":"module"}