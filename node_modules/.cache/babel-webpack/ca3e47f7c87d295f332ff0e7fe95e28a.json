{"ast":null,"code":"import _asyncToGenerator from \"F:/statvalu/AR_DocuExpert_Test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { DataLakeServiceClient } from '@azure/storage-file-datalake';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-ui-loader\";\nimport * as i3 from \"./modal.service\";\nimport * as i4 from \"src/app/auth/auth.service\";\nimport * as i5 from \"../common/commonn.service\";\nexport class UploadDirectoryService {\n  constructor(httpClient, ngxService, _modal, _auth, _common) {\n    this.httpClient = httpClient;\n    this.ngxService = ngxService;\n    this._modal = _modal;\n    this._auth = _auth;\n    this._common = _common;\n    this.totalFilesToUpload = 0;\n    this.filesUploaded = 0;\n    this.totalFileSize = 0;\n    this.totalUploadedFilesSize = 0;\n    this.totalPdfFiles = 0;\n    this.totalPdfPages = 0;\n    this.totalPdfFilesChecked = 0;\n    this.currentPath = \"\";\n    this.operationReqTime = null;\n    this.requestId = null;\n    this.showUploadProgress = false;\n    this.errorUploadFileCount = 0;\n    this.successTotalFileSize = 0;\n    this.successFilesUploaded = 0;\n    this.isUploadProcessing = false;\n    this.parallelApiCall = [];\n    this.fillStatusTableData = [];\n  } // docuexpertuat\n\n\n  getFileSystemClient(currentPath = \"\", fileSys = \"docuexpertuat2/Input_Folder/\") {\n    const account = \"docuexpertstorage\"; // const sas = \"?sv=2020-08-04&ss=bfqt&srt=sco&sp=rwdlacupx&se=2030-10-07T15:47:12Z&st=2021-10-07T07:47:12Z&spr=https,http&sig=PUGBfjV2gCQL9sNtSugw67C37SSup0ZKOOsWWTX%2Bt6M%3D\";\n\n    const sas = \"?sp=racwdlmeop&st=2022-08-12T06:43:38Z&se=2023-02-01T14:43:38Z&sv=2021-06-08&sr=c&sig=%2Byerj9lHmH5P5tJBbWVQrbjCs9ICKIc74uuOuetggrs%3D\";\n    const datalakeServiceClient = new DataLakeServiceClient(`https://${account}.dfs.core.windows.net${sas}`);\n    let fileSystemName = fileSys + this._auth.org_name + '/' + this._auth.user_name;\n\n    if (currentPath) {\n      this.currentPath = this._auth.org_name + '/' + this._auth.user_name + '/' + currentPath;\n      fileSystemName = fileSys + this._auth.org_name + '/' + this._auth.user_name + '/' + currentPath;\n    } else {\n      this.currentPath = this._auth.org_name + '/' + this._auth.user_name;\n    }\n\n    try {\n      this.fileSystemClient = datalakeServiceClient.getFileSystemClient(fileSystemName);\n    } catch (error) {\n      console.log(error);\n    }\n\n    this.operationReqTime = new Date();\n    this.requestId = this._common.getRandomString();\n    console.log(fileSystemName);\n    return this.fileSystemClient;\n  }\n\n  uploadFiles(selectedFiles) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      console.log(\"process\", selectedFiles, selectedFiles.length);\n      let files = selectedFiles;\n      _this.totalFilesToUpload += files.length;\n      let totalFilesToUploadLen = files.length;\n      _this.errorUploadFileCount = 0;\n      _this.fillStatusTableData = []; // this.uploadFilesToAzure(files);\n\n      _this.ngxService.start();\n\n      let totalPdfPages = yield _this.checkPdfPageNumbers(files);\n\n      if (totalPdfPages === 0 && _this.totalPdfFiles > 0) {\n        _this._modal.showError(\"Error Reading Pdf File!!!\");\n\n        _this.ngxService.stop();\n\n        return;\n      } else if (totalPdfPages > 0) {\n        _this._common.loaderText = \"Validating Upload Request\";\n        console.log('totalPdfPages', totalPdfPages); // this.ngxService.stop();\n\n        _this.validateUploadRequest(totalPdfPages, totalFilesToUploadLen, files); // this.uploadFilesToAzure(files);\n\n      } else {\n        console.log(\"csv detected!!!\");\n\n        _this.uploadFilesToAzure(files);\n      }\n    })();\n  }\n\n  checkPdfPageNumbers(files) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          for (let i = 0; i < files.length; i++) {\n            let file = files[i];\n            _this2.totalFileSize += file.size;\n\n            if (file.name.toLowerCase().includes('.pdf')) {\n              _this2.totalPdfFiles++;\n              let reader = new FileReader();\n              reader.readAsBinaryString(file);\n\n              reader.onload = () => {\n                let raw = reader.result;\n                reader = null;\n                let matchedString = raw.match(/\\/Type[\\s]*\\/Page[^s]/g);\n                raw = null;\n\n                if (matchedString) {\n                  const count = matchedString.length;\n                  _this2.totalPdfPages += count;\n                }\n\n                _this2.totalPdfFilesChecked += 1;\n                _this2._common.loaderText = 'Checking PDF Pages ' + _this2.totalPdfFilesChecked + '/' + _this2.totalPdfFiles; // console.log(this.totalPdfFiles,this.totalPdfFilesChecked);\n\n                if (_this2.totalPdfFilesChecked === _this2.totalPdfFiles) {\n                  _this2.totalPdfFilesChecked = 0;\n                  _this2.totalPdfFiles = 0;\n                  resolve(_this2.totalPdfPages);\n                  _this2._common.loaderText = _this2.totalPdfPages + \" PDF Pages Found\";\n                  _this2.totalPdfPages = 0;\n                  setTimeout(() => {\n                    _this2._common.loaderText = null;\n                  }, 100);\n                }\n              };\n            }\n\n            if (i === files.length - 1 && _this2.totalPdfFiles === 0) {\n              resolve(0);\n            }\n          }\n        }, 500);\n      });\n    })();\n  }\n\n  validateUploadRequest(pdfPageCount, totalFilesToUpload, files) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      _this3.httpClient.get('/web_feature/validate_usage/?user_id=' + _this3._auth.user_id + '&feature=File Upload&request_page_count=' + pdfPageCount + '&request_document_count=' + totalFilesToUpload).subscribe(res => {\n        _this3._common.loaderText = \"Completed\"; // this.fillRequestTableBeforeUpload(\"True\");\n\n        console.log(res); // this.ngxService.stop();\n\n        _this3.uploadFilesToAzure(files);\n      });\n    })();\n  }\n\n  uploadFilesToAzure(files) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      _this4.isUploadProcessing = true;\n      _this4.showUploadProgress = true;\n\n      for (let i = 0; i < files.length; i++) {\n        let fileName = files[i].name;\n        fileName = fileName.split(\".\");\n        fileName[fileName.length - 1] = fileName[fileName.length - 1].toLowerCase();\n        fileName = fileName.join(\".\");\n\n        const fileClient = _this4.fileSystemClient.getFileClient(fileName);\n\n        console.log(fileClient.getProperties(), fileClient);\n        let exists = null;\n\n        try {\n          exists = yield fileClient.getProperties();\n        } catch (error) {\n          exists = null;\n        }\n\n        if (exists) {\n          console.log(\"File Already Exists\", exists);\n          _this4.totalFileSize -= files[i].size;\n          _this4.errorUploadFileCount += 1;\n          let reqTime = JSON.stringify(_this4.operationReqTime);\n\n          _this4.uploadFailed(fileName, reqTime, 'File Already Exists');\n\n          _this4.resetAll();\n        } else {\n          _this4.processUploadAsync(fileClient, files[i], fileName);\n        }\n      }\n    })();\n  }\n\n  processUploadAsync(fileClient, file, fileName) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      let uploadedBytes = 0;\n      let reqTime = JSON.stringify(_this5.operationReqTime);\n\n      try {\n        let res = yield fileClient.upload(file, {\n          onProgress: res => {\n            _this5.totalUploadedFilesSize += res.loadedBytes - uploadedBytes;\n            uploadedBytes = res.loadedBytes;\n\n            if (res.loadedBytes === file.size) {\n              _this5.filesUploaded += 1;\n\n              _this5.uploadSuccess(fileName, reqTime);\n            }\n\n            _this5.resetAll();\n          },\n          maxConcurrency: 5\n        });\n      } catch (error) {\n        _this5.uploadFailed(fileName, reqTime, 'File Upload Failed');\n\n        _this5.totalFileSize -= file.size;\n        _this5.errorUploadFileCount += 1;\n\n        _this5.resetAll();\n      }\n    })();\n  }\n\n  resetAll() {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this6.filesUploaded === _this6.totalFilesToUpload - _this6.errorUploadFileCount) {\n        // this.fillRequestTableBeforeUpload(\"False\");\n        _this6._common.$updateDirectory.next('');\n\n        _this6.successFilesUploaded = _this6.filesUploaded;\n        _this6.successTotalFileSize = _this6.totalUploadedFilesSize;\n        _this6.currentPath = \"\";\n        _this6.isUploadProcessing = false;\n        _this6.filesUploaded = 0;\n        _this6.totalFilesToUpload = 0;\n        _this6.totalFileSize = 0;\n        _this6.totalUploadedFilesSize = 0; // let statusTableData = this.fillStatusTableData.slice();\n        // this.fillStatusTable(statusTableData);\n\n        _this6.fillStatusTableData = [];\n      }\n    })();\n  } // async addStatusTableData(fileName: string, status: string, errmsg: string) {\n  //   let reqTime = JSON.stringify(this.operationReqTime);\n  //   if (this.fillStatusTableData.length === 1000) {\n  //     let statusTableData = this.fillStatusTableData.slice();\n  //     if (this.filesUploaded !== (this.totalFilesToUpload - this.errorUploadFileCount)) {\n  //       this.fillStatusTable(statusTableData);\n  //       this.fillStatusTableData = [];\n  //     }\n  //   }\n  //   let compTime = JSON.stringify(new Date());\n  //   this.fillStatusTableData.push({\n  //     file_name: fileName,\n  //     upload_status: status,\n  //     error_msg: errmsg,\n  //     folder_path: this.currentPath,\n  //     operation_request_time: reqTime.substring(1, reqTime.length - 1),\n  //     operation_completion_time: compTime.substring(1, compTime.length - 1)\n  //   });\n  // }\n\n\n  uploadSuccess(fileName, reqTime) {\n    let compTime = JSON.stringify(new Date());\n    this.fillStatusTable({\n      file_name: fileName,\n      upload_status: \"COMPLETE\",\n      error_msg: \"null\",\n      folder_path: this.currentPath,\n      operation_request_time: reqTime.substring(1, reqTime.length - 1),\n      operation_completion_time: compTime.substring(1, compTime.length - 1)\n    });\n  }\n\n  uploadFailed(fileName, reqTime, msg) {\n    let compTime = JSON.stringify(new Date());\n    this.fillStatusTable({\n      file_name: fileName,\n      upload_status: \"FAILED\",\n      error_msg: msg,\n      folder_path: this.currentPath,\n      operation_request_time: reqTime.substring(1, reqTime.length - 1),\n      operation_completion_time: compTime.substring(1, compTime.length - 1)\n    });\n  }\n\n  fillStatusTable(statusTableData) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      console.log(\"statusTableData\", statusTableData);\n      let formdata = new FormData();\n      formdata.append('user_id', _this7._auth.user_id);\n      formdata.append('request_id', _this7.requestId);\n      formdata.append('upload_info', JSON.stringify([statusTableData]));\n      formdata.append('operation_requested', \"File Upload\");\n\n      _this7.httpClient.post(\"/document_upload/fill_upload_data/\", formdata).subscribe(res => {\n        console.log(res);\n      }, err => {\n        console.log(\"error\", statusTableData);\n      });\n    })();\n  }\n\n  fillRequestTableBeforeUpload(update_before_execution) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      let formdata = new FormData();\n      formdata.append('user_id', _this8._auth.user_id);\n      formdata.append('request_id', _this8.requestId);\n      formdata.append('folder_path', _this8.currentPath);\n      formdata.append('operation_requested', \"File Upload\");\n      formdata.append('total_count', _this8.totalFilesToUpload.toString());\n      formdata.append('success_count', _this8.filesUploaded.toString());\n      formdata.append('failed_count', _this8.errorUploadFileCount.toString());\n      formdata.append('update_before_execution', update_before_execution);\n\n      _this8.httpClient.post(\"/document_upload/fill_upload_request/\", formdata).subscribe(res => {\n        console.log(res);\n      });\n    })();\n  }\n\n  getTimetoCompleteUpload() {\n    let bytesToupload = this.totalFileSize - this.totalUploadedFilesSize;\n  }\n\n}\n\nUploadDirectoryService.ɵfac = function UploadDirectoryService_Factory(t) {\n  return new (t || UploadDirectoryService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NgxUiLoaderService), i0.ɵɵinject(i3.ModalService), i0.ɵɵinject(i4.AuthService), i0.ɵɵinject(i5.CommonnService));\n};\n\nUploadDirectoryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UploadDirectoryService,\n  factory: UploadDirectoryService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["F:\\statvalu\\AR_DocuExpert_Test\\src\\app\\_helpers\\services\\upload-directory.service.ts"],"names":[],"mappings":";AAEA,SAAuD,qBAAvD,QAA+F,8BAA/F;;;;;;;AAYA,OAAM,MAAO,sBAAP,CAA6B;AA+BjC,EAAA,WAAA,CAAoB,UAApB,EAAoD,UAApD,EAA4F,MAA5F,EAA0H,KAA1H,EAAsJ,OAAtJ,EAA6K;AAAzJ,SAAA,UAAA,GAAA,UAAA;AAAgC,SAAA,UAAA,GAAA,UAAA;AAAwC,SAAA,MAAA,GAAA,MAAA;AAA8B,SAAA,KAAA,GAAA,KAAA;AAA4B,SAAA,OAAA,GAAA,OAAA;AA7BtJ,SAAA,kBAAA,GAA6B,CAA7B;AACA,SAAA,aAAA,GAAwB,CAAxB;AAEA,SAAA,aAAA,GAAwB,CAAxB;AACA,SAAA,sBAAA,GAAiC,CAAjC;AAEA,SAAA,aAAA,GAAwB,CAAxB;AACA,SAAA,aAAA,GAAwB,CAAxB;AACA,SAAA,oBAAA,GAA+B,CAA/B;AAEA,SAAA,WAAA,GAAsB,EAAtB;AACA,SAAA,gBAAA,GAAyB,IAAzB;AACA,SAAA,SAAA,GAAoB,IAApB;AAEA,SAAA,kBAAA,GAA8B,KAA9B;AAIA,SAAA,oBAAA,GAA+B,CAA/B;AAEA,SAAA,oBAAA,GAA+B,CAA/B;AACA,SAAA,oBAAA,GAA+B,CAA/B;AAEA,SAAA,kBAAA,GAA8B,KAA9B;AAEA,SAAA,eAAA,GAAyB,EAAzB;AACA,SAAA,mBAAA,GAA6B,EAA7B;AAIC,GAhCgC,CAkCjC;;;AACA,EAAA,mBAAmB,CAAC,WAAA,GAAsB,EAAvB,EAA2B,OAAA,GAAkB,8BAA7C,EAA2E;AAC5F,UAAM,OAAO,GAAG,mBAAhB,CAD4F,CAE5F;;AACA,UAAM,GAAG,GAAG,wIAAZ;AAEA,UAAM,qBAAqB,GAAG,IAAI,qBAAJ,CAC5B,WAAW,OAAO,wBAAwB,GAAG,EADjB,CAA9B;AAIA,QAAI,cAAc,GAAG,OAAO,GAAG,KAAK,KAAL,CAAW,QAArB,GAAgC,GAAhC,GAAsC,KAAK,KAAL,CAAW,SAAtE;;AAEA,QAAI,WAAJ,EAAiB;AACf,WAAK,WAAL,GAAmB,KAAK,KAAL,CAAW,QAAX,GAAsB,GAAtB,GAA4B,KAAK,KAAL,CAAW,SAAvC,GAAmD,GAAnD,GAAyD,WAA5E;AACA,MAAA,cAAc,GAAG,OAAO,GAAG,KAAK,KAAL,CAAW,QAArB,GAAgC,GAAhC,GAAsC,KAAK,KAAL,CAAW,SAAjD,GAA6D,GAA7D,GAAmE,WAApF;AACD,KAHD,MAGO;AACL,WAAK,WAAL,GAAmB,KAAK,KAAL,CAAW,QAAX,GAAsB,GAAtB,GAA4B,KAAK,KAAL,CAAW,SAA1D;AACD;;AAED,QAAI;AACF,WAAK,gBAAL,GAAwB,qBAAqB,CAAC,mBAAtB,CAA0C,cAA1C,CAAxB;AACD,KAFD,CAEE,OAAO,KAAP,EAAc;AACd,MAAA,OAAO,CAAC,GAAR,CAAY,KAAZ;AACD;;AACD,SAAK,gBAAL,GAAwB,IAAI,IAAJ,EAAxB;AACA,SAAK,SAAL,GAAiB,KAAK,OAAL,CAAa,eAAb,EAAjB;AAEA,IAAA,OAAO,CAAC,GAAR,CAAY,cAAZ;AAEA,WAAO,KAAK,gBAAZ;AACD;;AAEK,EAAA,WAAW,CAAC,aAAD,EAAqB;AAAA;;AAAA;AACpC,MAAA,OAAO,CAAC,GAAR,CAAY,SAAZ,EAAuB,aAAvB,EAAsC,aAAa,CAAC,MAApD;AAEA,UAAI,KAAK,GAAG,aAAZ;AAEA,MAAA,KAAI,CAAC,kBAAL,IAA2B,KAAK,CAAC,MAAjC;AACA,UAAI,qBAAqB,GAAG,KAAK,CAAC,MAAlC;AAEA,MAAA,KAAI,CAAC,oBAAL,GAA4B,CAA5B;AACA,MAAA,KAAI,CAAC,mBAAL,GAA2B,EAA3B,CAToC,CAWpC;;AAEA,MAAA,KAAI,CAAC,UAAL,CAAgB,KAAhB;;AAEA,UAAI,aAAa,SAAS,KAAI,CAAC,mBAAL,CAAyB,KAAzB,CAA1B;;AACA,UAAK,aAAa,KAAK,CAAnB,IAA0B,KAAI,CAAC,aAAL,GAAqB,CAAnD,EAAuD;AACrD,QAAA,KAAI,CAAC,MAAL,CAAY,SAAZ,CAAsB,2BAAtB;;AACA,QAAA,KAAI,CAAC,UAAL,CAAgB,IAAhB;;AACA;AACD,OAJD,MAIO,IAAI,aAAa,GAAG,CAApB,EAAuB;AAC5B,QAAA,KAAI,CAAC,OAAL,CAAa,UAAb,GAA0B,2BAA1B;AACA,QAAA,OAAO,CAAC,GAAR,CAAY,eAAZ,EAA6B,aAA7B,EAF4B,CAG5B;;AACA,QAAA,KAAI,CAAC,qBAAL,CAA2B,aAA3B,EAA0C,qBAA1C,EAAiE,KAAjE,EAJ4B,CAK5B;;AACD,OANM,MAMA;AACL,QAAA,OAAO,CAAC,GAAR,CAAY,iBAAZ;;AACA,QAAA,KAAI,CAAC,kBAAL,CAAwB,KAAxB;AACD;AA7BmC;AA8BrC;;AAEK,EAAA,mBAAmB,CAAC,KAAD,EAAa;AAAA;;AAAA;AACpC,aAAO,IAAI,OAAJ,CAAY,CAAC,OAAD,EAAU,MAAV,KAAoB;AACrC,QAAA,UAAU,CAAC,MAAK;AACd,eAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACrC,gBAAI,IAAI,GAAG,KAAK,CAAC,CAAD,CAAhB;AAEA,YAAA,MAAI,CAAC,aAAL,IAAsB,IAAI,CAAC,IAA3B;;AAEA,gBAAI,IAAI,CAAC,IAAL,CAAU,WAAV,GAAwB,QAAxB,CAAiC,MAAjC,CAAJ,EAA8C;AAC5C,cAAA,MAAI,CAAC,aAAL;AAEA,kBAAI,MAAM,GAAG,IAAI,UAAJ,EAAb;AACA,cAAA,MAAM,CAAC,kBAAP,CAA0B,IAA1B;;AAEA,cAAA,MAAM,CAAC,MAAP,GAAgB,MAAK;AACnB,oBAAI,GAAG,GAAQ,MAAM,CAAC,MAAtB;AAEA,gBAAA,MAAM,GAAG,IAAT;AACA,oBAAI,aAAa,GAAG,GAAG,CAAC,KAAJ,CAAU,wBAAV,CAApB;AACA,gBAAA,GAAG,GAAG,IAAN;;AACA,oBAAI,aAAJ,EAAmB;AACjB,wBAAM,KAAK,GAAG,aAAa,CAAC,MAA5B;AACA,kBAAA,MAAI,CAAC,aAAL,IAAsB,KAAtB;AACD;;AACD,gBAAA,MAAI,CAAC,oBAAL,IAA6B,CAA7B;AACA,gBAAA,MAAI,CAAC,OAAL,CAAa,UAAb,GAA0B,wBAAwB,MAAI,CAAC,oBAA7B,GAAoD,GAApD,GAA0D,MAAI,CAAC,aAAzF,CAXmB,CAYnB;;AAEA,oBAAI,MAAI,CAAC,oBAAL,KAA8B,MAAI,CAAC,aAAvC,EAAsD;AACpD,kBAAA,MAAI,CAAC,oBAAL,GAA4B,CAA5B;AACA,kBAAA,MAAI,CAAC,aAAL,GAAqB,CAArB;AACA,kBAAA,OAAO,CAAC,MAAI,CAAC,aAAN,CAAP;AACA,kBAAA,MAAI,CAAC,OAAL,CAAa,UAAb,GAA0B,MAAI,CAAC,aAAL,GAAqB,kBAA/C;AACA,kBAAA,MAAI,CAAC,aAAL,GAAqB,CAArB;AACA,kBAAA,UAAU,CAAC,MAAK;AACd,oBAAA,MAAI,CAAC,OAAL,CAAa,UAAb,GAA0B,IAA1B;AACD,mBAFS,EAEP,GAFO,CAAV;AAGD;AACF,eAxBD;AAyBD;;AACD,gBAAK,CAAC,KAAM,KAAK,CAAC,MAAN,GAAe,CAAvB,IAA+B,MAAI,CAAC,aAAL,KAAuB,CAA1D,EAA8D;AAC5D,cAAA,OAAO,CAAC,CAAD,CAAP;AACD;AACF;AACF,SA1CS,EA0CP,GA1CO,CAAV;AA2CD,OA5CM,CAAP;AADoC;AA8CrC;;AAEK,EAAA,qBAAqB,CAAC,YAAD,EAAuB,kBAAvB,EAAmD,KAAnD,EAA+D;AAAA;;AAAA;AACxF,MAAA,MAAI,CAAC,UAAL,CAAgB,GAAhB,CAAoB,0CAA0C,MAAI,CAAC,KAAL,CAAW,OAArD,GAA+D,0CAA/D,GAA4G,YAA5G,GAA2H,0BAA3H,GAAwJ,kBAA5K,EAAgM,SAAhM,CAA0M,GAAG,IAAG;AAC9M,QAAA,MAAI,CAAC,OAAL,CAAa,UAAb,GAA0B,WAA1B,CAD8M,CAE9M;;AACA,QAAA,OAAO,CAAC,GAAR,CAAY,GAAZ,EAH8M,CAI9M;;AACA,QAAA,MAAI,CAAC,kBAAL,CAAwB,KAAxB;AACD,OAND;AADwF;AAQzF;;AAEK,EAAA,kBAAkB,CAAC,KAAD,EAAa;AAAA;;AAAA;AACnC,MAAA,MAAI,CAAC,kBAAL,GAA0B,IAA1B;AACA,MAAA,MAAI,CAAC,kBAAL,GAA0B,IAA1B;;AACA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AAErC,YAAI,QAAQ,GAAG,KAAK,CAAC,CAAD,CAAL,CAAS,IAAxB;AACA,QAAA,QAAQ,GAAG,QAAQ,CAAC,KAAT,CAAe,GAAf,CAAX;AACA,QAAA,QAAQ,CAAC,QAAQ,CAAC,MAAT,GAAkB,CAAnB,CAAR,GAAgC,QAAQ,CAAC,QAAQ,CAAC,MAAT,GAAkB,CAAnB,CAAR,CAA8B,WAA9B,EAAhC;AACA,QAAA,QAAQ,GAAG,QAAQ,CAAC,IAAT,CAAc,GAAd,CAAX;;AAEA,cAAM,UAAU,GAAuB,MAAI,CAAC,gBAAL,CAAsB,aAAtB,CAAoC,QAApC,CAAvC;;AACA,QAAA,OAAO,CAAC,GAAR,CAAY,UAAU,CAAC,aAAX,EAAZ,EAAuC,UAAvC;AAEA,YAAI,MAAM,GAAQ,IAAlB;;AACA,YAAI;AACF,UAAA,MAAM,SAAS,UAAU,CAAC,aAAX,EAAf;AACD,SAFD,CAEE,OAAO,KAAP,EAAmB;AACnB,UAAA,MAAM,GAAG,IAAT;AACD;;AAED,YAAI,MAAJ,EAAY;AACV,UAAA,OAAO,CAAC,GAAR,CAAY,qBAAZ,EAAmC,MAAnC;AACA,UAAA,MAAI,CAAC,aAAL,IAAsB,KAAK,CAAC,CAAD,CAAL,CAAS,IAA/B;AACA,UAAA,MAAI,CAAC,oBAAL,IAA6B,CAA7B;AAEA,cAAI,OAAO,GAAG,IAAI,CAAC,SAAL,CAAe,MAAI,CAAC,gBAApB,CAAd;;AACA,UAAA,MAAI,CAAC,YAAL,CAAkB,QAAlB,EAA4B,OAA5B,EAAqC,qBAArC;;AACA,UAAA,MAAI,CAAC,QAAL;AACD,SARD,MAQO;AACL,UAAA,MAAI,CAAC,kBAAL,CAAwB,UAAxB,EAAoC,KAAK,CAAC,CAAD,CAAzC,EAA8C,QAA9C;AACD;AACF;AA/BkC;AAgCpC;;AAEK,EAAA,kBAAkB,CAAC,UAAD,EAAiC,IAAjC,EAA4C,QAA5C,EAA4D;AAAA;;AAAA;AAClF,UAAI,aAAa,GAAW,CAA5B;AACA,UAAI,OAAO,GAAG,IAAI,CAAC,SAAL,CAAe,MAAI,CAAC,gBAApB,CAAd;;AAEA,UAAI;AACF,YAAI,GAAG,SAAS,UAAU,CAAC,MAAX,CAAkB,IAAlB,EAAwB;AACtC,UAAA,UAAU,EAAI,GAAD,IAAa;AAExB,YAAA,MAAI,CAAC,sBAAL,IAA+B,GAAG,CAAC,WAAJ,GAAkB,aAAjD;AACA,YAAA,aAAa,GAAG,GAAG,CAAC,WAApB;;AAEA,gBAAI,GAAG,CAAC,WAAJ,KAAoB,IAAI,CAAC,IAA7B,EAAmC;AAEjC,cAAA,MAAI,CAAC,aAAL,IAAsB,CAAtB;;AAEA,cAAA,MAAI,CAAC,aAAL,CAAmB,QAAnB,EAA6B,OAA7B;AACD;;AACD,YAAA,MAAI,CAAC,QAAL;AACD,WAbqC;AAalC,UAAA,cAAc,EAAE;AAbkB,SAAxB,CAAhB;AAeD,OAhBD,CAgBE,OAAO,KAAP,EAAmB;AACnB,QAAA,MAAI,CAAC,YAAL,CAAkB,QAAlB,EAA4B,OAA5B,EAAqC,oBAArC;;AACA,QAAA,MAAI,CAAC,aAAL,IAAsB,IAAI,CAAC,IAA3B;AACA,QAAA,MAAI,CAAC,oBAAL,IAA6B,CAA7B;;AACA,QAAA,MAAI,CAAC,QAAL;AACD;AAzBiF;AA2BnF;;AAEK,EAAA,QAAQ,GAAA;AAAA;;AAAA;AACZ,UAAI,MAAI,CAAC,aAAL,KAAwB,MAAI,CAAC,kBAAL,GAA0B,MAAI,CAAC,oBAA3D,EAAkF;AAEhF;AACA,QAAA,MAAI,CAAC,OAAL,CAAa,gBAAb,CAA8B,IAA9B,CAAmC,EAAnC;;AACA,QAAA,MAAI,CAAC,oBAAL,GAA4B,MAAI,CAAC,aAAjC;AACA,QAAA,MAAI,CAAC,oBAAL,GAA4B,MAAI,CAAC,sBAAjC;AAEA,QAAA,MAAI,CAAC,WAAL,GAAmB,EAAnB;AACA,QAAA,MAAI,CAAC,kBAAL,GAA0B,KAA1B;AACA,QAAA,MAAI,CAAC,aAAL,GAAqB,CAArB;AACA,QAAA,MAAI,CAAC,kBAAL,GAA0B,CAA1B;AACA,QAAA,MAAI,CAAC,aAAL,GAAqB,CAArB;AACA,QAAA,MAAI,CAAC,sBAAL,GAA8B,CAA9B,CAZgF,CAahF;AACA;;AACA,QAAA,MAAI,CAAC,mBAAL,GAA2B,EAA3B;AACD;AAjBW;AAkBb,GA7OgC,CA+OjC;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,EAAA,aAAa,CAAC,QAAD,EAAgB,OAAhB,EAA4B;AACvC,QAAI,QAAQ,GAAG,IAAI,CAAC,SAAL,CAAe,IAAI,IAAJ,EAAf,CAAf;AACA,SAAK,eAAL,CAAqB;AACnB,MAAA,SAAS,EAAE,QADQ;AAEnB,MAAA,aAAa,EAAE,UAFI;AAGnB,MAAA,SAAS,EAAE,MAHQ;AAInB,MAAA,WAAW,EAAE,KAAK,WAJC;AAKnB,MAAA,sBAAsB,EAAE,OAAO,CAAC,SAAR,CAAkB,CAAlB,EAAqB,OAAO,CAAC,MAAR,GAAiB,CAAtC,CALL;AAMnB,MAAA,yBAAyB,EAAE,QAAQ,CAAC,SAAT,CAAmB,CAAnB,EAAsB,QAAQ,CAAC,MAAT,GAAkB,CAAxC;AANR,KAArB;AAQD;;AAED,EAAA,YAAY,CAAC,QAAD,EAAgB,OAAhB,EAA8B,GAA9B,EAAyC;AACnD,QAAI,QAAQ,GAAG,IAAI,CAAC,SAAL,CAAe,IAAI,IAAJ,EAAf,CAAf;AACA,SAAK,eAAL,CAAqB;AACnB,MAAA,SAAS,EAAE,QADQ;AAEnB,MAAA,aAAa,EAAE,QAFI;AAGnB,MAAA,SAAS,EAAE,GAHQ;AAInB,MAAA,WAAW,EAAE,KAAK,WAJC;AAKnB,MAAA,sBAAsB,EAAE,OAAO,CAAC,SAAR,CAAkB,CAAlB,EAAqB,OAAO,CAAC,MAAR,GAAiB,CAAtC,CALL;AAMnB,MAAA,yBAAyB,EAAE,QAAQ,CAAC,SAAT,CAAmB,CAAnB,EAAsB,QAAQ,CAAC,MAAT,GAAkB,CAAxC;AANR,KAArB;AAQD;;AAEK,EAAA,eAAe,CAAC,eAAD,EAAqB;AAAA;;AAAA;AACxC,MAAA,OAAO,CAAC,GAAR,CAAY,iBAAZ,EAA+B,eAA/B;AACA,UAAI,QAAQ,GAAG,IAAI,QAAJ,EAAf;AAEA,MAAA,QAAQ,CAAC,MAAT,CAAgB,SAAhB,EAA2B,MAAI,CAAC,KAAL,CAAW,OAAtC;AACA,MAAA,QAAQ,CAAC,MAAT,CAAgB,YAAhB,EAA8B,MAAI,CAAC,SAAnC;AACA,MAAA,QAAQ,CAAC,MAAT,CAAgB,aAAhB,EAA+B,IAAI,CAAC,SAAL,CAAe,CAAC,eAAD,CAAf,CAA/B;AACA,MAAA,QAAQ,CAAC,MAAT,CAAgB,qBAAhB,EAAuC,aAAvC;;AAEA,MAAA,MAAI,CAAC,UAAL,CAAgB,IAAhB,CAAqB,oCAArB,EAA2D,QAA3D,EAAqE,SAArE,CAA+E,GAAG,IAAG;AAAG,QAAA,OAAO,CAAC,GAAR,CAAY,GAAZ;AAAkB,OAA1G,EAA4G,GAAG,IAAG;AAAG,QAAA,OAAO,CAAC,GAAR,CAAY,OAAZ,EAAqB,eAArB;AAAuC,OAA5J;AATwC;AAUzC;;AAEK,EAAA,4BAA4B,CAAC,uBAAD,EAAgC;AAAA;;AAAA;AAChE,UAAI,QAAQ,GAAG,IAAI,QAAJ,EAAf;AAEA,MAAA,QAAQ,CAAC,MAAT,CAAgB,SAAhB,EAA2B,MAAI,CAAC,KAAL,CAAW,OAAtC;AACA,MAAA,QAAQ,CAAC,MAAT,CAAgB,YAAhB,EAA8B,MAAI,CAAC,SAAnC;AACA,MAAA,QAAQ,CAAC,MAAT,CAAgB,aAAhB,EAA+B,MAAI,CAAC,WAApC;AACA,MAAA,QAAQ,CAAC,MAAT,CAAgB,qBAAhB,EAAuC,aAAvC;AACA,MAAA,QAAQ,CAAC,MAAT,CAAgB,aAAhB,EAA+B,MAAI,CAAC,kBAAL,CAAwB,QAAxB,EAA/B;AACA,MAAA,QAAQ,CAAC,MAAT,CAAgB,eAAhB,EAAiC,MAAI,CAAC,aAAL,CAAmB,QAAnB,EAAjC;AACA,MAAA,QAAQ,CAAC,MAAT,CAAgB,cAAhB,EAAgC,MAAI,CAAC,oBAAL,CAA0B,QAA1B,EAAhC;AACA,MAAA,QAAQ,CAAC,MAAT,CAAgB,yBAAhB,EAA2C,uBAA3C;;AAEA,MAAA,MAAI,CAAC,UAAL,CAAgB,IAAhB,CAAqB,uCAArB,EAA8D,QAA9D,EAAwE,SAAxE,CAAkF,GAAG,IAAG;AAAG,QAAA,OAAO,CAAC,GAAR,CAAY,GAAZ;AAAkB,OAA7G;AAZgE;AAajE;;AAED,EAAA,uBAAuB,GAAA;AACrB,QAAI,aAAa,GAAG,KAAK,aAAL,GAAqB,KAAK,sBAA9C;AACD;;AA5TgC;;;mBAAtB,sB,EAAsB,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C,EAAA,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,kBAAA,C,EAAA,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,YAAA,C,EAAA,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,WAAA,C,EAAA,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,cAAA,C;AAAA,C;;;SAAtB,sB;AAAsB,EAAA,OAAA,EAAtB,sBAAsB,CAAA,I;AAAA,EAAA,UAAA,EAFrB","sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { DataLakeFileClient, DataLakeFileSystemClient, DataLakeServiceClient, RestError } from '@azure/storage-file-datalake';\r\nimport { log } from 'console';\r\nimport { NgxUiLoaderService } from 'ngx-ui-loader';\r\nimport { forkJoin } from 'rxjs';\r\nimport { AuthService } from 'src/app/auth/auth.service';\r\nimport { CommonnService } from '../common/commonn.service';\r\nimport { ModalService } from './modal.service';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UploadDirectoryService {\r\n\r\n  totalFilesToUpload: number = 0;\r\n  filesUploaded: number = 0;\r\n\r\n  totalFileSize: number = 0;\r\n  totalUploadedFilesSize: number = 0;\r\n\r\n  totalPdfFiles: number = 0;\r\n  totalPdfPages: number = 0;\r\n  totalPdfFilesChecked: number = 0;\r\n\r\n  currentPath: string = \"\";\r\n  operationReqTime: Date = null;\r\n  requestId: string = null;\r\n\r\n  showUploadProgress: boolean = false;\r\n\r\n  fileSystemClient: DataLakeFileSystemClient;\r\n\r\n  errorUploadFileCount: number = 0;\r\n\r\n  successTotalFileSize: number = 0;\r\n  successFilesUploaded: number = 0;\r\n\r\n  isUploadProcessing: boolean = false;\r\n\r\n  parallelApiCall: any[] = [];\r\n  fillStatusTableData: any[] = [];\r\n\r\n\r\n  constructor(private httpClient: HttpClient, private ngxService: NgxUiLoaderService, private _modal: ModalService, private _auth: AuthService, private _common: CommonnService) {\r\n  }\r\n\r\n  // docuexpertuat\r\n  getFileSystemClient(currentPath: string = \"\", fileSys: string = \"docuexpertuat2/Input_Folder/\"): DataLakeFileSystemClient {\r\n    const account = \"docuexpertstorage\";\r\n    // const sas = \"?sv=2020-08-04&ss=bfqt&srt=sco&sp=rwdlacupx&se=2030-10-07T15:47:12Z&st=2021-10-07T07:47:12Z&spr=https,http&sig=PUGBfjV2gCQL9sNtSugw67C37SSup0ZKOOsWWTX%2Bt6M%3D\";\r\n    const sas = \"?sp=racwdlmeop&st=2022-08-12T06:43:38Z&se=2023-02-01T14:43:38Z&sv=2021-06-08&sr=c&sig=%2Byerj9lHmH5P5tJBbWVQrbjCs9ICKIc74uuOuetggrs%3D\";\r\n\r\n    const datalakeServiceClient = new DataLakeServiceClient(\r\n      `https://${account}.dfs.core.windows.net${sas}`\r\n    );\r\n\r\n    let fileSystemName = fileSys + this._auth.org_name + '/' + this._auth.user_name;\r\n\r\n    if (currentPath) {\r\n      this.currentPath = this._auth.org_name + '/' + this._auth.user_name + '/' + currentPath;\r\n      fileSystemName = fileSys + this._auth.org_name + '/' + this._auth.user_name + '/' + currentPath;\r\n    } else {\r\n      this.currentPath = this._auth.org_name + '/' + this._auth.user_name;\r\n    }\r\n\r\n    try {\r\n      this.fileSystemClient = datalakeServiceClient.getFileSystemClient(fileSystemName);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    this.operationReqTime = new Date();\r\n    this.requestId = this._common.getRandomString();\r\n\r\n    console.log(fileSystemName);\r\n    \r\n    return this.fileSystemClient;\r\n  }\r\n\r\n  async uploadFiles(selectedFiles: any[]) {\r\n    console.log(\"process\", selectedFiles, selectedFiles.length);\r\n\r\n    let files = selectedFiles;\r\n\r\n    this.totalFilesToUpload += files.length;\r\n    let totalFilesToUploadLen = files.length;\r\n\r\n    this.errorUploadFileCount = 0;\r\n    this.fillStatusTableData = [];\r\n\r\n    // this.uploadFilesToAzure(files);\r\n\r\n    this.ngxService.start();\r\n\r\n    let totalPdfPages = await this.checkPdfPageNumbers(files);\r\n    if ((totalPdfPages === 0) && (this.totalPdfFiles > 0)) {\r\n      this._modal.showError(\"Error Reading Pdf File!!!\");\r\n      this.ngxService.stop();\r\n      return;\r\n    } else if (totalPdfPages > 0) {\r\n      this._common.loaderText = \"Validating Upload Request\";\r\n      console.log('totalPdfPages', totalPdfPages);\r\n      // this.ngxService.stop();\r\n      this.validateUploadRequest(totalPdfPages, totalFilesToUploadLen, files);\r\n      // this.uploadFilesToAzure(files);\r\n    } else {\r\n      console.log(\"csv detected!!!\");\r\n      this.uploadFilesToAzure(files);\r\n    }\r\n  }\r\n\r\n  async checkPdfPageNumbers(files: any[]): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        for (let i = 0; i < files.length; i++) {\r\n          let file = files[i];\r\n\r\n          this.totalFileSize += file.size;\r\n\r\n          if (file.name.toLowerCase().includes('.pdf')) {\r\n            this.totalPdfFiles++;\r\n\r\n            let reader = new FileReader();\r\n            reader.readAsBinaryString(file);\r\n\r\n            reader.onload = () => {\r\n              let raw: any = reader.result;\r\n\r\n              reader = null;\r\n              let matchedString = raw.match(/\\/Type[\\s]*\\/Page[^s]/g);\r\n              raw = null;\r\n              if (matchedString) {\r\n                const count = matchedString.length;\r\n                this.totalPdfPages += count;\r\n              }\r\n              this.totalPdfFilesChecked += 1;\r\n              this._common.loaderText = 'Checking PDF Pages ' + this.totalPdfFilesChecked + '/' + this.totalPdfFiles;\r\n              // console.log(this.totalPdfFiles,this.totalPdfFilesChecked);\r\n\r\n              if (this.totalPdfFilesChecked === this.totalPdfFiles) {\r\n                this.totalPdfFilesChecked = 0;\r\n                this.totalPdfFiles = 0;\r\n                resolve(this.totalPdfPages);\r\n                this._common.loaderText = this.totalPdfPages + \" PDF Pages Found\"\r\n                this.totalPdfPages = 0;\r\n                setTimeout(() => {\r\n                  this._common.loaderText = null;\r\n                }, 100);\r\n              }\r\n            }\r\n          }\r\n          if ((i === (files.length - 1)) && (this.totalPdfFiles === 0)) {\r\n            resolve(0);\r\n          }\r\n        }\r\n      }, 500);\r\n    });\r\n  }\r\n\r\n  async validateUploadRequest(pdfPageCount: number, totalFilesToUpload: number, files: any[]) {\r\n    this.httpClient.get('/web_feature/validate_usage/?user_id=' + this._auth.user_id + '&feature=File Upload&request_page_count=' + pdfPageCount + '&request_document_count=' + totalFilesToUpload).subscribe(res => {\r\n      this._common.loaderText = \"Completed\";\r\n      // this.fillRequestTableBeforeUpload(\"True\");\r\n      console.log(res);\r\n      // this.ngxService.stop();\r\n      this.uploadFilesToAzure(files);\r\n    });\r\n  }\r\n\r\n  async uploadFilesToAzure(files: any[]) {\r\n    this.isUploadProcessing = true;\r\n    this.showUploadProgress = true;\r\n    for (let i = 0; i < files.length; i++) {\r\n\r\n      let fileName = files[i].name;\r\n      fileName = fileName.split(\".\");\r\n      fileName[fileName.length - 1] = fileName[fileName.length - 1].toLowerCase();\r\n      fileName = fileName.join(\".\");\r\n\r\n      const fileClient: DataLakeFileClient = this.fileSystemClient.getFileClient(fileName);\r\n      console.log(fileClient.getProperties(),fileClient);\r\n      \r\n      let exists: any = null;\r\n      try {\r\n        exists = await fileClient.getProperties();\r\n      } catch (error: any) {\r\n        exists = null;\r\n      }\r\n\r\n      if (exists) {\r\n        console.log(\"File Already Exists\", exists);\r\n        this.totalFileSize -= files[i].size;\r\n        this.errorUploadFileCount += 1;\r\n\r\n        let reqTime = JSON.stringify(this.operationReqTime);\r\n        this.uploadFailed(fileName, reqTime, 'File Already Exists');\r\n        this.resetAll();\r\n      } else {\r\n        this.processUploadAsync(fileClient, files[i], fileName);\r\n      }\r\n    }\r\n  }\r\n\r\n  async processUploadAsync(fileClient: DataLakeFileClient, file: any, fileName: string) {\r\n    let uploadedBytes: number = 0;\r\n    let reqTime = JSON.stringify(this.operationReqTime);\r\n\r\n    try {\r\n      let res = await fileClient.upload(file, {\r\n        onProgress: ((res: any) => {\r\n\r\n          this.totalUploadedFilesSize += res.loadedBytes - uploadedBytes;\r\n          uploadedBytes = res.loadedBytes;\r\n\r\n          if (res.loadedBytes === file.size) {\r\n\r\n            this.filesUploaded += 1;\r\n\r\n            this.uploadSuccess(fileName, reqTime);\r\n          }\r\n          this.resetAll();\r\n        }), maxConcurrency: 5\r\n      });\r\n    } catch (error: any) {\r\n      this.uploadFailed(fileName, reqTime, 'File Upload Failed');\r\n      this.totalFileSize -= file.size;\r\n      this.errorUploadFileCount += 1;\r\n      this.resetAll();\r\n    }\r\n\r\n  }\r\n\r\n  async resetAll() {\r\n    if (this.filesUploaded === (this.totalFilesToUpload - this.errorUploadFileCount)) {\r\n\r\n      // this.fillRequestTableBeforeUpload(\"False\");\r\n      this._common.$updateDirectory.next('');\r\n      this.successFilesUploaded = this.filesUploaded;\r\n      this.successTotalFileSize = this.totalUploadedFilesSize;\r\n\r\n      this.currentPath = \"\";\r\n      this.isUploadProcessing = false;\r\n      this.filesUploaded = 0;\r\n      this.totalFilesToUpload = 0;\r\n      this.totalFileSize = 0;\r\n      this.totalUploadedFilesSize = 0;\r\n      // let statusTableData = this.fillStatusTableData.slice();\r\n      // this.fillStatusTable(statusTableData);\r\n      this.fillStatusTableData = [];\r\n    }\r\n  }\r\n\r\n  // async addStatusTableData(fileName: string, status: string, errmsg: string) {\r\n  //   let reqTime = JSON.stringify(this.operationReqTime);\r\n\r\n  //   if (this.fillStatusTableData.length === 1000) {\r\n  //     let statusTableData = this.fillStatusTableData.slice();\r\n\r\n  //     if (this.filesUploaded !== (this.totalFilesToUpload - this.errorUploadFileCount)) {\r\n  //       this.fillStatusTable(statusTableData);\r\n  //       this.fillStatusTableData = [];\r\n  //     }\r\n\r\n  //   }\r\n\r\n  //   let compTime = JSON.stringify(new Date());\r\n  //   this.fillStatusTableData.push({\r\n  //     file_name: fileName,\r\n  //     upload_status: status,\r\n  //     error_msg: errmsg,\r\n  //     folder_path: this.currentPath,\r\n  //     operation_request_time: reqTime.substring(1, reqTime.length - 1),\r\n  //     operation_completion_time: compTime.substring(1, compTime.length - 1)\r\n  //   });\r\n  // }\r\n\r\n  uploadSuccess(fileName: any, reqTime: any) {\r\n    let compTime = JSON.stringify(new Date());\r\n    this.fillStatusTable({\r\n      file_name: fileName,\r\n      upload_status: \"COMPLETE\",\r\n      error_msg: \"null\",\r\n      folder_path: this.currentPath,\r\n      operation_request_time: reqTime.substring(1, reqTime.length - 1),\r\n      operation_completion_time: compTime.substring(1, compTime.length - 1)\r\n    });\r\n  }\r\n\r\n  uploadFailed(fileName: any, reqTime: any, msg: string) {\r\n    let compTime = JSON.stringify(new Date());\r\n    this.fillStatusTable({\r\n      file_name: fileName,\r\n      upload_status: \"FAILED\",\r\n      error_msg: msg,\r\n      folder_path: this.currentPath,\r\n      operation_request_time: reqTime.substring(1, reqTime.length - 1),\r\n      operation_completion_time: compTime.substring(1, compTime.length - 1)\r\n    });\r\n  }\r\n\r\n  async fillStatusTable(statusTableData: any) {\r\n    console.log(\"statusTableData\", statusTableData);\r\n    let formdata = new FormData();\r\n\r\n    formdata.append('user_id', this._auth.user_id);\r\n    formdata.append('request_id', this.requestId);\r\n    formdata.append('upload_info', JSON.stringify([statusTableData]));\r\n    formdata.append('operation_requested', \"File Upload\");\r\n\r\n    this.httpClient.post(\"/document_upload/fill_upload_data/\", formdata).subscribe(res => { console.log(res) }, err => { console.log(\"error\", statusTableData) });\r\n  }\r\n\r\n  async fillRequestTableBeforeUpload(update_before_execution: string) {\r\n    let formdata = new FormData();\r\n\r\n    formdata.append('user_id', this._auth.user_id);\r\n    formdata.append('request_id', this.requestId);\r\n    formdata.append('folder_path', this.currentPath);\r\n    formdata.append('operation_requested', \"File Upload\");\r\n    formdata.append('total_count', this.totalFilesToUpload.toString());\r\n    formdata.append('success_count', this.filesUploaded.toString());\r\n    formdata.append('failed_count', this.errorUploadFileCount.toString());\r\n    formdata.append('update_before_execution', update_before_execution);\r\n\r\n    this.httpClient.post(\"/document_upload/fill_upload_request/\", formdata).subscribe(res => { console.log(res) });\r\n  }\r\n\r\n  getTimetoCompleteUpload() {\r\n    let bytesToupload = this.totalFileSize - this.totalUploadedFilesSize;\r\n  }\r\n\r\n}\r\n\r\n// To do multiple upload at a same time create global variable files:any[] = []; like this and push file to this array if upload in progress or assaign file array to this.files.\r\n\r\n// .subscribe(res => {\r\n//   console.log(res);\r\n// });\r\n\r\n//if length > 1000 then send array and then flush array\r\n\r\n\r\n\r\n// count: number = 5;\r\n//   updateDirectory() {\r\n//     if (Math.floor(this.totalFilesToUpload / this.count) === this.filesUploaded) {\r\n//       this._common.$updateDirectory.next('');\r\n//       if (this.count > 0) {\r\n//         this.count--;\r\n//       }\r\n//     }\r\n//   }\r\n\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}