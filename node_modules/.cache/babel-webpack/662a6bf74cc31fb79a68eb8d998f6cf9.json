{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, Input, ViewChild, EventEmitter, ContentChild, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { BehaviorSubject, timer } from 'rxjs';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\n\nfunction NodeIconWrapperComponent_ng_container_1_ng_container_1_i_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 4);\n  }\n}\n\nfunction NodeIconWrapperComponent_ng_container_1_ng_container_1_i_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 5);\n  }\n}\n\nfunction NodeIconWrapperComponent_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NodeIconWrapperComponent_ng_container_1_ng_container_1_i_1_Template, 1, 0, \"i\", 2);\n    i0.ɵɵtemplate(2, NodeIconWrapperComponent_ng_container_1_ng_container_1_i_2_Template, 1, 0, \"i\", 3);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.state.expanded);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.state.expanded);\n  }\n}\n\nfunction NodeIconWrapperComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NodeIconWrapperComponent_ng_container_1_ng_container_1_Template, 3, 2, \"ng-container\", 1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", (ctx_r0.state.nodeItem == null ? null : ctx_r0.state.nodeItem.children == null ? null : ctx_r0.state.nodeItem.children.length) > 0);\n  }\n}\n\nfunction NodeIconWrapperComponent_ng_container_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c0 = function (a0, a1) {\n  return {\n    expanded: a0,\n    context: a1\n  };\n};\n\nfunction NodeIconWrapperComponent_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, NodeIconWrapperComponent_ng_container_2_ng_container_1_Template, 1, 0, \"ng-container\", 6);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.nodeCollapsibleTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(2, _c0, ctx_r1.state.expanded, ctx_r1._this));\n  }\n}\n\nfunction NodeNameComponent_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"span\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"active\", ctx_r0.active);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.state.nodeItem.name);\n  }\n}\n\nfunction NodeNameComponent_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nconst _c1 = function (a0, a1, a2) {\n  return {\n    $implicit: a0,\n    node: a1,\n    context: a2\n  };\n};\n\nconst _c2 = [\"nodeCheckbox\"];\n\nfunction NodeComponent_input_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"input\", 6, 7);\n    i0.ɵɵlistener(\"click\", function NodeComponent_input_3_Template_input_click_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.checkBoxClick();\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", ctx_r0.state.disabled)(\"checked\", ctx_r0.state.selected);\n  }\n}\n\nfunction NodeComponent_div_5_node_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"node\", 11);\n  }\n\n  if (rf & 2) {\n    const child_r6 = ctx.$implicit;\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"state\", child_r6)(\"selectedState\", child_r6.selectedState)(\"nodeCollapsibleTemplate\", ctx_r5.nodeCollapsibleTemplate)(\"nodeNameTemplate\", ctx_r5.nodeNameTemplate);\n  }\n}\n\nfunction NodeComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵelementStart(1, \"div\", 9);\n    i0.ɵɵtemplate(2, NodeComponent_div_5_node_2_Template, 1, 4, \"node\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"collapsed\", !ctx_r1.state.expanded && ctx_r1.state.nodeItem.children.length > 0 && ctx_r1.state.filteredChildren.length > 0);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.state.filteredChildren);\n  }\n}\n\nconst _c3 = [\"nodeNameTemplate\"];\nconst _c4 = [\"nodeCollapsibleTemplate\"];\n\nfunction TreeNgxComponent_node_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"node\", 2);\n  }\n\n  if (rf & 2) {\n    const state_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"state\", state_r1)(\"selectedState\", state_r1.selectedState)(\"nodeCollapsibleTemplate\", ctx_r0.nodeCollapsibleTemplate)(\"nodeNameTemplate\", ctx_r0.nodeNameTemplate);\n  }\n}\n\nvar NodeSelectedState;\n\n(function (NodeSelectedState) {\n  NodeSelectedState[NodeSelectedState[\"checked\"] = 0] = \"checked\";\n  NodeSelectedState[NodeSelectedState[\"unChecked\"] = 1] = \"unChecked\";\n  NodeSelectedState[NodeSelectedState[\"indeterminate\"] = 2] = \"indeterminate\";\n})(NodeSelectedState || (NodeSelectedState = {}));\n\nvar TreeMode;\n\n(function (TreeMode) {\n  TreeMode[TreeMode[\"NoSelect\"] = 0] = \"NoSelect\";\n  TreeMode[TreeMode[\"SingleSelect\"] = 1] = \"SingleSelect\";\n  TreeMode[TreeMode[\"MultiSelect\"] = 2] = \"MultiSelect\";\n  TreeMode[TreeMode[\"HideSelected\"] = 3] = \"HideSelected\";\n})(TreeMode || (TreeMode = {}));\n\nclass TreeUtil {\n  static initState(parent, nodeItem, options) {\n    const nodeState = {\n      parent: parent,\n      children: [],\n      filteredChildren: [],\n      hasFilteredChildren: false,\n      nodeItem: nodeItem,\n      expanded: nodeItem.expanded === false ? false : true,\n      disabled: nodeItem.disabled === true ? true : false,\n      markSelected: this.getMarkSelected(nodeItem, options),\n      selectedState: NodeSelectedState.unChecked,\n      selected: false,\n      showCheckBox: options.checkboxes\n    };\n    return nodeState;\n  }\n\n  static getMarkSelected(nodeItem, options) {\n    if ((!nodeItem.children || nodeItem.children.length === 0 || options.mode === TreeMode.SingleSelect) && !options.checkboxes) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n}\n\nclass TreeService {\n  constructor() {\n    this.callbacks = {};\n    this.treeState = [];\n    this.selectedItems = [];\n    this.selectedStates = [];\n    this.filterValue = '';\n    this.selectedItemsSubject = new BehaviorSubject(this.selectedItems);\n    this.filterChangeSubject = new BehaviorSubject(this.filterValue);\n    this.filterChangeSubject.pipe(debounceTime(300), distinctUntilChanged()).subscribe(it => {\n      this.filterTraverse(this.treeState, this.filterValue);\n    });\n  }\n\n  toggleSelected(state) {\n    this.toggleSelectedState(state, false);\n\n    if (this.callbacks.toggle) {\n      this.callbacks.toggle(state.nodeItem);\n    }\n  }\n\n  toggleSelectedState(state, ignoreDisabled) {\n    if (this.isDisabled(state, ignoreDisabled)) {\n      return;\n    }\n\n    if (state.selectedState === NodeSelectedState.unChecked) {\n      if (this.options.mode === TreeMode.SingleSelect) {\n        this.clear();\n        this.setChecked(state, false, true, ignoreDisabled);\n      } else {\n        this.setChecked(state, true, false, ignoreDisabled);\n      }\n    } else if (state.selectedState === NodeSelectedState.checked) {\n      if (this.options.mode === TreeMode.SingleSelect) {\n        this.setUnchecked(state, false, true, ignoreDisabled);\n      } else {\n        this.setUnchecked(state, true, false, ignoreDisabled);\n      }\n    } else {\n      if (this.anyActiveSelected(state) && !state.selected) {\n        this.setUnchecked(state, true, false, ignoreDisabled);\n      } else {\n        this.setChecked(state, true, false, ignoreDisabled);\n      }\n    }\n\n    if (state.parent && this.options.mode !== TreeMode.SingleSelect) {\n      this.childStateChanged(state.parent);\n    }\n  }\n\n  setInitialState() {\n    this.setInitialSelectedState(this.treeState);\n  }\n\n  childStateChanged(state) {\n    if (this.anyChildSelected(state)) {\n      if (this.allChildrenSelected(state)) {\n        this.setChecked(state, false);\n      } else {\n        this.setIndeterminate(state);\n      }\n    } else {\n      this.setUnchecked(state, false);\n    }\n\n    if (state.parent) {\n      this.childStateChanged(state.parent);\n    }\n  }\n\n  checkBoxClick(state) {\n    if (this.options.mode !== TreeMode.HideSelected) {\n      this.toggleSelected(state);\n    }\n  }\n\n  nameClick(state) {\n    if (this.callbacks.nameClick) {\n      this.callbacks.nameClick(state.nodeItem);\n    }\n\n    if (this.canToggleChildrenOnName()) {\n      this.toggleSelected(state);\n    }\n  }\n\n  toggleExpanded(value) {\n    this.toggleExpandedTraverse(this.treeState, value);\n  }\n\n  clear() {\n    for (let state of this.selectedStates) {\n      state.selected = false;\n      state.selectedState = NodeSelectedState.unChecked;\n    }\n\n    this.selectedItems.length = 0;\n    this.selectedStates.length = 0;\n  }\n\n  addNodeById(nodeState, id) {\n    let result = this.getNodeState(this.treeState, id, this.findById);\n\n    if (result) {\n      if (!result.children) {\n        result.children = [];\n      }\n\n      this.addNewNode(nodeState, result);\n\n      if (result.nodeItem.item && this.options.mode === TreeMode.MultiSelect) {\n        this.removeSelected(result.nodeItem.item);\n      }\n    }\n  }\n\n  selectById(id) {\n    let result = this.getNodeState(this.treeState, id, this.findById);\n\n    if (result) {\n      this.toggleSelected(result);\n    }\n  }\n\n  editNameById(id, name) {\n    const nodeState = this.getNodeState(this.treeState, id, this.findById);\n\n    if (nodeState && nodeState.nodeItem) {\n      nodeState.nodeItem.name = name;\n    }\n  }\n\n  editItemById(id, item) {\n    const nodeState = this.getNodeState(this.treeState, id, this.findById);\n\n    if (nodeState && nodeState.nodeItem) {\n      if (this.selectedItems.includes(nodeState.nodeItem.item)) {\n        this.removeSelected(nodeState.nodeItem.item);\n        this.selectedItems.push(item);\n        this.selectedItemsSubject.next(this.selectedItems);\n      }\n\n      nodeState.nodeItem.item = item;\n    }\n  }\n\n  deleteById(id) {\n    let result = this.getNodeState(this.treeState, id, this.findById);\n\n    if (result) {\n      this.deleteByState(result);\n    }\n  }\n\n  deleteByState(state) {\n    this.delete(state);\n    this.childStateChanged(state);\n    this.filterTraverse(this.treeState, this.filterValue);\n  }\n\n  expandById(id) {\n    const result = this.getNodeState(this.treeState, id, this.findById);\n\n    if (result) {\n      this.toggleExpandedTraverseAsc(result, true);\n    }\n  }\n\n  collapseById(id) {\n    const result = this.getNodeState(this.treeState, id, this.findById);\n\n    if (result) {\n      result.expanded = false;\n    }\n  }\n\n  reEvaluateSelectedState(state) {\n    if (this.options.mode !== TreeMode.SingleSelect) {\n      if (!this.hasNoChildren(state)) {\n        this.childStateChanged(state);\n\n        for (const child of state.children) {\n          this.reEvaluateSelectedState(child);\n        }\n      }\n    }\n  }\n\n  filterChanged(value) {\n    this.filterValue = value;\n    this.filterChangeSubject.next(value);\n  }\n\n  canToggleChildrenOnName() {\n    if (this.options.checkboxes === false) {\n      if (this.options.mode === TreeMode.SingleSelect || this.options.mode === TreeMode.MultiSelect) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  getParentById(id) {\n    const result = this.getNodeState(this.treeState, id, this.findById);\n\n    if (result) {\n      return result.parent.nodeItem;\n    }\n\n    return null;\n  }\n\n  forceFilterTraverse() {\n    this.filterTraverse(this.treeState, this.filterValue);\n  }\n\n  setInitialSelectedState(nodeStates) {\n    for (const state of nodeStates) {\n      if (this.options.mode === TreeMode.MultiSelect) {\n        if (state.nodeItem.selected && (!state.children || state.children.length === 0)) {\n          this.toggleSelectedState(state, true);\n        }\n      } else {\n        if (state.nodeItem.selected) {\n          this.toggleSelectedState(state, true);\n        }\n      }\n\n      this.setInitialSelectedState(state.children);\n    }\n  }\n\n  delete(state) {\n    while (state.children.length > 0) {\n      this.delete(state.children.pop());\n    }\n\n    this.removeSelected(state.nodeItem.item);\n    this.remove(state);\n\n    if (!state.parent) {\n      this.deleteRoot(state, this.treeState, this.nodeItems);\n    }\n  }\n\n  toggleExpandedTraverse(nodeStates, value) {\n    for (let state of nodeStates) {\n      state.expanded = value;\n      this.toggleExpandedTraverse(state.children, value);\n    }\n  }\n\n  deleteRoot(state, nodeStates, nodeItems) {\n    let itemIndex = nodeItems.indexOf(state.nodeItem);\n\n    if (itemIndex !== -1) {\n      nodeItems.splice(itemIndex, 1);\n    }\n\n    let index = nodeStates.indexOf(state);\n\n    if (index !== -1) {\n      nodeStates.splice(index, 1);\n    }\n  }\n\n  isDisabled(state, ignoreDisabled) {\n    return this.options.mode === TreeMode.NoSelect || state.disabled && !ignoreDisabled;\n  }\n\n  addNewNode(nodeState, parent) {\n    nodeState.parent = parent;\n    parent.children.push(nodeState);\n    parent.nodeItem.children.push(nodeState.nodeItem);\n    parent.markSelected = TreeUtil.getMarkSelected(parent.nodeItem, this.options);\n\n    if (this.options.mode === TreeMode.MultiSelect) {\n      this.childStateChanged(parent);\n    }\n\n    this.filterTraverse(this.treeState, this.filterValue);\n  }\n\n  remove(state) {\n    if (state.parent) {\n      state.parent.hasFilteredChildren = false;\n      let itemIndex = state.parent.nodeItem.children.indexOf(state.nodeItem);\n\n      if (itemIndex !== -1) {\n        state.parent.nodeItem.children.splice(itemIndex, 1);\n      }\n\n      let index = state.parent.children.indexOf(state);\n\n      if (index !== -1) {\n        state.parent.children.splice(index, 1);\n      }\n\n      let filteredIndex = state.parent.filteredChildren.indexOf(state);\n\n      if (filteredIndex !== -1) {\n        state.parent.filteredChildren.splice(filteredIndex, 1);\n      }\n    }\n  }\n\n  anyChildSelected(state) {\n    return state.children.find(it => {\n      return it.selectedState === NodeSelectedState.checked || it.selectedState === NodeSelectedState.indeterminate;\n    }) != null ? true : false;\n  }\n\n  allChildrenSelected(state) {\n    return state.children.every(it => it.selectedState === NodeSelectedState.checked) && state.children.length === state.nodeItem.children.length;\n  }\n\n  toggleExpandedTraverseAsc(nodeState, value) {\n    nodeState.expanded = value;\n\n    if (nodeState.parent) {\n      this.toggleExpandedTraverseAsc(nodeState.parent, value);\n    }\n  }\n\n  setUnchecked(state, propogate, force, ignoreDisabled) {\n    if (state.disabled && !ignoreDisabled) {\n      return;\n    }\n\n    state.selectedState = NodeSelectedState.unChecked;\n    state.selected = false;\n\n    if (this.hasNoChildren(state) || force) {\n      this.removeSelected(state.nodeItem.item);\n\n      if (this.options.alwaysEmitSelected === true) {\n        this.selectedItemsSubject.next(this.selectedItems);\n      }\n\n      if (this.callbacks.unSelect) {\n        this.callbacks.unSelect(state.nodeItem);\n      }\n    } else if (propogate === true) {\n      for (const child of state.children) {\n        this.setUnchecked(child, propogate, force, ignoreDisabled);\n      }\n    }\n  }\n\n  setIndeterminate(state) {\n    state.selectedState = NodeSelectedState.indeterminate;\n    state.selected = false;\n  }\n\n  anyActiveSelected(state) {\n    let result = state.children.filter(it => !it.disabled && it.selected).length > 0;\n\n    for (const child of state.children) {\n      if (!this.hasNoChildren(child) && this.anyActiveSelected(child)) {\n        result = true;\n      }\n    }\n\n    return result;\n  }\n\n  hasNoChildren(state) {\n    return !state.children || state.children.length === 0;\n  }\n\n  setChecked(state, propogate, force, ignoreDisabled) {\n    if (state.disabled && !ignoreDisabled) {\n      return;\n    }\n\n    state.selectedState = NodeSelectedState.checked;\n    state.selected = true;\n\n    if (this.hasNoChildren(state) || force) {\n      this.addSelected(state);\n    } else if (propogate === true) {\n      for (const child of state.children) {\n        this.setChecked(child, propogate, force, ignoreDisabled);\n      }\n    }\n  }\n\n  addSelected(state) {\n    this.selectedItems.push(state.nodeItem.item);\n    this.selectedStates.push(state);\n\n    if (this.options.alwaysEmitSelected === true) {\n      this.selectedItemsSubject.next(this.selectedItems);\n    }\n\n    if (this.callbacks.select) {\n      this.callbacks.select(state.nodeItem);\n    }\n  }\n\n  removeSelected(item) {\n    let index = this.selectedItems.indexOf(item);\n\n    if (index !== -1) {\n      this.selectedItems.splice(index, 1);\n    }\n  }\n\n  findById(state, arg) {\n    return state.nodeItem.id === arg;\n  }\n\n  getNodeState(nodeStates, arg, compare) {\n    let result = nodeStates.find(it => compare(it, arg));\n\n    if (result) {\n      return result;\n    } else {\n      for (let state of nodeStates) {\n        result = this.getNodeState(state.children, arg, compare);\n\n        if (result) {\n          return result;\n        }\n      }\n    }\n\n    return result;\n  }\n\n  connect() {\n    return this.selectedItemsSubject.asObservable();\n  }\n\n  applyFilter(state, filter) {\n    state.filteredChildren = this.filter(state.children, filter);\n    return state.filteredChildren.length > 0;\n  }\n\n  filter(states, value) {\n    return states.filter(it => {\n      if (this.options.mode === TreeMode.HideSelected && !it.selected) {\n        return false;\n      }\n\n      if (it.hasFilteredChildren || value === '' || it.nodeItem.name.toLowerCase().indexOf(value) !== -1) {\n        return true;\n      }\n    });\n  }\n\n  filterTraverse(states, filter) {\n    let results = [];\n\n    for (let state of states) {\n      if (state.children.length > 0) {\n        state.hasFilteredChildren = false;\n        state.hasFilteredChildren = this.filterTraverse(state.children, filter);\n        let res = this.applyFilter(state, filter);\n\n        if (res) {\n          state.hasFilteredChildren = true;\n        }\n\n        results.push(state.hasFilteredChildren);\n      }\n    }\n\n    return results.some(it => it === true);\n  }\n\n}\n\nTreeService.ɵfac = function TreeService_Factory(t) {\n  return new (t || TreeService)();\n};\n\nTreeService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TreeService,\n  factory: TreeService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeService, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n\nclass NodeIconWrapperComponent {\n  constructor() {\n    this._this = this;\n  }\n\n  toggleExpand() {\n    this.state.expanded = !this.state.expanded;\n  }\n\n}\n\nNodeIconWrapperComponent.ɵfac = function NodeIconWrapperComponent_Factory(t) {\n  return new (t || NodeIconWrapperComponent)();\n};\n\nNodeIconWrapperComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NodeIconWrapperComponent,\n  selectors: [[\"node-icon-wrapper\"]],\n  inputs: {\n    state: \"state\",\n    nodeCollapsibleTemplate: \"nodeCollapsibleTemplate\"\n  },\n  decls: 3,\n  vars: 8,\n  consts: [[1, \"node-icon-wrapper\", 3, \"click\"], [4, \"ngIf\"], [\"class\", \"arrow-right\", 4, \"ngIf\"], [\"class\", \"arrow-down\", 4, \"ngIf\"], [1, \"arrow-right\"], [1, \"arrow-down\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n  template: function NodeIconWrapperComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵlistener(\"click\", function NodeIconWrapperComponent_Template_div_click_0_listener() {\n        return ctx.state.expanded = !ctx.state.expanded;\n      });\n      i0.ɵɵtemplate(1, NodeIconWrapperComponent_ng_container_1_Template, 2, 1, \"ng-container\", 1);\n      i0.ɵɵtemplate(2, NodeIconWrapperComponent_ng_container_2_Template, 2, 5, \"ng-container\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"disabled\", (ctx.state.nodeItem == null ? null : ctx.state.nodeItem.children == null ? null : ctx.state.nodeItem.children.length) == 0)(\"collapsable\", (ctx.state.nodeItem == null ? null : ctx.state.nodeItem.children == null ? null : ctx.state.nodeItem.children.length) > 0)(\"iconCheckbox\", ctx.state.showCheckBox);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.nodeCollapsibleTemplate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.state.nodeItem == null ? null : ctx.state.nodeItem.children == null ? null : ctx.state.nodeItem.children.length) > 0);\n    }\n  },\n  directives: [i1.NgIf, i1.NgTemplateOutlet],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NodeIconWrapperComponent, [{\n    type: Component,\n    args: [{\n      selector: 'node-icon-wrapper',\n      template: \"<div class=\\\"node-icon-wrapper\\\" [class.disabled]=\\\"state.nodeItem?.children?.length == 0\\\" [class.collapsable]=\\\"state.nodeItem?.children?.length > 0\\\"\\r\\n  [class.iconCheckbox]=\\\"state.showCheckBox\\\" (click)=\\\"state.expanded = !state.expanded;\\\">\\r\\n  <ng-container *ngIf=\\\"!nodeCollapsibleTemplate\\\">\\r\\n    <ng-container *ngIf=\\\"state.nodeItem?.children?.length > 0\\\">\\r\\n      <i *ngIf=\\\"!state.expanded\\\" class=\\\"arrow-right\\\"></i>\\r\\n      <i *ngIf=\\\"state.expanded\\\" class=\\\"arrow-down\\\"></i>\\r\\n    </ng-container>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container *ngIf=\\\"state.nodeItem?.children?.length > 0\\\">\\r\\n    <ng-container *ngTemplateOutlet=\\\"nodeCollapsibleTemplate; context: { expanded: state.expanded, context: _this }\\\">\\r\\n    </ng-container>\\r\\n  </ng-container>\\r\\n</div>\\r\\n\"\n    }]\n  }], function () {\n    return [];\n  }, {\n    state: [{\n      type: Input\n    }],\n    nodeCollapsibleTemplate: [{\n      type: Input\n    }]\n  });\n})();\n\nclass NodeNameComponent {\n  constructor(treeService) {\n    this.treeService = treeService;\n    this._this = this;\n    this.active = false;\n  }\n\n  ngOnChanges(changes) {\n    if (changes.state) {\n      this.active = this.treeService.canToggleChildrenOnName();\n    }\n  }\n\n  nameClick() {\n    this.treeService.nameClick(this.state);\n  }\n\n  delete() {\n    this.treeService.deleteByState(this.state);\n  }\n\n}\n\nNodeNameComponent.ɵfac = function NodeNameComponent_Factory(t) {\n  return new (t || NodeNameComponent)(i0.ɵɵdirectiveInject(TreeService));\n};\n\nNodeNameComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NodeNameComponent,\n  selectors: [[\"node-name\"]],\n  inputs: {\n    state: \"state\",\n    nodeNameTemplate: \"nodeNameTemplate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 3,\n  vars: 11,\n  consts: [[1, \"node-name\", 3, \"click\"], [4, \"ngIf\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n  template: function NodeNameComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵlistener(\"click\", function NodeNameComponent_Template_div_click_0_listener() {\n        return ctx.nameClick();\n      });\n      i0.ɵɵtemplate(1, NodeNameComponent_ng_container_1_Template, 3, 3, \"ng-container\", 1);\n      i0.ɵɵtemplate(2, NodeNameComponent_ng_container_2_Template, 1, 0, \"ng-container\", 2);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"markSelected\", ctx.state.markSelected && ctx.state.selected)(\"nodeDisabled\", ctx.state.disabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.nodeNameTemplate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.nodeNameTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction3(7, _c1, ctx.state.nodeItem, ctx.state.nodeItem, ctx._this));\n    }\n  },\n  directives: [i1.NgIf, i1.NgTemplateOutlet],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NodeNameComponent, [{\n    type: Component,\n    args: [{\n      selector: 'node-name',\n      template: \"<div (click)=\\\"nameClick()\\\" [class.markSelected]=\\\"state.markSelected && state.selected\\\" [class.nodeDisabled]=\\\"state.disabled\\\" class=\\\"node-name\\\">\\r\\n  <ng-container *ngIf=\\\"!nodeNameTemplate\\\">\\r\\n    <span [class.active]=\\\"active\\\">{{state.nodeItem.name}}</span>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container *ngTemplateOutlet=\\\"nodeNameTemplate; context: { $implicit: state.nodeItem, node: state.nodeItem, context: _this }\\\">\\r\\n  </ng-container>\\r\\n</div>\\r\\n\"\n    }]\n  }], function () {\n    return [{\n      type: TreeService\n    }];\n  }, {\n    state: [{\n      type: Input\n    }],\n    nodeNameTemplate: [{\n      type: Input\n    }]\n  });\n})();\n\nclass NodeComponent {\n  constructor(treeService) {\n    this.treeService = treeService;\n    this._this = this;\n  }\n\n  ngOnChanges(changes) {\n    if (changes.selectedState) {\n      this.selectedStateChanged();\n    }\n  }\n\n  ngAfterViewInit() {\n    this.selectedStateChanged();\n  }\n\n  selectedStateChanged() {\n    if (this.nodeCheckbox) {\n      if (this.selectedState === NodeSelectedState.indeterminate) {\n        this.nodeCheckbox.nativeElement.indeterminate = true;\n      } else {\n        this.nodeCheckbox.nativeElement.indeterminate = false;\n      }\n\n      if (this.selectedState === NodeSelectedState.checked) {\n        this.nodeCheckbox.nativeElement.checked = true;\n      } else if (this.selectedState === NodeSelectedState.unChecked) {\n        this.nodeCheckbox.nativeElement.checked = false;\n      }\n    }\n  }\n\n  checkBoxClick() {\n    this.treeService.checkBoxClick(this.state);\n    setTimeout(() => {\n      this.treeService.reEvaluateSelectedState(this.state);\n    }, 1);\n  }\n\n}\n\nNodeComponent.ɵfac = function NodeComponent_Factory(t) {\n  return new (t || NodeComponent)(i0.ɵɵdirectiveInject(TreeService));\n};\n\nNodeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NodeComponent,\n  selectors: [[\"node\"]],\n  viewQuery: function NodeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c2, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nodeCheckbox = _t.first);\n    }\n  },\n  inputs: {\n    state: \"state\",\n    selectedState: \"selectedState\",\n    nodeNameTemplate: \"nodeNameTemplate\",\n    nodeCollapsibleTemplate: \"nodeCollapsibleTemplate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 6,\n  vars: 6,\n  consts: [[1, \"node\"], [1, \"node-container\"], [3, \"state\", \"nodeCollapsibleTemplate\"], [\"class\", \"node-checkbox\", \"type\", \"checkbox\", 3, \"disabled\", \"checked\", \"click\", 4, \"ngIf\"], [3, \"state\", \"nodeNameTemplate\"], [\"class\", \"collapsible-wrapper\", 3, \"collapsed\", 4, \"ngIf\"], [\"type\", \"checkbox\", 1, \"node-checkbox\", 3, \"disabled\", \"checked\", \"click\"], [\"nodeCheckbox\", \"\"], [1, \"collapsible-wrapper\"], [1, \"collapsible\"], [\"class\", \"node-offset\", 3, \"state\", \"selectedState\", \"nodeCollapsibleTemplate\", \"nodeNameTemplate\", 4, \"ngFor\", \"ngForOf\"], [1, \"node-offset\", 3, \"state\", \"selectedState\", \"nodeCollapsibleTemplate\", \"nodeNameTemplate\"]],\n  template: function NodeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelement(2, \"node-icon-wrapper\", 2);\n      i0.ɵɵtemplate(3, NodeComponent_input_3_Template, 2, 2, \"input\", 3);\n      i0.ɵɵelement(4, \"node-name\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(5, NodeComponent_div_5_Template, 3, 3, \"div\", 5);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"state\", ctx.state)(\"nodeCollapsibleTemplate\", ctx.nodeCollapsibleTemplate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.state.showCheckBox);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"state\", ctx.state)(\"nodeNameTemplate\", ctx.nodeNameTemplate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.state.nodeItem.children);\n    }\n  },\n  directives: [NodeIconWrapperComponent, i1.NgIf, NodeNameComponent, i1.NgForOf, NodeComponent],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NodeComponent, [{\n    type: Component,\n    args: [{\n      selector: 'node',\n      template: \"<div class=\\\"node\\\">\\r\\n  <div class=\\\"node-container\\\">\\r\\n    <node-icon-wrapper [state]=\\\"state\\\" [nodeCollapsibleTemplate]=\\\"nodeCollapsibleTemplate\\\"></node-icon-wrapper>\\r\\n\\r\\n    <input #nodeCheckbox class=\\\"node-checkbox\\\" *ngIf=\\\"state.showCheckBox\\\" (click)=\\\"checkBoxClick()\\\" [disabled]=\\\"state.disabled\\\" [checked]=\\\"state.selected\\\" type=\\\"checkbox\\\" />\\r\\n    <node-name [state]=\\\"state\\\" [nodeNameTemplate]=\\\"nodeNameTemplate\\\"></node-name>\\r\\n  </div>\\r\\n  <div *ngIf=\\\"state.nodeItem.children\\\" class=\\\"collapsible-wrapper\\\" [class.collapsed]=\\\"!state.expanded && state.nodeItem.children.length > 0 && state.filteredChildren.length > 0\\\">\\r\\n    <div class=\\\"collapsible\\\">\\r\\n      <node class=\\\"node-offset\\\" [state]=\\\"child\\\" [selectedState]=\\\"child.selectedState\\\" [nodeCollapsibleTemplate]=\\\"nodeCollapsibleTemplate\\\" [nodeNameTemplate]=\\\"nodeNameTemplate\\\" *ngFor=\\\"let child of state.filteredChildren\\\"></node>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"\n    }]\n  }], function () {\n    return [{\n      type: TreeService\n    }];\n  }, {\n    nodeCheckbox: [{\n      type: ViewChild,\n      args: ['nodeCheckbox', {\n        static: false\n      }]\n    }],\n    state: [{\n      type: Input\n    }],\n    selectedState: [{\n      type: Input\n    }],\n    nodeNameTemplate: [{\n      type: Input\n    }],\n    nodeCollapsibleTemplate: [{\n      type: Input\n    }]\n  });\n})();\n\nclass TreeNgxComponent {\n  constructor(treeService) {\n    this.treeService = treeService;\n    this.defaultOptions = {\n      mode: TreeMode.SingleSelect,\n      checkboxes: false,\n      alwaysEmitSelected: false\n    };\n    this.options = this.defaultOptions;\n    this.callbacks = this.treeService.callbacks;\n    this.filter = '';\n    this.selectedItems = new EventEmitter();\n  }\n\n  ngOnInit() {\n    this.subscription = this.treeService.connect().subscribe(it => {\n      const sub = timer(0).subscribe(() => {\n        this.selectedItems.emit(it);\n        sub.unsubscribe();\n      });\n    });\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  ngOnChanges(changes) {\n    if (changes.filter) {\n      this.treeService.filterChanged(this.filter.toLowerCase());\n    }\n\n    if (changes.options) {\n      this.setOptions();\n\n      if (this.treeService.nodeItems) {\n        this.treeService.treeState = this.initTreeStructure(null, this.treeService.nodeItems, this.treeService.options);\n        this.treeService.clear();\n        this.treeService.setInitialState();\n        this.treeService.forceFilterTraverse();\n      }\n    }\n\n    if (changes.callbacks) {\n      this.treeService.callbacks = this.callbacks;\n    }\n\n    if (changes.nodeItems) {\n      this.initialize();\n    }\n  }\n\n  addNodeById(nodeItem, id) {\n    const newNodeState = TreeUtil.initState(null, nodeItem, this.options);\n    this.treeService.addNodeById(newNodeState, id);\n  }\n\n  deleteById(id) {\n    this.treeService.deleteById(id);\n  }\n\n  editNameById(id, name) {\n    this.treeService.editNameById(id, name);\n  }\n\n  editItemById(id, item) {\n    this.treeService.editItemById(id, item);\n  }\n\n  getParentById(id) {\n    return this.treeService.getParentById(id);\n  }\n\n  expandAll() {\n    this.treeService.toggleExpanded(true);\n  }\n\n  collapseAll() {\n    this.treeService.toggleExpanded(false);\n  }\n\n  expandById(id) {\n    this.treeService.expandById(id);\n  }\n\n  collapseById(id) {\n    this.treeService.collapseById(id);\n  }\n\n  selectById(id) {\n    this.treeService.selectById(id);\n  }\n\n  initialize() {\n    this.setOptions();\n    this.treeService.callbacks = this.callbacks;\n    this.treeService.nodeItems = this.nodeItems;\n    this.treeService.treeState = this.initTreeStructure(null, this.treeService.nodeItems, this.treeService.options);\n    this.treeService.clear();\n    this.treeService.setInitialState();\n  }\n\n  initTreeStructure(parent, nodeItems, options) {\n    let treeStructure = [];\n\n    for (let nodeItem of nodeItems) {\n      const nodeState = TreeUtil.initState(parent, nodeItem, options);\n\n      if (nodeItem.children) {\n        nodeState.children = this.initTreeStructure(nodeState, nodeItem.children, options);\n        nodeState.filteredChildren = nodeState.children;\n      }\n\n      treeStructure.push(nodeState);\n    }\n\n    return treeStructure;\n  }\n\n  setOptions() {\n    if (this.options.mode === TreeMode.NoSelect) {\n      this.treeService.options = { ...this.options,\n        checkboxes: false\n      };\n    } else {\n      this.treeService.options = { ...this.options\n      };\n    }\n  }\n\n}\n\nTreeNgxComponent.ɵfac = function TreeNgxComponent_Factory(t) {\n  return new (t || TreeNgxComponent)(i0.ɵɵdirectiveInject(TreeService));\n};\n\nTreeNgxComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TreeNgxComponent,\n  selectors: [[\"tree-ngx\"]],\n  contentQueries: function TreeNgxComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c3, 5);\n      i0.ɵɵcontentQuery(dirIndex, _c4, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nodeNameTemplate = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nodeCollapsibleTemplate = _t.first);\n    }\n  },\n  inputs: {\n    options: \"options\",\n    callbacks: \"callbacks\",\n    nodeItems: \"nodeItems\",\n    filter: \"filter\"\n  },\n  outputs: {\n    selectedItems: \"selectedItems\"\n  },\n  features: [i0.ɵɵProvidersFeature([TreeService]), i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 1,\n  consts: [[1, \"tree-ngx\"], [\"class\", \"node-root\", 3, \"state\", \"selectedState\", \"nodeCollapsibleTemplate\", \"nodeNameTemplate\", 4, \"ngFor\", \"ngForOf\"], [1, \"node-root\", 3, \"state\", \"selectedState\", \"nodeCollapsibleTemplate\", \"nodeNameTemplate\"]],\n  template: function TreeNgxComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, TreeNgxComponent_node_1_Template, 1, 4, \"node\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.treeService.treeState);\n    }\n  },\n  directives: [i1.NgForOf, NodeComponent],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeNgxComponent, [{\n    type: Component,\n    args: [{\n      selector: 'tree-ngx',\n      providers: [TreeService],\n      template: \"<div class=\\\"tree-ngx\\\">\\r\\n  <node class=\\\"node-root\\\" [state]=\\\"state\\\" [selectedState]=\\\"state.selectedState\\\" [nodeCollapsibleTemplate]=\\\"nodeCollapsibleTemplate\\\"\\r\\n    [nodeNameTemplate]=\\\"nodeNameTemplate\\\" *ngFor=\\\"let state of treeService.treeState\\\"></node>\\r\\n</div>\\r\\n\"\n    }]\n  }], function () {\n    return [{\n      type: TreeService\n    }];\n  }, {\n    nodeNameTemplate: [{\n      type: ContentChild,\n      args: ['nodeNameTemplate', {\n        static: false\n      }]\n    }],\n    nodeCollapsibleTemplate: [{\n      type: ContentChild,\n      args: ['nodeCollapsibleTemplate', {\n        static: false\n      }]\n    }],\n    options: [{\n      type: Input\n    }],\n    callbacks: [{\n      type: Input\n    }],\n    nodeItems: [{\n      type: Input\n    }],\n    filter: [{\n      type: Input\n    }],\n    selectedItems: [{\n      type: Output\n    }]\n  });\n})();\n\nclass TreeNgxModule {}\n\nTreeNgxModule.ɵfac = function TreeNgxModule_Factory(t) {\n  return new (t || TreeNgxModule)();\n};\n\nTreeNgxModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: TreeNgxModule\n});\nTreeNgxModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [TreeService],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeNgxModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [TreeNgxComponent, NodeComponent, NodeNameComponent, NodeIconWrapperComponent],\n      providers: [TreeService],\n      exports: [TreeNgxComponent]\n    }]\n  }], null, null);\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { TreeMode, TreeNgxComponent, TreeNgxModule }; //# sourceMappingURL=tree-ngx.mjs.map","map":{"version":3,"sources":["F:/statvalu/AR_DocuExpert_Test/node_modules/tree-ngx/fesm2020/tree-ngx.mjs","F:/statvalu/AR_DocuExpert_Test/node_modules/src/app/modules/tree-ngx/src/node-icon-wrapper/node-icon-wrapper.component.html","F:/statvalu/AR_DocuExpert_Test/node_modules/src/app/modules/tree-ngx/src/node-name/node-name.component.html","F:/statvalu/AR_DocuExpert_Test/node_modules/src/app/modules/tree-ngx/src/node/node.component.html","F:/statvalu/AR_DocuExpert_Test/node_modules/src/app/modules/tree-ngx/src/tree-ngx/tree-ngx.component.html"],"names":["i0","Injectable","Component","Input","ViewChild","EventEmitter","ContentChild","Output","NgModule","i1","CommonModule","BehaviorSubject","timer","debounceTime","distinctUntilChanged","NodeSelectedState","TreeMode","TreeUtil","initState","parent","nodeItem","options","nodeState","children","filteredChildren","hasFilteredChildren","expanded","disabled","markSelected","getMarkSelected","selectedState","unChecked","selected","showCheckBox","checkboxes","length","mode","SingleSelect","TreeService","constructor","callbacks","treeState","selectedItems","selectedStates","filterValue","selectedItemsSubject","filterChangeSubject","pipe","subscribe","it","filterTraverse","toggleSelected","state","toggleSelectedState","toggle","ignoreDisabled","isDisabled","clear","setChecked","checked","setUnchecked","anyActiveSelected","childStateChanged","setInitialState","setInitialSelectedState","anyChildSelected","allChildrenSelected","setIndeterminate","checkBoxClick","HideSelected","nameClick","canToggleChildrenOnName","toggleExpanded","value","toggleExpandedTraverse","addNodeById","id","result","getNodeState","findById","addNewNode","item","MultiSelect","removeSelected","selectById","editNameById","name","editItemById","includes","push","next","deleteById","deleteByState","delete","expandById","toggleExpandedTraverseAsc","collapseById","reEvaluateSelectedState","hasNoChildren","child","filterChanged","getParentById","forceFilterTraverse","nodeStates","pop","remove","deleteRoot","nodeItems","itemIndex","indexOf","splice","index","NoSelect","filteredIndex","find","indeterminate","every","propogate","force","alwaysEmitSelected","unSelect","filter","addSelected","select","arg","compare","connect","asObservable","applyFilter","states","toLowerCase","results","res","some","ɵfac","ɵprov","type","NodeIconWrapperComponent","_this","toggleExpand","ɵcmp","NgIf","NgTemplateOutlet","args","selector","template","nodeCollapsibleTemplate","NodeNameComponent","treeService","active","ngOnChanges","changes","nodeNameTemplate","NodeComponent","selectedStateChanged","ngAfterViewInit","nodeCheckbox","nativeElement","setTimeout","NgForOf","static","TreeNgxComponent","defaultOptions","ngOnInit","subscription","sub","emit","unsubscribe","ngOnDestroy","setOptions","initTreeStructure","initialize","newNodeState","expandAll","collapseAll","treeStructure","providers","TreeNgxModule","ɵmod","ɵinj","imports","declarations","exports"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,KAAhC,EAAuCC,SAAvC,EAAkDC,YAAlD,EAAgEC,YAAhE,EAA8EC,MAA9E,EAAsFC,QAAtF,QAAsG,eAAtG;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,eAAT,EAA0BC,KAA1B,QAAuC,MAAvC;AACA,SAASC,YAAT,EAAuBC,oBAAvB,QAAmD,gBAAnD;;;;AAkb8Fd,IAAAA,ECnbxF,qB;;;;;;ADmbwFA,IAAAA,EClbxF,qB;;;;;;ADkbwFA,IAAAA,ECpb1F,2B;ADob0FA,IAAAA,ECnbxF,iG;ADmbwFA,IAAAA,EClbxF,iG;ADkbwFA,IAAAA,ECjb1F,wB;;;;mBDib0FA,E;AAAAA,IAAAA,ECnbpF,a;ADmboFA,IAAAA,ECnbpF,2C;ADmboFA,IAAAA,EClbpF,a;ADkboFA,IAAAA,EClbpF,0C;;;;;;ADkboFA,IAAAA,ECrb5F,2B;ADqb4FA,IAAAA,ECpb1F,wG;ADob0FA,IAAAA,EChb5F,wB;;;;mBDgb4FA,E;AAAAA,IAAAA,ECpb3E,a;ADob2EA,IAAAA,ECpb3E,uJ;;;;;;ADob2EA,IAAAA,EC7a1F,sB;;;;;;;;;;;;;AD6a0FA,IAAAA,EC9a5F,2B;AD8a4FA,IAAAA,EC7a1F,wG;AD6a0FA,IAAAA,EC3a5F,wB;;;;mBD2a4FA,E;AAAAA,IAAAA,EC7a3E,a;AD6a2EA,IAAAA,EC7a3E,2FD6a2EA,EC7a3E,8D;;;;;;AD6a2EA,IAAAA,EEtb5F,2B;AFsb4FA,IAAAA,EErb1F,0B;AFqb0FA,IAAAA,EErb5D,U;AFqb4DA,IAAAA,EErbrC,e;AFqbqCA,IAAAA,EEpb5F,wB;;;;mBFob4FA,E;AAAAA,IAAAA,EErbpF,a;AFqboFA,IAAAA,EErbpF,qC;AFqboFA,IAAAA,EErb5D,a;AFqb4DA,IAAAA,EErb5D,8C;;;;;;AFqb4DA,IAAAA,EElb5F,sB;;;;;;;;;;;;;;;;gBFkb4FA,E;;AAAAA,IAAAA,EGnb1F,iC;AHmb0FA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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Component, Input, ViewChild, EventEmitter, ContentChild, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { BehaviorSubject, timer } from 'rxjs';\nimport { debounceTime, distinctUntilChanged } from 'rxjs/operators';\n\nvar NodeSelectedState;\r\n(function (NodeSelectedState) {\r\n    NodeSelectedState[NodeSelectedState[\"checked\"] = 0] = \"checked\";\r\n    NodeSelectedState[NodeSelectedState[\"unChecked\"] = 1] = \"unChecked\";\r\n    NodeSelectedState[NodeSelectedState[\"indeterminate\"] = 2] = \"indeterminate\";\r\n})(NodeSelectedState || (NodeSelectedState = {}));\n\nvar TreeMode;\r\n(function (TreeMode) {\r\n    TreeMode[TreeMode[\"NoSelect\"] = 0] = \"NoSelect\";\r\n    TreeMode[TreeMode[\"SingleSelect\"] = 1] = \"SingleSelect\";\r\n    TreeMode[TreeMode[\"MultiSelect\"] = 2] = \"MultiSelect\";\r\n    TreeMode[TreeMode[\"HideSelected\"] = 3] = \"HideSelected\";\r\n})(TreeMode || (TreeMode = {}));\n\nclass TreeUtil {\r\n    static initState(parent, nodeItem, options) {\r\n        const nodeState = {\r\n            parent: parent,\r\n            children: [],\r\n            filteredChildren: [],\r\n            hasFilteredChildren: false,\r\n            nodeItem: nodeItem,\r\n            expanded: nodeItem.expanded === false ? false : true,\r\n            disabled: nodeItem.disabled === true ? true : false,\r\n            markSelected: this.getMarkSelected(nodeItem, options),\r\n            selectedState: NodeSelectedState.unChecked,\r\n            selected: false,\r\n            showCheckBox: options.checkboxes\r\n        };\r\n        return nodeState;\r\n    }\r\n    static getMarkSelected(nodeItem, options) {\r\n        if (((!nodeItem.children || nodeItem.children.length === 0) || options.mode === TreeMode.SingleSelect) && !options.checkboxes) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\n\nclass TreeService {\r\n    constructor() {\r\n        this.callbacks = {};\r\n        this.treeState = [];\r\n        this.selectedItems = [];\r\n        this.selectedStates = [];\r\n        this.filterValue = '';\r\n        this.selectedItemsSubject = new BehaviorSubject(this.selectedItems);\r\n        this.filterChangeSubject = new BehaviorSubject(this.filterValue);\r\n        this.filterChangeSubject.pipe(debounceTime(300), distinctUntilChanged()).subscribe(it => {\r\n            this.filterTraverse(this.treeState, this.filterValue);\r\n        });\r\n    }\r\n    toggleSelected(state) {\r\n        this.toggleSelectedState(state, false);\r\n        if (this.callbacks.toggle) {\r\n            this.callbacks.toggle(state.nodeItem);\r\n        }\r\n    }\r\n    toggleSelectedState(state, ignoreDisabled) {\r\n        if (this.isDisabled(state, ignoreDisabled)) {\r\n            return;\r\n        }\r\n        if (state.selectedState === NodeSelectedState.unChecked) {\r\n            if (this.options.mode === TreeMode.SingleSelect) {\r\n                this.clear();\r\n                this.setChecked(state, false, true, ignoreDisabled);\r\n            }\r\n            else {\r\n                this.setChecked(state, true, false, ignoreDisabled);\r\n            }\r\n        }\r\n        else if (state.selectedState === NodeSelectedState.checked) {\r\n            if (this.options.mode === TreeMode.SingleSelect) {\r\n                this.setUnchecked(state, false, true, ignoreDisabled);\r\n            }\r\n            else {\r\n                this.setUnchecked(state, true, false, ignoreDisabled);\r\n            }\r\n        }\r\n        else {\r\n            if (this.anyActiveSelected(state) && !state.selected) {\r\n                this.setUnchecked(state, true, false, ignoreDisabled);\r\n            }\r\n            else {\r\n                this.setChecked(state, true, false, ignoreDisabled);\r\n            }\r\n        }\r\n        if (state.parent && this.options.mode !== TreeMode.SingleSelect) {\r\n            this.childStateChanged(state.parent);\r\n        }\r\n    }\r\n    setInitialState() {\r\n        this.setInitialSelectedState(this.treeState);\r\n    }\r\n    childStateChanged(state) {\r\n        if (this.anyChildSelected(state)) {\r\n            if (this.allChildrenSelected(state)) {\r\n                this.setChecked(state, false);\r\n            }\r\n            else {\r\n                this.setIndeterminate(state);\r\n            }\r\n        }\r\n        else {\r\n            this.setUnchecked(state, false);\r\n        }\r\n        if (state.parent) {\r\n            this.childStateChanged(state.parent);\r\n        }\r\n    }\r\n    checkBoxClick(state) {\r\n        if (this.options.mode !== TreeMode.HideSelected) {\r\n            this.toggleSelected(state);\r\n        }\r\n    }\r\n    nameClick(state) {\r\n        if (this.callbacks.nameClick) {\r\n            this.callbacks.nameClick(state.nodeItem);\r\n        }\r\n        if (this.canToggleChildrenOnName()) {\r\n            this.toggleSelected(state);\r\n        }\r\n    }\r\n    toggleExpanded(value) {\r\n        this.toggleExpandedTraverse(this.treeState, value);\r\n    }\r\n    clear() {\r\n        for (let state of this.selectedStates) {\r\n            state.selected = false;\r\n            state.selectedState = NodeSelectedState.unChecked;\r\n        }\r\n        this.selectedItems.length = 0;\r\n        this.selectedStates.length = 0;\r\n    }\r\n    addNodeById(nodeState, id) {\r\n        let result = this.getNodeState(this.treeState, id, this.findById);\r\n        if (result) {\r\n            if (!result.children) {\r\n                result.children = [];\r\n            }\r\n            this.addNewNode(nodeState, result);\r\n            if (result.nodeItem.item && this.options.mode === TreeMode.MultiSelect) {\r\n                this.removeSelected(result.nodeItem.item);\r\n            }\r\n        }\r\n    }\r\n    selectById(id) {\r\n        let result = this.getNodeState(this.treeState, id, this.findById);\r\n        if (result) {\r\n            this.toggleSelected(result);\r\n        }\r\n    }\r\n    editNameById(id, name) {\r\n        const nodeState = this.getNodeState(this.treeState, id, this.findById);\r\n        if (nodeState && nodeState.nodeItem) {\r\n            nodeState.nodeItem.name = name;\r\n        }\r\n    }\r\n    editItemById(id, item) {\r\n        const nodeState = this.getNodeState(this.treeState, id, this.findById);\r\n        if (nodeState && nodeState.nodeItem) {\r\n            if (this.selectedItems.includes(nodeState.nodeItem.item)) {\r\n                this.removeSelected(nodeState.nodeItem.item);\r\n                this.selectedItems.push(item);\r\n                this.selectedItemsSubject.next(this.selectedItems);\r\n            }\r\n            nodeState.nodeItem.item = item;\r\n        }\r\n    }\r\n    deleteById(id) {\r\n        let result = this.getNodeState(this.treeState, id, this.findById);\r\n        if (result) {\r\n            this.deleteByState(result);\r\n        }\r\n    }\r\n    deleteByState(state) {\r\n        this.delete(state);\r\n        this.childStateChanged(state);\r\n        this.filterTraverse(this.treeState, this.filterValue);\r\n    }\r\n    expandById(id) {\r\n        const result = this.getNodeState(this.treeState, id, this.findById);\r\n        if (result) {\r\n            this.toggleExpandedTraverseAsc(result, true);\r\n        }\r\n    }\r\n    collapseById(id) {\r\n        const result = this.getNodeState(this.treeState, id, this.findById);\r\n        if (result) {\r\n            result.expanded = false;\r\n        }\r\n    }\r\n    reEvaluateSelectedState(state) {\r\n        if (this.options.mode !== TreeMode.SingleSelect) {\r\n            if (!this.hasNoChildren(state)) {\r\n                this.childStateChanged(state);\r\n                for (const child of state.children) {\r\n                    this.reEvaluateSelectedState(child);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    filterChanged(value) {\r\n        this.filterValue = value;\r\n        this.filterChangeSubject.next(value);\r\n    }\r\n    canToggleChildrenOnName() {\r\n        if (this.options.checkboxes === false) {\r\n            if (this.options.mode === TreeMode.SingleSelect || this.options.mode === TreeMode.MultiSelect) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    getParentById(id) {\r\n        const result = this.getNodeState(this.treeState, id, this.findById);\r\n        if (result) {\r\n            return result.parent.nodeItem;\r\n        }\r\n        return null;\r\n    }\r\n    forceFilterTraverse() {\r\n        this.filterTraverse(this.treeState, this.filterValue);\r\n    }\r\n    setInitialSelectedState(nodeStates) {\r\n        for (const state of nodeStates) {\r\n            if (this.options.mode === TreeMode.MultiSelect) {\r\n                if (state.nodeItem.selected && (!state.children || state.children.length === 0)) {\r\n                    this.toggleSelectedState(state, true);\r\n                }\r\n            }\r\n            else {\r\n                if (state.nodeItem.selected) {\r\n                    this.toggleSelectedState(state, true);\r\n                }\r\n            }\r\n            this.setInitialSelectedState(state.children);\r\n        }\r\n    }\r\n    delete(state) {\r\n        while (state.children.length > 0) {\r\n            this.delete(state.children.pop());\r\n        }\r\n        this.removeSelected(state.nodeItem.item);\r\n        this.remove(state);\r\n        if (!state.parent) {\r\n            this.deleteRoot(state, this.treeState, this.nodeItems);\r\n        }\r\n    }\r\n    toggleExpandedTraverse(nodeStates, value) {\r\n        for (let state of nodeStates) {\r\n            state.expanded = value;\r\n            this.toggleExpandedTraverse(state.children, value);\r\n        }\r\n    }\r\n    deleteRoot(state, nodeStates, nodeItems) {\r\n        let itemIndex = nodeItems.indexOf(state.nodeItem);\r\n        if (itemIndex !== -1) {\r\n            nodeItems.splice(itemIndex, 1);\r\n        }\r\n        let index = nodeStates.indexOf(state);\r\n        if (index !== -1) {\r\n            nodeStates.splice(index, 1);\r\n        }\r\n    }\r\n    isDisabled(state, ignoreDisabled) {\r\n        return (this.options.mode === TreeMode.NoSelect || (state.disabled && !ignoreDisabled));\r\n    }\r\n    addNewNode(nodeState, parent) {\r\n        nodeState.parent = parent;\r\n        parent.children.push(nodeState);\r\n        parent.nodeItem.children.push(nodeState.nodeItem);\r\n        parent.markSelected = TreeUtil.getMarkSelected(parent.nodeItem, this.options);\r\n        if (this.options.mode === TreeMode.MultiSelect) {\r\n            this.childStateChanged(parent);\r\n        }\r\n        this.filterTraverse(this.treeState, this.filterValue);\r\n    }\r\n    remove(state) {\r\n        if (state.parent) {\r\n            state.parent.hasFilteredChildren = false;\r\n            let itemIndex = state.parent.nodeItem.children.indexOf(state.nodeItem);\r\n            if (itemIndex !== -1) {\r\n                state.parent.nodeItem.children.splice(itemIndex, 1);\r\n            }\r\n            let index = state.parent.children.indexOf(state);\r\n            if (index !== -1) {\r\n                state.parent.children.splice(index, 1);\r\n            }\r\n            let filteredIndex = state.parent.filteredChildren.indexOf(state);\r\n            if (filteredIndex !== -1) {\r\n                state.parent.filteredChildren.splice(filteredIndex, 1);\r\n            }\r\n        }\r\n    }\r\n    anyChildSelected(state) {\r\n        return state.children.find(it => {\r\n            return it.selectedState === NodeSelectedState.checked || it.selectedState === NodeSelectedState.indeterminate;\r\n        }) != null ? true : false;\r\n    }\r\n    allChildrenSelected(state) {\r\n        return state.children.every(it => it.selectedState === NodeSelectedState.checked)\r\n            && state.children.length === state.nodeItem.children.length;\r\n    }\r\n    toggleExpandedTraverseAsc(nodeState, value) {\r\n        nodeState.expanded = value;\r\n        if (nodeState.parent) {\r\n            this.toggleExpandedTraverseAsc(nodeState.parent, value);\r\n        }\r\n    }\r\n    setUnchecked(state, propogate, force, ignoreDisabled) {\r\n        if (state.disabled && !ignoreDisabled) {\r\n            return;\r\n        }\r\n        state.selectedState = NodeSelectedState.unChecked;\r\n        state.selected = false;\r\n        if (this.hasNoChildren(state) || force) {\r\n            this.removeSelected(state.nodeItem.item);\r\n            if (this.options.alwaysEmitSelected === true) {\r\n                this.selectedItemsSubject.next(this.selectedItems);\r\n            }\r\n            if (this.callbacks.unSelect) {\r\n                this.callbacks.unSelect(state.nodeItem);\r\n            }\r\n        }\r\n        else if (propogate === true) {\r\n            for (const child of state.children) {\r\n                this.setUnchecked(child, propogate, force, ignoreDisabled);\r\n            }\r\n        }\r\n    }\r\n    setIndeterminate(state) {\r\n        state.selectedState = NodeSelectedState.indeterminate;\r\n        state.selected = false;\r\n    }\r\n    anyActiveSelected(state) {\r\n        let result = state.children.filter(it => !it.disabled && it.selected).length > 0;\r\n        for (const child of state.children) {\r\n            if (!this.hasNoChildren(child) && this.anyActiveSelected(child)) {\r\n                result = true;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    hasNoChildren(state) {\r\n        return (!state.children || state.children.length === 0);\r\n    }\r\n    setChecked(state, propogate, force, ignoreDisabled) {\r\n        if (state.disabled && !ignoreDisabled) {\r\n            return;\r\n        }\r\n        state.selectedState = NodeSelectedState.checked;\r\n        state.selected = true;\r\n        if (this.hasNoChildren(state) || force) {\r\n            this.addSelected(state);\r\n        }\r\n        else if (propogate === true) {\r\n            for (const child of state.children) {\r\n                this.setChecked(child, propogate, force, ignoreDisabled);\r\n            }\r\n        }\r\n    }\r\n    addSelected(state) {\r\n        this.selectedItems.push(state.nodeItem.item);\r\n        this.selectedStates.push(state);\r\n        if (this.options.alwaysEmitSelected === true) {\r\n            this.selectedItemsSubject.next(this.selectedItems);\r\n        }\r\n        if (this.callbacks.select) {\r\n            this.callbacks.select(state.nodeItem);\r\n        }\r\n    }\r\n    removeSelected(item) {\r\n        let index = this.selectedItems.indexOf(item);\r\n        if (index !== -1) {\r\n            this.selectedItems.splice(index, 1);\r\n        }\r\n    }\r\n    findById(state, arg) {\r\n        return state.nodeItem.id === arg;\r\n    }\r\n    getNodeState(nodeStates, arg, compare) {\r\n        let result = nodeStates.find(it => compare(it, arg));\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            for (let state of nodeStates) {\r\n                result = this.getNodeState(state.children, arg, compare);\r\n                if (result) {\r\n                    return result;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    connect() {\r\n        return this.selectedItemsSubject.asObservable();\r\n    }\r\n    applyFilter(state, filter) {\r\n        state.filteredChildren = this.filter(state.children, filter);\r\n        return state.filteredChildren.length > 0;\r\n    }\r\n    filter(states, value) {\r\n        return states.filter(it => {\r\n            if (this.options.mode === TreeMode.HideSelected && !it.selected) {\r\n                return false;\r\n            }\r\n            if ((it.hasFilteredChildren || value === '' || it.nodeItem.name.toLowerCase().indexOf(value) !== -1)) {\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n    filterTraverse(states, filter) {\r\n        let results = [];\r\n        for (let state of states) {\r\n            if (state.children.length > 0) {\r\n                state.hasFilteredChildren = false;\r\n                state.hasFilteredChildren = this.filterTraverse(state.children, filter);\r\n                let res = this.applyFilter(state, filter);\r\n                if (res) {\r\n                    state.hasFilteredChildren = true;\r\n                }\r\n                results.push(state.hasFilteredChildren);\r\n            }\r\n        }\r\n        return results.some(it => it === true);\r\n    }\r\n}\r\nTreeService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: TreeService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\nTreeService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: TreeService });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: TreeService, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return []; } });\n\nclass NodeIconWrapperComponent {\r\n    constructor() {\r\n        this._this = this;\r\n    }\r\n    toggleExpand() {\r\n        this.state.expanded = !this.state.expanded;\r\n    }\r\n}\r\nNodeIconWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: NodeIconWrapperComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\r\nNodeIconWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.2\", type: NodeIconWrapperComponent, selector: \"node-icon-wrapper\", inputs: { state: \"state\", nodeCollapsibleTemplate: \"nodeCollapsibleTemplate\" }, ngImport: i0, template: \"<div class=\\\"node-icon-wrapper\\\" [class.disabled]=\\\"state.nodeItem?.children?.length == 0\\\" [class.collapsable]=\\\"state.nodeItem?.children?.length > 0\\\"\\r\\n  [class.iconCheckbox]=\\\"state.showCheckBox\\\" (click)=\\\"state.expanded = !state.expanded;\\\">\\r\\n  <ng-container *ngIf=\\\"!nodeCollapsibleTemplate\\\">\\r\\n    <ng-container *ngIf=\\\"state.nodeItem?.children?.length > 0\\\">\\r\\n      <i *ngIf=\\\"!state.expanded\\\" class=\\\"arrow-right\\\"></i>\\r\\n      <i *ngIf=\\\"state.expanded\\\" class=\\\"arrow-down\\\"></i>\\r\\n    </ng-container>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container *ngIf=\\\"state.nodeItem?.children?.length > 0\\\">\\r\\n    <ng-container *ngTemplateOutlet=\\\"nodeCollapsibleTemplate; context: { expanded: state.expanded, context: _this }\\\">\\r\\n    </ng-container>\\r\\n  </ng-container>\\r\\n</div>\\r\\n\", directives: [{ type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: NodeIconWrapperComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'node-icon-wrapper', template: \"<div class=\\\"node-icon-wrapper\\\" [class.disabled]=\\\"state.nodeItem?.children?.length == 0\\\" [class.collapsable]=\\\"state.nodeItem?.children?.length > 0\\\"\\r\\n  [class.iconCheckbox]=\\\"state.showCheckBox\\\" (click)=\\\"state.expanded = !state.expanded;\\\">\\r\\n  <ng-container *ngIf=\\\"!nodeCollapsibleTemplate\\\">\\r\\n    <ng-container *ngIf=\\\"state.nodeItem?.children?.length > 0\\\">\\r\\n      <i *ngIf=\\\"!state.expanded\\\" class=\\\"arrow-right\\\"></i>\\r\\n      <i *ngIf=\\\"state.expanded\\\" class=\\\"arrow-down\\\"></i>\\r\\n    </ng-container>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container *ngIf=\\\"state.nodeItem?.children?.length > 0\\\">\\r\\n    <ng-container *ngTemplateOutlet=\\\"nodeCollapsibleTemplate; context: { expanded: state.expanded, context: _this }\\\">\\r\\n    </ng-container>\\r\\n  </ng-container>\\r\\n</div>\\r\\n\" }]\r\n        }], ctorParameters: function () { return []; }, propDecorators: { state: [{\r\n                type: Input\r\n            }], nodeCollapsibleTemplate: [{\r\n                type: Input\r\n            }] } });\n\nclass NodeNameComponent {\r\n    constructor(treeService) {\r\n        this.treeService = treeService;\r\n        this._this = this;\r\n        this.active = false;\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes.state) {\r\n            this.active = this.treeService.canToggleChildrenOnName();\r\n        }\r\n    }\r\n    nameClick() {\r\n        this.treeService.nameClick(this.state);\r\n    }\r\n    delete() {\r\n        this.treeService.deleteByState(this.state);\r\n    }\r\n}\r\nNodeNameComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: NodeNameComponent, deps: [{ token: TreeService }], target: i0.ɵɵFactoryTarget.Component });\r\nNodeNameComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.2\", type: NodeNameComponent, selector: \"node-name\", inputs: { state: \"state\", nodeNameTemplate: \"nodeNameTemplate\" }, usesOnChanges: true, ngImport: i0, template: \"<div (click)=\\\"nameClick()\\\" [class.markSelected]=\\\"state.markSelected && state.selected\\\" [class.nodeDisabled]=\\\"state.disabled\\\" class=\\\"node-name\\\">\\r\\n  <ng-container *ngIf=\\\"!nodeNameTemplate\\\">\\r\\n    <span [class.active]=\\\"active\\\">{{state.nodeItem.name}}</span>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container *ngTemplateOutlet=\\\"nodeNameTemplate; context: { $implicit: state.nodeItem, node: state.nodeItem, context: _this }\\\">\\r\\n  </ng-container>\\r\\n</div>\\r\\n\", directives: [{ type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: NodeNameComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'node-name', template: \"<div (click)=\\\"nameClick()\\\" [class.markSelected]=\\\"state.markSelected && state.selected\\\" [class.nodeDisabled]=\\\"state.disabled\\\" class=\\\"node-name\\\">\\r\\n  <ng-container *ngIf=\\\"!nodeNameTemplate\\\">\\r\\n    <span [class.active]=\\\"active\\\">{{state.nodeItem.name}}</span>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container *ngTemplateOutlet=\\\"nodeNameTemplate; context: { $implicit: state.nodeItem, node: state.nodeItem, context: _this }\\\">\\r\\n  </ng-container>\\r\\n</div>\\r\\n\" }]\r\n        }], ctorParameters: function () { return [{ type: TreeService }]; }, propDecorators: { state: [{\r\n                type: Input\r\n            }], nodeNameTemplate: [{\r\n                type: Input\r\n            }] } });\n\nclass NodeComponent {\r\n    constructor(treeService) {\r\n        this.treeService = treeService;\r\n        this._this = this;\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes.selectedState) {\r\n            this.selectedStateChanged();\r\n        }\r\n    }\r\n    ngAfterViewInit() {\r\n        this.selectedStateChanged();\r\n    }\r\n    selectedStateChanged() {\r\n        if (this.nodeCheckbox) {\r\n            if (this.selectedState === NodeSelectedState.indeterminate) {\r\n                this.nodeCheckbox.nativeElement.indeterminate = true;\r\n            }\r\n            else {\r\n                this.nodeCheckbox.nativeElement.indeterminate = false;\r\n            }\r\n            if (this.selectedState === NodeSelectedState.checked) {\r\n                this.nodeCheckbox.nativeElement.checked = true;\r\n            }\r\n            else if (this.selectedState === NodeSelectedState.unChecked) {\r\n                this.nodeCheckbox.nativeElement.checked = false;\r\n            }\r\n        }\r\n    }\r\n    checkBoxClick() {\r\n        this.treeService.checkBoxClick(this.state);\r\n        setTimeout(() => {\r\n            this.treeService.reEvaluateSelectedState(this.state);\r\n        }, 1);\r\n    }\r\n}\r\nNodeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: NodeComponent, deps: [{ token: TreeService }], target: i0.ɵɵFactoryTarget.Component });\r\nNodeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.2\", type: NodeComponent, selector: \"node\", inputs: { state: \"state\", selectedState: \"selectedState\", nodeNameTemplate: \"nodeNameTemplate\", nodeCollapsibleTemplate: \"nodeCollapsibleTemplate\" }, viewQueries: [{ propertyName: \"nodeCheckbox\", first: true, predicate: [\"nodeCheckbox\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: \"<div class=\\\"node\\\">\\r\\n  <div class=\\\"node-container\\\">\\r\\n    <node-icon-wrapper [state]=\\\"state\\\" [nodeCollapsibleTemplate]=\\\"nodeCollapsibleTemplate\\\"></node-icon-wrapper>\\r\\n\\r\\n    <input #nodeCheckbox class=\\\"node-checkbox\\\" *ngIf=\\\"state.showCheckBox\\\" (click)=\\\"checkBoxClick()\\\" [disabled]=\\\"state.disabled\\\" [checked]=\\\"state.selected\\\" type=\\\"checkbox\\\" />\\r\\n    <node-name [state]=\\\"state\\\" [nodeNameTemplate]=\\\"nodeNameTemplate\\\"></node-name>\\r\\n  </div>\\r\\n  <div *ngIf=\\\"state.nodeItem.children\\\" class=\\\"collapsible-wrapper\\\" [class.collapsed]=\\\"!state.expanded && state.nodeItem.children.length > 0 && state.filteredChildren.length > 0\\\">\\r\\n    <div class=\\\"collapsible\\\">\\r\\n      <node class=\\\"node-offset\\\" [state]=\\\"child\\\" [selectedState]=\\\"child.selectedState\\\" [nodeCollapsibleTemplate]=\\\"nodeCollapsibleTemplate\\\" [nodeNameTemplate]=\\\"nodeNameTemplate\\\" *ngFor=\\\"let child of state.filteredChildren\\\"></node>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\", components: [{ type: NodeIconWrapperComponent, selector: \"node-icon-wrapper\", inputs: [\"state\", \"nodeCollapsibleTemplate\"] }, { type: NodeNameComponent, selector: \"node-name\", inputs: [\"state\", \"nodeNameTemplate\"] }, { type: NodeComponent, selector: \"node\", inputs: [\"state\", \"selectedState\", \"nodeNameTemplate\", \"nodeCollapsibleTemplate\"] }], directives: [{ type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: NodeComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'node', template: \"<div class=\\\"node\\\">\\r\\n  <div class=\\\"node-container\\\">\\r\\n    <node-icon-wrapper [state]=\\\"state\\\" [nodeCollapsibleTemplate]=\\\"nodeCollapsibleTemplate\\\"></node-icon-wrapper>\\r\\n\\r\\n    <input #nodeCheckbox class=\\\"node-checkbox\\\" *ngIf=\\\"state.showCheckBox\\\" (click)=\\\"checkBoxClick()\\\" [disabled]=\\\"state.disabled\\\" [checked]=\\\"state.selected\\\" type=\\\"checkbox\\\" />\\r\\n    <node-name [state]=\\\"state\\\" [nodeNameTemplate]=\\\"nodeNameTemplate\\\"></node-name>\\r\\n  </div>\\r\\n  <div *ngIf=\\\"state.nodeItem.children\\\" class=\\\"collapsible-wrapper\\\" [class.collapsed]=\\\"!state.expanded && state.nodeItem.children.length > 0 && state.filteredChildren.length > 0\\\">\\r\\n    <div class=\\\"collapsible\\\">\\r\\n      <node class=\\\"node-offset\\\" [state]=\\\"child\\\" [selectedState]=\\\"child.selectedState\\\" [nodeCollapsibleTemplate]=\\\"nodeCollapsibleTemplate\\\" [nodeNameTemplate]=\\\"nodeNameTemplate\\\" *ngFor=\\\"let child of state.filteredChildren\\\"></node>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\" }]\r\n        }], ctorParameters: function () { return [{ type: TreeService }]; }, propDecorators: { nodeCheckbox: [{\r\n                type: ViewChild,\r\n                args: ['nodeCheckbox', { static: false }]\r\n            }], state: [{\r\n                type: Input\r\n            }], selectedState: [{\r\n                type: Input\r\n            }], nodeNameTemplate: [{\r\n                type: Input\r\n            }], nodeCollapsibleTemplate: [{\r\n                type: Input\r\n            }] } });\n\nclass TreeNgxComponent {\r\n    constructor(treeService) {\r\n        this.treeService = treeService;\r\n        this.defaultOptions = {\r\n            mode: TreeMode.SingleSelect,\r\n            checkboxes: false,\r\n            alwaysEmitSelected: false\r\n        };\r\n        this.options = this.defaultOptions;\r\n        this.callbacks = this.treeService.callbacks;\r\n        this.filter = '';\r\n        this.selectedItems = new EventEmitter();\r\n    }\r\n    ngOnInit() {\r\n        this.subscription = this.treeService.connect().subscribe(it => {\r\n            const sub = timer(0).subscribe(() => {\r\n                this.selectedItems.emit(it);\r\n                sub.unsubscribe();\r\n            });\r\n        });\r\n    }\r\n    ngOnDestroy() {\r\n        this.subscription.unsubscribe();\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes.filter) {\r\n            this.treeService.filterChanged(this.filter.toLowerCase());\r\n        }\r\n        if (changes.options) {\r\n            this.setOptions();\r\n            if (this.treeService.nodeItems) {\r\n                this.treeService.treeState = this.initTreeStructure(null, this.treeService.nodeItems, this.treeService.options);\r\n                this.treeService.clear();\r\n                this.treeService.setInitialState();\r\n                this.treeService.forceFilterTraverse();\r\n            }\r\n        }\r\n        if (changes.callbacks) {\r\n            this.treeService.callbacks = this.callbacks;\r\n        }\r\n        if (changes.nodeItems) {\r\n            this.initialize();\r\n        }\r\n    }\r\n    addNodeById(nodeItem, id) {\r\n        const newNodeState = TreeUtil.initState(null, nodeItem, this.options);\r\n        this.treeService.addNodeById(newNodeState, id);\r\n    }\r\n    deleteById(id) {\r\n        this.treeService.deleteById(id);\r\n    }\r\n    editNameById(id, name) {\r\n        this.treeService.editNameById(id, name);\r\n    }\r\n    editItemById(id, item) {\r\n        this.treeService.editItemById(id, item);\r\n    }\r\n    getParentById(id) {\r\n        return this.treeService.getParentById(id);\r\n    }\r\n    expandAll() {\r\n        this.treeService.toggleExpanded(true);\r\n    }\r\n    collapseAll() {\r\n        this.treeService.toggleExpanded(false);\r\n    }\r\n    expandById(id) {\r\n        this.treeService.expandById(id);\r\n    }\r\n    collapseById(id) {\r\n        this.treeService.collapseById(id);\r\n    }\r\n    selectById(id) {\r\n        this.treeService.selectById(id);\r\n    }\r\n    initialize() {\r\n        this.setOptions();\r\n        this.treeService.callbacks = this.callbacks;\r\n        this.treeService.nodeItems = this.nodeItems;\r\n        this.treeService.treeState = this.initTreeStructure(null, this.treeService.nodeItems, this.treeService.options);\r\n        this.treeService.clear();\r\n        this.treeService.setInitialState();\r\n    }\r\n    initTreeStructure(parent, nodeItems, options) {\r\n        let treeStructure = [];\r\n        for (let nodeItem of nodeItems) {\r\n            const nodeState = TreeUtil.initState(parent, nodeItem, options);\r\n            if (nodeItem.children) {\r\n                nodeState.children = this.initTreeStructure(nodeState, nodeItem.children, options);\r\n                nodeState.filteredChildren = nodeState.children;\r\n            }\r\n            treeStructure.push(nodeState);\r\n        }\r\n        return treeStructure;\r\n    }\r\n    setOptions() {\r\n        if (this.options.mode === TreeMode.NoSelect) {\r\n            this.treeService.options = { ...this.options, checkboxes: false };\r\n        }\r\n        else {\r\n            this.treeService.options = { ...this.options };\r\n        }\r\n    }\r\n}\r\nTreeNgxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: TreeNgxComponent, deps: [{ token: TreeService }], target: i0.ɵɵFactoryTarget.Component });\r\nTreeNgxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.2\", type: TreeNgxComponent, selector: \"tree-ngx\", inputs: { options: \"options\", callbacks: \"callbacks\", nodeItems: \"nodeItems\", filter: \"filter\" }, outputs: { selectedItems: \"selectedItems\" }, providers: [TreeService], queries: [{ propertyName: \"nodeNameTemplate\", first: true, predicate: [\"nodeNameTemplate\"], descendants: true }, { propertyName: \"nodeCollapsibleTemplate\", first: true, predicate: [\"nodeCollapsibleTemplate\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: \"<div class=\\\"tree-ngx\\\">\\r\\n  <node class=\\\"node-root\\\" [state]=\\\"state\\\" [selectedState]=\\\"state.selectedState\\\" [nodeCollapsibleTemplate]=\\\"nodeCollapsibleTemplate\\\"\\r\\n    [nodeNameTemplate]=\\\"nodeNameTemplate\\\" *ngFor=\\\"let state of treeService.treeState\\\"></node>\\r\\n</div>\\r\\n\", components: [{ type: NodeComponent, selector: \"node\", inputs: [\"state\", \"selectedState\", \"nodeNameTemplate\", \"nodeCollapsibleTemplate\"] }], directives: [{ type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: TreeNgxComponent, decorators: [{\r\n            type: Component,\r\n            args: [{ selector: 'tree-ngx', providers: [TreeService], template: \"<div class=\\\"tree-ngx\\\">\\r\\n  <node class=\\\"node-root\\\" [state]=\\\"state\\\" [selectedState]=\\\"state.selectedState\\\" [nodeCollapsibleTemplate]=\\\"nodeCollapsibleTemplate\\\"\\r\\n    [nodeNameTemplate]=\\\"nodeNameTemplate\\\" *ngFor=\\\"let state of treeService.treeState\\\"></node>\\r\\n</div>\\r\\n\" }]\r\n        }], ctorParameters: function () { return [{ type: TreeService }]; }, propDecorators: { nodeNameTemplate: [{\r\n                type: ContentChild,\r\n                args: ['nodeNameTemplate', { static: false }]\r\n            }], nodeCollapsibleTemplate: [{\r\n                type: ContentChild,\r\n                args: ['nodeCollapsibleTemplate', { static: false }]\r\n            }], options: [{\r\n                type: Input\r\n            }], callbacks: [{\r\n                type: Input\r\n            }], nodeItems: [{\r\n                type: Input\r\n            }], filter: [{\r\n                type: Input\r\n            }], selectedItems: [{\r\n                type: Output\r\n            }] } });\n\nclass TreeNgxModule {\r\n}\r\nTreeNgxModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: TreeNgxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nTreeNgxModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: TreeNgxModule, declarations: [TreeNgxComponent,\r\n        NodeComponent,\r\n        NodeNameComponent,\r\n        NodeIconWrapperComponent], imports: [CommonModule], exports: [TreeNgxComponent] });\r\nTreeNgxModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: TreeNgxModule, providers: [\r\n        TreeService\r\n    ], imports: [[\r\n            CommonModule\r\n        ]] });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.2\", ngImport: i0, type: TreeNgxModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    imports: [\r\n                        CommonModule\r\n                    ],\r\n                    declarations: [\r\n                        TreeNgxComponent,\r\n                        NodeComponent,\r\n                        NodeNameComponent,\r\n                        NodeIconWrapperComponent,\r\n                    ],\r\n                    providers: [\r\n                        TreeService\r\n                    ],\r\n                    exports: [\r\n                        TreeNgxComponent\r\n                    ]\r\n                }]\r\n        }] });\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { TreeMode, TreeNgxComponent, TreeNgxModule };\n//# sourceMappingURL=tree-ngx.mjs.map\n",null,null,null,null]},"metadata":{},"sourceType":"module"}