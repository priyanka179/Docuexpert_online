{"ast":null,"code":"import _asyncToGenerator from \"F:/statvalu/project/AR_DocuExpert_Test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { delay } from \"../util/delay\";\nimport * as utils from \"../util/utils\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nexport function rpRegistrationPolicy(retryTimeout = 30) {\n  return {\n    create: (nextPolicy, options) => {\n      return new RPRegistrationPolicy(nextPolicy, options, retryTimeout);\n    }\n  };\n}\nexport class RPRegistrationPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy, options, _retryTimeout = 30) {\n    super(nextPolicy, options);\n    this._retryTimeout = _retryTimeout;\n  }\n\n  sendRequest(request) {\n    return this._nextPolicy.sendRequest(request.clone()).then(response => registerIfNeeded(this, request, response));\n  }\n\n}\n\nfunction registerIfNeeded(policy, request, response) {\n  if (response.status === 409) {\n    const rpName = checkRPNotRegisteredError(response.bodyAsText);\n\n    if (rpName) {\n      const urlPrefix = extractSubscriptionUrl(request.url);\n      return registerRP(policy, urlPrefix, rpName, request) // Autoregistration of ${provider} failed for some reason. We will not return this error\n      // instead will return the initial response with 409 status code back to the user.\n      // do nothing here as we are returning the original response at the end of this method.\n      .catch(() => false).then(registrationStatus => {\n        if (registrationStatus) {\n          // Retry the original request. We have to change the x-ms-client-request-id\n          // otherwise Azure endpoint will return the initial 409 (cached) response.\n          request.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n          return policy._nextPolicy.sendRequest(request.clone());\n        }\n\n        return response;\n      });\n    }\n  }\n\n  return Promise.resolve(response);\n}\n/**\n * Reuses the headers of the original request and url (if specified).\n * @param originalRequest - The original request\n * @param reuseUrlToo - Should the url from the original request be reused as well. Default false.\n * @returns A new request object with desired headers.\n */\n\n\nfunction getRequestEssentials(originalRequest, reuseUrlToo = false) {\n  const reqOptions = originalRequest.clone();\n\n  if (reuseUrlToo) {\n    reqOptions.url = originalRequest.url;\n  } // We have to change the x-ms-client-request-id otherwise Azure endpoint\n  // will return the initial 409 (cached) response.\n\n\n  reqOptions.headers.set(\"x-ms-client-request-id\", utils.generateUuid()); // Set content-type to application/json\n\n  reqOptions.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  return reqOptions;\n}\n/**\n * Validates the error code and message associated with 409 response status code. If it matches to that of\n * RP not registered then it returns the name of the RP else returns undefined.\n * @param body - The response body received after making the original request.\n * @returns The name of the RP if condition is satisfied else undefined.\n */\n\n\nfunction checkRPNotRegisteredError(body) {\n  let result, responseBody;\n\n  if (body) {\n    try {\n      responseBody = JSON.parse(body);\n    } catch (err) {// do nothing;\n    }\n\n    if (responseBody && responseBody.error && responseBody.error.message && responseBody.error.code && responseBody.error.code === \"MissingSubscriptionRegistration\") {\n      const matchRes = responseBody.error.message.match(/.*'(.*)'/i);\n\n      if (matchRes) {\n        result = matchRes.pop();\n      }\n    }\n  }\n\n  return result;\n}\n/**\n * Extracts the first part of the URL, just after subscription:\n * https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param url - The original request url\n * @returns The url prefix as explained above.\n */\n\n\nfunction extractSubscriptionUrl(url) {\n  let result;\n  const matchRes = url.match(/.*\\/subscriptions\\/[a-f0-9-]+\\//gi);\n\n  if (matchRes && matchRes[0]) {\n    result = matchRes[0];\n  } else {\n    throw new Error(`Unable to extract subscriptionId from the given url - ${url}.`);\n  }\n\n  return result;\n}\n/**\n * Registers the given provider.\n * @param policy - The RPRegistrationPolicy this function is being called against.\n * @param urlPrefix - https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param provider - The provider name to be registered.\n * @param originalRequest - The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n */\n\n\nfunction registerRP(_x, _x2, _x3, _x4) {\n  return _registerRP.apply(this, arguments);\n}\n/**\n * Polls the registration status of the provider that was registered. Polling happens at an interval of 30 seconds.\n * Polling will happen till the registrationState property of the response body is \"Registered\".\n * @param policy - The RPRegistrationPolicy this function is being called against.\n * @param url - The request url for polling\n * @param originalRequest - The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @returns True if RP Registration is successful.\n */\n\n\nfunction _registerRP() {\n  _registerRP = _asyncToGenerator(function* (policy, urlPrefix, provider, originalRequest) {\n    const postUrl = `${urlPrefix}providers/${provider}/register?api-version=2016-02-01`;\n    const getUrl = `${urlPrefix}providers/${provider}?api-version=2016-02-01`;\n    const reqOptions = getRequestEssentials(originalRequest);\n    reqOptions.method = \"POST\";\n    reqOptions.url = postUrl;\n    const response = yield policy._nextPolicy.sendRequest(reqOptions);\n\n    if (response.status !== 200) {\n      throw new Error(`Autoregistration of ${provider} failed. Please try registering manually.`);\n    }\n\n    return getRegistrationStatus(policy, getUrl, originalRequest);\n  });\n  return _registerRP.apply(this, arguments);\n}\n\nfunction getRegistrationStatus(_x5, _x6, _x7) {\n  return _getRegistrationStatus.apply(this, arguments);\n} //# sourceMappingURL=rpRegistrationPolicy.js.map\n\n\nfunction _getRegistrationStatus() {\n  _getRegistrationStatus = _asyncToGenerator(function* (policy, url, originalRequest) {\n    const reqOptions = getRequestEssentials(originalRequest);\n    reqOptions.url = url;\n    reqOptions.method = \"GET\";\n    const res = yield policy._nextPolicy.sendRequest(reqOptions);\n    const obj = res.parsedBody;\n\n    if (res.parsedBody && obj.registrationState && obj.registrationState === \"Registered\") {\n      return true;\n    } else {\n      yield delay(policy._retryTimeout * 1000);\n      return getRegistrationStatus(policy, url, originalRequest);\n    }\n  });\n  return _getRegistrationStatus.apply(this, arguments);\n}","map":{"version":3,"sources":["F:/statvalu/project/AR_DocuExpert_Test/node_modules/@azure/core-http/dist-esm/src/policies/rpRegistrationPolicy.js"],"names":["delay","utils","BaseRequestPolicy","rpRegistrationPolicy","retryTimeout","create","nextPolicy","options","RPRegistrationPolicy","constructor","_retryTimeout","sendRequest","request","_nextPolicy","clone","then","response","registerIfNeeded","policy","status","rpName","checkRPNotRegisteredError","bodyAsText","urlPrefix","extractSubscriptionUrl","url","registerRP","catch","registrationStatus","headers","set","generateUuid","Promise","resolve","getRequestEssentials","originalRequest","reuseUrlToo","reqOptions","body","result","responseBody","JSON","parse","err","error","message","code","matchRes","match","pop","Error","provider","postUrl","getUrl","method","getRegistrationStatus","res","obj","parsedBody","registrationState"],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { delay } from \"../util/delay\";\nimport * as utils from \"../util/utils\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nexport function rpRegistrationPolicy(retryTimeout = 30) {\n    return {\n        create: (nextPolicy, options) => {\n            return new RPRegistrationPolicy(nextPolicy, options, retryTimeout);\n        }\n    };\n}\nexport class RPRegistrationPolicy extends BaseRequestPolicy {\n    constructor(nextPolicy, options, _retryTimeout = 30) {\n        super(nextPolicy, options);\n        this._retryTimeout = _retryTimeout;\n    }\n    sendRequest(request) {\n        return this._nextPolicy\n            .sendRequest(request.clone())\n            .then((response) => registerIfNeeded(this, request, response));\n    }\n}\nfunction registerIfNeeded(policy, request, response) {\n    if (response.status === 409) {\n        const rpName = checkRPNotRegisteredError(response.bodyAsText);\n        if (rpName) {\n            const urlPrefix = extractSubscriptionUrl(request.url);\n            return (registerRP(policy, urlPrefix, rpName, request)\n                // Autoregistration of ${provider} failed for some reason. We will not return this error\n                // instead will return the initial response with 409 status code back to the user.\n                // do nothing here as we are returning the original response at the end of this method.\n                .catch(() => false)\n                .then((registrationStatus) => {\n                if (registrationStatus) {\n                    // Retry the original request. We have to change the x-ms-client-request-id\n                    // otherwise Azure endpoint will return the initial 409 (cached) response.\n                    request.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n                    return policy._nextPolicy.sendRequest(request.clone());\n                }\n                return response;\n            }));\n        }\n    }\n    return Promise.resolve(response);\n}\n/**\n * Reuses the headers of the original request and url (if specified).\n * @param originalRequest - The original request\n * @param reuseUrlToo - Should the url from the original request be reused as well. Default false.\n * @returns A new request object with desired headers.\n */\nfunction getRequestEssentials(originalRequest, reuseUrlToo = false) {\n    const reqOptions = originalRequest.clone();\n    if (reuseUrlToo) {\n        reqOptions.url = originalRequest.url;\n    }\n    // We have to change the x-ms-client-request-id otherwise Azure endpoint\n    // will return the initial 409 (cached) response.\n    reqOptions.headers.set(\"x-ms-client-request-id\", utils.generateUuid());\n    // Set content-type to application/json\n    reqOptions.headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n    return reqOptions;\n}\n/**\n * Validates the error code and message associated with 409 response status code. If it matches to that of\n * RP not registered then it returns the name of the RP else returns undefined.\n * @param body - The response body received after making the original request.\n * @returns The name of the RP if condition is satisfied else undefined.\n */\nfunction checkRPNotRegisteredError(body) {\n    let result, responseBody;\n    if (body) {\n        try {\n            responseBody = JSON.parse(body);\n        }\n        catch (err) {\n            // do nothing;\n        }\n        if (responseBody &&\n            responseBody.error &&\n            responseBody.error.message &&\n            responseBody.error.code &&\n            responseBody.error.code === \"MissingSubscriptionRegistration\") {\n            const matchRes = responseBody.error.message.match(/.*'(.*)'/i);\n            if (matchRes) {\n                result = matchRes.pop();\n            }\n        }\n    }\n    return result;\n}\n/**\n * Extracts the first part of the URL, just after subscription:\n * https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param url - The original request url\n * @returns The url prefix as explained above.\n */\nfunction extractSubscriptionUrl(url) {\n    let result;\n    const matchRes = url.match(/.*\\/subscriptions\\/[a-f0-9-]+\\//gi);\n    if (matchRes && matchRes[0]) {\n        result = matchRes[0];\n    }\n    else {\n        throw new Error(`Unable to extract subscriptionId from the given url - ${url}.`);\n    }\n    return result;\n}\n/**\n * Registers the given provider.\n * @param policy - The RPRegistrationPolicy this function is being called against.\n * @param urlPrefix - https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/\n * @param provider - The provider name to be registered.\n * @param originalRequest - The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n */\nasync function registerRP(policy, urlPrefix, provider, originalRequest) {\n    const postUrl = `${urlPrefix}providers/${provider}/register?api-version=2016-02-01`;\n    const getUrl = `${urlPrefix}providers/${provider}?api-version=2016-02-01`;\n    const reqOptions = getRequestEssentials(originalRequest);\n    reqOptions.method = \"POST\";\n    reqOptions.url = postUrl;\n    const response = await policy._nextPolicy.sendRequest(reqOptions);\n    if (response.status !== 200) {\n        throw new Error(`Autoregistration of ${provider} failed. Please try registering manually.`);\n    }\n    return getRegistrationStatus(policy, getUrl, originalRequest);\n}\n/**\n * Polls the registration status of the provider that was registered. Polling happens at an interval of 30 seconds.\n * Polling will happen till the registrationState property of the response body is \"Registered\".\n * @param policy - The RPRegistrationPolicy this function is being called against.\n * @param url - The request url for polling\n * @param originalRequest - The original request sent by the user that returned a 409 response\n * with a message that the provider is not registered.\n * @returns True if RP Registration is successful.\n */\nasync function getRegistrationStatus(policy, url, originalRequest) {\n    const reqOptions = getRequestEssentials(originalRequest);\n    reqOptions.url = url;\n    reqOptions.method = \"GET\";\n    const res = await policy._nextPolicy.sendRequest(reqOptions);\n    const obj = res.parsedBody;\n    if (res.parsedBody && obj.registrationState && obj.registrationState === \"Registered\") {\n        return true;\n    }\n    else {\n        await delay(policy._retryTimeout * 1000);\n        return getRegistrationStatus(policy, url, originalRequest);\n    }\n}\n//# sourceMappingURL=rpRegistrationPolicy.js.map"]},"metadata":{},"sourceType":"module"}