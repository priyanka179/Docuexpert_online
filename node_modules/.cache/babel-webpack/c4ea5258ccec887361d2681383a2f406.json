{"ast":null,"code":"import _asyncToGenerator from \"F:/statvalu/AR_DocuExpert_Test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BatchResponseParser } from \"./BatchResponseParser\";\nimport { utf8ByteLength } from \"./BatchUtils\";\nimport { BlobBatch } from \"./BlobBatch\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { convertTracingToRequestOptionsBase, createSpan } from \"./utils/tracing\";\nimport { Service, Container } from \"./generated/src/operations\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageClientContext } from \"./generated/src/storageClientContext\";\nimport { newPipeline, isPipelineLike } from \"./Pipeline\";\nimport { getURLPath } from \"./utils/utils.common\";\n/**\n * A BlobBatchClient allows you to make batched requests to the Azure Storage Blob service.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n */\n\nexport class BlobBatchClient {\n  constructor(url, credentialOrPipeline, // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n  options) {\n    let pipeline;\n\n    if (isPipelineLike(credentialOrPipeline)) {\n      pipeline = credentialOrPipeline;\n    } else if (!credentialOrPipeline) {\n      // no credential provided\n      pipeline = newPipeline(new AnonymousCredential(), options);\n    } else {\n      pipeline = newPipeline(credentialOrPipeline, options);\n    }\n\n    const storageClientContext = new StorageClientContext(url, pipeline.toServiceClientOptions());\n    const path = getURLPath(url);\n\n    if (path && path !== \"/\") {\n      // Container scoped.\n      this.serviceOrContainerContext = new Container(storageClientContext);\n    } else {\n      this.serviceOrContainerContext = new Service(storageClientContext);\n    }\n  }\n  /**\n   * Creates a {@link BlobBatch}.\n   * A BlobBatch represents an aggregated set of operations on blobs.\n   */\n\n\n  createBatch() {\n    return new BlobBatch();\n  }\n\n  deleteBlobs(urlsOrBlobClients, credentialOrOptions, // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n  options) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const batch = new BlobBatch();\n\n      for (const urlOrBlobClient of urlsOrBlobClients) {\n        if (typeof urlOrBlobClient === \"string\") {\n          yield batch.deleteBlob(urlOrBlobClient, credentialOrOptions, options);\n        } else {\n          yield batch.deleteBlob(urlOrBlobClient, credentialOrOptions);\n        }\n      }\n\n      return _this.submitBatch(batch);\n    })();\n  }\n\n  setBlobsAccessTier(urlsOrBlobClients, credentialOrTier, tierOrOptions, // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n  options) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const batch = new BlobBatch();\n\n      for (const urlOrBlobClient of urlsOrBlobClients) {\n        if (typeof urlOrBlobClient === \"string\") {\n          yield batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions, options);\n        } else {\n          yield batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions);\n        }\n      }\n\n      return _this2.submitBatch(batch);\n    })();\n  }\n  /**\n   * Submit batch request which consists of multiple subrequests.\n   *\n   * Get `blobBatchClient` and other details before running the snippets.\n   * `blobServiceClient.getBlobBatchClient()` gives the `blobBatchClient`\n   *\n   * Example usage:\n   *\n   * ```js\n   * let batchRequest = new BlobBatch();\n   * await batchRequest.deleteBlob(urlInString0, credential0);\n   * await batchRequest.deleteBlob(urlInString1, credential1, {\n   *  deleteSnapshots: \"include\"\n   * });\n   * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n   * console.log(batchResp.subResponsesSucceededCount);\n   * ```\n   *\n   * Example using a lease:\n   *\n   * ```js\n   * let batchRequest = new BlobBatch();\n   * await batchRequest.setBlobAccessTier(blockBlobClient0, \"Cool\");\n   * await batchRequest.setBlobAccessTier(blockBlobClient1, \"Cool\", {\n   *  conditions: { leaseId: leaseId }\n   * });\n   * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n   * console.log(batchResp.subResponsesSucceededCount);\n   * ```\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n   *\n   * @param batchRequest - A set of Delete or SetTier operations.\n   * @param options -\n   */\n\n\n  submitBatch(batchRequest, options = {}) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!batchRequest || batchRequest.getSubRequests().size === 0) {\n        throw new RangeError(\"Batch request should contain one or more sub requests.\");\n      }\n\n      const {\n        span,\n        updatedOptions\n      } = createSpan(\"BlobBatchClient-submitBatch\", options);\n\n      try {\n        const batchRequestBody = batchRequest.getHttpRequestBody(); // ServiceSubmitBatchResponseModel and ContainerSubmitBatchResponse are compatible for now.\n\n        const rawBatchResponse = yield _this3.serviceOrContainerContext.submitBatch(utf8ByteLength(batchRequestBody), batchRequest.getMultiPartContentType(), batchRequestBody, Object.assign(Object.assign({}, options), convertTracingToRequestOptionsBase(updatedOptions))); // Parse the sub responses result, if logic reaches here(i.e. the batch request succeeded with status code 202).\n\n        const batchResponseParser = new BatchResponseParser(rawBatchResponse, batchRequest.getSubRequests());\n        const responseSummary = yield batchResponseParser.parseBatchResponse();\n        const res = {\n          _response: rawBatchResponse._response,\n          contentType: rawBatchResponse.contentType,\n          errorCode: rawBatchResponse.errorCode,\n          requestId: rawBatchResponse.requestId,\n          clientRequestId: rawBatchResponse.clientRequestId,\n          version: rawBatchResponse.version,\n          subResponses: responseSummary.subResponses,\n          subResponsesSucceededCount: responseSummary.subResponsesSucceededCount,\n          subResponsesFailedCount: responseSummary.subResponsesFailedCount\n        };\n        return res;\n      } catch (e) {\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message: e.message\n        });\n        throw e;\n      } finally {\n        span.end();\n      }\n    })();\n  }\n\n} //# sourceMappingURL=BlobBatchClient.js.map","map":{"version":3,"sources":["F:/statvalu/AR_DocuExpert_Test/node_modules/@azure/storage-blob/dist-esm/storage-blob/src/BlobBatchClient.js"],"names":["BatchResponseParser","utf8ByteLength","BlobBatch","SpanStatusCode","convertTracingToRequestOptionsBase","createSpan","Service","Container","AnonymousCredential","StorageClientContext","newPipeline","isPipelineLike","getURLPath","BlobBatchClient","constructor","url","credentialOrPipeline","options","pipeline","storageClientContext","toServiceClientOptions","path","serviceOrContainerContext","createBatch","deleteBlobs","urlsOrBlobClients","credentialOrOptions","batch","urlOrBlobClient","deleteBlob","submitBatch","setBlobsAccessTier","credentialOrTier","tierOrOptions","setBlobAccessTier","batchRequest","getSubRequests","size","RangeError","span","updatedOptions","batchRequestBody","getHttpRequestBody","rawBatchResponse","getMultiPartContentType","Object","assign","batchResponseParser","responseSummary","parseBatchResponse","res","_response","contentType","errorCode","requestId","clientRequestId","version","subResponses","subResponsesSucceededCount","subResponsesFailedCount","e","setStatus","code","ERROR","message","end"],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BatchResponseParser } from \"./BatchResponseParser\";\nimport { utf8ByteLength } from \"./BatchUtils\";\nimport { BlobBatch } from \"./BlobBatch\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { convertTracingToRequestOptionsBase, createSpan } from \"./utils/tracing\";\nimport { Service, Container } from \"./generated/src/operations\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageClientContext } from \"./generated/src/storageClientContext\";\nimport { newPipeline, isPipelineLike } from \"./Pipeline\";\nimport { getURLPath } from \"./utils/utils.common\";\n/**\n * A BlobBatchClient allows you to make batched requests to the Azure Storage Blob service.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n */\nexport class BlobBatchClient {\n    constructor(url, credentialOrPipeline, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        let pipeline;\n        if (isPipelineLike(credentialOrPipeline)) {\n            pipeline = credentialOrPipeline;\n        }\n        else if (!credentialOrPipeline) {\n            // no credential provided\n            pipeline = newPipeline(new AnonymousCredential(), options);\n        }\n        else {\n            pipeline = newPipeline(credentialOrPipeline, options);\n        }\n        const storageClientContext = new StorageClientContext(url, pipeline.toServiceClientOptions());\n        const path = getURLPath(url);\n        if (path && path !== \"/\") {\n            // Container scoped.\n            this.serviceOrContainerContext = new Container(storageClientContext);\n        }\n        else {\n            this.serviceOrContainerContext = new Service(storageClientContext);\n        }\n    }\n    /**\n     * Creates a {@link BlobBatch}.\n     * A BlobBatch represents an aggregated set of operations on blobs.\n     */\n    createBatch() {\n        return new BlobBatch();\n    }\n    async deleteBlobs(urlsOrBlobClients, credentialOrOptions, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        const batch = new BlobBatch();\n        for (const urlOrBlobClient of urlsOrBlobClients) {\n            if (typeof urlOrBlobClient === \"string\") {\n                await batch.deleteBlob(urlOrBlobClient, credentialOrOptions, options);\n            }\n            else {\n                await batch.deleteBlob(urlOrBlobClient, credentialOrOptions);\n            }\n        }\n        return this.submitBatch(batch);\n    }\n    async setBlobsAccessTier(urlsOrBlobClients, credentialOrTier, tierOrOptions, \n    // Legacy, no fix for eslint error without breaking. Disable it for this interface.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options*/\n    options) {\n        const batch = new BlobBatch();\n        for (const urlOrBlobClient of urlsOrBlobClients) {\n            if (typeof urlOrBlobClient === \"string\") {\n                await batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions, options);\n            }\n            else {\n                await batch.setBlobAccessTier(urlOrBlobClient, credentialOrTier, tierOrOptions);\n            }\n        }\n        return this.submitBatch(batch);\n    }\n    /**\n     * Submit batch request which consists of multiple subrequests.\n     *\n     * Get `blobBatchClient` and other details before running the snippets.\n     * `blobServiceClient.getBlobBatchClient()` gives the `blobBatchClient`\n     *\n     * Example usage:\n     *\n     * ```js\n     * let batchRequest = new BlobBatch();\n     * await batchRequest.deleteBlob(urlInString0, credential0);\n     * await batchRequest.deleteBlob(urlInString1, credential1, {\n     *  deleteSnapshots: \"include\"\n     * });\n     * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n     * console.log(batchResp.subResponsesSucceededCount);\n     * ```\n     *\n     * Example using a lease:\n     *\n     * ```js\n     * let batchRequest = new BlobBatch();\n     * await batchRequest.setBlobAccessTier(blockBlobClient0, \"Cool\");\n     * await batchRequest.setBlobAccessTier(blockBlobClient1, \"Cool\", {\n     *  conditions: { leaseId: leaseId }\n     * });\n     * const batchResp = await blobBatchClient.submitBatch(batchRequest);\n     * console.log(batchResp.subResponsesSucceededCount);\n     * ```\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/blob-batch\n     *\n     * @param batchRequest - A set of Delete or SetTier operations.\n     * @param options -\n     */\n    async submitBatch(batchRequest, options = {}) {\n        if (!batchRequest || batchRequest.getSubRequests().size === 0) {\n            throw new RangeError(\"Batch request should contain one or more sub requests.\");\n        }\n        const { span, updatedOptions } = createSpan(\"BlobBatchClient-submitBatch\", options);\n        try {\n            const batchRequestBody = batchRequest.getHttpRequestBody();\n            // ServiceSubmitBatchResponseModel and ContainerSubmitBatchResponse are compatible for now.\n            const rawBatchResponse = await this.serviceOrContainerContext.submitBatch(utf8ByteLength(batchRequestBody), batchRequest.getMultiPartContentType(), batchRequestBody, Object.assign(Object.assign({}, options), convertTracingToRequestOptionsBase(updatedOptions)));\n            // Parse the sub responses result, if logic reaches here(i.e. the batch request succeeded with status code 202).\n            const batchResponseParser = new BatchResponseParser(rawBatchResponse, batchRequest.getSubRequests());\n            const responseSummary = await batchResponseParser.parseBatchResponse();\n            const res = {\n                _response: rawBatchResponse._response,\n                contentType: rawBatchResponse.contentType,\n                errorCode: rawBatchResponse.errorCode,\n                requestId: rawBatchResponse.requestId,\n                clientRequestId: rawBatchResponse.clientRequestId,\n                version: rawBatchResponse.version,\n                subResponses: responseSummary.subResponses,\n                subResponsesSucceededCount: responseSummary.subResponsesSucceededCount,\n                subResponsesFailedCount: responseSummary.subResponsesFailedCount\n            };\n            return res;\n        }\n        catch (e) {\n            span.setStatus({\n                code: SpanStatusCode.ERROR,\n                message: e.message\n            });\n            throw e;\n        }\n        finally {\n            span.end();\n        }\n    }\n}\n//# sourceMappingURL=BlobBatchClient.js.map"]},"metadata":{},"sourceType":"module"}