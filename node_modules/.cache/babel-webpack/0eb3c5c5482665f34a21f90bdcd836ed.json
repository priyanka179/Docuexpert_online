{"ast":null,"code":"import _asyncToGenerator from \"F:/statvalu/project/AR_DocuExpert_Test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AbortError } from \"@azure/abort-controller\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { Constants } from \"../util/constants\";\nimport { DEFAULT_CLIENT_MAX_RETRY_COUNT } from \"../util/throttlingRetryStrategy\";\nimport { delay } from \"../util/delay\";\nconst StatusCodes = Constants.HttpConstants.StatusCodes;\nexport function throttlingRetryPolicy() {\n  return {\n    create: (nextPolicy, options) => {\n      return new ThrottlingRetryPolicy(nextPolicy, options);\n    }\n  };\n}\nconst StandardAbortMessage = \"The operation was aborted.\";\n/**\n * To learn more, please refer to\n * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,\n * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and\n * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n */\n\nexport class ThrottlingRetryPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy, options, _handleResponse) {\n    super(nextPolicy, options);\n    this.numberOfRetries = 0;\n    this._handleResponse = _handleResponse || this._defaultResponseHandler;\n  }\n\n  sendRequest(httpRequest) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const response = yield _this._nextPolicy.sendRequest(httpRequest.clone());\n\n      if (response.status !== StatusCodes.TooManyRequests && response.status !== StatusCodes.ServiceUnavailable) {\n        return response;\n      } else {\n        return _this._handleResponse(httpRequest, response);\n      }\n    })();\n  }\n\n  _defaultResponseHandler(httpRequest, httpResponse) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      var _a;\n\n      const retryAfterHeader = httpResponse.headers.get(Constants.HeaderConstants.RETRY_AFTER);\n\n      if (retryAfterHeader) {\n        const delayInMs = ThrottlingRetryPolicy.parseRetryAfterHeader(retryAfterHeader);\n\n        if (delayInMs) {\n          _this2.numberOfRetries += 1;\n          yield delay(delayInMs, undefined, {\n            abortSignal: httpRequest.abortSignal,\n            abortErrorMsg: StandardAbortMessage\n          });\n\n          if ((_a = httpRequest.abortSignal) === null || _a === void 0 ? void 0 : _a.aborted) {\n            throw new AbortError(StandardAbortMessage);\n          }\n\n          if (_this2.numberOfRetries < DEFAULT_CLIENT_MAX_RETRY_COUNT) {\n            return _this2.sendRequest(httpRequest);\n          } else {\n            return _this2._nextPolicy.sendRequest(httpRequest);\n          }\n        }\n      }\n\n      return httpResponse;\n    })();\n  }\n\n  static parseRetryAfterHeader(headerValue) {\n    const retryAfterInSeconds = Number(headerValue);\n\n    if (Number.isNaN(retryAfterInSeconds)) {\n      return ThrottlingRetryPolicy.parseDateRetryAfterHeader(headerValue);\n    } else {\n      return retryAfterInSeconds * 1000;\n    }\n  }\n\n  static parseDateRetryAfterHeader(headerValue) {\n    try {\n      const now = Date.now();\n      const date = Date.parse(headerValue);\n      const diff = date - now;\n      return Number.isNaN(diff) ? undefined : diff;\n    } catch (error) {\n      return undefined;\n    }\n  }\n\n} //# sourceMappingURL=throttlingRetryPolicy.js.map","map":{"version":3,"sources":["F:/statvalu/project/AR_DocuExpert_Test/node_modules/@azure/core-http/dist-esm/src/policies/throttlingRetryPolicy.js"],"names":["AbortError","BaseRequestPolicy","Constants","DEFAULT_CLIENT_MAX_RETRY_COUNT","delay","StatusCodes","HttpConstants","throttlingRetryPolicy","create","nextPolicy","options","ThrottlingRetryPolicy","StandardAbortMessage","constructor","_handleResponse","numberOfRetries","_defaultResponseHandler","sendRequest","httpRequest","response","_nextPolicy","clone","status","TooManyRequests","ServiceUnavailable","httpResponse","_a","retryAfterHeader","headers","get","HeaderConstants","RETRY_AFTER","delayInMs","parseRetryAfterHeader","undefined","abortSignal","abortErrorMsg","aborted","headerValue","retryAfterInSeconds","Number","isNaN","parseDateRetryAfterHeader","now","Date","date","parse","diff","error"],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AbortError } from \"@azure/abort-controller\";\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { Constants } from \"../util/constants\";\nimport { DEFAULT_CLIENT_MAX_RETRY_COUNT } from \"../util/throttlingRetryStrategy\";\nimport { delay } from \"../util/delay\";\nconst StatusCodes = Constants.HttpConstants.StatusCodes;\nexport function throttlingRetryPolicy() {\n    return {\n        create: (nextPolicy, options) => {\n            return new ThrottlingRetryPolicy(nextPolicy, options);\n        }\n    };\n}\nconst StandardAbortMessage = \"The operation was aborted.\";\n/**\n * To learn more, please refer to\n * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,\n * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and\n * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n */\nexport class ThrottlingRetryPolicy extends BaseRequestPolicy {\n    constructor(nextPolicy, options, _handleResponse) {\n        super(nextPolicy, options);\n        this.numberOfRetries = 0;\n        this._handleResponse = _handleResponse || this._defaultResponseHandler;\n    }\n    async sendRequest(httpRequest) {\n        const response = await this._nextPolicy.sendRequest(httpRequest.clone());\n        if (response.status !== StatusCodes.TooManyRequests &&\n            response.status !== StatusCodes.ServiceUnavailable) {\n            return response;\n        }\n        else {\n            return this._handleResponse(httpRequest, response);\n        }\n    }\n    async _defaultResponseHandler(httpRequest, httpResponse) {\n        var _a;\n        const retryAfterHeader = httpResponse.headers.get(Constants.HeaderConstants.RETRY_AFTER);\n        if (retryAfterHeader) {\n            const delayInMs = ThrottlingRetryPolicy.parseRetryAfterHeader(retryAfterHeader);\n            if (delayInMs) {\n                this.numberOfRetries += 1;\n                await delay(delayInMs, undefined, {\n                    abortSignal: httpRequest.abortSignal,\n                    abortErrorMsg: StandardAbortMessage\n                });\n                if ((_a = httpRequest.abortSignal) === null || _a === void 0 ? void 0 : _a.aborted) {\n                    throw new AbortError(StandardAbortMessage);\n                }\n                if (this.numberOfRetries < DEFAULT_CLIENT_MAX_RETRY_COUNT) {\n                    return this.sendRequest(httpRequest);\n                }\n                else {\n                    return this._nextPolicy.sendRequest(httpRequest);\n                }\n            }\n        }\n        return httpResponse;\n    }\n    static parseRetryAfterHeader(headerValue) {\n        const retryAfterInSeconds = Number(headerValue);\n        if (Number.isNaN(retryAfterInSeconds)) {\n            return ThrottlingRetryPolicy.parseDateRetryAfterHeader(headerValue);\n        }\n        else {\n            return retryAfterInSeconds * 1000;\n        }\n    }\n    static parseDateRetryAfterHeader(headerValue) {\n        try {\n            const now = Date.now();\n            const date = Date.parse(headerValue);\n            const diff = date - now;\n            return Number.isNaN(diff) ? undefined : diff;\n        }\n        catch (error) {\n            return undefined;\n        }\n    }\n}\n//# sourceMappingURL=throttlingRetryPolicy.js.map"]},"metadata":{},"sourceType":"module"}