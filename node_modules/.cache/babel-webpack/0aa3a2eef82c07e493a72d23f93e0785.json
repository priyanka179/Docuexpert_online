{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, ViewEncapsulation, Inject, Input, ViewChild, HostBinding, HostListener, Injectable, ChangeDetectionStrategy, EventEmitter, Output, Directive, NgModule, ContentChild } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { isPlatformBrowser, isPlatformServer, CommonModule } from '@angular/common';\nimport { __decorate } from 'tslib';\nimport { DomPortalOutlet, ComponentPortal } from '@angular/cdk/portal';\nimport { fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport { select } from 'd3-selection';\nimport { brushX } from 'd3-brush';\nimport { scaleTime, scaleLinear, scalePoint, scaleOrdinal, scaleQuantile, scaleBand } from 'd3-scale';\nimport { area, curveLinear, line, arc, lineRadial, curveCardinalClosed, pie } from 'd3-shape';\nimport { range, min, max, quantile } from 'd3-array';\nimport { interpolate } from 'd3-interpolate';\nimport { easeSinInOut } from 'd3-ease';\nimport cloneDeep from 'clone-deep';\nimport { format } from 'd3-format';\nimport * as d3_color from 'd3-color';\nimport { treemap, stratify } from 'd3-hierarchy';\nimport { timeFormat } from 'd3-time-format';\n/**\n * Throttle a function\n *\n */\n\nconst _c0 = [\"caretElm\"];\n\nfunction TooltipContentComponent_span_4_ng_template_1_Template(rf, ctx) {}\n\nconst _c1 = function (a0) {\n  return {\n    model: a0\n  };\n};\n\nfunction TooltipContentComponent_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtemplate(1, TooltipContentComponent_span_4_ng_template_1_Template, 0, 0, \"ng-template\", 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.template)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c1, ctx_r1.context));\n  }\n}\n\nfunction TooltipContentComponent_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 6);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"innerHTML\", ctx_r2.title, i0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction LegendComponent_header_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"header\", 4);\n    i0.ɵɵelementStart(1, \"span\", 5);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.title);\n  }\n}\n\nfunction LegendComponent_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\", 6);\n    i0.ɵɵelementStart(1, \"ngx-charts-legend-entry\", 7);\n    i0.ɵɵlistener(\"select\", function LegendComponent_li_4_Template_ngx_charts_legend_entry_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.labelClick.emit($event);\n    })(\"activate\", function LegendComponent_li_4_Template_ngx_charts_legend_entry_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.activate($event);\n    })(\"deactivate\", function LegendComponent_li_4_Template_ngx_charts_legend_entry_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.deactivate($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const entry_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"label\", entry_r2.label)(\"formattedLabel\", entry_r2.formattedLabel)(\"color\", entry_r2.color)(\"isActive\", ctx_r1.isActive(entry_r2));\n  }\n}\n\nfunction ChartComponent_ngx_charts_scale_legend_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelement(0, \"ngx-charts-scale-legend\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"horizontal\", ctx_r0.legendOptions && ctx_r0.legendOptions.position === ctx_r0.LegendPosition.Below)(\"valueRange\", ctx_r0.legendOptions.domain)(\"colors\", ctx_r0.legendOptions.colors)(\"height\", ctx_r0.view[1])(\"width\", ctx_r0.legendWidth);\n  }\n}\n\nfunction ChartComponent_ngx_charts_legend_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelementStart(0, \"ngx-charts-legend\", 5);\n    i0.ɵɵlistener(\"labelClick\", function ChartComponent_ngx_charts_legend_4_Template_ngx_charts_legend_labelClick_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.legendLabelClick.emit($event);\n    })(\"labelActivate\", function ChartComponent_ngx_charts_legend_4_Template_ngx_charts_legend_labelActivate_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.legendLabelActivate.emit($event);\n    })(\"labelDeactivate\", function ChartComponent_ngx_charts_legend_4_Template_ngx_charts_legend_labelDeactivate_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.legendLabelDeactivate.emit($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"horizontal\", ctx_r1.legendOptions && ctx_r1.legendOptions.position === ctx_r1.LegendPosition.Below)(\"data\", ctx_r1.legendOptions.domain)(\"title\", ctx_r1.legendOptions.title)(\"colors\", ctx_r1.legendOptions.colors)(\"height\", ctx_r1.view[1])(\"width\", ctx_r1.legendWidth)(\"activeEntries\", ctx_r1.activeEntries);\n  }\n}\n\nconst _c2 = [\"*\"];\nconst _c3 = [\"ngx-charts-axis-label\", \"\"];\nconst _c4 = [\"ticksel\"];\nconst _c5 = [\"ngx-charts-x-axis-ticks\", \"\"];\n\nfunction XAxisTicksComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 3);\n    i0.ɵɵelementStart(1, \"title\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"text\", 4);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tick_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r1.tickTransform(tick_r3));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.tickFormat(tick_r3));\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"font-size\", \"12px\");\n    i0.ɵɵattribute(\"text-anchor\", ctx_r1.textAnchor)(\"transform\", ctx_r1.textTransform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.tickTrim(ctx_r1.tickFormat(tick_r3)), \" \");\n  }\n}\n\nfunction XAxisTicksComponent__svg_g_3__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"line\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"transform\", ctx_r5.gridLineTransform());\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"y1\", -ctx_r5.gridLineHeight);\n  }\n}\n\nfunction XAxisTicksComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, XAxisTicksComponent__svg_g_3__svg_g_1_Template, 2, 2, \"g\", 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tick_r4 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r2.tickTransform(tick_r4));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.showGridLines);\n  }\n}\n\nconst _c6 = [\"ngx-charts-x-axis\", \"\"];\n\nfunction XAxisComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"dimensionsChanged\", function XAxisComponent__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.emitTicksHeight($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"trimTicks\", ctx_r0.trimTicks)(\"rotateTicks\", ctx_r0.rotateTicks)(\"maxTickLength\", ctx_r0.maxTickLength)(\"tickFormatting\", ctx_r0.tickFormatting)(\"tickArguments\", ctx_r0.tickArguments)(\"tickStroke\", ctx_r0.tickStroke)(\"scale\", ctx_r0.xScale)(\"orient\", ctx_r0.xOrient)(\"showGridLines\", ctx_r0.showGridLines)(\"gridLineHeight\", ctx_r0.dims.height)(\"width\", ctx_r0.dims.width)(\"tickValues\", ctx_r0.ticks);\n  }\n}\n\nfunction XAxisComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 3);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"label\", ctx_r1.labelText)(\"offset\", ctx_r1.labelOffset)(\"orient\", ctx_r1.orientation.Bottom)(\"height\", ctx_r1.dims.height)(\"width\", ctx_r1.dims.width);\n  }\n}\n\nconst _c7 = [\"ngx-charts-y-axis-ticks\", \"\"];\n\nfunction YAxisTicksComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 4);\n    i0.ɵɵelementStart(1, \"title\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"text\", 5);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tick_r5 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r1.transform(tick_r5));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.tickFormat(tick_r5));\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"font-size\", \"12px\");\n    i0.ɵɵattribute(\"dy\", ctx_r1.dy)(\"x\", ctx_r1.x1)(\"y\", ctx_r1.y1)(\"text-anchor\", ctx_r1.textAnchor);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.tickTrim(ctx_r1.tickFormat(tick_r5)), \" \");\n  }\n}\n\nfunction YAxisTicksComponent__svg_path_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"path\", 6);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"d\", ctx_r2.referenceAreaPath)(\"transform\", ctx_r2.gridLineTransform());\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"line\", 9);\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(3);\n    i0.ɵɵattribute(\"x2\", ctx_r8.gridLineWidth);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"line\", 9);\n  }\n\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(3);\n    i0.ɵɵattribute(\"x2\", -ctx_r9.gridLineWidth);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_4__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_1_Template, 1, 1, \"line\", 8);\n    i0.ɵɵtemplate(2, YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_2_Template, 1, 1, \"line\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"transform\", ctx_r7.gridLineTransform());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r7.orient === ctx_r7.Orientation.Left);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r7.orient === ctx_r7.Orientation.Right);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_4__svg_g_1_Template, 3, 3, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tick_r6 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r3.transform(tick_r6));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.showGridLines);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_5__svg_g_1__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"title\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"text\", 11);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const refLine_r10 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r12 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r12.tickTrim(ctx_r12.tickFormat(refLine_r10.value)));\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"dy\", ctx_r12.dy)(\"y\", -6)(\"x\", ctx_r12.gridLineWidth)(\"text-anchor\", ctx_r12.textAnchor);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", refLine_r10.name, \" \");\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"line\", 10);\n    i0.ɵɵtemplate(2, YAxisTicksComponent__svg_g_5__svg_g_1__svg_g_2_Template, 5, 6, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const refLine_r10 = i0.ɵɵnextContext().$implicit;\n    const ctx_r11 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r11.transform(refLine_r10.value));\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"x2\", ctx_r11.gridLineWidth)(\"transform\", ctx_r11.gridLineTransform());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r11.showRefLabels);\n  }\n}\n\nfunction YAxisTicksComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, YAxisTicksComponent__svg_g_5__svg_g_1_Template, 3, 4, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.showRefLines);\n  }\n}\n\nconst _c8 = [\"ngx-charts-y-axis\", \"\"];\n\nfunction YAxisComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"dimensionsChanged\", function YAxisComponent__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.emitTicksWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"trimTicks\", ctx_r0.trimTicks)(\"maxTickLength\", ctx_r0.maxTickLength)(\"tickFormatting\", ctx_r0.tickFormatting)(\"tickArguments\", ctx_r0.tickArguments)(\"tickValues\", ctx_r0.ticks)(\"tickStroke\", ctx_r0.tickStroke)(\"scale\", ctx_r0.yScale)(\"orient\", ctx_r0.yOrient)(\"showGridLines\", ctx_r0.showGridLines)(\"gridLineWidth\", ctx_r0.dims.width)(\"referenceLines\", ctx_r0.referenceLines)(\"showRefLines\", ctx_r0.showRefLines)(\"showRefLabels\", ctx_r0.showRefLabels)(\"height\", ctx_r0.dims.height);\n  }\n}\n\nfunction YAxisComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 3);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"label\", ctx_r1.labelText)(\"offset\", ctx_r1.labelOffset)(\"orient\", ctx_r1.yOrient)(\"height\", ctx_r1.dims.height)(\"width\", ctx_r1.dims.width);\n  }\n}\n\nconst _c9 = [\"ngx-charts-svg-linear-gradient\", \"\"];\n\nfunction SvgLinearGradientComponent__svg_stop_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"stop\");\n  }\n\n  if (rf & 2) {\n    const stop_r1 = ctx.$implicit;\n    i0.ɵɵstyleProp(\"stop-color\", stop_r1.color)(\"stop-opacity\", stop_r1.opacity);\n    i0.ɵɵattribute(\"offset\", stop_r1.offset + \"%\");\n  }\n}\n\nconst _c10 = [\"ngx-charts-circle\", \"\"];\nconst _c11 = [\"ngx-charts-circle-series\", \"\"];\n\nfunction CircleSeriesComponent__svg_g_0__svg_rect_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"rect\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"x\", ctx_r1.circle.cx - ctx_r1.circle.radius)(\"y\", ctx_r1.circle.cy)(\"width\", ctx_r1.circle.radius * 2)(\"height\", ctx_r1.circle.height)(\"fill\", ctx_r1.gradientFill);\n  }\n}\n\nfunction CircleSeriesComponent__svg_g_0__svg_rect_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"rect\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"x\", ctx_r2.circle.cx - ctx_r2.circle.radius)(\"y\", ctx_r2.circle.cy)(\"width\", ctx_r2.circle.radius * 2)(\"height\", ctx_r2.circle.height)(\"fill\", ctx_r2.gradientFill);\n  }\n}\n\nconst _c12 = function (a0) {\n  return {\n    name: a0\n  };\n};\n\nfunction CircleSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"defs\");\n    i0.ɵɵelement(2, \"g\", 1);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(3, CircleSeriesComponent__svg_g_0__svg_rect_3_Template, 1, 6, \"rect\", 2);\n    i0.ɵɵtemplate(4, CircleSeriesComponent__svg_g_0__svg_rect_4_Template, 1, 5, \"rect\", 2);\n    i0.ɵɵelementStart(5, \"g\", 3);\n    i0.ɵɵlistener(\"select\", function CircleSeriesComponent__svg_g_0_Template__svg_g_select_5_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.onClick(ctx_r3.circle.data);\n    })(\"activate\", function CircleSeriesComponent__svg_g_0_Template__svg_g_activate_5_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.activateCircle();\n    })(\"deactivate\", function CircleSeriesComponent__svg_g_0_Template__svg_g_deactivate_5_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.deactivateCircle();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"orientation\", ctx_r0.barOrientation.Vertical)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.circle.gradientStops);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.isSSR && ctx_r0.barVisible && ctx_r0.type === \"standard\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isSSR && ctx_r0.barVisible && ctx_r0.type === \"standard\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"active\", ctx_r0.isActive(i0.ɵɵpureFunction1(20, _c12, ctx_r0.circle.seriesName)));\n    i0.ɵɵproperty(\"cx\", ctx_r0.circle.cx)(\"cy\", ctx_r0.circle.cy)(\"r\", ctx_r0.circle.radius)(\"fill\", ctx_r0.circle.color)(\"pointerEvents\", ctx_r0.circle.value === 0 ? \"none\" : \"all\")(\"data\", ctx_r0.circle.value)(\"classNames\", ctx_r0.circle.classNames)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.placementTypes.Top)(\"tooltipType\", ctx_r0.styleTypes.tooltip)(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : ctx_r0.getTooltipText(ctx_r0.circle))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", ctx_r0.circle.data);\n  }\n}\n\nconst _c13 = [\"ngx-charts-grid-panel\", \"\"];\nconst _c14 = [\"ngx-charts-grid-panel-series\", \"\"];\n\nfunction GridPanelSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 1);\n  }\n\n  if (rf & 2) {\n    const gridPanel_r1 = ctx.$implicit;\n    i0.ɵɵclassProp(\"grid-panel\", true)(\"odd\", gridPanel_r1.class === \"odd\")(\"even\", gridPanel_r1.class === \"even\");\n    i0.ɵɵproperty(\"height\", gridPanel_r1.height)(\"width\", gridPanel_r1.width)(\"x\", gridPanel_r1.x)(\"y\", gridPanel_r1.y);\n  }\n}\n\nconst _c15 = [\"ngx-charts-svg-radial-gradient\", \"\"];\n\nfunction SvgRadialGradientComponent__svg_stop_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"stop\");\n  }\n\n  if (rf & 2) {\n    const stop_r1 = ctx.$implicit;\n    i0.ɵɵstyleProp(\"stop-color\", stop_r1.color)(\"stop-opacity\", stop_r1.opacity);\n    i0.ɵɵattribute(\"offset\", stop_r1.offset + \"%\");\n  }\n}\n\nconst _c16 = [\"ngx-charts-area\", \"\"];\n\nfunction AreaComponent__svg_defs_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"defs\");\n    i0.ɵɵelement(1, \"g\", 2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"orientation\", ctx_r0.barOrientation.Vertical)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nconst _c17 = [\"ngx-charts-count-up\", \"\"];\nconst _c18 = [\"tooltipAnchor\"];\nconst _c19 = [\"ngx-charts-tooltip-area\", \"\"];\n\nfunction TooltipArea__svg_ng_template_2__xhtml_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵelement(1, \"span\", 7);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tooltipItem_r5 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"background-color\", tooltipItem_r5.color);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r4.getToolTipText(tooltipItem_r5), \" \");\n  }\n}\n\nfunction TooltipArea__svg_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtemplate(1, TooltipArea__svg_ng_template_2__xhtml_div_1_Template, 3, 3, \"div\", 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const model_r3 = ctx.model;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", model_r3);\n  }\n}\n\nconst _c20 = [\"ngx-charts-timeline\", \"\"];\n\nfunction AdvancedLegendComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 7);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"countTo\", ctx_r0.roundedTotal)(\"valueFormatting\", ctx_r0.valueFormatting);\n  }\n}\n\nfunction AdvancedLegendComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.valueFormatting ? ctx_r1.valueFormatting(ctx_r1.roundedTotal) : ctx_r1.defaultValueFormatting(ctx_r1.roundedTotal), \" \");\n  }\n}\n\nfunction AdvancedLegendComponent_div_7_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 16);\n  }\n\n  if (rf & 2) {\n    const legendItem_r3 = i0.ɵɵnextContext().$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"countTo\", legendItem_r3._value)(\"valueFormatting\", ctx_r4.valueFormatting);\n  }\n}\n\nfunction AdvancedLegendComponent_div_7_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const legendItem_r3 = i0.ɵɵnextContext().$implicit;\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r5.valueFormatting ? ctx_r5.valueFormatting(legendItem_r3.value) : ctx_r5.defaultValueFormatting(legendItem_r3.value), \" \");\n  }\n}\n\nfunction AdvancedLegendComponent_div_7_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 18);\n  }\n\n  if (rf & 2) {\n    const legendItem_r3 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"countTo\", legendItem_r3.percentage)(\"countSuffix\", \"%\");\n  }\n}\n\nfunction AdvancedLegendComponent_div_7_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const legendItem_r3 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", legendItem_r3.percentage.toLocaleString(), \"%\");\n  }\n}\n\nfunction AdvancedLegendComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵlistener(\"mouseenter\", function AdvancedLegendComponent_div_7_Template_div_mouseenter_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const legendItem_r3 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.activate.emit(legendItem_r3.data);\n    })(\"mouseleave\", function AdvancedLegendComponent_div_7_Template_div_mouseleave_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const legendItem_r3 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.deactivate.emit(legendItem_r3.data);\n    })(\"click\", function AdvancedLegendComponent_div_7_Template_div_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const legendItem_r3 = restoredCtx.$implicit;\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.select.emit(legendItem_r3.data);\n    });\n    i0.ɵɵelement(1, \"div\", 10);\n    i0.ɵɵtemplate(2, AdvancedLegendComponent_div_7_div_2_Template, 1, 2, \"div\", 11);\n    i0.ɵɵtemplate(3, AdvancedLegendComponent_div_7_div_3_Template, 2, 1, \"div\", 12);\n    i0.ɵɵelementStart(4, \"div\", 13);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, AdvancedLegendComponent_div_7_div_6_Template, 1, 2, \"div\", 14);\n    i0.ɵɵtemplate(7, AdvancedLegendComponent_div_7_div_7_Template, 2, 1, \"div\", 15);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const legendItem_r3 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"border-left-color\", legendItem_r3.color);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.animations);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.animations);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(legendItem_r3.displayLabel);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.animations);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.animations);\n  }\n}\n\nconst _c21 = [\"ngx-charts-area-series\", \"\"];\nconst _c22 = [\"tooltipTemplate\"];\nconst _c23 = [\"seriesTooltipTemplate\"];\n\nfunction AreaChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function AreaChartComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.updateXAxisHeight($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction AreaChartComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 8);\n    i0.ɵɵlistener(\"dimensionsChanged\", function AreaChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.updateYAxisWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction AreaChartComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r9 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"baseValue\", ctx_r2.baseValue)(\"colors\", ctx_r2.colors)(\"data\", series_r9)(\"activeEntries\", ctx_r2.activeEntries)(\"scaleType\", ctx_r2.scaleType)(\"gradient\", ctx_r2.gradient)(\"curve\", ctx_r2.curve)(\"animations\", ctx_r2.animations);\n  }\n}\n\nfunction AreaChartComponent__svg_g_9__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 13);\n    i0.ɵɵlistener(\"select\", function AreaChartComponent__svg_g_9__svg_g_2_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const series_r11 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return ctx_r12.onClick($event, series_r11);\n    })(\"activate\", function AreaChartComponent__svg_g_9__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return ctx_r14.onActivate($event);\n    })(\"deactivate\", function AreaChartComponent__svg_g_9__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return ctx_r15.onDeactivate($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r11 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r10.xScale)(\"yScale\", ctx_r10.yScale)(\"colors\", ctx_r10.colors)(\"activeEntries\", ctx_r10.activeEntries)(\"data\", series_r11)(\"scaleType\", ctx_r10.scaleType)(\"visibleValue\", ctx_r10.hoveredVertical)(\"tooltipDisabled\", ctx_r10.tooltipDisabled)(\"tooltipTemplate\", ctx_r10.tooltipTemplate);\n  }\n}\n\nfunction AreaChartComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 10);\n    i0.ɵɵlistener(\"mouseleave\", function AreaChartComponent__svg_g_9_Template__svg_g_mouseleave_0_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.hideCircles();\n    });\n    i0.ɵɵelementStart(1, \"g\", 11);\n    i0.ɵɵlistener(\"hover\", function AreaChartComponent__svg_g_9_Template__svg_g_hover_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.updateHoveredVertical($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, AreaChartComponent__svg_g_9__svg_g_2_Template, 2, 9, \"g\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"dims\", ctx_r3.dims)(\"xSet\", ctx_r3.xSet)(\"xScale\", ctx_r3.xScale)(\"yScale\", ctx_r3.yScale)(\"results\", ctx_r3.results)(\"colors\", ctx_r3.colors)(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipTemplate\", ctx_r3.seriesTooltipTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results);\n  }\n}\n\nfunction AreaChartComponent__svg_g_10__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 15);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r20 = ctx.$implicit;\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r19.timelineXScale)(\"yScale\", ctx_r19.timelineYScale)(\"baseValue\", ctx_r19.baseValue)(\"colors\", ctx_r19.colors)(\"data\", series_r20)(\"scaleType\", ctx_r19.scaleType)(\"gradient\", ctx_r19.gradient)(\"curve\", ctx_r19.curve)(\"animations\", ctx_r19.animations);\n  }\n}\n\nconst _c24 = function (a0, a1) {\n  return [a0, a1];\n};\n\nfunction AreaChartComponent__svg_g_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 14);\n    i0.ɵɵlistener(\"onDomainChange\", function AreaChartComponent__svg_g_10_Template__svg_g_onDomainChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.updateDomain($event);\n    });\n    i0.ɵɵtemplate(1, AreaChartComponent__svg_g_10__svg_g_1_Template, 2, 9, \"g\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"results\", ctx_r4.results)(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx_r4.timelineWidth, ctx_r4.height))(\"height\", ctx_r4.timelineHeight)(\"scheme\", ctx_r4.scheme)(\"customColors\", ctx_r4.customColors)(\"legend\", ctx_r4.legend)(\"scaleType\", ctx_r4.scaleType);\n    i0.ɵɵattribute(\"transform\", ctx_r4.timelineTransform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.results)(\"ngForTrackBy\", ctx_r4.trackBy);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function AreaChartNormalizedComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.updateXAxisHeight($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 8);\n    i0.ɵɵlistener(\"dimensionsChanged\", function AreaChartNormalizedComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.updateYAxisWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r9 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"colors\", ctx_r2.colors)(\"data\", series_r9)(\"scaleType\", ctx_r2.scaleType)(\"activeEntries\", ctx_r2.activeEntries)(\"gradient\", ctx_r2.gradient)(\"normalized\", true)(\"curve\", ctx_r2.curve)(\"animations\", ctx_r2.animations);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 13);\n    i0.ɵɵlistener(\"select\", function AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const series_r11 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return ctx_r12.onClick($event, series_r11);\n    })(\"activate\", function AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return ctx_r14.onActivate($event);\n    })(\"deactivate\", function AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return ctx_r15.onDeactivate($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r11 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r10.seriesType.Stacked)(\"xScale\", ctx_r10.xScale)(\"yScale\", ctx_r10.yScale)(\"colors\", ctx_r10.colors)(\"activeEntries\", ctx_r10.activeEntries)(\"data\", series_r11)(\"scaleType\", ctx_r10.scaleType)(\"visibleValue\", ctx_r10.hoveredVertical)(\"tooltipDisabled\", ctx_r10.tooltipDisabled)(\"tooltipTemplate\", ctx_r10.tooltipTemplate);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 10);\n    i0.ɵɵlistener(\"mouseleave\", function AreaChartNormalizedComponent__svg_g_9_Template__svg_g_mouseleave_0_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.hideCircles();\n    });\n    i0.ɵɵelementStart(1, \"g\", 11);\n    i0.ɵɵlistener(\"hover\", function AreaChartNormalizedComponent__svg_g_9_Template__svg_g_hover_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.updateHoveredVertical($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, AreaChartNormalizedComponent__svg_g_9__svg_g_2_Template, 2, 10, \"g\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"dims\", ctx_r3.dims)(\"xSet\", ctx_r3.xSet)(\"xScale\", ctx_r3.xScale)(\"yScale\", ctx_r3.yScale)(\"results\", ctx_r3.results)(\"colors\", ctx_r3.colors)(\"showPercentage\", true)(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipTemplate\", ctx_r3.seriesTooltipTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_10__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 15);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r20 = ctx.$implicit;\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r19.timelineXScale)(\"yScale\", ctx_r19.timelineYScale)(\"colors\", ctx_r19.colors)(\"data\", series_r20)(\"scaleType\", ctx_r19.scaleType)(\"gradient\", ctx_r19.gradient)(\"normalized\", true)(\"curve\", ctx_r19.curve)(\"animations\", ctx_r19.animations);\n  }\n}\n\nfunction AreaChartNormalizedComponent__svg_g_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 14);\n    i0.ɵɵlistener(\"onDomainChange\", function AreaChartNormalizedComponent__svg_g_10_Template__svg_g_onDomainChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.updateDomain($event);\n    });\n    i0.ɵɵtemplate(1, AreaChartNormalizedComponent__svg_g_10__svg_g_1_Template, 2, 9, \"g\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"results\", ctx_r4.results)(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx_r4.timelineWidth, ctx_r4.height))(\"height\", ctx_r4.timelineHeight)(\"scheme\", ctx_r4.scheme)(\"customColors\", ctx_r4.customColors)(\"legend\", ctx_r4.legend)(\"scaleType\", ctx_r4.scaleType);\n    i0.ɵɵattribute(\"transform\", ctx_r4.timelineTransform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.results)(\"ngForTrackBy\", ctx_r4.trackBy);\n  }\n}\n\nconst _c25 = \".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\";\n\nfunction AreaChartStackedComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function AreaChartStackedComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.updateXAxisHeight($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 8);\n    i0.ɵɵlistener(\"dimensionsChanged\", function AreaChartStackedComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.updateYAxisWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r9 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r2.xScale)(\"yScale\", ctx_r2.yScale)(\"colors\", ctx_r2.colors)(\"data\", series_r9)(\"scaleType\", ctx_r2.scaleType)(\"gradient\", ctx_r2.gradient)(\"activeEntries\", ctx_r2.activeEntries)(\"stacked\", true)(\"curve\", ctx_r2.curve)(\"animations\", ctx_r2.animations);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_9__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 12);\n    i0.ɵɵlistener(\"select\", function AreaChartStackedComponent__svg_g_9__svg_g_2_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const series_r11 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return ctx_r12.onClick($event, series_r11);\n    })(\"activate\", function AreaChartStackedComponent__svg_g_9__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return ctx_r14.onActivate($event);\n    })(\"deactivate\", function AreaChartStackedComponent__svg_g_9__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return ctx_r15.onDeactivate($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r11 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r10.seriesType.Stacked)(\"xScale\", ctx_r10.xScale)(\"yScale\", ctx_r10.yScale)(\"colors\", ctx_r10.colors)(\"activeEntries\", ctx_r10.activeEntries)(\"data\", series_r11)(\"scaleType\", ctx_r10.scaleType)(\"visibleValue\", ctx_r10.hoveredVertical)(\"tooltipDisabled\", ctx_r10.tooltipDisabled)(\"tooltipTemplate\", ctx_r10.tooltipTemplate);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 10);\n    i0.ɵɵlistener(\"mouseleave\", function AreaChartStackedComponent__svg_g_9_Template__svg_g_mouseleave_0_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.hideCircles();\n    });\n    i0.ɵɵelementStart(1, \"g\", 11);\n    i0.ɵɵlistener(\"hover\", function AreaChartStackedComponent__svg_g_9_Template__svg_g_hover_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.updateHoveredVertical($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, AreaChartStackedComponent__svg_g_9__svg_g_2_Template, 2, 10, \"g\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"dims\", ctx_r3.dims)(\"xSet\", ctx_r3.xSet)(\"xScale\", ctx_r3.xScale)(\"yScale\", ctx_r3.yScale)(\"results\", ctx_r3.results)(\"colors\", ctx_r3.colors)(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipTemplate\", ctx_r3.seriesTooltipTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_10__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 14);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r20 = ctx.$implicit;\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r19.timelineXScale)(\"yScale\", ctx_r19.timelineYScale)(\"colors\", ctx_r19.colors)(\"data\", series_r20)(\"scaleType\", ctx_r19.scaleType)(\"gradient\", ctx_r19.gradient)(\"stacked\", true)(\"curve\", ctx_r19.curve)(\"animations\", ctx_r19.animations);\n  }\n}\n\nfunction AreaChartStackedComponent__svg_g_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 13);\n    i0.ɵɵlistener(\"onDomainChange\", function AreaChartStackedComponent__svg_g_10_Template__svg_g_onDomainChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.updateDomain($event);\n    });\n    i0.ɵɵtemplate(1, AreaChartStackedComponent__svg_g_10__svg_g_1_Template, 2, 9, \"g\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"results\", ctx_r4.results)(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx_r4.timelineWidth, ctx_r4.height))(\"height\", ctx_r4.timelineHeight)(\"scheme\", ctx_r4.scheme)(\"customColors\", ctx_r4.customColors)(\"legend\", ctx_r4.legend)(\"scaleType\", ctx_r4.scaleType);\n    i0.ɵɵattribute(\"transform\", ctx_r4.timelineTransform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.results)(\"ngForTrackBy\", ctx_r4.trackBy);\n  }\n}\n\nconst _c26 = [\"ngx-charts-bar\", \"\"];\n\nfunction BarComponent__svg_defs_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"defs\");\n    i0.ɵɵelement(1, \"g\", 2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"orientation\", ctx_r0.orientation)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nconst _c27 = [\"ngx-charts-bar-label\", \"\"];\nconst _c28 = [\"ngx-charts-series-horizontal\", \"\"];\n\nfunction SeriesHorizontal__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function SeriesHorizontal__svg_g_0_Template__svg_g_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.click($event);\n    })(\"activate\", function SeriesHorizontal__svg_g_0_Template__svg_g_activate_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.activate.emit($event);\n    })(\"deactivate\", function SeriesHorizontal__svg_g_0_Template__svg_g_deactivate_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.deactivate.emit($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const bar_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@animationState\", \"active\")(\"width\", bar_r2.width)(\"height\", bar_r2.height)(\"x\", bar_r2.x)(\"y\", bar_r2.y)(\"fill\", bar_r2.color)(\"stops\", bar_r2.gradientStops)(\"data\", bar_r2.data)(\"orientation\", ctx_r0.barOrientation.Horizontal)(\"roundEdges\", bar_r2.roundEdges)(\"gradient\", ctx_r0.gradient)(\"isActive\", ctx_r0.isActive(bar_r2.data))(\"ariaLabel\", bar_r2.ariaLabel)(\"animations\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.tooltipPlacement)(\"tooltipType\", ctx_r0.tooltipType)(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : bar_r2.tooltipText)(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", bar_r2.data)(\"noBarWhenZero\", ctx_r0.noBarWhenZero);\n  }\n}\n\nfunction SeriesHorizontal__svg_g_1__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 4);\n    i0.ɵɵlistener(\"dimensionsChanged\", function SeriesHorizontal__svg_g_1__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const i_r9 = restoredCtx.index;\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return ctx_r10.dataLabelWidthChanged.emit({\n        size: $event,\n        index: i_r9\n      });\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const b_r8 = ctx.$implicit;\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"barX\", b_r8.x)(\"barY\", b_r8.y)(\"barWidth\", b_r8.width)(\"barHeight\", b_r8.height)(\"value\", b_r8.total)(\"valueFormatting\", ctx_r7.dataLabelFormatting)(\"orientation\", ctx_r7.barOrientation.Horizontal);\n  }\n}\n\nfunction SeriesHorizontal__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, SeriesHorizontal__svg_g_1__svg_g_1_Template, 1, 7, \"g\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.barsForDataLabels)(\"ngForTrackBy\", ctx_r1.trackDataLabelBy);\n  }\n}\n\nfunction BarHorizontalComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.updateXAxisHeight($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction BarHorizontalComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.updateYAxisWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"yAxisOffset\", ctx_r1.dataLabelMaxWidth.negative);\n  }\n}\n\nfunction BarHorizontal2DComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontal2DComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.updateXAxisHeight($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.valueScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction BarHorizontal2DComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontal2DComponent__svg_g_4_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.updateYAxisWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.groupScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"yAxisOffset\", ctx_r1.dataLabelMaxWidth.negative);\n  }\n}\n\nfunction BarHorizontal2DComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 9);\n    i0.ɵɵlistener(\"select\", function BarHorizontal2DComponent__svg_g_5__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return ctx_r11.onClick($event, group_r9);\n    })(\"activate\", function BarHorizontal2DComponent__svg_g_5__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return ctx_r13.onActivate($event, group_r9);\n    })(\"deactivate\", function BarHorizontal2DComponent__svg_g_5__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return ctx_r14.onDeactivate($event, group_r9);\n    })(\"dataLabelWidthChanged\", function BarHorizontal2DComponent__svg_g_5__svg_g_1_Template__svg_g_dataLabelWidthChanged_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const index_r10 = restoredCtx.index;\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return ctx_r15.onDataLabelMaxWidthChanged($event, index_r10);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const group_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"transform\", ctx_r8.groupTransform(group_r9));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r8.valueScale)(\"activeEntries\", ctx_r8.activeEntries)(\"yScale\", ctx_r8.innerScale)(\"colors\", ctx_r8.colors)(\"series\", group_r9.series)(\"dims\", ctx_r8.dims)(\"gradient\", ctx_r8.gradient)(\"tooltipDisabled\", ctx_r8.tooltipDisabled)(\"tooltipTemplate\", ctx_r8.tooltipTemplate)(\"seriesName\", group_r9.name)(\"roundEdges\", ctx_r8.roundEdges)(\"animations\", ctx_r8.animations)(\"showDataLabel\", ctx_r8.showDataLabel)(\"dataLabelFormatting\", ctx_r8.dataLabelFormatting)(\"noBarWhenZero\", ctx_r8.noBarWhenZero);\n  }\n}\n\nfunction BarHorizontal2DComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarHorizontal2DComponent__svg_g_5__svg_g_1_Template, 2, 17, \"g\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.results)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\n\nfunction BarHorizontal2DComponent__svg_g_6__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 9);\n    i0.ɵɵlistener(\"select\", function BarHorizontal2DComponent__svg_g_6__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return ctx_r19.onClick($event, group_r17);\n    })(\"activate\", function BarHorizontal2DComponent__svg_g_6__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r21 = i0.ɵɵnextContext(2);\n      return ctx_r21.onActivate($event, group_r17);\n    })(\"deactivate\", function BarHorizontal2DComponent__svg_g_6__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return ctx_r22.onDeactivate($event, group_r17);\n    })(\"dataLabelWidthChanged\", function BarHorizontal2DComponent__svg_g_6__svg_g_1_Template__svg_g_dataLabelWidthChanged_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const index_r18 = restoredCtx.index;\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return ctx_r23.onDataLabelMaxWidthChanged($event, index_r18);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const group_r17 = ctx.$implicit;\n    const ctx_r16 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"transform\", ctx_r16.groupTransform(group_r17));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r16.valueScale)(\"activeEntries\", ctx_r16.activeEntries)(\"yScale\", ctx_r16.innerScale)(\"colors\", ctx_r16.colors)(\"series\", group_r17.series)(\"dims\", ctx_r16.dims)(\"gradient\", ctx_r16.gradient)(\"tooltipDisabled\", ctx_r16.tooltipDisabled)(\"tooltipTemplate\", ctx_r16.tooltipTemplate)(\"seriesName\", group_r17.name)(\"roundEdges\", ctx_r16.roundEdges)(\"animations\", ctx_r16.animations)(\"showDataLabel\", ctx_r16.showDataLabel)(\"dataLabelFormatting\", ctx_r16.dataLabelFormatting)(\"noBarWhenZero\", ctx_r16.noBarWhenZero);\n  }\n}\n\nfunction BarHorizontal2DComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarHorizontal2DComponent__svg_g_6__svg_g_1_Template, 2, 16, \"g\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\n\nfunction BarHorizontalNormalizedComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalNormalizedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.updateXAxisHeight($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction BarHorizontalNormalizedComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalNormalizedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.updateYAxisWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction BarHorizontalNormalizedComponent__svg_g_4__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarHorizontalNormalizedComponent__svg_g_4__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return ctx_r10.onClick($event, group_r9);\n    })(\"activate\", function BarHorizontalNormalizedComponent__svg_g_4__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return ctx_r12.onActivate($event, group_r9);\n    })(\"deactivate\", function BarHorizontalNormalizedComponent__svg_g_4__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return ctx_r13.onDeactivate($event, group_r9);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const group_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"transform\", ctx_r8.groupTransform(group_r9));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r8.barChartType.Normalized)(\"xScale\", ctx_r8.xScale)(\"yScale\", ctx_r8.yScale)(\"activeEntries\", ctx_r8.activeEntries)(\"colors\", ctx_r8.colors)(\"series\", group_r9.series)(\"dims\", ctx_r8.dims)(\"gradient\", ctx_r8.gradient)(\"tooltipDisabled\", ctx_r8.tooltipDisabled)(\"tooltipTemplate\", ctx_r8.tooltipTemplate)(\"seriesName\", group_r9.name)(\"animations\", ctx_r8.animations)(\"noBarWhenZero\", ctx_r8.noBarWhenZero);\n  }\n}\n\nfunction BarHorizontalNormalizedComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarHorizontalNormalizedComponent__svg_g_4__svg_g_1_Template, 2, 15, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.results)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\n\nfunction BarHorizontalNormalizedComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarHorizontalNormalizedComponent__svg_g_5__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const group_r15 = restoredCtx.$implicit;\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return ctx_r16.onClick($event, group_r15);\n    })(\"activate\", function BarHorizontalNormalizedComponent__svg_g_5__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const group_r15 = restoredCtx.$implicit;\n      const ctx_r18 = i0.ɵɵnextContext(2);\n      return ctx_r18.onActivate($event, group_r15);\n    })(\"deactivate\", function BarHorizontalNormalizedComponent__svg_g_5__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const group_r15 = restoredCtx.$implicit;\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return ctx_r19.onDeactivate($event, group_r15);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const group_r15 = ctx.$implicit;\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"transform\", ctx_r14.groupTransform(group_r15));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r14.barChartType.Normalized)(\"xScale\", ctx_r14.xScale)(\"yScale\", ctx_r14.yScale)(\"activeEntries\", ctx_r14.activeEntries)(\"colors\", ctx_r14.colors)(\"series\", group_r15.series)(\"dims\", ctx_r14.dims)(\"gradient\", ctx_r14.gradient)(\"tooltipDisabled\", ctx_r14.tooltipDisabled)(\"tooltipTemplate\", ctx_r14.tooltipTemplate)(\"seriesName\", group_r15.name)(\"animations\", ctx_r14.animations)(\"noBarWhenZero\", ctx_r14.noBarWhenZero);\n  }\n}\n\nfunction BarHorizontalNormalizedComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarHorizontalNormalizedComponent__svg_g_5__svg_g_1_Template, 2, 14, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\n\nfunction BarHorizontalStackedComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalStackedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.updateXAxisHeight($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction BarHorizontalStackedComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarHorizontalStackedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.updateYAxisWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"yAxisOffset\", ctx_r1.dataLabelMaxWidth.negative);\n  }\n}\n\nfunction BarHorizontalStackedComponent__svg_g_4__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarHorizontalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return ctx_r11.onClick($event, group_r9);\n    })(\"activate\", function BarHorizontalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return ctx_r13.onActivate($event, group_r9);\n    })(\"deactivate\", function BarHorizontalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return ctx_r14.onDeactivate($event, group_r9);\n    })(\"dataLabelWidthChanged\", function BarHorizontalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_dataLabelWidthChanged_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const index_r10 = restoredCtx.index;\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return ctx_r15.onDataLabelMaxWidthChanged($event, index_r10);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const group_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"transform\", ctx_r8.groupTransform(group_r9));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r8.barChartType.Stacked)(\"xScale\", ctx_r8.xScale)(\"yScale\", ctx_r8.yScale)(\"colors\", ctx_r8.colors)(\"series\", group_r9.series)(\"activeEntries\", ctx_r8.activeEntries)(\"dims\", ctx_r8.dims)(\"gradient\", ctx_r8.gradient)(\"tooltipDisabled\", ctx_r8.tooltipDisabled)(\"tooltipTemplate\", ctx_r8.tooltipTemplate)(\"seriesName\", group_r9.name)(\"animations\", ctx_r8.animations)(\"showDataLabel\", ctx_r8.showDataLabel)(\"dataLabelFormatting\", ctx_r8.dataLabelFormatting)(\"noBarWhenZero\", ctx_r8.noBarWhenZero);\n  }\n}\n\nfunction BarHorizontalStackedComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarHorizontalStackedComponent__svg_g_4__svg_g_1_Template, 2, 17, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.results)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\n\nfunction BarHorizontalStackedComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarHorizontalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return ctx_r19.onClick($event, group_r17);\n    })(\"activate\", function BarHorizontalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r21 = i0.ɵɵnextContext(2);\n      return ctx_r21.onActivate($event, group_r17);\n    })(\"deactivate\", function BarHorizontalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return ctx_r22.onDeactivate($event, group_r17);\n    })(\"dataLabelWidthChanged\", function BarHorizontalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_dataLabelWidthChanged_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const index_r18 = restoredCtx.index;\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return ctx_r23.onDataLabelMaxWidthChanged($event, index_r18);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const group_r17 = ctx.$implicit;\n    const ctx_r16 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"transform\", ctx_r16.groupTransform(group_r17));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r16.barChartType.Stacked)(\"xScale\", ctx_r16.xScale)(\"yScale\", ctx_r16.yScale)(\"colors\", ctx_r16.colors)(\"series\", group_r17.series)(\"activeEntries\", ctx_r16.activeEntries)(\"dims\", ctx_r16.dims)(\"gradient\", ctx_r16.gradient)(\"tooltipDisabled\", ctx_r16.tooltipDisabled)(\"tooltipTemplate\", ctx_r16.tooltipTemplate)(\"seriesName\", group_r17.name)(\"animations\", ctx_r16.animations)(\"showDataLabel\", ctx_r16.showDataLabel)(\"dataLabelFormatting\", ctx_r16.dataLabelFormatting)(\"noBarWhenZero\", ctx_r16.noBarWhenZero);\n  }\n}\n\nfunction BarHorizontalStackedComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarHorizontalStackedComponent__svg_g_5__svg_g_1_Template, 2, 16, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\n\nconst _c29 = [\"ngx-charts-series-vertical\", \"\"];\n\nfunction SeriesVerticalComponent__svg_g_0__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function SeriesVerticalComponent__svg_g_0__svg_g_1_Template__svg_g_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return ctx_r5.onClick($event);\n    })(\"activate\", function SeriesVerticalComponent__svg_g_0__svg_g_1_Template__svg_g_activate_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return ctx_r7.activate.emit($event);\n    })(\"deactivate\", function SeriesVerticalComponent__svg_g_0__svg_g_1_Template__svg_g_deactivate_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return ctx_r8.deactivate.emit($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const bar_r4 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\")(\"@.disabled\", !ctx_r3.animations)(\"width\", bar_r4.width)(\"height\", bar_r4.height)(\"x\", bar_r4.x)(\"y\", bar_r4.y)(\"fill\", bar_r4.color)(\"stops\", bar_r4.gradientStops)(\"data\", bar_r4.data)(\"orientation\", ctx_r3.barOrientation.Vertical)(\"roundEdges\", bar_r4.roundEdges)(\"gradient\", ctx_r3.gradient)(\"ariaLabel\", bar_r4.ariaLabel)(\"isActive\", ctx_r3.isActive(bar_r4.data))(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipPlacement\", ctx_r3.tooltipPlacement)(\"tooltipType\", ctx_r3.tooltipType)(\"tooltipTitle\", ctx_r3.tooltipTemplate ? undefined : bar_r4.tooltipText)(\"tooltipTemplate\", ctx_r3.tooltipTemplate)(\"tooltipContext\", bar_r4.data)(\"noBarWhenZero\", ctx_r3.noBarWhenZero)(\"animations\", ctx_r3.animations);\n  }\n}\n\nfunction SeriesVerticalComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, SeriesVerticalComponent__svg_g_0__svg_g_1_Template, 1, 22, \"g\", 1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.bars)(\"ngForTrackBy\", ctx_r0.trackBy);\n  }\n}\n\nfunction SeriesVerticalComponent__svg_g_1__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function SeriesVerticalComponent__svg_g_1__svg_g_1_Template__svg_g_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return ctx_r11.onClick($event);\n    })(\"activate\", function SeriesVerticalComponent__svg_g_1__svg_g_1_Template__svg_g_activate_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return ctx_r13.activate.emit($event);\n    })(\"deactivate\", function SeriesVerticalComponent__svg_g_1__svg_g_1_Template__svg_g_deactivate_0_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return ctx_r14.deactivate.emit($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const bar_r10 = ctx.$implicit;\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"width\", bar_r10.width)(\"height\", bar_r10.height)(\"x\", bar_r10.x)(\"y\", bar_r10.y)(\"fill\", bar_r10.color)(\"stops\", bar_r10.gradientStops)(\"data\", bar_r10.data)(\"orientation\", ctx_r9.barOrientation.Vertical)(\"roundEdges\", bar_r10.roundEdges)(\"gradient\", ctx_r9.gradient)(\"ariaLabel\", bar_r10.ariaLabel)(\"isActive\", ctx_r9.isActive(bar_r10.data))(\"tooltipDisabled\", ctx_r9.tooltipDisabled)(\"tooltipPlacement\", ctx_r9.tooltipPlacement)(\"tooltipType\", ctx_r9.tooltipType)(\"tooltipTitle\", ctx_r9.tooltipTemplate ? undefined : bar_r10.tooltipText)(\"tooltipTemplate\", ctx_r9.tooltipTemplate)(\"tooltipContext\", bar_r10.data)(\"noBarWhenZero\", ctx_r9.noBarWhenZero)(\"animations\", ctx_r9.animations);\n  }\n}\n\nfunction SeriesVerticalComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, SeriesVerticalComponent__svg_g_1__svg_g_1_Template, 1, 20, \"g\", 1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.bars)(\"ngForTrackBy\", ctx_r1.trackBy);\n  }\n}\n\nfunction SeriesVerticalComponent__svg_g_2__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 4);\n    i0.ɵɵlistener(\"dimensionsChanged\", function SeriesVerticalComponent__svg_g_2__svg_g_1_Template__svg_g_dimensionsChanged_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r19);\n      const i_r17 = restoredCtx.index;\n      const ctx_r18 = i0.ɵɵnextContext(2);\n      return ctx_r18.dataLabelHeightChanged.emit({\n        size: $event,\n        index: i_r17\n      });\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const b_r16 = ctx.$implicit;\n    const ctx_r15 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"barX\", b_r16.x)(\"barY\", b_r16.y)(\"barWidth\", b_r16.width)(\"barHeight\", b_r16.height)(\"value\", b_r16.total)(\"valueFormatting\", ctx_r15.dataLabelFormatting)(\"orientation\", ctx_r15.barOrientation.Vertical);\n  }\n}\n\nfunction SeriesVerticalComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, SeriesVerticalComponent__svg_g_2__svg_g_1_Template, 1, 7, \"g\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.barsForDataLabels)(\"ngForTrackBy\", ctx_r2.trackDataLabelBy);\n  }\n}\n\nfunction BarVerticalComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.updateXAxisHeight($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"xAxisOffset\", ctx_r0.dataLabelMaxHeight.negative);\n  }\n}\n\nfunction BarVerticalComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.updateYAxisWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction BarVertical2DComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVertical2DComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.updateXAxisHeight($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.groupScale)(\"dims\", ctx_r0.dims)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"xAxisOffset\", ctx_r0.dataLabelMaxHeight.negative);\n  }\n}\n\nfunction BarVertical2DComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVertical2DComponent__svg_g_4_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.updateYAxisWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.valueScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction BarVertical2DComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 9);\n    i0.ɵɵlistener(\"select\", function BarVertical2DComponent__svg_g_5__svg_g_1_Template__svg_g_select_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return ctx_r11.onClick($event, group_r9);\n    })(\"activate\", function BarVertical2DComponent__svg_g_5__svg_g_1_Template__svg_g_activate_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return ctx_r13.onActivate($event, group_r9);\n    })(\"deactivate\", function BarVertical2DComponent__svg_g_5__svg_g_1_Template__svg_g_deactivate_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return ctx_r14.onDeactivate($event, group_r9);\n    })(\"dataLabelHeightChanged\", function BarVertical2DComponent__svg_g_5__svg_g_1_Template__svg_g_dataLabelHeightChanged_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const index_r10 = restoredCtx.index;\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return ctx_r15.onDataLabelMaxHeightChanged($event, index_r10);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const group_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\")(\"activeEntries\", ctx_r8.activeEntries)(\"xScale\", ctx_r8.innerScale)(\"yScale\", ctx_r8.valueScale)(\"colors\", ctx_r8.colors)(\"series\", group_r9.series)(\"dims\", ctx_r8.dims)(\"gradient\", ctx_r8.gradient)(\"tooltipDisabled\", ctx_r8.tooltipDisabled)(\"tooltipTemplate\", ctx_r8.tooltipTemplate)(\"showDataLabel\", ctx_r8.showDataLabel)(\"dataLabelFormatting\", ctx_r8.dataLabelFormatting)(\"seriesName\", group_r9.name)(\"roundEdges\", ctx_r8.roundEdges)(\"animations\", ctx_r8.animations)(\"noBarWhenZero\", ctx_r8.noBarWhenZero);\n    i0.ɵɵattribute(\"transform\", ctx_r8.groupTransform(group_r9));\n  }\n}\n\nfunction BarVertical2DComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarVertical2DComponent__svg_g_5__svg_g_1_Template, 1, 17, \"g\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.results)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\n\nfunction BarVertical2DComponent__svg_g_6__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 9);\n    i0.ɵɵlistener(\"select\", function BarVertical2DComponent__svg_g_6__svg_g_1_Template__svg_g_select_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return ctx_r19.onClick($event, group_r17);\n    })(\"activate\", function BarVertical2DComponent__svg_g_6__svg_g_1_Template__svg_g_activate_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r21 = i0.ɵɵnextContext(2);\n      return ctx_r21.onActivate($event, group_r17);\n    })(\"deactivate\", function BarVertical2DComponent__svg_g_6__svg_g_1_Template__svg_g_deactivate_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return ctx_r22.onDeactivate($event, group_r17);\n    })(\"dataLabelHeightChanged\", function BarVertical2DComponent__svg_g_6__svg_g_1_Template__svg_g_dataLabelHeightChanged_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const index_r18 = restoredCtx.index;\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return ctx_r23.onDataLabelMaxHeightChanged($event, index_r18);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const group_r17 = ctx.$implicit;\n    const ctx_r16 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"activeEntries\", ctx_r16.activeEntries)(\"xScale\", ctx_r16.innerScale)(\"yScale\", ctx_r16.valueScale)(\"colors\", ctx_r16.colors)(\"series\", group_r17.series)(\"dims\", ctx_r16.dims)(\"gradient\", ctx_r16.gradient)(\"tooltipDisabled\", ctx_r16.tooltipDisabled)(\"tooltipTemplate\", ctx_r16.tooltipTemplate)(\"showDataLabel\", ctx_r16.showDataLabel)(\"dataLabelFormatting\", ctx_r16.dataLabelFormatting)(\"seriesName\", group_r17.name)(\"roundEdges\", ctx_r16.roundEdges)(\"animations\", ctx_r16.animations)(\"noBarWhenZero\", ctx_r16.noBarWhenZero);\n    i0.ɵɵattribute(\"transform\", ctx_r16.groupTransform(group_r17));\n  }\n}\n\nfunction BarVertical2DComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarVertical2DComponent__svg_g_6__svg_g_1_Template, 1, 16, \"g\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\n\nfunction BarVerticalNormalizedComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalNormalizedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.updateXAxisHeight($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction BarVerticalNormalizedComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalNormalizedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.updateYAxisWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction BarVerticalNormalizedComponent__svg_g_4__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarVerticalNormalizedComponent__svg_g_4__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return ctx_r10.onClick($event, group_r9);\n    })(\"activate\", function BarVerticalNormalizedComponent__svg_g_4__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return ctx_r12.onActivate($event, group_r9);\n    })(\"deactivate\", function BarVerticalNormalizedComponent__svg_g_4__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return ctx_r13.onDeactivate($event, group_r9);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const group_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"transform\", ctx_r8.groupTransform(group_r9));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r8.barChartType.Normalized)(\"xScale\", ctx_r8.xScale)(\"yScale\", ctx_r8.yScale)(\"activeEntries\", ctx_r8.activeEntries)(\"colors\", ctx_r8.colors)(\"series\", group_r9.series)(\"dims\", ctx_r8.dims)(\"gradient\", ctx_r8.gradient)(\"tooltipDisabled\", ctx_r8.tooltipDisabled)(\"tooltipTemplate\", ctx_r8.tooltipTemplate)(\"seriesName\", group_r9.name)(\"animations\", ctx_r8.animations)(\"noBarWhenZero\", ctx_r8.noBarWhenZero);\n  }\n}\n\nfunction BarVerticalNormalizedComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarVerticalNormalizedComponent__svg_g_4__svg_g_1_Template, 2, 15, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.results)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\n\nfunction BarVerticalNormalizedComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarVerticalNormalizedComponent__svg_g_5__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const group_r15 = restoredCtx.$implicit;\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return ctx_r16.onClick($event, group_r15);\n    })(\"activate\", function BarVerticalNormalizedComponent__svg_g_5__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const group_r15 = restoredCtx.$implicit;\n      const ctx_r18 = i0.ɵɵnextContext(2);\n      return ctx_r18.onActivate($event, group_r15);\n    })(\"deactivate\", function BarVerticalNormalizedComponent__svg_g_5__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const group_r15 = restoredCtx.$implicit;\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return ctx_r19.onDeactivate($event, group_r15);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const group_r15 = ctx.$implicit;\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"transform\", ctx_r14.groupTransform(group_r15));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r14.barChartType.Normalized)(\"xScale\", ctx_r14.xScale)(\"yScale\", ctx_r14.yScale)(\"activeEntries\", ctx_r14.activeEntries)(\"colors\", ctx_r14.colors)(\"series\", group_r15.series)(\"dims\", ctx_r14.dims)(\"gradient\", ctx_r14.gradient)(\"tooltipDisabled\", ctx_r14.tooltipDisabled)(\"tooltipTemplate\", ctx_r14.tooltipTemplate)(\"seriesName\", group_r15.name)(\"animations\", ctx_r14.animations)(\"noBarWhenZero\", ctx_r14.noBarWhenZero);\n  }\n}\n\nfunction BarVerticalNormalizedComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarVerticalNormalizedComponent__svg_g_5__svg_g_1_Template, 2, 14, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\n\nfunction BarVerticalStackedComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalStackedComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.updateXAxisHeight($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks)(\"xAxisOffset\", ctx_r0.dataLabelMaxHeight.negative);\n  }\n}\n\nfunction BarVerticalStackedComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BarVerticalStackedComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.updateYAxisWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction BarVerticalStackedComponent__svg_g_4__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarVerticalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return ctx_r11.onClick($event, group_r9);\n    })(\"activate\", function BarVerticalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return ctx_r13.onActivate($event, group_r9);\n    })(\"deactivate\", function BarVerticalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const group_r9 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return ctx_r14.onDeactivate($event, group_r9);\n    })(\"dataLabelHeightChanged\", function BarVerticalStackedComponent__svg_g_4__svg_g_1_Template__svg_g_dataLabelHeightChanged_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const index_r10 = restoredCtx.index;\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return ctx_r15.onDataLabelMaxHeightChanged($event, index_r10);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const group_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"transform\", ctx_r8.groupTransform(group_r9));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r8.barChartType.Stacked)(\"xScale\", ctx_r8.xScale)(\"yScale\", ctx_r8.yScale)(\"activeEntries\", ctx_r8.activeEntries)(\"colors\", ctx_r8.colors)(\"series\", group_r9.series)(\"dims\", ctx_r8.dims)(\"gradient\", ctx_r8.gradient)(\"tooltipDisabled\", ctx_r8.tooltipDisabled)(\"tooltipTemplate\", ctx_r8.tooltipTemplate)(\"showDataLabel\", ctx_r8.showDataLabel)(\"dataLabelFormatting\", ctx_r8.dataLabelFormatting)(\"seriesName\", group_r9.name)(\"animations\", ctx_r8.animations)(\"noBarWhenZero\", ctx_r8.noBarWhenZero);\n  }\n}\n\nfunction BarVerticalStackedComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarVerticalStackedComponent__svg_g_4__svg_g_1_Template, 2, 17, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.results)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\n\nfunction BarVerticalStackedComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 8);\n    i0.ɵɵlistener(\"select\", function BarVerticalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return ctx_r19.onClick($event, group_r17);\n    })(\"activate\", function BarVerticalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r21 = i0.ɵɵnextContext(2);\n      return ctx_r21.onActivate($event, group_r17);\n    })(\"deactivate\", function BarVerticalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const group_r17 = restoredCtx.$implicit;\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return ctx_r22.onDeactivate($event, group_r17);\n    })(\"dataLabelHeightChanged\", function BarVerticalStackedComponent__svg_g_5__svg_g_1_Template__svg_g_dataLabelHeightChanged_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const index_r18 = restoredCtx.index;\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return ctx_r23.onDataLabelMaxHeightChanged($event, index_r18);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const group_r17 = ctx.$implicit;\n    const ctx_r16 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"transform\", ctx_r16.groupTransform(group_r17));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"type\", ctx_r16.barChartType.Stacked)(\"xScale\", ctx_r16.xScale)(\"yScale\", ctx_r16.yScale)(\"activeEntries\", ctx_r16.activeEntries)(\"colors\", ctx_r16.colors)(\"series\", group_r17.series)(\"dims\", ctx_r16.dims)(\"gradient\", ctx_r16.gradient)(\"tooltipDisabled\", ctx_r16.tooltipDisabled)(\"tooltipTemplate\", ctx_r16.tooltipTemplate)(\"showDataLabel\", ctx_r16.showDataLabel)(\"dataLabelFormatting\", ctx_r16.dataLabelFormatting)(\"seriesName\", group_r17.name)(\"animations\", ctx_r16.animations)(\"noBarWhenZero\", ctx_r16.noBarWhenZero);\n  }\n}\n\nfunction BarVerticalStackedComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BarVerticalStackedComponent__svg_g_5__svg_g_1_Template, 2, 16, \"g\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\n\nconst _c30 = [\"ngx-charts-box\", \"\"];\n\nfunction BoxComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 5);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"orientation\", ctx_r0.BarOrientation.Vertical)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nfunction BoxComponent__svg_line_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"line\", 6);\n  }\n\n  if (rf & 2) {\n    const line_r2 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"hidden\", ctx_r1.hideBar);\n    i0.ɵɵattribute(\"x1\", line_r2.v1.x)(\"y1\", line_r2.v1.y)(\"x2\", line_r2.v2.x)(\"y2\", line_r2.v2.y)(\"stroke\", ctx_r1.strokeColor)(\"stroke-width\", i_r3 === 2 ? ctx_r1.medianLineWidth : ctx_r1.whiskerStrokeWidth)(\"mask\", i_r3 ? undefined : ctx_r1.maskLine);\n  }\n}\n\nconst _c31 = [\"ngx-charts-box-series\", \"\"];\n\nfunction BoxChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 5);\n    i0.ɵɵlistener(\"activate\", function BoxChartComponent__svg_g_5_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.onActivate($event);\n    })(\"deactivate\", function BoxChartComponent__svg_g_5_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.onDeactivate($event);\n    })(\"select\", function BoxChartComponent__svg_g_5_Template__svg_g_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.onClick($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const result_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"yScale\", ctx_r0.yScale)(\"colors\", ctx_r0.colors)(\"roundEdges\", ctx_r0.roundEdges)(\"strokeColor\", ctx_r0.strokeColor)(\"strokeWidth\", ctx_r0.strokeWidth)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"series\", result_r1)(\"dims\", ctx_r0.dims)(\"animations\", ctx_r0.animations)(\"gradient\", ctx_r0.gradient);\n  }\n}\n\nconst _c32 = [\"ngx-charts-bubble-series\", \"\"];\n\nfunction BubbleSeriesComponent__svg_g_0__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function BubbleSeriesComponent__svg_g_0__svg_g_2_Template__svg_g_select_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const circle_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.onClick(circle_r1.data);\n    })(\"activate\", function BubbleSeriesComponent__svg_g_0__svg_g_2_Template__svg_g_activate_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const circle_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.activateCircle(circle_r1);\n    })(\"deactivate\", function BubbleSeriesComponent__svg_g_0__svg_g_2_Template__svg_g_deactivate_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const circle_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.deactivateCircle(circle_r1);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const circle_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"opacity\", circle_r1.opacity);\n    i0.ɵɵclassProp(\"active\", circle_r1.isActive);\n    i0.ɵɵproperty(\"@animationState\", \"active\")(\"cx\", 0)(\"cy\", 0)(\"r\", circle_r1.radius)(\"fill\", circle_r1.color)(\"pointerEvents\", \"all\")(\"data\", circle_r1.value)(\"classNames\", circle_r1.classNames)(\"tooltipDisabled\", ctx_r2.tooltipDisabled)(\"tooltipPlacement\", ctx_r2.placementTypes.Top)(\"tooltipType\", ctx_r2.styleTypes.tooltip)(\"tooltipTitle\", ctx_r2.tooltipTemplate ? undefined : ctx_r2.getTooltipText(circle_r1))(\"tooltipTemplate\", ctx_r2.tooltipTemplate)(\"tooltipContext\", circle_r1.data);\n  }\n}\n\nfunction BubbleSeriesComponent__svg_g_0__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function BubbleSeriesComponent__svg_g_0__svg_g_3_Template__svg_g_select_0_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const circle_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.onClick(circle_r1.data);\n    })(\"activate\", function BubbleSeriesComponent__svg_g_0__svg_g_3_Template__svg_g_activate_0_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const circle_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.activateCircle(circle_r1);\n    })(\"deactivate\", function BubbleSeriesComponent__svg_g_0__svg_g_3_Template__svg_g_deactivate_0_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const circle_r1 = i0.ɵɵnextContext().$implicit;\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.deactivateCircle(circle_r1);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const circle_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"opacity\", circle_r1.opacity);\n    i0.ɵɵclassProp(\"active\", circle_r1.isActive);\n    i0.ɵɵproperty(\"cx\", 0)(\"cy\", 0)(\"r\", circle_r1.radius)(\"fill\", circle_r1.color)(\"pointerEvents\", \"all\")(\"data\", circle_r1.value)(\"classNames\", circle_r1.classNames)(\"tooltipDisabled\", ctx_r3.tooltipDisabled)(\"tooltipPlacement\", ctx_r3.placementTypes.Top)(\"tooltipType\", ctx_r3.styleTypes.tooltip)(\"tooltipTitle\", ctx_r3.tooltipTemplate ? undefined : ctx_r3.getTooltipText(circle_r1))(\"tooltipTemplate\", ctx_r3.tooltipTemplate)(\"tooltipContext\", circle_r1.data);\n  }\n}\n\nfunction BubbleSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\");\n    i0.ɵɵtemplate(2, BubbleSeriesComponent__svg_g_0__svg_g_2_Template, 1, 18, \"g\", 1);\n    i0.ɵɵtemplate(3, BubbleSeriesComponent__svg_g_0__svg_g_3_Template, 1, 17, \"g\", 1);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const circle_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"transform\", circle_r1.transform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.isSSR);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isSSR);\n  }\n}\n\nfunction BubbleChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BubbleChartComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.updateXAxisHeight($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"showGridLines\", ctx_r0.showGridLines)(\"dims\", ctx_r0.dims)(\"xScale\", ctx_r0.xScale)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction BubbleChartComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function BubbleChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.updateYAxisWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"showGridLines\", ctx_r1.showGridLines)(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction BubbleChartComponent__svg_g_8__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 9);\n    i0.ɵɵlistener(\"select\", function BubbleChartComponent__svg_g_8__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const series_r9 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return ctx_r10.onClick($event, series_r9);\n    })(\"activate\", function BubbleChartComponent__svg_g_8__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return ctx_r12.onActivate($event);\n    })(\"deactivate\", function BubbleChartComponent__svg_g_8__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return ctx_r13.onDeactivate($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r8.xScale)(\"yScale\", ctx_r8.yScale)(\"rScale\", ctx_r8.rScale)(\"xScaleType\", ctx_r8.xScaleType)(\"yScaleType\", ctx_r8.yScaleType)(\"xAxisLabel\", ctx_r8.xAxisLabel)(\"yAxisLabel\", ctx_r8.yAxisLabel)(\"colors\", ctx_r8.colors)(\"data\", series_r9)(\"activeEntries\", ctx_r8.activeEntries)(\"tooltipDisabled\", ctx_r8.tooltipDisabled)(\"tooltipTemplate\", ctx_r8.tooltipTemplate);\n  }\n}\n\nfunction BubbleChartComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BubbleChartComponent__svg_g_8__svg_g_1_Template, 2, 13, \"g\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"clip-path\", ctx_r2.clipPath);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.data)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\n\nfunction BubbleChartComponent__svg_g_9__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 9);\n    i0.ɵɵlistener(\"select\", function BubbleChartComponent__svg_g_9__svg_g_1_Template__svg_g_select_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const series_r15 = restoredCtx.$implicit;\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return ctx_r16.onClick($event, series_r15);\n    })(\"activate\", function BubbleChartComponent__svg_g_9__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext(2);\n      return ctx_r18.onActivate($event);\n    })(\"deactivate\", function BubbleChartComponent__svg_g_9__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return ctx_r19.onDeactivate($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r15 = ctx.$implicit;\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r14.xScale)(\"yScale\", ctx_r14.yScale)(\"rScale\", ctx_r14.rScale)(\"xScaleType\", ctx_r14.xScaleType)(\"yScaleType\", ctx_r14.yScaleType)(\"xAxisLabel\", ctx_r14.xAxisLabel)(\"yAxisLabel\", ctx_r14.yAxisLabel)(\"colors\", ctx_r14.colors)(\"data\", series_r15)(\"activeEntries\", ctx_r14.activeEntries)(\"tooltipDisabled\", ctx_r14.tooltipDisabled)(\"tooltipTemplate\", ctx_r14.tooltipTemplate);\n  }\n}\n\nfunction BubbleChartComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, BubbleChartComponent__svg_g_9__svg_g_1_Template, 2, 12, \"g\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"clip-path\", ctx_r3.clipPath);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.data)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\n\nconst _c33 = [\"ngx-charts-heat-map-cell\", \"\"];\n\nfunction HeatMapCellComponent__svg_defs_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"defs\");\n    i0.ɵɵelement(1, \"g\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"orientation\", ctx_r0.barOrientation.Vertical)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nconst _c34 = [\"ngx-charts-heat-map-cell-series\", \"\"];\n\nconst _c35 = function (a0, a1, a2) {\n  return {\n    series: a0,\n    name: a1,\n    value: a2\n  };\n};\n\nfunction HeatCellSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 1);\n    i0.ɵɵlistener(\"select\", function HeatCellSeriesComponent__svg_g_0_Template__svg_g_select_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const c_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.onClick(c_r1.cell);\n    })(\"activate\", function HeatCellSeriesComponent__svg_g_0_Template__svg_g_activate_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const c_r1 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.activate.emit(c_r1.cell);\n    })(\"deactivate\", function HeatCellSeriesComponent__svg_g_0_Template__svg_g_deactivate_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const c_r1 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.deactivate.emit(c_r1.cell);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const c_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"x\", c_r1.x)(\"y\", c_r1.y)(\"width\", c_r1.width)(\"height\", c_r1.height)(\"fill\", c_r1.fill)(\"data\", c_r1.data)(\"gradient\", ctx_r0.gradient)(\"animations\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.placementTypes.Top)(\"tooltipType\", ctx_r0.styleTypes.tooltip)(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : ctx_r0.tooltipText(c_r1))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", i0.ɵɵpureFunction3(14, _c35, c_r1.series, c_r1.label, c_r1.data));\n  }\n}\n\nfunction HeatMapComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 6);\n    i0.ɵɵlistener(\"dimensionsChanged\", function HeatMapComponent__svg_g_2_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.updateXAxisHeight($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction HeatMapComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function HeatMapComponent__svg_g_3_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.updateYAxisWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks);\n  }\n}\n\nfunction HeatMapComponent__svg_rect_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"rect\");\n  }\n\n  if (rf & 2) {\n    const rect_r7 = ctx.$implicit;\n    i0.ɵɵattribute(\"x\", rect_r7.x)(\"y\", rect_r7.y)(\"rx\", rect_r7.rx)(\"width\", rect_r7.width)(\"height\", rect_r7.height)(\"fill\", rect_r7.fill);\n  }\n}\n\nconst _c36 = [\"ngx-charts-line\", \"\"];\n\nfunction LineComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"path\", 1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵattribute(\"d\", ctx_r0.initialPath)(\"fill\", ctx_r0.fill)(\"stroke\", ctx_r0.stroke);\n  }\n}\n\nfunction LineComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"path\", 1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"d\", ctx_r1.initialPath)(\"fill\", ctx_r1.fill)(\"stroke\", ctx_r1.stroke);\n  }\n}\n\nconst _c37 = [\"ngx-charts-line-series\", \"\"];\n\nfunction LineSeriesComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"orientation\", ctx_r0.barOrientation.Vertical)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nfunction LineSeriesComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 5);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"active\", ctx_r1.isActive(ctx_r1.data))(\"inactive\", ctx_r1.isInactive(ctx_r1.data));\n    i0.ɵɵproperty(\"data\", ctx_r1.data)(\"path\", ctx_r1.outerPath)(\"fill\", ctx_r1.hasGradient ? ctx_r1.gradientUrl : ctx_r1.colors.getColor(ctx_r1.data.name))(\"opacity\", ctx_r1.rangeFillOpacity)(\"animations\", ctx_r1.animations);\n  }\n}\n\nfunction LineChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 7);\n    i0.ɵɵlistener(\"dimensionsChanged\", function LineChartComponent__svg_g_5_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.updateXAxisHeight($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"xScale\", ctx_r0.xScale)(\"dims\", ctx_r0.dims)(\"showGridLines\", ctx_r0.showGridLines)(\"showLabel\", ctx_r0.showXAxisLabel)(\"labelText\", ctx_r0.xAxisLabel)(\"trimTicks\", ctx_r0.trimXAxisTicks)(\"rotateTicks\", ctx_r0.rotateXAxisTicks)(\"maxTickLength\", ctx_r0.maxXAxisTickLength)(\"tickFormatting\", ctx_r0.xAxisTickFormatting)(\"ticks\", ctx_r0.xAxisTicks);\n  }\n}\n\nfunction LineChartComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 8);\n    i0.ɵɵlistener(\"dimensionsChanged\", function LineChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.updateYAxisWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r1.yScale)(\"dims\", ctx_r1.dims)(\"showGridLines\", ctx_r1.showGridLines)(\"showLabel\", ctx_r1.showYAxisLabel)(\"labelText\", ctx_r1.yAxisLabel)(\"trimTicks\", ctx_r1.trimYAxisTicks)(\"maxTickLength\", ctx_r1.maxYAxisTickLength)(\"tickFormatting\", ctx_r1.yAxisTickFormatting)(\"ticks\", ctx_r1.yAxisTicks)(\"referenceLines\", ctx_r1.referenceLines)(\"showRefLines\", ctx_r1.showRefLines)(\"showRefLabels\", ctx_r1.showRefLabels);\n  }\n}\n\nfunction LineChartComponent__svg_g_8__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 10);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r11 = ctx.$implicit;\n    const ctx_r10 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r10.xScale)(\"yScale\", ctx_r10.yScale)(\"colors\", ctx_r10.colors)(\"data\", series_r11)(\"activeEntries\", ctx_r10.activeEntries)(\"scaleType\", ctx_r10.scaleType)(\"curve\", ctx_r10.curve)(\"rangeFillOpacity\", ctx_r10.rangeFillOpacity)(\"hasRange\", ctx_r10.hasRange)(\"animations\", ctx_r10.animations);\n  }\n}\n\nfunction LineChartComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, LineChartComponent__svg_g_8__svg_g_1_Template, 2, 11, \"g\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.results)(\"ngForTrackBy\", ctx_r2.trackBy);\n  }\n}\n\nfunction LineChartComponent__svg_g_9__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 10);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r13 = ctx.$implicit;\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r12.xScale)(\"yScale\", ctx_r12.yScale)(\"colors\", ctx_r12.colors)(\"data\", series_r13)(\"activeEntries\", ctx_r12.activeEntries)(\"scaleType\", ctx_r12.scaleType)(\"curve\", ctx_r12.curve)(\"rangeFillOpacity\", ctx_r12.rangeFillOpacity)(\"hasRange\", ctx_r12.hasRange)(\"animations\", ctx_r12.animations);\n  }\n}\n\nfunction LineChartComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, LineChartComponent__svg_g_9__svg_g_1_Template, 2, 10, \"g\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.results)(\"ngForTrackBy\", ctx_r3.trackBy);\n  }\n}\n\nfunction LineChartComponent__svg_g_10__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 14);\n    i0.ɵɵlistener(\"select\", function LineChartComponent__svg_g_10__svg_g_2_Template__svg_g_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return ctx_r16.onClick($event);\n    })(\"activate\", function LineChartComponent__svg_g_10__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext(2);\n      return ctx_r18.onActivate($event);\n    })(\"deactivate\", function LineChartComponent__svg_g_10__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return ctx_r19.onDeactivate($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r15 = ctx.$implicit;\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r14.xScale)(\"yScale\", ctx_r14.yScale)(\"colors\", ctx_r14.colors)(\"data\", series_r15)(\"scaleType\", ctx_r14.scaleType)(\"visibleValue\", ctx_r14.hoveredVertical)(\"activeEntries\", ctx_r14.activeEntries)(\"tooltipDisabled\", ctx_r14.tooltipDisabled)(\"tooltipTemplate\", ctx_r14.tooltipTemplate);\n  }\n}\n\nfunction LineChartComponent__svg_g_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 11);\n    i0.ɵɵlistener(\"mouseleave\", function LineChartComponent__svg_g_10_Template__svg_g_mouseleave_0_listener() {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return ctx_r20.hideCircles();\n    });\n    i0.ɵɵelementStart(1, \"g\", 12);\n    i0.ɵɵlistener(\"hover\", function LineChartComponent__svg_g_10_Template__svg_g_hover_1_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return ctx_r22.updateHoveredVertical($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, LineChartComponent__svg_g_10__svg_g_2_Template, 2, 9, \"g\", 13);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"dims\", ctx_r4.dims)(\"xSet\", ctx_r4.xSet)(\"xScale\", ctx_r4.xScale)(\"yScale\", ctx_r4.yScale)(\"results\", ctx_r4.results)(\"colors\", ctx_r4.colors)(\"tooltipDisabled\", ctx_r4.tooltipDisabled)(\"tooltipTemplate\", ctx_r4.seriesTooltipTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.results);\n  }\n}\n\nfunction LineChartComponent__svg_g_11__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelement(1, \"g\", 16);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r24 = ctx.$implicit;\n    const ctx_r23 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"xScale\", ctx_r23.timelineXScale)(\"yScale\", ctx_r23.timelineYScale)(\"colors\", ctx_r23.colors)(\"data\", series_r24)(\"scaleType\", ctx_r23.scaleType)(\"curve\", ctx_r23.curve)(\"hasRange\", ctx_r23.hasRange)(\"animations\", ctx_r23.animations);\n  }\n}\n\nfunction LineChartComponent__svg_g_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r26 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 15);\n    i0.ɵɵlistener(\"onDomainChange\", function LineChartComponent__svg_g_11_Template__svg_g_onDomainChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r26);\n      const ctx_r25 = i0.ɵɵnextContext();\n      return ctx_r25.updateDomain($event);\n    });\n    i0.ɵɵtemplate(1, LineChartComponent__svg_g_11__svg_g_1_Template, 2, 8, \"g\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"results\", ctx_r5.results)(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx_r5.timelineWidth, ctx_r5.height))(\"height\", ctx_r5.timelineHeight)(\"scheme\", ctx_r5.scheme)(\"customColors\", ctx_r5.customColors)(\"scaleType\", ctx_r5.scaleType)(\"legend\", ctx_r5.legend);\n    i0.ɵɵattribute(\"transform\", ctx_r5.timelineTransform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r5.results)(\"ngForTrackBy\", ctx_r5.trackBy);\n  }\n}\n\nconst _c38 = [\"ngx-charts-pie-label\", \"\"];\nconst _c39 = [\"ngx-charts-polar-series\", \"\"];\n\nfunction PolarSeriesComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"color\", ctx_r0.seriesColor)(\"name\", ctx_r0.gradientId)(\"startOpacity\", 0.25)(\"endOpacity\", 1)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nfunction PolarSeriesComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 5);\n    i0.ɵɵlistener(\"select\", function PolarSeriesComponent__svg_g_4_Template__svg_g_select_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const circle_r2 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.select.emit(circle_r2.data);\n    })(\"activate\", function PolarSeriesComponent__svg_g_4_Template__svg_g_activate_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const circle_r2 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.activate.emit({\n        name: circle_r2.data.series\n      });\n    })(\"deactivate\", function PolarSeriesComponent__svg_g_4_Template__svg_g_deactivate_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const circle_r2 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.deactivate.emit({\n        name: circle_r2.data.series\n      });\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const circle_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"opacity\", ctx_r1.inactive ? 0.2 : 1);\n    i0.ɵɵproperty(\"cx\", circle_r2.cx)(\"cy\", circle_r2.cy)(\"r\", ctx_r1.circleRadius)(\"fill\", circle_r2.color)(\"tooltipDisabled\", ctx_r1.tooltipDisabled)(\"tooltipPlacement\", ctx_r1.placementTypes.Top)(\"tooltipType\", ctx_r1.styleTypes.tooltip)(\"tooltipTitle\", ctx_r1.tooltipTemplate ? undefined : ctx_r1.tooltipText(circle_r2))(\"tooltipTemplate\", ctx_r1.tooltipTemplate)(\"tooltipContext\", circle_r2.data);\n  }\n}\n\nfunction PolarChartComponent__svg_g_4__svg_circle_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"circle\", 7);\n  }\n\n  if (rf & 2) {\n    const r_r7 = ctx.$implicit;\n    i0.ɵɵattribute(\"r\", r_r7);\n  }\n}\n\nfunction PolarChartComponent__svg_g_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, PolarChartComponent__svg_g_4__svg_circle_1_Template, 1, 1, \"circle\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.radiusTicks);\n  }\n}\n\nfunction PolarChartComponent__svg_g_5__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 9);\n  }\n\n  if (rf & 2) {\n    const tick_r9 = ctx.$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"data\", tick_r9)(\"radius\", ctx_r8.outerRadius)(\"label\", tick_r9.label)(\"max\", ctx_r8.outerRadius)(\"value\", ctx_r8.showGridLines ? 1 : ctx_r8.outerRadius)(\"explodeSlices\", true)(\"animations\", ctx_r8.animations)(\"labelTrim\", ctx_r8.labelTrim)(\"labelTrimSize\", ctx_r8.labelTrimSize);\n  }\n}\n\nfunction PolarChartComponent__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, PolarChartComponent__svg_g_5__svg_g_1_Template, 1, 9, \"g\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.thetaTicks);\n  }\n}\n\nfunction PolarChartComponent__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 10);\n    i0.ɵɵlistener(\"dimensionsChanged\", function PolarChartComponent__svg_g_6_Template__svg_g_dimensionsChanged_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.updateYAxisWidth($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"yScale\", ctx_r2.yAxisScale)(\"dims\", ctx_r2.yAxisDims)(\"showGridLines\", ctx_r2.showGridLines)(\"showLabel\", ctx_r2.showYAxisLabel)(\"labelText\", ctx_r2.yAxisLabel)(\"trimTicks\", ctx_r2.trimYAxisTicks)(\"maxTickLength\", ctx_r2.maxYAxisTickLength)(\"tickFormatting\", ctx_r2.yAxisTickFormatting);\n    i0.ɵɵattribute(\"transform\", ctx_r2.transformYAxis);\n  }\n}\n\nfunction PolarChartComponent__svg_g_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 11);\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"label\", ctx_r3.xAxisLabel)(\"offset\", ctx_r3.labelOffset)(\"orient\", ctx_r3.orientation.Bottom)(\"height\", ctx_r3.dims.height)(\"width\", ctx_r3.dims.width);\n  }\n}\n\nfunction PolarChartComponent__svg_g_8__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 13);\n    i0.ɵɵlistener(\"select\", function PolarChartComponent__svg_g_8__svg_g_1_Template__svg_g_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return ctx_r14.onClick($event);\n    })(\"activate\", function PolarChartComponent__svg_g_8__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return ctx_r16.onActivate($event);\n    })(\"deactivate\", function PolarChartComponent__svg_g_8__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r17 = i0.ɵɵnextContext(2);\n      return ctx_r17.onDeactivate($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r13 = ctx.$implicit;\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@animationState\", \"active\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"gradient\", ctx_r12.gradient)(\"xScale\", ctx_r12.xScale)(\"yScale\", ctx_r12.yScale)(\"colors\", ctx_r12.colors)(\"data\", series_r13)(\"activeEntries\", ctx_r12.activeEntries)(\"scaleType\", ctx_r12.scaleType)(\"curve\", ctx_r12.curve)(\"rangeFillOpacity\", ctx_r12.rangeFillOpacity)(\"animations\", ctx_r12.animations)(\"tooltipDisabled\", ctx_r12.tooltipDisabled)(\"tooltipTemplate\", ctx_r12.tooltipTemplate);\n  }\n}\n\nfunction PolarChartComponent__svg_g_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, PolarChartComponent__svg_g_8__svg_g_1_Template, 2, 13, \"g\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r4.transformPlot);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.results)(\"ngForTrackBy\", ctx_r4.trackBy);\n  }\n}\n\nfunction PolarChartComponent__svg_g_9__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 13);\n    i0.ɵɵlistener(\"select\", function PolarChartComponent__svg_g_9__svg_g_1_Template__svg_g_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r20 = i0.ɵɵnextContext(2);\n      return ctx_r20.onClick($event);\n    })(\"activate\", function PolarChartComponent__svg_g_9__svg_g_1_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return ctx_r22.onActivate($event);\n    })(\"deactivate\", function PolarChartComponent__svg_g_9__svg_g_1_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return ctx_r23.onDeactivate($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r19 = ctx.$implicit;\n    const ctx_r18 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"gradient\", ctx_r18.gradient)(\"xScale\", ctx_r18.xScale)(\"yScale\", ctx_r18.yScale)(\"colors\", ctx_r18.colors)(\"data\", series_r19)(\"activeEntries\", ctx_r18.activeEntries)(\"scaleType\", ctx_r18.scaleType)(\"curve\", ctx_r18.curve)(\"rangeFillOpacity\", ctx_r18.rangeFillOpacity)(\"animations\", ctx_r18.animations)(\"tooltipDisabled\", ctx_r18.tooltipDisabled)(\"tooltipTemplate\", ctx_r18.tooltipTemplate);\n  }\n}\n\nfunction PolarChartComponent__svg_g_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, PolarChartComponent__svg_g_9__svg_g_1_Template, 2, 12, \"g\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r5.transformPlot);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r5.results)(\"ngForTrackBy\", ctx_r5.trackBy);\n  }\n}\n\nconst _c40 = [\"ngx-charts-pie-arc\", \"\"];\n\nfunction PieArcComponent__svg_defs_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"defs\");\n    i0.ɵɵelement(1, \"g\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"color\", ctx_r0.fill)(\"name\", ctx_r0.radialGradientId)(\"startOpacity\", ctx_r0.startOpacity);\n  }\n}\n\nconst _c41 = [\"ngx-charts-pie-series\", \"\"];\n\nfunction PieSeriesComponent__svg_g_0__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 3);\n  }\n\n  if (rf & 2) {\n    const arc_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"data\", arc_r1)(\"radius\", ctx_r2.outerRadius)(\"color\", ctx_r2.color(arc_r1))(\"label\", ctx_r2.labelText(arc_r1))(\"labelTrim\", ctx_r2.trimLabels)(\"labelTrimSize\", ctx_r2.maxLabelLength)(\"max\", ctx_r2.max)(\"value\", arc_r1.value)(\"explodeSlices\", ctx_r2.explodeSlices)(\"animations\", ctx_r2.animations);\n  }\n}\n\nfunction PieSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, PieSeriesComponent__svg_g_0__svg_g_1_Template, 1, 10, \"g\", 1);\n    i0.ɵɵelementStart(2, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function PieSeriesComponent__svg_g_0_Template__svg_g_select_2_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.onClick($event);\n    })(\"activate\", function PieSeriesComponent__svg_g_0_Template__svg_g_activate_2_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.activate.emit($event);\n    })(\"deactivate\", function PieSeriesComponent__svg_g_0_Template__svg_g_deactivate_2_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.deactivate.emit($event);\n    })(\"dblclick\", function PieSeriesComponent__svg_g_0_Template__svg_g_dblclick_2_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.dblclick.emit($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const arc_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.labelVisible(arc_r1));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"startAngle\", arc_r1.startAngle)(\"endAngle\", arc_r1.endAngle)(\"innerRadius\", ctx_r0.innerRadius)(\"outerRadius\", ctx_r0.outerRadius)(\"fill\", ctx_r0.color(arc_r1))(\"value\", arc_r1.data.value)(\"gradient\", ctx_r0.gradient)(\"data\", arc_r1.data)(\"max\", ctx_r0.max)(\"explodeSlices\", ctx_r0.explodeSlices)(\"isActive\", ctx_r0.isActive(arc_r1.data))(\"animate\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.placementTypes.Top)(\"tooltipType\", ctx_r0.styleTypes.tooltip)(\"tooltipTitle\", ctx_r0.getTooltipTitle(arc_r1))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", arc_r1.data);\n  }\n}\n\nconst _c42 = \".pie-label{font-size:11px}.pie-label.animation{-webkit-animation:.75s ease-in fadeIn;animation:.75s ease-in fadeIn}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{-webkit-animation:3s linear drawOut;animation:3s linear drawOut;transition:d .75s}@-webkit-keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\";\nconst _c43 = [\"ngx-charts-pie-grid-series\", \"\"];\n\nfunction PieGridSeriesComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵlistener(\"select\", function PieGridSeriesComponent__svg_g_1_Template__svg_g_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.onClick($event);\n    })(\"activate\", function PieGridSeriesComponent__svg_g_1_Template__svg_g_activate_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.activate.emit($event);\n    })(\"deactivate\", function PieGridSeriesComponent__svg_g_1_Template__svg_g_deactivate_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.deactivate.emit($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const arc_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"startAngle\", arc_r1.startAngle)(\"endAngle\", arc_r1.endAngle)(\"innerRadius\", ctx_r0.innerRadius)(\"outerRadius\", ctx_r0.outerRadius)(\"fill\", ctx_r0.color(arc_r1))(\"value\", arc_r1.data.value)(\"data\", arc_r1.data)(\"gradient\", false)(\"pointerEvents\", arc_r1.pointerEvents)(\"animate\", arc_r1.animate);\n    i0.ɵɵattribute(\"class\", arc_r1.class);\n  }\n}\n\nfunction PieGridComponent__svg_g_2__svg_text_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"text\", 10);\n  }\n\n  if (rf & 2) {\n    const series_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"countTo\", series_r1.percent)(\"countSuffix\", \"%\");\n  }\n}\n\nfunction PieGridComponent__svg_g_2__svg_text_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"text\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r1 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", series_r1.percent.toLocaleString(), \" \");\n  }\n}\n\nfunction PieGridComponent__svg_g_2__svg_text_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"text\", 12);\n  }\n\n  if (rf & 2) {\n    const series_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"countTo\", series_r1.total)(\"countPrefix\", ctx_r4.label + \": \");\n    i0.ɵɵattribute(\"y\", series_r1.outerRadius);\n  }\n}\n\nfunction PieGridComponent__svg_g_2__svg_text_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"text\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r1 = i0.ɵɵnextContext().$implicit;\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"y\", series_r1.outerRadius);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", ctx_r5.label, \": \", series_r1.total.toLocaleString(), \" \");\n  }\n}\n\nconst _c44 = function (a0) {\n  return {\n    data: a0\n  };\n};\n\nfunction PieGridComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 3);\n    i0.ɵɵelementStart(1, \"g\", 4);\n    i0.ɵɵlistener(\"select\", function PieGridComponent__svg_g_2_Template__svg_g_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.onClick($event);\n    })(\"activate\", function PieGridComponent__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.onActivate($event);\n    })(\"deactivate\", function PieGridComponent__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.onDeactivate($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, PieGridComponent__svg_g_2__svg_text_2_Template, 1, 2, \"text\", 5);\n    i0.ɵɵtemplate(3, PieGridComponent__svg_g_2__svg_text_3_Template, 2, 1, \"text\", 6);\n    i0.ɵɵelementStart(4, \"text\", 7);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, PieGridComponent__svg_g_2__svg_text_6_Template, 1, 3, \"text\", 8);\n    i0.ɵɵtemplate(7, PieGridComponent__svg_g_2__svg_text_7_Template, 2, 3, \"text\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const series_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", series_r1.transform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"colors\", series_r1.colors)(\"data\", series_r1.data)(\"innerRadius\", series_r1.innerRadius)(\"outerRadius\", series_r1.outerRadius)(\"animations\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.placementTypes.Top)(\"tooltipType\", ctx_r0.styleTypes.tooltip)(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : ctx_r0.tooltipText(i0.ɵɵpureFunction1(17, _c44, series_r1)))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", series_r1.data[0].data);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.animations);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.animations);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", series_r1.label, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.animations);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.animations);\n  }\n}\n\nconst _c45 = [\"textEl\"];\nconst _c46 = [\"ngx-charts-card\", \"\"];\n\nfunction CardComponent__svg_path_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"path\", 7);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"fill\", ctx_r0.bandColor)(\"transform\", ctx_r0.transformBand)(\"d\", ctx_r0.bandPath);\n  }\n}\n\nconst _c47 = [\"ngx-charts-card-series\", \"\"];\n\nfunction CardSeriesComponent__svg_rect_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"rect\", 2);\n  }\n\n  if (rf & 2) {\n    const c_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"fill\", ctx_r0.emptyColor);\n    i0.ɵɵattribute(\"x\", c_r2.x)(\"y\", c_r2.y)(\"width\", c_r2.width)(\"height\", c_r2.height);\n  }\n}\n\nfunction CardSeriesComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 3);\n    i0.ɵɵlistener(\"select\", function CardSeriesComponent__svg_g_1_Template__svg_g_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.onClick($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const c_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"x\", c_r3.x)(\"y\", c_r3.y)(\"width\", c_r3.width)(\"height\", c_r3.height)(\"color\", c_r3.color)(\"bandColor\", c_r3.bandColor)(\"textColor\", c_r3.textColor)(\"data\", c_r3.data)(\"label\", c_r3.label)(\"medianSize\", ctx_r1.medianSize)(\"valueFormatting\", ctx_r1.valueFormatting)(\"labelFormatting\", ctx_r1.labelFormatting)(\"animations\", ctx_r1.animations);\n  }\n}\n\nconst _c48 = [\"ngx-charts-tree-map-cell\", \"\"];\n\nfunction TreeMapCellComponent__svg_defs_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"defs\");\n    i0.ɵɵelement(1, \"g\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"orientation\", ctx_r0.orientation.Vertical)(\"name\", ctx_r0.gradientId)(\"stops\", ctx_r0.gradientStops);\n  }\n}\n\nfunction TreeMapCellComponent__svg_foreignObject_3__xhtml_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 8);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"countTo\", ctx_r2.value)(\"valueFormatting\", ctx_r2.valueFormatting);\n  }\n}\n\nfunction TreeMapCellComponent__svg_foreignObject_3__xhtml_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.formattedValue, \" \");\n  }\n}\n\nfunction TreeMapCellComponent__svg_foreignObject_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"foreignObject\", 4);\n    i0.ɵɵnamespaceHTML();\n    i0.ɵɵelementStart(1, \"p\");\n    i0.ɵɵelement(2, \"span\", 5);\n    i0.ɵɵelement(3, \"br\");\n    i0.ɵɵtemplate(4, TreeMapCellComponent__svg_foreignObject_3__xhtml_span_4_Template, 1, 2, \"span\", 6);\n    i0.ɵɵtemplate(5, TreeMapCellComponent__svg_foreignObject_3__xhtml_span_5_Template, 2, 1, \"span\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"pointer-events\", \"none\");\n    i0.ɵɵattribute(\"x\", ctx_r1.x)(\"y\", ctx_r1.y)(\"width\", ctx_r1.width)(\"height\", ctx_r1.height);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"color\", ctx_r1.getTextColor())(\"height\", ctx_r1.height + \"px\")(\"width\", ctx_r1.width + \"px\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r1.formattedLabel, i0.ɵɵsanitizeHtml);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.animations);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.animations);\n  }\n}\n\nconst _c49 = [\"ngx-charts-tree-map-cell-series\", \"\"];\n\nfunction TreeMapCellSeriesComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 1);\n    i0.ɵɵlistener(\"select\", function TreeMapCellSeriesComponent__svg_g_0_Template__svg_g_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.onClick($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const c_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"data\", c_r1.data)(\"x\", c_r1.x)(\"y\", c_r1.y)(\"width\", c_r1.width)(\"height\", c_r1.height)(\"fill\", c_r1.fill)(\"label\", c_r1.label)(\"value\", c_r1.value)(\"valueFormatting\", ctx_r0.valueFormatting)(\"labelFormatting\", ctx_r0.labelFormatting)(\"gradient\", ctx_r0.gradient)(\"animations\", ctx_r0.animations)(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipPlacement\", ctx_r0.placementTypes.Top)(\"tooltipType\", ctx_r0.styleTypes.tooltip)(\"tooltipTitle\", ctx_r0.tooltipTemplate ? undefined : ctx_r0.getTooltipText(c_r1))(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"tooltipContext\", c_r1.data);\n  }\n}\n\nconst _c50 = [\"valueTextEl\"];\nconst _c51 = [\"unitsTextEl\"];\n\nfunction LinearGaugeComponent__svg_line_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"line\", 10);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r0.transformLine)(\"stroke\", ctx_r0.colors.getColor(ctx_r0.units));\n  }\n}\n\nfunction LinearGaugeComponent__svg_line_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"line\", 11);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r1.transformLine)(\"stroke\", ctx_r1.colors.getColor(ctx_r1.units));\n  }\n}\n\nconst _c52 = function () {\n  return {};\n};\n\nconst _c53 = [\"ngx-charts-gauge-arc\", \"\"];\nconst _c54 = [\"ngx-charts-gauge-axis\", \"\"];\n\nfunction GaugeAxisComponent__svg_g_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵelement(1, \"path\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tick_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"d\", tick_r3.line);\n  }\n}\n\nfunction GaugeAxisComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 2);\n    i0.ɵɵelementStart(1, \"text\", 3);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tick_r4 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"text-anchor\", tick_r4.textAnchor);\n    i0.ɵɵattribute(\"transform\", tick_r4.textTransform);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", tick_r4.text, \" \");\n  }\n}\n\nfunction GaugeAxisComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 4);\n    i0.ɵɵelement(1, \"path\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tick_r5 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"d\", tick_r5.line);\n  }\n}\n\nfunction GaugeComponent__svg_g_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵelementStart(1, \"g\", 5);\n    i0.ɵɵlistener(\"select\", function GaugeComponent__svg_g_2_Template__svg_g_select_1_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.onClick($event);\n    })(\"activate\", function GaugeComponent__svg_g_2_Template__svg_g_activate_1_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.onActivate($event);\n    })(\"deactivate\", function GaugeComponent__svg_g_2_Template__svg_g_deactivate_1_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.onDeactivate($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const arc_r3 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", ctx_r0.rotation);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"backgroundArc\", arc_r3.backgroundArc)(\"valueArc\", arc_r3.valueArc)(\"cornerRadius\", ctx_r0.cornerRadius)(\"colors\", ctx_r0.colors)(\"isActive\", ctx_r0.isActive(arc_r3.valueArc.data))(\"tooltipDisabled\", ctx_r0.tooltipDisabled)(\"tooltipTemplate\", ctx_r0.tooltipTemplate)(\"valueFormatting\", ctx_r0.valueFormatting)(\"animations\", ctx_r0.animations);\n  }\n}\n\nfunction GaugeComponent__svg_g_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"g\", 6);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"bigSegments\", ctx_r1.bigSegments)(\"smallSegments\", ctx_r1.smallSegments)(\"min\", ctx_r1.min)(\"max\", ctx_r1.max)(\"radius\", ctx_r1.outerRadius)(\"angleSpan\", ctx_r1.angleSpan)(\"valueScale\", ctx_r1.valueScale)(\"startAngle\", ctx_r1.startAngle)(\"tickFormatting\", ctx_r1.axisTickFormatting);\n  }\n}\n\nfunction GaugeComponent__svg_text_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"text\", 7, 8);\n    i0.ɵɵelementStart(2, \"tspan\", 9);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"tspan\", 10);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"text-anchor\", \"middle\");\n    i0.ɵɵattribute(\"transform\", ctx_r2.textTransform);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r2.displayValue);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.units);\n  }\n}\n\nfunction throttle(func, wait, options) {\n  options = options || {};\n  let context;\n  let args;\n  let result;\n  let timeout = null;\n  let previous = 0;\n\n  function later() {\n    previous = options.leading === false ? 0 : +new Date();\n    timeout = null;\n    result = func.apply(context, args);\n  }\n\n  return function () {\n    const now = +new Date();\n\n    if (!previous && options.leading === false) {\n      previous = now;\n    }\n\n    const remaining = wait - (now - previous);\n    context = this;\n    args = arguments;\n\n    if (remaining <= 0) {\n      clearTimeout(timeout);\n      timeout = null;\n      previous = now;\n      result = func.apply(context, args);\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n\n    return result;\n  };\n}\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n */\n\n\nfunction throttleable(duration, options) {\n  return function innerDecorator(target, key, descriptor) {\n    return {\n      configurable: true,\n      enumerable: descriptor.enumerable,\n      get: function getter() {\n        Object.defineProperty(this, key, {\n          configurable: true,\n          enumerable: descriptor.enumerable,\n          value: throttle(descriptor.value, duration, options)\n        });\n        return this[key];\n      }\n    };\n  };\n}\n\nvar PlacementTypes;\n\n(function (PlacementTypes) {\n  PlacementTypes[\"Top\"] = \"top\";\n  PlacementTypes[\"Bottom\"] = \"bottom\";\n  PlacementTypes[\"Left\"] = \"left\";\n  PlacementTypes[\"Right\"] = \"right\";\n  PlacementTypes[\"Center\"] = \"center\";\n})(PlacementTypes || (PlacementTypes = {}));\n\nconst caretOffset = 7;\n\nfunction verticalPosition(elDimensions, popoverDimensions, alignment) {\n  if (alignment === PlacementTypes.Top) {\n    return elDimensions.top - caretOffset;\n  }\n\n  if (alignment === PlacementTypes.Bottom) {\n    return elDimensions.top + elDimensions.height - popoverDimensions.height + caretOffset;\n  }\n\n  if (alignment === PlacementTypes.Center) {\n    return elDimensions.top + elDimensions.height / 2 - popoverDimensions.height / 2;\n  }\n\n  return undefined;\n}\n\nfunction horizontalPosition(elDimensions, popoverDimensions, alignment) {\n  if (alignment === PlacementTypes.Left) {\n    return elDimensions.left - caretOffset;\n  }\n\n  if (alignment === PlacementTypes.Right) {\n    return elDimensions.left + elDimensions.width - popoverDimensions.width + caretOffset;\n  }\n\n  if (alignment === PlacementTypes.Center) {\n    return elDimensions.left + elDimensions.width / 2 - popoverDimensions.width / 2;\n  }\n\n  return undefined;\n}\n/**\n * Position helper for the popover directive.\n *\n * @export\n */\n\n\nclass PositionHelper {\n  /**\n   * Calculate vertical alignment position\n   *\n   * @memberOf PositionHelper\n   */\n  static calculateVerticalAlignment(elDimensions, popoverDimensions, alignment) {\n    let result = verticalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (result + popoverDimensions.height > window.innerHeight) {\n      result = window.innerHeight - popoverDimensions.height;\n    }\n\n    return result;\n  }\n  /**\n   * Calculate vertical caret position\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static calculateVerticalCaret(elDimensions, popoverDimensions, caretDimensions, alignment) {\n    let result;\n\n    if (alignment === PlacementTypes.Top) {\n      result = elDimensions.height / 2 - caretDimensions.height / 2 + caretOffset;\n    }\n\n    if (alignment === PlacementTypes.Bottom) {\n      result = popoverDimensions.height - elDimensions.height / 2 - caretDimensions.height / 2 - caretOffset;\n    }\n\n    if (alignment === PlacementTypes.Center) {\n      result = popoverDimensions.height / 2 - caretDimensions.height / 2;\n    }\n\n    const popoverPosition = verticalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (popoverPosition + popoverDimensions.height > window.innerHeight) {\n      result += popoverPosition + popoverDimensions.height - window.innerHeight;\n    }\n\n    return result;\n  }\n  /**\n   * Calculate horz alignment position\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static calculateHorizontalAlignment(elDimensions, popoverDimensions, alignment) {\n    let result = horizontalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (result + popoverDimensions.width > window.innerWidth) {\n      result = window.innerWidth - popoverDimensions.width;\n    }\n\n    return result;\n  }\n  /**\n   * Calculate horz caret position\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static calculateHorizontalCaret(elDimensions, popoverDimensions, caretDimensions, alignment) {\n    let result;\n\n    if (alignment === PlacementTypes.Left) {\n      result = elDimensions.width / 2 - caretDimensions.width / 2 + caretOffset;\n    }\n\n    if (alignment === PlacementTypes.Right) {\n      result = popoverDimensions.width - elDimensions.width / 2 - caretDimensions.width / 2 - caretOffset;\n    }\n\n    if (alignment === PlacementTypes.Center) {\n      result = popoverDimensions.width / 2 - caretDimensions.width / 2;\n    }\n\n    const popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);\n\n    if (popoverPosition + popoverDimensions.width > window.innerWidth) {\n      result += popoverPosition + popoverDimensions.width - window.innerWidth;\n    }\n\n    return result;\n  }\n  /**\n   * Checks if the element's position should be flipped\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static shouldFlip(elDimensions, popoverDimensions, placement, spacing) {\n    let flip = false;\n\n    if (placement === PlacementTypes.Right) {\n      if (elDimensions.left + elDimensions.width + popoverDimensions.width + spacing > window.innerWidth) {\n        flip = true;\n      }\n    }\n\n    if (placement === PlacementTypes.Left) {\n      if (elDimensions.left - popoverDimensions.width - spacing < 0) {\n        flip = true;\n      }\n    }\n\n    if (placement === PlacementTypes.Top) {\n      if (elDimensions.top - popoverDimensions.height - spacing < 0) {\n        flip = true;\n      }\n    }\n\n    if (placement === PlacementTypes.Bottom) {\n      if (elDimensions.top + elDimensions.height + popoverDimensions.height + spacing > window.innerHeight) {\n        flip = true;\n      }\n    }\n\n    return flip;\n  }\n  /**\n   * Position caret\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static positionCaret(placement, elmDim, hostDim, caretDimensions, alignment) {\n    let top = 0;\n    let left = 0;\n\n    if (placement === PlacementTypes.Right) {\n      left = -7;\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.Left) {\n      left = elmDim.width;\n      top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.Top) {\n      top = elmDim.height;\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n    } else if (placement === PlacementTypes.Bottom) {\n      top = -7;\n      left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n    }\n\n    return {\n      top,\n      left\n    };\n  }\n  /**\n   * Position content\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static positionContent(placement, elmDim, hostDim, spacing, alignment) {\n    let top = 0;\n    let left = 0;\n\n    if (placement === PlacementTypes.Right) {\n      left = hostDim.left + hostDim.width + spacing;\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.Left) {\n      left = hostDim.left - elmDim.width - spacing;\n      top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.Top) {\n      top = hostDim.top - elmDim.height - spacing;\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n    } else if (placement === PlacementTypes.Bottom) {\n      top = hostDim.top + hostDim.height + spacing;\n      left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n    }\n\n    return {\n      top,\n      left\n    };\n  }\n  /**\n   * Determine placement based on flip\n   *\n   * @memberOf PositionHelper\n   */\n\n\n  static determinePlacement(placement, elmDim, hostDim, spacing) {\n    const shouldFlip = PositionHelper.shouldFlip(hostDim, elmDim, placement, spacing);\n\n    if (shouldFlip) {\n      if (placement === PlacementTypes.Right) {\n        return PlacementTypes.Left;\n      } else if (placement === PlacementTypes.Left) {\n        return PlacementTypes.Right;\n      } else if (placement === PlacementTypes.Top) {\n        return PlacementTypes.Bottom;\n      } else if (placement === PlacementTypes.Bottom) {\n        return PlacementTypes.Top;\n      }\n    }\n\n    return placement;\n  }\n\n}\n\nclass TooltipContentComponent {\n  constructor(element, renderer, platformId) {\n    this.element = element;\n    this.renderer = renderer;\n    this.platformId = platformId;\n  }\n\n  get cssClasses() {\n    let clz = 'ngx-charts-tooltip-content';\n    clz += ` position-${this.placement}`;\n    clz += ` type-${this.type}`;\n    clz += ` ${this.cssClass}`;\n    return clz;\n  }\n\n  ngAfterViewInit() {\n    setTimeout(this.position.bind(this));\n  }\n\n  position() {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    const nativeElm = this.element.nativeElement;\n    const hostDim = this.host.nativeElement.getBoundingClientRect(); // if no dims were found, never show\n\n    if (!hostDim.height && !hostDim.width) return;\n    const elmDim = nativeElm.getBoundingClientRect();\n    this.checkFlip(hostDim, elmDim);\n    this.positionContent(nativeElm, hostDim, elmDim);\n\n    if (this.showCaret) {\n      this.positionCaret(hostDim, elmDim);\n    } // animate its entry\n\n\n    setTimeout(() => this.renderer.addClass(nativeElm, 'animate'), 1);\n  }\n\n  positionContent(nativeElm, hostDim, elmDim) {\n    const {\n      top,\n      left\n    } = PositionHelper.positionContent(this.placement, elmDim, hostDim, this.spacing, this.alignment);\n    this.renderer.setStyle(nativeElm, 'top', `${top}px`);\n    this.renderer.setStyle(nativeElm, 'left', `${left}px`);\n  }\n\n  positionCaret(hostDim, elmDim) {\n    const caretElm = this.caretElm.nativeElement;\n    const caretDimensions = caretElm.getBoundingClientRect();\n    const {\n      top,\n      left\n    } = PositionHelper.positionCaret(this.placement, elmDim, hostDim, caretDimensions, this.alignment);\n    this.renderer.setStyle(caretElm, 'top', `${top}px`);\n    this.renderer.setStyle(caretElm, 'left', `${left}px`);\n  }\n\n  checkFlip(hostDim, elmDim) {\n    this.placement = PositionHelper.determinePlacement(this.placement, elmDim, hostDim, this.spacing);\n  }\n\n  onWindowResize() {\n    this.position();\n  }\n\n}\n\nTooltipContentComponent.ɵfac = function TooltipContentComponent_Factory(t) {\n  return new (t || TooltipContentComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nTooltipContentComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TooltipContentComponent,\n  selectors: [[\"ngx-tooltip-content\"]],\n  viewQuery: function TooltipContentComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.caretElm = _t.first);\n    }\n  },\n  hostVars: 2,\n  hostBindings: function TooltipContentComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"resize\", function TooltipContentComponent_resize_HostBindingHandler() {\n        return ctx.onWindowResize();\n      }, false, i0.ɵɵresolveWindow);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.cssClasses);\n    }\n  },\n  inputs: {\n    host: \"host\",\n    showCaret: \"showCaret\",\n    type: \"type\",\n    placement: \"placement\",\n    alignment: \"alignment\",\n    spacing: \"spacing\",\n    cssClass: \"cssClass\",\n    title: \"title\",\n    template: \"template\",\n    context: \"context\"\n  },\n  decls: 6,\n  vars: 6,\n  consts: [[3, \"hidden\"], [\"caretElm\", \"\"], [1, \"tooltip-content\"], [4, \"ngIf\"], [3, \"innerHTML\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"innerHTML\"]],\n  template: function TooltipContentComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\");\n      i0.ɵɵelement(1, \"span\", 0, 1);\n      i0.ɵɵelementStart(3, \"div\", 2);\n      i0.ɵɵtemplate(4, TooltipContentComponent_span_4_Template, 2, 4, \"span\", 3);\n      i0.ɵɵtemplate(5, TooltipContentComponent_span_5_Template, 1, 1, \"span\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassMapInterpolate1(\"tooltip-caret position-\", ctx.placement, \"\");\n      i0.ɵɵproperty(\"hidden\", !ctx.showCaret);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", !ctx.title);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.title);\n    }\n  },\n  directives: [i2.NgIf, i2.NgTemplateOutlet],\n  styles: [\".ngx-charts-tooltip-content{position:fixed;border-radius:3px;z-index:5000;display:block;font-weight:400;opacity:0;pointer-events:none!important}.ngx-charts-tooltip-content.type-popover{background:#fff;color:#060709;border:1px solid #72809b;box-shadow:0 1px 3px #0003,0 1px 1px #00000024,0 2px 1px -1px #0000001f;font-size:13px;padding:4px}.ngx-charts-tooltip-content.type-popover .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #fff}.ngx-charts-tooltip-content.type-tooltip{color:#fff;background:rgba(0,0,0,.75);font-size:12px;padding:0 10px;text-align:center;pointer-events:auto}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content .tooltip-label{display:block;line-height:1em;padding:8px 5px 5px;font-size:1em}.ngx-charts-tooltip-content .tooltip-val{display:block;font-size:1.3em;line-height:1em;padding:0 5px 8px}.ngx-charts-tooltip-content .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.position-right{transform:translate(10px)}.ngx-charts-tooltip-content.position-left{transform:translate(-10px)}.ngx-charts-tooltip-content.position-top{transform:translateY(-10px)}.ngx-charts-tooltip-content.position-bottom{transform:translateY(10px)}.ngx-charts-tooltip-content.animate{opacity:1;transition:opacity .3s,transform .3s;transform:translate(0);pointer-events:auto}.area-tooltip-container{padding:5px 0;pointer-events:none}.tooltip-item{text-align:left;line-height:1.2em;padding:5px 0}.tooltip-item .tooltip-item-color{display:inline-block;height:12px;width:12px;margin-right:5px;color:#5b646b;border-radius:3px}\\n\"],\n  encapsulation: 2\n});\n\n__decorate([throttleable(100)], TooltipContentComponent.prototype, \"onWindowResize\", null);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipContentComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-tooltip-content',\n      template: `\n    <div>\n      <span #caretElm [hidden]=\"!showCaret\" class=\"tooltip-caret position-{{ this.placement }}\"> </span>\n      <div class=\"tooltip-content\">\n        <span *ngIf=\"!title\">\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\n        </span>\n        <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\n      </div>\n    </div>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-tooltip-content{position:fixed;border-radius:3px;z-index:5000;display:block;font-weight:400;opacity:0;pointer-events:none!important}.ngx-charts-tooltip-content.type-popover{background:#fff;color:#060709;border:1px solid #72809b;box-shadow:0 1px 3px #0003,0 1px 1px #00000024,0 2px 1px -1px #0000001f;font-size:13px;padding:4px}.ngx-charts-tooltip-content.type-popover .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #fff}.ngx-charts-tooltip-content.type-tooltip{color:#fff;background:rgba(0,0,0,.75);font-size:12px;padding:0 10px;text-align:center;pointer-events:auto}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content .tooltip-label{display:block;line-height:1em;padding:8px 5px 5px;font-size:1em}.ngx-charts-tooltip-content .tooltip-val{display:block;font-size:1.3em;line-height:1em;padding:0 5px 8px}.ngx-charts-tooltip-content .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.position-right{transform:translate(10px)}.ngx-charts-tooltip-content.position-left{transform:translate(-10px)}.ngx-charts-tooltip-content.position-top{transform:translateY(-10px)}.ngx-charts-tooltip-content.position-bottom{transform:translateY(10px)}.ngx-charts-tooltip-content.animate{opacity:1;transition:opacity .3s,transform .3s;transform:translate(0);pointer-events:auto}.area-tooltip-container{padding:5px 0;pointer-events:none}.tooltip-item{text-align:left;line-height:1.2em;padding:5px 0}.tooltip-item .tooltip-item-color{display:inline-block;height:12px;width:12px;margin-right:5px;color:#5b646b;border-radius:3px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    host: [{\n      type: Input\n    }],\n    showCaret: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    placement: [{\n      type: Input\n    }],\n    alignment: [{\n      type: Input\n    }],\n    spacing: [{\n      type: Input\n    }],\n    cssClass: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    template: [{\n      type: Input\n    }],\n    context: [{\n      type: Input\n    }],\n    caretElm: [{\n      type: ViewChild,\n      args: ['caretElm']\n    }],\n    cssClasses: [{\n      type: HostBinding,\n      args: ['class']\n    }],\n    onWindowResize: [{\n      type: HostListener,\n      args: ['window:resize']\n    }]\n  });\n})();\n\nclass InjectionRegisteryService {\n  constructor(injectionService) {\n    this.injectionService = injectionService;\n    this.defaults = {};\n    this.components = new Map();\n  }\n\n  getByType(type = this.type) {\n    return this.components.get(type);\n  }\n\n  create(bindings) {\n    return this.createByType(this.type, bindings);\n  }\n\n  createByType(type, bindings) {\n    bindings = this.assignDefaults(bindings);\n    const component = this.injectComponent(type, bindings);\n    this.register(type, component);\n    return component;\n  }\n\n  destroy(instance) {\n    const compsByType = this.components.get(instance.componentType);\n\n    if (compsByType && compsByType.length) {\n      const idx = compsByType.indexOf(instance);\n\n      if (idx > -1) {\n        const component = compsByType[idx];\n        component.destroy();\n        compsByType.splice(idx, 1);\n      }\n    }\n  }\n\n  destroyAll() {\n    this.destroyByType(this.type);\n  }\n\n  destroyByType(type) {\n    const comps = this.components.get(type);\n\n    if (comps && comps.length) {\n      let i = comps.length - 1;\n\n      while (i >= 0) {\n        this.destroy(comps[i--]);\n      }\n    }\n  }\n\n  injectComponent(type, bindings) {\n    return this.injectionService.appendComponent(type, bindings);\n  }\n\n  assignDefaults(bindings) {\n    const inputs = { ...this.defaults.inputs\n    };\n    const outputs = { ...this.defaults.outputs\n    };\n\n    if (!bindings.inputs && !bindings.outputs) {\n      bindings = {\n        inputs: bindings\n      };\n    }\n\n    if (inputs) {\n      bindings.inputs = { ...inputs,\n        ...bindings.inputs\n      };\n    }\n\n    if (outputs) {\n      bindings.outputs = { ...outputs,\n        ...bindings.outputs\n      };\n    }\n\n    return bindings;\n  }\n\n  register(type, component) {\n    if (!this.components.has(type)) {\n      this.components.set(type, []);\n    }\n\n    const types = this.components.get(type);\n    types.push(component);\n  }\n\n}\n\nfunction isViewContainerRef(x) {\n  return x.element;\n}\n/**\n * Injection service is a helper to append components\n * dynamically to a known location in the DOM, most\n * noteably for dialogs/tooltips appending to body.\n *\n * @export\n */\n\n\nclass InjectionService {\n  constructor(applicationRef, componentFactoryResolver, injector) {\n    this.applicationRef = applicationRef;\n    this.componentFactoryResolver = componentFactoryResolver;\n    this.injector = injector;\n  }\n  /**\n   * Sets a default global root view container. This is useful for\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\n   *\n   * @param container\n   */\n\n\n  static setGlobalRootViewContainer(container) {\n    InjectionService.globalRootViewContainer = container;\n  }\n  /**\n   * Gets the root view container to inject the component to.\n   *\n   * @memberOf InjectionService\n   */\n\n\n  getRootViewContainer() {\n    if (this._container) return this._container;\n    if (InjectionService.globalRootViewContainer) return InjectionService.globalRootViewContainer;\n    if (this.applicationRef.components.length) return this.applicationRef.components[0];\n    throw new Error('View Container not found! ngUpgrade needs to manually set this via setRootViewContainer or setGlobalRootViewContainer.');\n  }\n  /**\n   * Overrides the default root view container. This is useful for\n   * things like ngUpgrade that doesn't have a ApplicationRef root.\n   *\n   * @param container\n   *\n   * @memberOf InjectionService\n   */\n\n\n  setRootViewContainer(container) {\n    this._container = container;\n  }\n  /**\n   * Gets the html element for a component ref.\n   *\n   * @param componentRef\n   *\n   * @memberOf InjectionService\n   */\n\n\n  getComponentRootNode(component) {\n    if (isViewContainerRef(component)) {\n      return component.element.nativeElement;\n    }\n\n    if (component.hostView && component.hostView.rootNodes.length > 0) {\n      return component.hostView.rootNodes[0];\n    } // the top most component root node has no `hostView`\n\n\n    return component.location.nativeElement;\n  }\n  /**\n   * Gets the root component container html element.\n   *\n   * @memberOf InjectionService\n   */\n\n\n  getRootViewContainerNode(component) {\n    return this.getComponentRootNode(component);\n  }\n  /**\n   * Projects the bindings onto the component\n   *\n   * @param component\n   * @param options\n   *\n   * @memberOf InjectionService\n   */\n\n\n  projectComponentBindings(component, bindings) {\n    if (bindings) {\n      if (bindings.inputs !== undefined) {\n        const bindingKeys = Object.getOwnPropertyNames(bindings.inputs);\n\n        for (const bindingName of bindingKeys) {\n          component.instance[bindingName] = bindings.inputs[bindingName];\n        }\n      }\n\n      if (bindings.outputs !== undefined) {\n        const eventKeys = Object.getOwnPropertyNames(bindings.outputs);\n\n        for (const eventName of eventKeys) {\n          component.instance[eventName] = bindings.outputs[eventName];\n        }\n      }\n    }\n\n    return component;\n  }\n  /**\n   * Appends a component to a adjacent location\n   *\n   * @param componentClass\n   * @param [options={}]\n   * @param [location]\n   *\n   * @memberOf InjectionService\n   */\n\n\n  appendComponent(componentClass, bindings = {}, location) {\n    if (!location) location = this.getRootViewContainer();\n    const appendLocation = this.getComponentRootNode(location);\n    const portalHost = new DomPortalOutlet(appendLocation, this.componentFactoryResolver, this.applicationRef, this.injector);\n    const portal = new ComponentPortal(componentClass);\n    const componentRef = portalHost.attach(portal);\n    this.projectComponentBindings(componentRef, bindings);\n    return componentRef;\n  }\n\n}\n\nInjectionService.globalRootViewContainer = null;\n\nInjectionService.ɵfac = function InjectionService_Factory(t) {\n  return new (t || InjectionService)(i0.ɵɵinject(i0.ApplicationRef), i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.Injector));\n};\n\nInjectionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: InjectionService,\n  factory: InjectionService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(InjectionService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.ApplicationRef\n    }, {\n      type: i0.ComponentFactoryResolver\n    }, {\n      type: i0.Injector\n    }];\n  }, null);\n})();\n\nclass TooltipService extends InjectionRegisteryService {\n  constructor(injectionService) {\n    super(injectionService);\n    this.type = TooltipContentComponent;\n  }\n\n}\n\nTooltipService.ɵfac = function TooltipService_Factory(t) {\n  return new (t || TooltipService)(i0.ɵɵinject(InjectionService));\n};\n\nTooltipService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TooltipService,\n  factory: TooltipService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: InjectionService\n    }];\n  }, null);\n})();\n\nvar LegendPosition;\n\n(function (LegendPosition) {\n  LegendPosition[\"Right\"] = \"right\";\n  LegendPosition[\"Below\"] = \"below\";\n})(LegendPosition || (LegendPosition = {}));\n\nvar LegendType;\n\n(function (LegendType) {\n  LegendType[\"ScaleLegend\"] = \"scaleLegend\";\n  LegendType[\"Legend\"] = \"legend\";\n})(LegendType || (LegendType = {}));\n\nvar ScaleType;\n\n(function (ScaleType) {\n  ScaleType[\"Time\"] = \"time\";\n  ScaleType[\"Linear\"] = \"linear\";\n  ScaleType[\"Ordinal\"] = \"ordinal\";\n  ScaleType[\"Quantile\"] = \"quantile\";\n})(ScaleType || (ScaleType = {}));\n\nclass ScaleLegendComponent {\n  constructor() {\n    this.horizontal = false;\n  }\n\n  ngOnChanges(changes) {\n    const gradientValues = this.gradientString(this.colors.range(), this.colors.domain());\n    const direction = this.horizontal ? 'right' : 'bottom';\n    this.gradient = `linear-gradient(to ${direction}, ${gradientValues})`;\n  }\n  /**\n   * Generates the string used in the gradient stylesheet properties\n   * @param colors array of colors\n   * @param splits array of splits on a scale of (0, 1)\n   */\n\n\n  gradientString(colors, splits) {\n    // add the 100%\n    splits.push(1);\n    const pairs = [];\n    colors.reverse().forEach((c, i) => {\n      pairs.push(`${c} ${Math.round(splits[i] * 100)}%`);\n    });\n    return pairs.join(', ');\n  }\n\n}\n\nScaleLegendComponent.ɵfac = function ScaleLegendComponent_Factory(t) {\n  return new (t || ScaleLegendComponent)();\n};\n\nScaleLegendComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ScaleLegendComponent,\n  selectors: [[\"ngx-charts-scale-legend\"]],\n  inputs: {\n    valueRange: \"valueRange\",\n    colors: \"colors\",\n    height: \"height\",\n    width: \"width\",\n    horizontal: \"horizontal\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 8,\n  vars: 10,\n  consts: [[1, \"scale-legend\"], [1, \"scale-legend-label\"], [1, \"scale-legend-wrap\"]],\n  template: function ScaleLegendComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"span\");\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"div\", 2);\n      i0.ɵɵelementStart(5, \"div\", 1);\n      i0.ɵɵelementStart(6, \"span\");\n      i0.ɵɵtext(7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"height\", ctx.horizontal ? undefined : ctx.height, \"px\")(\"width\", ctx.width, \"px\");\n      i0.ɵɵclassProp(\"horizontal-legend\", ctx.horizontal);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(ctx.valueRange[1].toLocaleString());\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"background\", ctx.gradient);\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(ctx.valueRange[0].toLocaleString());\n    }\n  },\n  styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .scale-legend{text-align:center;display:flex;flex-direction:column}.chart-legend .scale-legend-wrap{display:inline-block;flex:1;width:30px;border-radius:5px;margin:0 auto}.chart-legend .scale-legend-label{font-size:12px}.chart-legend .horizontal-legend.scale-legend{flex-direction:row}.chart-legend .horizontal-legend .scale-legend-wrap{width:auto;height:30px;margin:0 16px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScaleLegendComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-scale-legend',\n      template: `\n    <div\n      class=\"scale-legend\"\n      [class.horizontal-legend]=\"horizontal\"\n      [style.height.px]=\"horizontal ? undefined : height\"\n      [style.width.px]=\"width\"\n    >\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[1].toLocaleString() }}</span>\n      </div>\n      <div class=\"scale-legend-wrap\" [style.background]=\"gradient\"></div>\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[0].toLocaleString() }}</span>\n      </div>\n    </div>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .scale-legend{text-align:center;display:flex;flex-direction:column}.chart-legend .scale-legend-wrap{display:inline-block;flex:1;width:30px;border-radius:5px;margin:0 auto}.chart-legend .scale-legend-label{font-size:12px}.chart-legend .horizontal-legend.scale-legend{flex-direction:row}.chart-legend .horizontal-legend .scale-legend-wrap{width:auto;height:30px;margin:0 16px}\\n\"]\n    }]\n  }], null, {\n    valueRange: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    horizontal: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Formats a label given a date, number or string.\n *\n * @export\n */\n\n\nfunction formatLabel(label) {\n  if (label instanceof Date) {\n    label = label.toLocaleDateString();\n  } else {\n    label = label.toLocaleString();\n  }\n\n  return label;\n}\n/**\n * Escapes a label.\n *\n * @export\n */\n\n\nfunction escapeLabel(label) {\n  return label.toLocaleString().replace(/[&'`\"<>]/g, match => {\n    return {\n      '&': '&amp;',\n      // tslint:disable-next-line: quotemark\n      \"'\": '&#x27;',\n      '`': '&#x60;',\n      '\"': '&quot;',\n      '<': '&lt;',\n      '>': '&gt;'\n    }[match];\n  });\n}\n\nclass LegendEntryComponent {\n  constructor() {\n    this.isActive = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.toggle = new EventEmitter();\n  }\n\n  get trimmedLabel() {\n    return this.formattedLabel || '(empty)';\n  }\n\n  onMouseEnter() {\n    this.activate.emit({\n      name: this.label\n    });\n  }\n\n  onMouseLeave() {\n    this.deactivate.emit({\n      name: this.label\n    });\n  }\n\n}\n\nLegendEntryComponent.ɵfac = function LegendEntryComponent_Factory(t) {\n  return new (t || LegendEntryComponent)();\n};\n\nLegendEntryComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LegendEntryComponent,\n  selectors: [[\"ngx-charts-legend-entry\"]],\n  hostBindings: function LegendEntryComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseenter\", function LegendEntryComponent_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function LegendEntryComponent_mouseleave_HostBindingHandler() {\n        return ctx.onMouseLeave();\n      });\n    }\n  },\n  inputs: {\n    color: \"color\",\n    label: \"label\",\n    formattedLabel: \"formattedLabel\",\n    isActive: \"isActive\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    toggle: \"toggle\"\n  },\n  decls: 4,\n  vars: 6,\n  consts: [[\"tabindex\", \"-1\", 3, \"title\", \"click\"], [1, \"legend-label-color\", 3, \"click\"], [1, \"legend-label-text\"]],\n  template: function LegendEntryComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"span\", 0);\n      i0.ɵɵlistener(\"click\", function LegendEntryComponent_Template_span_click_0_listener() {\n        return ctx.select.emit(ctx.formattedLabel);\n      });\n      i0.ɵɵelementStart(1, \"span\", 1);\n      i0.ɵɵlistener(\"click\", function LegendEntryComponent_Template_span_click_1_listener() {\n        return ctx.toggle.emit(ctx.formattedLabel);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"span\", 2);\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"active\", ctx.isActive);\n      i0.ɵɵproperty(\"title\", ctx.formattedLabel);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"background-color\", ctx.color);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.trimmedLabel, \" \");\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LegendEntryComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-legend-entry',\n      template: `\n    <span [title]=\"formattedLabel\" tabindex=\"-1\" [class.active]=\"isActive\" (click)=\"select.emit(formattedLabel)\">\n      <span class=\"legend-label-color\" [style.background-color]=\"color\" (click)=\"toggle.emit(formattedLabel)\"> </span>\n      <span class=\"legend-label-text\">\n        {{ trimmedLabel }}\n      </span>\n    </span>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    color: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    formattedLabel: [{\n      type: Input\n    }],\n    isActive: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    toggle: [{\n      type: Output\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass LegendComponent {\n  constructor(cd) {\n    this.cd = cd;\n    this.horizontal = false;\n    this.labelClick = new EventEmitter();\n    this.labelActivate = new EventEmitter();\n    this.labelDeactivate = new EventEmitter();\n    this.legendEntries = [];\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.cd.markForCheck();\n    this.legendEntries = this.getLegendEntries();\n  }\n\n  getLegendEntries() {\n    const items = [];\n\n    for (const label of this.data) {\n      const formattedLabel = formatLabel(label);\n      const idx = items.findIndex(i => {\n        return i.label === formattedLabel;\n      });\n\n      if (idx === -1) {\n        items.push({\n          label,\n          formattedLabel,\n          color: this.colors.getColor(label)\n        });\n      }\n    }\n\n    return items;\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.label === d.name;\n    });\n    return item !== undefined;\n  }\n\n  activate(item) {\n    this.labelActivate.emit(item);\n  }\n\n  deactivate(item) {\n    this.labelDeactivate.emit(item);\n  }\n\n  trackBy(index, item) {\n    return item.label;\n  }\n\n}\n\nLegendComponent.ɵfac = function LegendComponent_Factory(t) {\n  return new (t || LegendComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nLegendComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LegendComponent,\n  selectors: [[\"ngx-charts-legend\"]],\n  inputs: {\n    data: \"data\",\n    title: \"title\",\n    colors: \"colors\",\n    height: \"height\",\n    width: \"width\",\n    activeEntries: \"activeEntries\",\n    horizontal: \"horizontal\"\n  },\n  outputs: {\n    labelClick: \"labelClick\",\n    labelActivate: \"labelActivate\",\n    labelDeactivate: \"labelDeactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 5,\n  vars: 9,\n  consts: [[\"class\", \"legend-title\", 4, \"ngIf\"], [1, \"legend-wrap\"], [1, \"legend-labels\"], [\"class\", \"legend-label\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"legend-title\"], [1, \"legend-title-text\"], [1, \"legend-label\"], [3, \"label\", \"formattedLabel\", \"color\", \"isActive\", \"select\", \"activate\", \"deactivate\"]],\n  template: function LegendComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\");\n      i0.ɵɵtemplate(1, LegendComponent_header_1_Template, 3, 1, \"header\", 0);\n      i0.ɵɵelementStart(2, \"div\", 1);\n      i0.ɵɵelementStart(3, \"ul\", 2);\n      i0.ɵɵtemplate(4, LegendComponent_li_4_Template, 2, 4, \"li\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"width\", ctx.width, \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.title == null ? null : ctx.title.length) > 0);\n      i0.ɵɵadvance(2);\n      i0.ɵɵstyleProp(\"max-height\", ctx.height - 45, \"px\");\n      i0.ɵɵclassProp(\"horizontal-legend\", ctx.horizontal);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.legendEntries)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [i2.NgIf, i2.NgForOf, LegendEntryComponent],\n  styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .legend-title{white-space:nowrap;overflow:hidden;margin-left:10px;margin-bottom:5px;font-size:14px;font-weight:700}.chart-legend ul,.chart-legend li{padding:0;margin:0;list-style:none}.chart-legend .horizontal-legend li{display:inline-block}.chart-legend .legend-wrap{width:calc(100% - 10px)}.chart-legend .legend-labels{line-height:85%;list-style:none;text-align:left;float:left;width:100%;border-radius:3px;overflow-y:auto;overflow-x:hidden;white-space:nowrap;background:rgba(0,0,0,.05)}.chart-legend .legend-label{cursor:pointer;font-size:90%;margin:8px;color:#afb7c8}.chart-legend .legend-label:hover{color:#000;transition:.2s}.chart-legend .legend-label .active .legend-label-text{color:#000}.chart-legend .legend-label-color{display:inline-block;height:15px;width:15px;margin-right:5px;color:#5b646b;border-radius:3px}.chart-legend .legend-label-text{display:inline-block;vertical-align:top;line-height:15px;font-size:12px;width:calc(100% - 20px);text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.chart-legend .legend-title-text{vertical-align:bottom;display:inline-block;line-height:16px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LegendComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-legend',\n      template: `\n    <div [style.width.px]=\"width\">\n      <header class=\"legend-title\" *ngIf=\"title?.length > 0\">\n        <span class=\"legend-title-text\">{{ title }}</span>\n      </header>\n      <div class=\"legend-wrap\">\n        <ul class=\"legend-labels\" [class.horizontal-legend]=\"horizontal\" [style.max-height.px]=\"height - 45\">\n          <li *ngFor=\"let entry of legendEntries; trackBy: trackBy\" class=\"legend-label\">\n            <ngx-charts-legend-entry\n              [label]=\"entry.label\"\n              [formattedLabel]=\"entry.formattedLabel\"\n              [color]=\"entry.color\"\n              [isActive]=\"isActive(entry)\"\n              (select)=\"labelClick.emit($event)\"\n              (activate)=\"activate($event)\"\n              (deactivate)=\"deactivate($event)\"\n            >\n            </ngx-charts-legend-entry>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .legend-title{white-space:nowrap;overflow:hidden;margin-left:10px;margin-bottom:5px;font-size:14px;font-weight:700}.chart-legend ul,.chart-legend li{padding:0;margin:0;list-style:none}.chart-legend .horizontal-legend li{display:inline-block}.chart-legend .legend-wrap{width:calc(100% - 10px)}.chart-legend .legend-labels{line-height:85%;list-style:none;text-align:left;float:left;width:100%;border-radius:3px;overflow-y:auto;overflow-x:hidden;white-space:nowrap;background:rgba(0,0,0,.05)}.chart-legend .legend-label{cursor:pointer;font-size:90%;margin:8px;color:#afb7c8}.chart-legend .legend-label:hover{color:#000;transition:.2s}.chart-legend .legend-label .active .legend-label-text{color:#000}.chart-legend .legend-label-color{display:inline-block;height:15px;width:15px;margin-right:5px;color:#5b646b;border-radius:3px}.chart-legend .legend-label-text{display:inline-block;vertical-align:top;line-height:15px;font-size:12px;width:calc(100% - 20px);text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.chart-legend .legend-title-text{vertical-align:bottom;display:inline-block;line-height:16px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    horizontal: [{\n      type: Input\n    }],\n    labelClick: [{\n      type: Output\n    }],\n    labelActivate: [{\n      type: Output\n    }],\n    labelDeactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nclass ChartComponent {\n  constructor() {\n    this.showLegend = false;\n    this.animations = true;\n    this.legendLabelClick = new EventEmitter();\n    this.legendLabelActivate = new EventEmitter();\n    this.legendLabelDeactivate = new EventEmitter();\n    this.LegendPosition = LegendPosition;\n    this.LegendType = LegendType;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    let legendColumns = 0;\n\n    if (this.showLegend) {\n      this.legendType = this.getLegendType();\n\n      if (!this.legendOptions || this.legendOptions.position === LegendPosition.Right) {\n        if (this.legendType === LegendType.ScaleLegend) {\n          legendColumns = 1;\n        } else {\n          legendColumns = 2;\n        }\n      }\n    }\n\n    const chartColumns = 12 - legendColumns;\n    this.chartWidth = Math.floor(this.view[0] * chartColumns / 12.0);\n    this.legendWidth = !this.legendOptions || this.legendOptions.position === LegendPosition.Right ? Math.floor(this.view[0] * legendColumns / 12.0) : this.chartWidth;\n  }\n\n  getLegendType() {\n    return this.legendOptions.scaleType === ScaleType.Linear ? LegendType.ScaleLegend : LegendType.Legend;\n  }\n\n}\n\nChartComponent.ɵfac = function ChartComponent_Factory(t) {\n  return new (t || ChartComponent)();\n};\n\nChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ChartComponent,\n  selectors: [[\"ngx-charts-chart\"]],\n  inputs: {\n    view: \"view\",\n    showLegend: \"showLegend\",\n    legendOptions: \"legendOptions\",\n    legendType: \"legendType\",\n    activeEntries: \"activeEntries\",\n    animations: \"animations\"\n  },\n  outputs: {\n    legendLabelClick: \"legendLabelClick\",\n    legendLabelActivate: \"legendLabelActivate\",\n    legendLabelDeactivate: \"legendLabelDeactivate\"\n  },\n  features: [i0.ɵɵProvidersFeature([TooltipService]), i0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c2,\n  decls: 5,\n  vars: 6,\n  consts: [[1, \"ngx-charts-outer\"], [1, \"ngx-charts\"], [\"class\", \"chart-legend\", 3, \"horizontal\", \"valueRange\", \"colors\", \"height\", \"width\", 4, \"ngIf\"], [\"class\", \"chart-legend\", 3, \"horizontal\", \"data\", \"title\", \"colors\", \"height\", \"width\", \"activeEntries\", \"labelClick\", \"labelActivate\", \"labelDeactivate\", 4, \"ngIf\"], [1, \"chart-legend\", 3, \"horizontal\", \"valueRange\", \"colors\", \"height\", \"width\"], [1, \"chart-legend\", 3, \"horizontal\", \"data\", \"title\", \"colors\", \"height\", \"width\", \"activeEntries\", \"labelClick\", \"labelActivate\", \"labelDeactivate\"]],\n  template: function ChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"svg\", 1);\n      i0.ɵɵprojection(2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, ChartComponent_ngx_charts_scale_legend_3_Template, 1, 5, \"ngx-charts-scale-legend\", 2);\n      i0.ɵɵtemplate(4, ChartComponent_ngx_charts_legend_4_Template, 1, 7, \"ngx-charts-legend\", 3);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"width\", ctx.view[0], \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.chartWidth)(\"height\", ctx.view[1]);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.showLegend && ctx.legendType === ctx.LegendType.ScaleLegend);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showLegend && ctx.legendType === ctx.LegendType.Legend);\n    }\n  },\n  directives: [i2.NgIf, ScaleLegendComponent, LegendComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ChartComponent, [{\n    type: Component,\n    args: [{\n      providers: [TooltipService],\n      selector: 'ngx-charts-chart',\n      template: `\n    <div class=\"ngx-charts-outer\" [style.width.px]=\"view[0]\">\n      <svg class=\"ngx-charts\" [attr.width]=\"chartWidth\" [attr.height]=\"view[1]\">\n        <ng-content></ng-content>\n      </svg>\n      <ngx-charts-scale-legend\n        *ngIf=\"showLegend && legendType === LegendType.ScaleLegend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [valueRange]=\"legendOptions.domain\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n      >\n      </ngx-charts-scale-legend>\n      <ngx-charts-legend\n        *ngIf=\"showLegend && legendType === LegendType.Legend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [data]=\"legendOptions.domain\"\n        [title]=\"legendOptions.title\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n        [activeEntries]=\"activeEntries\"\n        (labelClick)=\"legendLabelClick.emit($event)\"\n        (labelActivate)=\"legendLabelActivate.emit($event)\"\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\n      >\n      </ngx-charts-legend>\n    </div>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    view: [{\n      type: Input\n    }],\n    showLegend: [{\n      type: Input\n    }],\n    legendOptions: [{\n      type: Input\n    }],\n    legendType: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    legendLabelClick: [{\n      type: Output\n    }],\n    legendLabelActivate: [{\n      type: Output\n    }],\n    legendLabelDeactivate: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * Visibility Observer\n */\n\n\nclass VisibilityObserver {\n  constructor(element, zone) {\n    this.element = element;\n    this.zone = zone;\n    this.visible = new EventEmitter();\n    this.isVisible = false;\n    this.runCheck();\n  }\n\n  destroy() {\n    clearTimeout(this.timeout);\n  }\n\n  onVisibilityChange() {\n    // trigger zone recalc for columns\n    this.zone.run(() => {\n      this.isVisible = true;\n      this.visible.emit(true);\n    });\n  }\n\n  runCheck() {\n    const check = () => {\n      if (!this.element) {\n        return;\n      } // https://davidwalsh.name/offsetheight-visibility\n\n\n      const {\n        offsetHeight,\n        offsetWidth\n      } = this.element.nativeElement;\n\n      if (offsetHeight && offsetWidth) {\n        clearTimeout(this.timeout);\n        this.onVisibilityChange();\n      } else {\n        clearTimeout(this.timeout);\n        this.zone.runOutsideAngular(() => {\n          this.timeout = setTimeout(() => check(), 100);\n        });\n      }\n    };\n\n    this.zone.runOutsideAngular(() => {\n      this.timeout = setTimeout(() => check());\n    });\n  }\n\n}\n\nVisibilityObserver.ɵfac = function VisibilityObserver_Factory(t) {\n  return new (t || VisibilityObserver)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nVisibilityObserver.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: VisibilityObserver,\n  selectors: [[\"visibility-observer\"]],\n  outputs: {\n    visible: \"visible\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(VisibilityObserver, [{\n    type: Directive,\n    args: [{\n      selector: 'visibility-observer'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    visible: [{\n      type: Output\n    }]\n  });\n})();\n\nfunction isDate(value) {\n  return toString.call(value) === '[object Date]';\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\nclass BaseChartComponent {\n  constructor(chartElement, zone, cd, platformId) {\n    this.chartElement = chartElement;\n    this.zone = zone;\n    this.cd = cd;\n    this.platformId = platformId;\n    this.scheme = 'cool';\n    this.schemeType = ScaleType.Ordinal;\n    this.animations = true;\n    this.select = new EventEmitter();\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.animations = false;\n    }\n  }\n\n  ngAfterViewInit() {\n    this.bindWindowResizeEvent(); // listen for visibility of the element for hidden by default scenario\n\n    this.visibilityObserver = new VisibilityObserver(this.chartElement, this.zone);\n    this.visibilityObserver.visible.subscribe(this.update.bind(this));\n  }\n\n  ngOnDestroy() {\n    this.unbindEvents();\n\n    if (this.visibilityObserver) {\n      this.visibilityObserver.visible.unsubscribe();\n      this.visibilityObserver.destroy();\n    }\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    if (this.results) {\n      this.results = this.cloneData(this.results);\n    } else {\n      this.results = [];\n    }\n\n    if (this.view) {\n      this.width = this.view[0];\n      this.height = this.view[1];\n    } else {\n      const dims = this.getContainerDims();\n\n      if (dims) {\n        this.width = dims.width;\n        this.height = dims.height;\n      }\n    } // default values if width or height are 0 or undefined\n\n\n    if (!this.width) {\n      this.width = 600;\n    }\n\n    if (!this.height) {\n      this.height = 400;\n    }\n\n    this.width = Math.floor(this.width);\n    this.height = Math.floor(this.height);\n\n    if (this.cd) {\n      this.cd.markForCheck();\n    }\n  }\n\n  getContainerDims() {\n    let width;\n    let height;\n    const hostElem = this.chartElement.nativeElement;\n\n    if (isPlatformBrowser(this.platformId) && hostElem.parentNode !== null) {\n      // Get the container dimensions\n      const dims = hostElem.parentNode.getBoundingClientRect();\n      width = dims.width;\n      height = dims.height;\n    }\n\n    if (width && height) {\n      return {\n        width,\n        height\n      };\n    }\n\n    return null;\n  }\n  /**\n   * Converts all date objects that appear as name\n   * into formatted date strings\n   */\n\n\n  formatDates() {\n    for (let i = 0; i < this.results.length; i++) {\n      const g = this.results[i];\n      g.label = g.name;\n\n      if (isDate(g.label)) {\n        g.label = g.label.toLocaleDateString();\n      }\n\n      if (g.series) {\n        for (let j = 0; j < g.series.length; j++) {\n          const d = g.series[j];\n          d.label = d.name;\n\n          if (isDate(d.label)) {\n            d.label = d.label.toLocaleDateString();\n          }\n        }\n      }\n    }\n  }\n\n  unbindEvents() {\n    if (this.resizeSubscription) {\n      this.resizeSubscription.unsubscribe();\n    }\n  }\n\n  bindWindowResizeEvent() {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    const source = fromEvent(window, 'resize');\n    const subscription = source.pipe(debounceTime(200)).subscribe(e => {\n      this.update();\n\n      if (this.cd) {\n        this.cd.markForCheck();\n      }\n    });\n    this.resizeSubscription = subscription;\n  }\n  /**\n   * Clones the data into a new object\n   *\n   * @memberOf BaseChart\n   */\n\n\n  cloneData(data) {\n    const results = [];\n\n    for (const item of data) {\n      const copy = {\n        name: item['name']\n      };\n\n      if (item['value'] !== undefined) {\n        copy['value'] = item['value'];\n      }\n\n      if (item['series'] !== undefined) {\n        copy['series'] = [];\n\n        for (const seriesItem of item['series']) {\n          const seriesItemCopy = Object.assign({}, seriesItem);\n          copy['series'].push(seriesItemCopy);\n        }\n      }\n\n      if (item['extra'] !== undefined) {\n        copy['extra'] = JSON.parse(JSON.stringify(item['extra']));\n      }\n\n      results.push(copy);\n    }\n\n    return results;\n  }\n\n}\n\nBaseChartComponent.ɵfac = function BaseChartComponent_Factory(t) {\n  return new (t || BaseChartComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nBaseChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BaseChartComponent,\n  selectors: [[\"base-chart\"]],\n  inputs: {\n    results: \"results\",\n    view: \"view\",\n    scheme: \"scheme\",\n    schemeType: \"schemeType\",\n    customColors: \"customColors\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 0,\n  template: function BaseChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\");\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BaseChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'base-chart',\n      template: ` <div></div> `\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    results: [{\n      type: Input\n    }],\n    view: [{\n      type: Input\n    }],\n    scheme: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    customColors: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})();\n\nvar Orientation;\n\n(function (Orientation) {\n  Orientation[\"Top\"] = \"top\";\n  Orientation[\"Bottom\"] = \"bottom\";\n  Orientation[\"Left\"] = \"left\";\n  Orientation[\"Right\"] = \"right\";\n})(Orientation || (Orientation = {}));\n\nclass AxisLabelComponent {\n  constructor(element) {\n    this.textHeight = 25;\n    this.margin = 5;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.strokeWidth = '0.01';\n    this.textAnchor = 'middle';\n    this.transform = '';\n\n    switch (this.orient) {\n      case Orientation.Top:\n        this.y = this.offset;\n        this.x = this.width / 2;\n        break;\n\n      case Orientation.Bottom:\n        this.y = this.offset;\n        this.x = this.width / 2;\n        break;\n\n      case Orientation.Left:\n        this.y = -(this.offset + this.textHeight + this.margin);\n        this.x = -this.height / 2;\n        this.transform = 'rotate(270)';\n        break;\n\n      case Orientation.Right:\n        this.y = this.offset + this.margin;\n        this.x = -this.height / 2;\n        this.transform = 'rotate(270)';\n        break;\n\n      default:\n    }\n  }\n\n}\n\nAxisLabelComponent.ɵfac = function AxisLabelComponent_Factory(t) {\n  return new (t || AxisLabelComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nAxisLabelComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AxisLabelComponent,\n  selectors: [[\"g\", \"ngx-charts-axis-label\", \"\"]],\n  inputs: {\n    orient: \"orient\",\n    label: \"label\",\n    offset: \"offset\",\n    width: \"width\",\n    height: \"height\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c3,\n  decls: 2,\n  vars: 6,\n  template: function AxisLabelComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"text\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"stroke-width\", ctx.strokeWidth)(\"x\", ctx.x)(\"y\", ctx.y)(\"text-anchor\", ctx.textAnchor)(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", ctx.label, \" \");\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AxisLabelComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-axis-label]',\n      template: `\n    <svg:text\n      [attr.stroke-width]=\"strokeWidth\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n    >\n      {{ label }}\n    </svg:text>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    orient: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    offset: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }]\n  });\n})();\n\nfunction trimLabel(s, max = 16) {\n  if (typeof s !== 'string') {\n    if (typeof s === 'number') {\n      return s + '';\n    } else {\n      return '';\n    }\n  }\n\n  s = s.trim();\n\n  if (s.length <= max) {\n    return s;\n  } else {\n    return `${s.slice(0, max)}...`;\n  }\n}\n\nfunction reduceTicks(ticks, maxTicks) {\n  if (ticks.length > maxTicks) {\n    const reduced = [];\n    const modulus = Math.floor(ticks.length / maxTicks);\n\n    for (let i = 0; i < ticks.length; i++) {\n      if (i % modulus === 0) {\n        reduced.push(ticks[i]);\n      }\n    }\n\n    ticks = reduced;\n  }\n\n  return ticks;\n}\n\nvar TextAnchor;\n\n(function (TextAnchor) {\n  TextAnchor[\"Start\"] = \"start\";\n  TextAnchor[\"Middle\"] = \"middle\";\n  TextAnchor[\"End\"] = \"end\";\n})(TextAnchor || (TextAnchor = {}));\n\nclass XAxisTicksComponent {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.tickArguments = [5];\n    this.tickStroke = '#ccc';\n    this.trimTicks = true;\n    this.maxTickLength = 16;\n    this.showGridLines = false;\n    this.rotateTicks = true;\n    this.dimensionsChanged = new EventEmitter();\n    this.verticalSpacing = 20;\n    this.rotateLabels = false;\n    this.innerTickSize = 6;\n    this.outerTickSize = 6;\n    this.tickPadding = 3;\n    this.textAnchor = TextAnchor.Middle;\n    this.maxTicksLength = 0;\n    this.maxAllowedLength = 16;\n    this.height = 0;\n    this.approxHeight = 10;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  ngAfterViewInit() {\n    setTimeout(() => this.updateDims());\n  }\n\n  updateDims() {\n    if (!isPlatformBrowser(this.platformId)) {\n      // for SSR, use approximate value instead of measured\n      this.dimensionsChanged.emit({\n        height: this.approxHeight\n      });\n      return;\n    }\n\n    const height = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().height, 10);\n\n    if (height !== this.height) {\n      this.height = height;\n      this.dimensionsChanged.emit({\n        height: this.height\n      });\n      setTimeout(() => this.updateDims());\n    }\n  }\n\n  update() {\n    const scale = this.scale;\n    this.ticks = this.getTicks();\n\n    if (this.tickFormatting) {\n      this.tickFormat = this.tickFormatting;\n    } else if (scale.tickFormat) {\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n    } else {\n      this.tickFormat = function (d) {\n        if (d.constructor.name === 'Date') {\n          return d.toLocaleDateString();\n        }\n\n        return d.toLocaleString();\n      };\n    }\n\n    const angle = this.rotateTicks ? this.getRotationAngle(this.ticks) : null;\n    this.adjustedScale = this.scale.bandwidth ? function (d) {\n      return this.scale(d) + this.scale.bandwidth() * 0.5;\n    } : this.scale;\n    this.textTransform = '';\n\n    if (angle && angle !== 0) {\n      this.textTransform = `rotate(${angle})`;\n      this.textAnchor = TextAnchor.End;\n      this.verticalSpacing = 10;\n    } else {\n      this.textAnchor = TextAnchor.Middle;\n    }\n\n    setTimeout(() => this.updateDims());\n  }\n\n  getRotationAngle(ticks) {\n    let angle = 0;\n    this.maxTicksLength = 0;\n\n    for (let i = 0; i < ticks.length; i++) {\n      const tick = this.tickFormat(ticks[i]).toString();\n      let tickLength = tick.length;\n\n      if (this.trimTicks) {\n        tickLength = this.tickTrim(tick).length;\n      }\n\n      if (tickLength > this.maxTicksLength) {\n        this.maxTicksLength = tickLength;\n      }\n    }\n\n    const len = Math.min(this.maxTicksLength, this.maxAllowedLength);\n    const charWidth = 7; // need to measure this\n\n    const wordWidth = len * charWidth;\n    let baseWidth = wordWidth;\n    const maxBaseWidth = Math.floor(this.width / ticks.length); // calculate optimal angle\n\n    while (baseWidth > maxBaseWidth && angle > -90) {\n      angle -= 30;\n      baseWidth = Math.cos(angle * (Math.PI / 180)) * wordWidth;\n    }\n\n    this.approxHeight = Math.max(Math.abs(Math.sin(angle * (Math.PI / 180)) * wordWidth), 10);\n    return angle;\n  }\n\n  getTicks() {\n    let ticks;\n    const maxTicks = this.getMaxTicks(20);\n    const maxScaleTicks = this.getMaxTicks(100);\n\n    if (this.tickValues) {\n      ticks = this.tickValues;\n    } else if (this.scale.ticks) {\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n    } else {\n      ticks = this.scale.domain();\n      ticks = reduceTicks(ticks, maxTicks);\n    }\n\n    return ticks;\n  }\n\n  getMaxTicks(tickWidth) {\n    return Math.floor(this.width / tickWidth);\n  }\n\n  tickTransform(tick) {\n    return 'translate(' + this.adjustedScale(tick) + ',' + this.verticalSpacing + ')';\n  }\n\n  gridLineTransform() {\n    return `translate(0,${-this.verticalSpacing - 5})`;\n  }\n\n  tickTrim(label) {\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n  }\n\n}\n\nXAxisTicksComponent.ɵfac = function XAxisTicksComponent_Factory(t) {\n  return new (t || XAxisTicksComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nXAxisTicksComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: XAxisTicksComponent,\n  selectors: [[\"g\", \"ngx-charts-x-axis-ticks\", \"\"]],\n  viewQuery: function XAxisTicksComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c4, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ticksElement = _t.first);\n    }\n  },\n  inputs: {\n    scale: \"scale\",\n    orient: \"orient\",\n    tickArguments: \"tickArguments\",\n    tickValues: \"tickValues\",\n    tickStroke: \"tickStroke\",\n    trimTicks: \"trimTicks\",\n    maxTickLength: \"maxTickLength\",\n    tickFormatting: \"tickFormatting\",\n    showGridLines: \"showGridLines\",\n    gridLineHeight: \"gridLineHeight\",\n    width: \"width\",\n    rotateTicks: \"rotateTicks\"\n  },\n  outputs: {\n    dimensionsChanged: \"dimensionsChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c5,\n  decls: 4,\n  vars: 2,\n  consts: [[\"ticksel\", \"\"], [\"class\", \"tick\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngFor\", \"ngForOf\"], [1, \"tick\"], [\"stroke-width\", \"0.01\"], [4, \"ngIf\"], [\"y2\", \"0\", 1, \"gridline-path\", \"gridline-path-vertical\"]],\n  template: function XAxisTicksComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", null, 0);\n      i0.ɵɵtemplate(2, XAxisTicksComponent__svg_g_2_Template, 5, 7, \"g\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, XAxisTicksComponent__svg_g_3_Template, 2, 2, \"g\", 2);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks);\n    }\n  },\n  directives: [i2.NgForOf, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XAxisTicksComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-x-axis-ticks]',\n      template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"tickTransform(tick)\">\n        <title>{{ tickFormat(tick) }}</title>\n        <svg:text\n          stroke-width=\"0.01\"\n          [attr.text-anchor]=\"textAnchor\"\n          [attr.transform]=\"textTransform\"\n          [style.font-size]=\"'12px'\"\n        >\n          {{ tickTrim(tickFormat(tick)) }}\n        </svg:text>\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"tickTransform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line class=\"gridline-path gridline-path-vertical\" [attr.y1]=\"-gridLineHeight\" y2=\"0\" />\n      </svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    scale: [{\n      type: Input\n    }],\n    orient: [{\n      type: Input\n    }],\n    tickArguments: [{\n      type: Input\n    }],\n    tickValues: [{\n      type: Input\n    }],\n    tickStroke: [{\n      type: Input\n    }],\n    trimTicks: [{\n      type: Input\n    }],\n    maxTickLength: [{\n      type: Input\n    }],\n    tickFormatting: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    gridLineHeight: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    rotateTicks: [{\n      type: Input\n    }],\n    dimensionsChanged: [{\n      type: Output\n    }],\n    ticksElement: [{\n      type: ViewChild,\n      args: ['ticksel']\n    }]\n  });\n})();\n\nclass XAxisComponent {\n  constructor() {\n    this.rotateTicks = true;\n    this.showGridLines = false;\n    this.xOrient = Orientation.Bottom;\n    this.xAxisOffset = 0;\n    this.dimensionsChanged = new EventEmitter();\n    this.xAxisClassName = 'x axis';\n    this.labelOffset = 0;\n    this.fill = 'none';\n    this.stroke = 'stroke';\n    this.tickStroke = '#ccc';\n    this.strokeWidth = 'none';\n    this.padding = 5;\n    this.orientation = Orientation;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.transform = `translate(0,${this.xAxisOffset + this.padding + this.dims.height})`;\n\n    if (typeof this.xAxisTickCount !== 'undefined') {\n      this.tickArguments = [this.xAxisTickCount];\n    }\n  }\n\n  emitTicksHeight({\n    height\n  }) {\n    const newLabelOffset = height + 25 + 5;\n\n    if (newLabelOffset !== this.labelOffset) {\n      this.labelOffset = newLabelOffset;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({\n          height\n        });\n      }, 0);\n    }\n  }\n\n}\n\nXAxisComponent.ɵfac = function XAxisComponent_Factory(t) {\n  return new (t || XAxisComponent)();\n};\n\nXAxisComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: XAxisComponent,\n  selectors: [[\"g\", \"ngx-charts-x-axis\", \"\"]],\n  viewQuery: function XAxisComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(XAxisTicksComponent, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ticksComponent = _t.first);\n    }\n  },\n  inputs: {\n    xScale: \"xScale\",\n    dims: \"dims\",\n    trimTicks: \"trimTicks\",\n    rotateTicks: \"rotateTicks\",\n    maxTickLength: \"maxTickLength\",\n    tickFormatting: \"tickFormatting\",\n    showGridLines: \"showGridLines\",\n    showLabel: \"showLabel\",\n    labelText: \"labelText\",\n    ticks: \"ticks\",\n    xAxisTickCount: \"xAxisTickCount\",\n    xOrient: \"xOrient\",\n    xAxisOffset: \"xAxisOffset\"\n  },\n  outputs: {\n    dimensionsChanged: \"dimensionsChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c6,\n  decls: 3,\n  vars: 4,\n  consts: [[\"ngx-charts-x-axis-ticks\", \"\", 3, \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"tickArguments\", \"tickStroke\", \"scale\", \"orient\", \"showGridLines\", \"gridLineHeight\", \"width\", \"tickValues\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\", 4, \"ngIf\"], [\"ngx-charts-x-axis-ticks\", \"\", 3, \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"tickArguments\", \"tickStroke\", \"scale\", \"orient\", \"showGridLines\", \"gridLineHeight\", \"width\", \"tickValues\", \"dimensionsChanged\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\"]],\n  template: function XAxisComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\");\n      i0.ɵɵtemplate(1, XAxisComponent__svg_g_1_Template, 1, 12, \"g\", 0);\n      i0.ɵɵtemplate(2, XAxisComponent__svg_g_2_Template, 1, 5, \"g\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"class\", ctx.xAxisClassName)(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xScale);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showLabel);\n    }\n  },\n  directives: [i2.NgIf, XAxisTicksComponent, AxisLabelComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(XAxisComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-x-axis]',\n      template: `\n    <svg:g [attr.class]=\"xAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-x-axis-ticks\n        *ngIf=\"xScale\"\n        [trimTicks]=\"trimTicks\"\n        [rotateTicks]=\"rotateTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"xScale\"\n        [orient]=\"xOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineHeight]=\"dims.height\"\n        [width]=\"dims.width\"\n        [tickValues]=\"ticks\"\n        (dimensionsChanged)=\"emitTicksHeight($event)\"\n      />\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"orientation.Bottom\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    xScale: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    trimTicks: [{\n      type: Input\n    }],\n    rotateTicks: [{\n      type: Input\n    }],\n    maxTickLength: [{\n      type: Input\n    }],\n    tickFormatting: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    showLabel: [{\n      type: Input\n    }],\n    labelText: [{\n      type: Input\n    }],\n    ticks: [{\n      type: Input\n    }],\n    xAxisTickCount: [{\n      type: Input\n    }],\n    xOrient: [{\n      type: Input\n    }],\n    xAxisOffset: [{\n      type: Input\n    }],\n    dimensionsChanged: [{\n      type: Output\n    }],\n    ticksComponent: [{\n      type: ViewChild,\n      args: [XAxisTicksComponent]\n    }]\n  });\n})();\n/**\n * Generates a rounded rectanglar path\n *\n * @export\n * @param x, y, w, h, r, tl, tr, bl, br\n */\n\n\nfunction roundedRect(x, y, w, h, r, [tl, tr, bl, br]) {\n  let retval = '';\n  w = Math.floor(w);\n  h = Math.floor(h);\n  w = w === 0 ? 1 : w;\n  h = h === 0 ? 1 : h;\n  retval = `M${[x + r, y]}`;\n  retval += `h${w - 2 * r}`;\n\n  if (tr) {\n    retval += `a${[r, r]} 0 0 1 ${[r, r]}`;\n  } else {\n    retval += `h${r}v${r}`;\n  }\n\n  retval += `v${h - 2 * r}`;\n\n  if (br) {\n    retval += `a${[r, r]} 0 0 1 ${[-r, r]}`;\n  } else {\n    retval += `v${r}h${-r}`;\n  }\n\n  retval += `h${2 * r - w}`;\n\n  if (bl) {\n    retval += `a${[r, r]} 0 0 1 ${[-r, -r]}`;\n  } else {\n    retval += `h${-r}v${-r}`;\n  }\n\n  retval += `v${2 * r - h}`;\n\n  if (tl) {\n    retval += `a${[r, r]} 0 0 1 ${[r, -r]}`;\n  } else {\n    retval += `v${-r}h${r}`;\n  }\n\n  retval += `z`;\n  return retval;\n}\n\nclass YAxisTicksComponent {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.tickArguments = [5];\n    this.tickStroke = '#ccc';\n    this.trimTicks = true;\n    this.maxTickLength = 16;\n    this.showGridLines = false;\n    this.showRefLabels = false;\n    this.showRefLines = false;\n    this.dimensionsChanged = new EventEmitter();\n    this.innerTickSize = 6;\n    this.tickPadding = 3;\n    this.verticalSpacing = 20;\n    this.textAnchor = TextAnchor.Middle;\n    this.width = 0;\n    this.outerTickSize = 6;\n    this.rotateLabels = false;\n    this.referenceLineLength = 0;\n    this.Orientation = Orientation;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  ngAfterViewInit() {\n    setTimeout(() => this.updateDims());\n  }\n\n  updateDims() {\n    if (!isPlatformBrowser(this.platformId)) {\n      // for SSR, use approximate value instead of measured\n      this.width = this.getApproximateAxisWidth();\n      this.dimensionsChanged.emit({\n        width: this.width\n      });\n      return;\n    }\n\n    const width = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().width, 10);\n\n    if (width !== this.width) {\n      this.width = width;\n      this.dimensionsChanged.emit({\n        width\n      });\n      setTimeout(() => this.updateDims());\n    }\n  }\n\n  update() {\n    let scale;\n    const sign = this.orient === Orientation.Top || this.orient === Orientation.Right ? -1 : 1;\n    this.tickSpacing = Math.max(this.innerTickSize, 0) + this.tickPadding;\n    scale = this.scale;\n    this.ticks = this.getTicks();\n\n    if (this.tickFormatting) {\n      this.tickFormat = this.tickFormatting;\n    } else if (scale.tickFormat) {\n      this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n    } else {\n      this.tickFormat = function (d) {\n        if (d.constructor.name === 'Date') {\n          return d.toLocaleDateString();\n        }\n\n        return d.toLocaleString();\n      };\n    }\n\n    this.adjustedScale = scale.bandwidth ? function (d) {\n      return scale(d) + scale.bandwidth() * 0.5;\n    } : scale;\n\n    if (this.showRefLines && this.referenceLines) {\n      this.setReferencelines();\n    }\n\n    switch (this.orient) {\n      case Orientation.Top:\n        this.transform = function (tick) {\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\n        };\n\n        this.textAnchor = TextAnchor.Middle;\n        this.y2 = this.innerTickSize * sign;\n        this.y1 = this.tickSpacing * sign;\n        this.dy = sign < 0 ? '0em' : '.71em';\n        break;\n\n      case Orientation.Bottom:\n        this.transform = function (tick) {\n          return 'translate(' + this.adjustedScale(tick) + ',0)';\n        };\n\n        this.textAnchor = TextAnchor.Middle;\n        this.y2 = this.innerTickSize * sign;\n        this.y1 = this.tickSpacing * sign;\n        this.dy = sign < 0 ? '0em' : '.71em';\n        break;\n\n      case Orientation.Left:\n        this.transform = function (tick) {\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\n        };\n\n        this.textAnchor = TextAnchor.End;\n        this.x2 = this.innerTickSize * -sign;\n        this.x1 = this.tickSpacing * -sign;\n        this.dy = '.32em';\n        break;\n\n      case Orientation.Right:\n        this.transform = function (tick) {\n          return 'translate(0,' + this.adjustedScale(tick) + ')';\n        };\n\n        this.textAnchor = TextAnchor.Start;\n        this.x2 = this.innerTickSize * -sign;\n        this.x1 = this.tickSpacing * -sign;\n        this.dy = '.32em';\n        break;\n\n      default:\n    }\n\n    setTimeout(() => this.updateDims());\n  }\n\n  setReferencelines() {\n    this.refMin = this.adjustedScale(Math.min.apply(null, this.referenceLines.map(item => item.value)));\n    this.refMax = this.adjustedScale(Math.max.apply(null, this.referenceLines.map(item => item.value)));\n    this.referenceLineLength = this.referenceLines.length;\n    this.referenceAreaPath = roundedRect(0, this.refMax, this.gridLineWidth, this.refMin - this.refMax, 0, [false, false, false, false]);\n  }\n\n  getTicks() {\n    let ticks;\n    const maxTicks = this.getMaxTicks(20);\n    const maxScaleTicks = this.getMaxTicks(50);\n\n    if (this.tickValues) {\n      ticks = this.tickValues;\n    } else if (this.scale.ticks) {\n      ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n    } else {\n      ticks = this.scale.domain();\n      ticks = reduceTicks(ticks, maxTicks);\n    }\n\n    return ticks;\n  }\n\n  getMaxTicks(tickHeight) {\n    return Math.floor(this.height / tickHeight);\n  }\n\n  tickTransform(tick) {\n    return `translate(${this.adjustedScale(tick)},${this.verticalSpacing})`;\n  }\n\n  gridLineTransform() {\n    return `translate(5,0)`;\n  }\n\n  tickTrim(label) {\n    return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n  }\n\n  getApproximateAxisWidth() {\n    const maxChars = Math.max(...this.ticks.map(t => this.tickTrim(this.tickFormat(t)).length));\n    const charWidth = 7;\n    return maxChars * charWidth;\n  }\n\n}\n\nYAxisTicksComponent.ɵfac = function YAxisTicksComponent_Factory(t) {\n  return new (t || YAxisTicksComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nYAxisTicksComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: YAxisTicksComponent,\n  selectors: [[\"g\", \"ngx-charts-y-axis-ticks\", \"\"]],\n  viewQuery: function YAxisTicksComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c4, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ticksElement = _t.first);\n    }\n  },\n  inputs: {\n    scale: \"scale\",\n    orient: \"orient\",\n    tickArguments: \"tickArguments\",\n    tickValues: \"tickValues\",\n    tickStroke: \"tickStroke\",\n    trimTicks: \"trimTicks\",\n    maxTickLength: \"maxTickLength\",\n    tickFormatting: \"tickFormatting\",\n    showGridLines: \"showGridLines\",\n    gridLineWidth: \"gridLineWidth\",\n    height: \"height\",\n    referenceLines: \"referenceLines\",\n    showRefLabels: \"showRefLabels\",\n    showRefLines: \"showRefLines\"\n  },\n  outputs: {\n    dimensionsChanged: \"dimensionsChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c7,\n  decls: 6,\n  vars: 4,\n  consts: [[\"ticksel\", \"\"], [\"class\", \"tick\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"reference-area\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [1, \"tick\"], [\"stroke-width\", \"0.01\"], [1, \"reference-area\"], [4, \"ngIf\"], [\"class\", \"gridline-path gridline-path-horizontal\", \"x1\", \"0\", 4, \"ngIf\"], [\"x1\", \"0\", 1, \"gridline-path\", \"gridline-path-horizontal\"], [\"x1\", \"0\", 1, \"refline-path\", \"gridline-path-horizontal\"], [1, \"refline-label\"]],\n  template: function YAxisTicksComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", null, 0);\n      i0.ɵɵtemplate(2, YAxisTicksComponent__svg_g_2_Template, 5, 9, \"g\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, YAxisTicksComponent__svg_path_3_Template, 1, 2, \"path\", 2);\n      i0.ɵɵtemplate(4, YAxisTicksComponent__svg_g_4_Template, 2, 2, \"g\", 3);\n      i0.ɵɵtemplate(5, YAxisTicksComponent__svg_g_5_Template, 2, 1, \"g\", 3);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.referenceLineLength > 1 && ctx.refMax && ctx.refMin && ctx.showRefLines);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.referenceLines);\n    }\n  },\n  directives: [i2.NgForOf, i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(YAxisTicksComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-y-axis-ticks]',\n      template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"transform(tick)\">\n        <title>{{ tickFormat(tick) }}</title>\n        <svg:text\n          stroke-width=\"0.01\"\n          [attr.dy]=\"dy\"\n          [attr.x]=\"x1\"\n          [attr.y]=\"y1\"\n          [attr.text-anchor]=\"textAnchor\"\n          [style.font-size]=\"'12px'\"\n        >\n          {{ tickTrim(tickFormat(tick)) }}\n        </svg:text>\n      </svg:g>\n    </svg:g>\n\n    <svg:path\n      *ngIf=\"referenceLineLength > 1 && refMax && refMin && showRefLines\"\n      class=\"reference-area\"\n      [attr.d]=\"referenceAreaPath\"\n      [attr.transform]=\"gridLineTransform()\"\n    />\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"transform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line\n          *ngIf=\"orient === Orientation.Left\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n        />\n        <svg:line\n          *ngIf=\"orient === Orientation.Right\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"-gridLineWidth\"\n        />\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let refLine of referenceLines\">\n      <svg:g *ngIf=\"showRefLines\" [attr.transform]=\"transform(refLine.value)\">\n        <svg:line\n          class=\"refline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n          [attr.transform]=\"gridLineTransform()\"\n        />\n        <svg:g *ngIf=\"showRefLabels\">\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\n          <svg:text\n            class=\"refline-label\"\n            [attr.dy]=\"dy\"\n            [attr.y]=\"-6\"\n            [attr.x]=\"gridLineWidth\"\n            [attr.text-anchor]=\"textAnchor\"\n          >\n            {{ refLine.name }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    scale: [{\n      type: Input\n    }],\n    orient: [{\n      type: Input\n    }],\n    tickArguments: [{\n      type: Input\n    }],\n    tickValues: [{\n      type: Input\n    }],\n    tickStroke: [{\n      type: Input\n    }],\n    trimTicks: [{\n      type: Input\n    }],\n    maxTickLength: [{\n      type: Input\n    }],\n    tickFormatting: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    gridLineWidth: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    referenceLines: [{\n      type: Input\n    }],\n    showRefLabels: [{\n      type: Input\n    }],\n    showRefLines: [{\n      type: Input\n    }],\n    dimensionsChanged: [{\n      type: Output\n    }],\n    ticksElement: [{\n      type: ViewChild,\n      args: ['ticksel']\n    }]\n  });\n})();\n\nclass YAxisComponent {\n  constructor() {\n    this.showGridLines = false;\n    this.yOrient = Orientation.Left;\n    this.yAxisOffset = 0;\n    this.dimensionsChanged = new EventEmitter();\n    this.yAxisClassName = 'y axis';\n    this.labelOffset = 15;\n    this.fill = 'none';\n    this.stroke = '#CCC';\n    this.tickStroke = '#CCC';\n    this.strokeWidth = 1;\n    this.padding = 5;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.offset = -(this.yAxisOffset + this.padding);\n\n    if (this.yOrient === Orientation.Right) {\n      this.labelOffset = 65;\n      this.transform = `translate(${this.offset + this.dims.width} , 0)`;\n    } else {\n      this.offset = this.offset;\n      this.transform = `translate(${this.offset} , 0)`;\n    }\n\n    if (this.yAxisTickCount !== undefined) {\n      this.tickArguments = [this.yAxisTickCount];\n    }\n  }\n\n  emitTicksWidth({\n    width\n  }) {\n    if (width !== this.labelOffset && this.yOrient === Orientation.Right) {\n      this.labelOffset = width + this.labelOffset;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({\n          width\n        });\n      }, 0);\n    } else if (width !== this.labelOffset) {\n      this.labelOffset = width;\n      setTimeout(() => {\n        this.dimensionsChanged.emit({\n          width\n        });\n      }, 0);\n    }\n  }\n\n}\n\nYAxisComponent.ɵfac = function YAxisComponent_Factory(t) {\n  return new (t || YAxisComponent)();\n};\n\nYAxisComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: YAxisComponent,\n  selectors: [[\"g\", \"ngx-charts-y-axis\", \"\"]],\n  viewQuery: function YAxisComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(YAxisTicksComponent, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.ticksComponent = _t.first);\n    }\n  },\n  inputs: {\n    yScale: \"yScale\",\n    dims: \"dims\",\n    trimTicks: \"trimTicks\",\n    maxTickLength: \"maxTickLength\",\n    tickFormatting: \"tickFormatting\",\n    ticks: \"ticks\",\n    showGridLines: \"showGridLines\",\n    showLabel: \"showLabel\",\n    labelText: \"labelText\",\n    yAxisTickCount: \"yAxisTickCount\",\n    yOrient: \"yOrient\",\n    referenceLines: \"referenceLines\",\n    showRefLines: \"showRefLines\",\n    showRefLabels: \"showRefLabels\",\n    yAxisOffset: \"yAxisOffset\"\n  },\n  outputs: {\n    dimensionsChanged: \"dimensionsChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c8,\n  decls: 3,\n  vars: 4,\n  consts: [[\"ngx-charts-y-axis-ticks\", \"\", 3, \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"tickArguments\", \"tickValues\", \"tickStroke\", \"scale\", \"orient\", \"showGridLines\", \"gridLineWidth\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"height\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\", 4, \"ngIf\"], [\"ngx-charts-y-axis-ticks\", \"\", 3, \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"tickArguments\", \"tickValues\", \"tickStroke\", \"scale\", \"orient\", \"showGridLines\", \"gridLineWidth\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"height\", \"dimensionsChanged\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\"]],\n  template: function YAxisComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\");\n      i0.ɵɵtemplate(1, YAxisComponent__svg_g_1_Template, 1, 14, \"g\", 0);\n      i0.ɵɵtemplate(2, YAxisComponent__svg_g_2_Template, 1, 5, \"g\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"class\", ctx.yAxisClassName)(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yScale);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showLabel);\n    }\n  },\n  directives: [i2.NgIf, YAxisTicksComponent, AxisLabelComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(YAxisComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-y-axis]',\n      template: `\n    <svg:g [attr.class]=\"yAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-y-axis-ticks\n        *ngIf=\"yScale\"\n        [trimTicks]=\"trimTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickValues]=\"ticks\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"yScale\"\n        [orient]=\"yOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineWidth]=\"dims.width\"\n        [referenceLines]=\"referenceLines\"\n        [showRefLines]=\"showRefLines\"\n        [showRefLabels]=\"showRefLabels\"\n        [height]=\"dims.height\"\n        (dimensionsChanged)=\"emitTicksWidth($event)\"\n      />\n\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"yOrient\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    yScale: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    trimTicks: [{\n      type: Input\n    }],\n    maxTickLength: [{\n      type: Input\n    }],\n    tickFormatting: [{\n      type: Input\n    }],\n    ticks: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    showLabel: [{\n      type: Input\n    }],\n    labelText: [{\n      type: Input\n    }],\n    yAxisTickCount: [{\n      type: Input\n    }],\n    yOrient: [{\n      type: Input\n    }],\n    referenceLines: [{\n      type: Input\n    }],\n    showRefLines: [{\n      type: Input\n    }],\n    showRefLabels: [{\n      type: Input\n    }],\n    yAxisOffset: [{\n      type: Input\n    }],\n    dimensionsChanged: [{\n      type: Output\n    }],\n    ticksComponent: [{\n      type: ViewChild,\n      args: [YAxisTicksComponent]\n    }]\n  });\n})();\n\nclass AxesModule {}\n\nAxesModule.ɵfac = function AxesModule_Factory(t) {\n  return new (t || AxesModule)();\n};\n\nAxesModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AxesModule\n});\nAxesModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AxesModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent],\n      exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent]\n    }]\n  }], null, null);\n})();\n\nvar StyleTypes;\n\n(function (StyleTypes) {\n  StyleTypes[\"popover\"] = \"popover\";\n  StyleTypes[\"tooltip\"] = \"tooltip\";\n})(StyleTypes || (StyleTypes = {}));\n\nvar ShowTypes;\n\n(function (ShowTypes) {\n  ShowTypes[ShowTypes[\"all\"] = 'all'] = \"all\";\n  ShowTypes[ShowTypes[\"focus\"] = 'focus'] = \"focus\";\n  ShowTypes[ShowTypes[\"mouseover\"] = 'mouseover'] = \"mouseover\";\n})(ShowTypes || (ShowTypes = {}));\n\nclass TooltipDirective {\n  constructor(tooltipService, viewContainerRef, renderer) {\n    this.tooltipService = tooltipService;\n    this.viewContainerRef = viewContainerRef;\n    this.renderer = renderer;\n    this.tooltipCssClass = '';\n    this.tooltipAppendToBody = true;\n    this.tooltipSpacing = 10;\n    this.tooltipDisabled = false;\n    this.tooltipShowCaret = true;\n    this.tooltipPlacement = PlacementTypes.Top;\n    this.tooltipAlignment = PlacementTypes.Center;\n    this.tooltipType = StyleTypes.popover;\n    this.tooltipCloseOnClickOutside = true;\n    this.tooltipCloseOnMouseLeave = true;\n    this.tooltipHideTimeout = 300;\n    this.tooltipShowTimeout = 100;\n    this.tooltipShowEvent = ShowTypes.all;\n    this.tooltipImmediateExit = false;\n    this.show = new EventEmitter();\n    this.hide = new EventEmitter();\n  }\n\n  get listensForFocus() {\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.focus;\n  }\n\n  get listensForHover() {\n    return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.mouseover;\n  }\n\n  ngOnDestroy() {\n    this.hideTooltip(true);\n  }\n\n  onFocus() {\n    if (this.listensForFocus) {\n      this.showTooltip();\n    }\n  }\n\n  onBlur() {\n    if (this.listensForFocus) {\n      this.hideTooltip(true);\n    }\n  }\n\n  onMouseEnter() {\n    if (this.listensForHover) {\n      this.showTooltip();\n    }\n  }\n\n  onMouseLeave(target) {\n    if (this.listensForHover && this.tooltipCloseOnMouseLeave) {\n      clearTimeout(this.timeout);\n\n      if (this.component) {\n        const contentDom = this.component.instance.element.nativeElement;\n        const contains = contentDom.contains(target);\n        if (contains) return;\n      }\n\n      this.hideTooltip(this.tooltipImmediateExit);\n    }\n  }\n\n  onMouseClick() {\n    if (this.listensForHover) {\n      this.hideTooltip(true);\n    }\n  }\n\n  showTooltip(immediate) {\n    if (this.component || this.tooltipDisabled) return;\n    const time = immediate ? 0 : this.tooltipShowTimeout + (navigator.userAgent.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/) ? 300 : 0);\n    clearTimeout(this.timeout);\n    this.timeout = setTimeout(() => {\n      this.tooltipService.destroyAll();\n      const options = this.createBoundOptions();\n      this.component = this.tooltipService.create(options); // add a tiny timeout to avoid event re-triggers\n\n      setTimeout(() => {\n        if (this.component) {\n          this.addHideListeners(this.component.instance.element.nativeElement);\n        }\n      }, 10);\n      this.show.emit(true);\n    }, time);\n  }\n\n  addHideListeners(tooltip) {\n    // on mouse enter, cancel the hide triggered by the leave\n    this.mouseEnterContentEvent = this.renderer.listen(tooltip, 'mouseenter', () => {\n      clearTimeout(this.timeout);\n    }); // content mouse leave listener\n\n    if (this.tooltipCloseOnMouseLeave) {\n      this.mouseLeaveContentEvent = this.renderer.listen(tooltip, 'mouseleave', () => {\n        this.hideTooltip(this.tooltipImmediateExit);\n      });\n    } // content close on click outside\n\n\n    if (this.tooltipCloseOnClickOutside) {\n      this.documentClickEvent = this.renderer.listen('window', 'click', event => {\n        const contains = tooltip.contains(event.target);\n        if (!contains) this.hideTooltip();\n      });\n    }\n  }\n\n  hideTooltip(immediate = false) {\n    if (!this.component) return;\n\n    const destroyFn = () => {\n      // remove events\n      if (this.mouseLeaveContentEvent) this.mouseLeaveContentEvent();\n      if (this.mouseEnterContentEvent) this.mouseEnterContentEvent();\n      if (this.documentClickEvent) this.documentClickEvent(); // emit events\n\n      this.hide.emit(true); // destroy component\n\n      this.tooltipService.destroy(this.component);\n      this.component = undefined;\n    };\n\n    clearTimeout(this.timeout);\n\n    if (!immediate) {\n      this.timeout = setTimeout(destroyFn, this.tooltipHideTimeout);\n    } else {\n      destroyFn();\n    }\n  }\n\n  createBoundOptions() {\n    return {\n      title: this.tooltipTitle,\n      template: this.tooltipTemplate,\n      host: this.viewContainerRef.element,\n      placement: this.tooltipPlacement,\n      alignment: this.tooltipAlignment,\n      type: this.tooltipType,\n      showCaret: this.tooltipShowCaret,\n      cssClass: this.tooltipCssClass,\n      spacing: this.tooltipSpacing,\n      context: this.tooltipContext\n    };\n  }\n\n}\n\nTooltipDirective.ɵfac = function TooltipDirective_Factory(t) {\n  return new (t || TooltipDirective)(i0.ɵɵdirectiveInject(TooltipService), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n};\n\nTooltipDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TooltipDirective,\n  selectors: [[\"\", \"ngx-tooltip\", \"\"]],\n  hostBindings: function TooltipDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"focusin\", function TooltipDirective_focusin_HostBindingHandler() {\n        return ctx.onFocus();\n      })(\"blur\", function TooltipDirective_blur_HostBindingHandler() {\n        return ctx.onBlur();\n      })(\"mouseenter\", function TooltipDirective_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function TooltipDirective_mouseleave_HostBindingHandler($event) {\n        return ctx.onMouseLeave($event.target);\n      })(\"click\", function TooltipDirective_click_HostBindingHandler() {\n        return ctx.onMouseClick();\n      });\n    }\n  },\n  inputs: {\n    tooltipCssClass: \"tooltipCssClass\",\n    tooltipTitle: \"tooltipTitle\",\n    tooltipAppendToBody: \"tooltipAppendToBody\",\n    tooltipSpacing: \"tooltipSpacing\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipShowCaret: \"tooltipShowCaret\",\n    tooltipPlacement: \"tooltipPlacement\",\n    tooltipAlignment: \"tooltipAlignment\",\n    tooltipType: \"tooltipType\",\n    tooltipCloseOnClickOutside: \"tooltipCloseOnClickOutside\",\n    tooltipCloseOnMouseLeave: \"tooltipCloseOnMouseLeave\",\n    tooltipHideTimeout: \"tooltipHideTimeout\",\n    tooltipShowTimeout: \"tooltipShowTimeout\",\n    tooltipTemplate: \"tooltipTemplate\",\n    tooltipShowEvent: \"tooltipShowEvent\",\n    tooltipContext: \"tooltipContext\",\n    tooltipImmediateExit: \"tooltipImmediateExit\"\n  },\n  outputs: {\n    show: \"show\",\n    hide: \"hide\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngx-tooltip]'\n    }]\n  }], function () {\n    return [{\n      type: TooltipService\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: i0.Renderer2\n    }];\n  }, {\n    tooltipCssClass: [{\n      type: Input\n    }],\n    tooltipTitle: [{\n      type: Input\n    }],\n    tooltipAppendToBody: [{\n      type: Input\n    }],\n    tooltipSpacing: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipShowCaret: [{\n      type: Input\n    }],\n    tooltipPlacement: [{\n      type: Input\n    }],\n    tooltipAlignment: [{\n      type: Input\n    }],\n    tooltipType: [{\n      type: Input\n    }],\n    tooltipCloseOnClickOutside: [{\n      type: Input\n    }],\n    tooltipCloseOnMouseLeave: [{\n      type: Input\n    }],\n    tooltipHideTimeout: [{\n      type: Input\n    }],\n    tooltipShowTimeout: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    tooltipShowEvent: [{\n      type: Input\n    }],\n    tooltipContext: [{\n      type: Input\n    }],\n    tooltipImmediateExit: [{\n      type: Input\n    }],\n    show: [{\n      type: Output\n    }],\n    hide: [{\n      type: Output\n    }],\n    onFocus: [{\n      type: HostListener,\n      args: ['focusin']\n    }],\n    onBlur: [{\n      type: HostListener,\n      args: ['blur']\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave', ['$event.target']]\n    }],\n    onMouseClick: [{\n      type: HostListener,\n      args: ['click']\n    }]\n  });\n})();\n\nclass TooltipModule {}\n\nTooltipModule.ɵfac = function TooltipModule_Factory(t) {\n  return new (t || TooltipModule)();\n};\n\nTooltipModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: TooltipModule\n});\nTooltipModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [InjectionService, TooltipService],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [TooltipContentComponent, TooltipDirective],\n      providers: [InjectionService, TooltipService],\n      exports: [TooltipContentComponent, TooltipDirective],\n      imports: [CommonModule],\n      entryComponents: [TooltipContentComponent]\n    }]\n  }], null, null);\n})();\n\nconst cache = {};\n/**\n * Generates a short id.\n *\n * Description:\n *   A 4-character alphanumeric sequence (364 = 1.6 million)\n *   This should only be used for JavaScript specific models.\n *   http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\n *\n *   Example: `ebgf`\n */\n\nfunction id() {\n  let newId = ('0000' + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4); // append a 'a' because neo gets mad\n\n  newId = `a${newId}`; // ensure not already used\n\n  if (!cache[newId]) {\n    cache[newId] = true;\n    return newId;\n  }\n\n  return id();\n}\n\nvar BarOrientation;\n\n(function (BarOrientation) {\n  BarOrientation[\"Vertical\"] = \"vertical\";\n  BarOrientation[\"Horizontal\"] = \"horizontal\";\n})(BarOrientation || (BarOrientation = {}));\n\nclass SvgLinearGradientComponent {\n  constructor() {\n    this.orientation = BarOrientation.Vertical;\n  }\n\n  ngOnChanges(changes) {\n    this.x1 = '0%';\n    this.x2 = '0%';\n    this.y1 = '0%';\n    this.y2 = '0%';\n\n    if (this.orientation === BarOrientation.Horizontal) {\n      this.x2 = '100%';\n    } else if (this.orientation === BarOrientation.Vertical) {\n      this.y1 = '100%';\n    }\n  }\n\n}\n\nSvgLinearGradientComponent.ɵfac = function SvgLinearGradientComponent_Factory(t) {\n  return new (t || SvgLinearGradientComponent)();\n};\n\nSvgLinearGradientComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SvgLinearGradientComponent,\n  selectors: [[\"g\", \"ngx-charts-svg-linear-gradient\", \"\"]],\n  inputs: {\n    orientation: \"orientation\",\n    name: \"name\",\n    stops: \"stops\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c9,\n  decls: 2,\n  vars: 6,\n  consts: [[3, \"id\"], [3, \"stop-color\", \"stop-opacity\", 4, \"ngFor\", \"ngForOf\"]],\n  template: function SvgLinearGradientComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"linearGradient\", 0);\n      i0.ɵɵtemplate(1, SvgLinearGradientComponent__svg_stop_1_Template, 1, 5, \"stop\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"id\", ctx.name);\n      i0.ɵɵattribute(\"x1\", ctx.x1)(\"y1\", ctx.y1)(\"x2\", ctx.x2)(\"y2\", ctx.y2);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.stops);\n    }\n  },\n  directives: [i2.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SvgLinearGradientComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-svg-linear-gradient]',\n      template: `\n    <svg:linearGradient [id]=\"name\" [attr.x1]=\"x1\" [attr.y1]=\"y1\" [attr.x2]=\"x2\" [attr.y2]=\"y2\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:linearGradient>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    orientation: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    stops: [{\n      type: Input\n    }]\n  });\n})();\n\nclass CircleComponent {\n  constructor() {\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n  }\n\n  onClick() {\n    this.select.emit(this.data);\n  }\n\n  onMouseEnter() {\n    this.activate.emit(this.data);\n  }\n\n  onMouseLeave() {\n    this.deactivate.emit(this.data);\n  }\n\n  ngOnChanges(changes) {\n    this.classNames = Array.isArray(this.classNames) ? this.classNames.join(' ') : '';\n    this.classNames += 'circle';\n  }\n\n}\n\nCircleComponent.ɵfac = function CircleComponent_Factory(t) {\n  return new (t || CircleComponent)();\n};\n\nCircleComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CircleComponent,\n  selectors: [[\"g\", \"ngx-charts-circle\", \"\"]],\n  hostBindings: function CircleComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function CircleComponent_click_HostBindingHandler() {\n        return ctx.onClick();\n      })(\"mouseenter\", function CircleComponent_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function CircleComponent_mouseleave_HostBindingHandler() {\n        return ctx.onMouseLeave();\n      });\n    }\n  },\n  inputs: {\n    cx: \"cx\",\n    cy: \"cy\",\n    r: \"r\",\n    fill: \"fill\",\n    stroke: \"stroke\",\n    data: \"data\",\n    classNames: \"classNames\",\n    circleOpacity: \"circleOpacity\",\n    pointerEvents: \"pointerEvents\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c10,\n  decls: 1,\n  vars: 8,\n  template: function CircleComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelement(0, \"circle\");\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"cx\", ctx.cx)(\"cy\", ctx.cy)(\"r\", ctx.r)(\"fill\", ctx.fill)(\"stroke\", ctx.stroke)(\"opacity\", ctx.circleOpacity)(\"class\", ctx.classNames)(\"pointer-events\", ctx.pointerEvents);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CircleComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-circle]',\n      template: `\n    <svg:circle\n      [attr.cx]=\"cx\"\n      [attr.cy]=\"cy\"\n      [attr.r]=\"r\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      [attr.opacity]=\"circleOpacity\"\n      [attr.class]=\"classNames\"\n      [attr.pointer-events]=\"pointerEvents\"\n    />\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    cx: [{\n      type: Input\n    }],\n    cy: [{\n      type: Input\n    }],\n    r: [{\n      type: Input\n    }],\n    fill: [{\n      type: Input\n    }],\n    stroke: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    classNames: [{\n      type: Input\n    }],\n    circleOpacity: [{\n      type: Input\n    }],\n    pointerEvents: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click']\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nvar SeriesType;\n\n(function (SeriesType) {\n  SeriesType[\"Standard\"] = \"standard\";\n  SeriesType[\"Stacked\"] = \"stacked\";\n})(SeriesType || (SeriesType = {}));\n\nclass CircleSeriesComponent {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.type = SeriesType.Standard;\n    this.tooltipDisabled = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.barVisible = false;\n    this.barOrientation = BarOrientation;\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n    this.isSSR = false;\n  }\n\n  ngOnInit() {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  ngOnChanges() {\n    this.update();\n  }\n\n  update() {\n    this.circle = this.getActiveCircle();\n  }\n\n  getActiveCircle() {\n    const indexActiveDataPoint = this.data.series.findIndex(d => {\n      const label = d.name;\n      return label && this.visibleValue && label.toString() === this.visibleValue.toString() && d.value !== undefined;\n    });\n\n    if (indexActiveDataPoint === -1) {\n      // No valid point is 'active/hovered over' at this moment.\n      return undefined;\n    }\n\n    return this.mapDataPointToCircle(this.data.series[indexActiveDataPoint], indexActiveDataPoint);\n  }\n\n  mapDataPointToCircle(d, i) {\n    const seriesName = this.data.name;\n    const value = d.value;\n    const label = d.name;\n    const tooltipLabel = formatLabel(label);\n    let cx;\n\n    if (this.scaleType === ScaleType.Time) {\n      cx = this.xScale(label);\n    } else if (this.scaleType === ScaleType.Linear) {\n      cx = this.xScale(Number(label));\n    } else {\n      cx = this.xScale(label);\n    }\n\n    const cy = this.yScale(this.type === SeriesType.Standard ? value : d.d1);\n    const radius = 5;\n    const height = this.yScale.range()[0] - cy;\n    const opacity = 1;\n    let color;\n\n    if (this.colors.scaleType === ScaleType.Linear) {\n      if (this.type === SeriesType.Standard) {\n        color = this.colors.getColor(value);\n      } else {\n        color = this.colors.getColor(d.d1);\n      }\n    } else {\n      color = this.colors.getColor(seriesName);\n    }\n\n    const data = Object.assign({}, d, {\n      series: seriesName,\n      value,\n      name: label\n    });\n    return {\n      classNames: [`circle-data-${i}`],\n      value,\n      label,\n      data,\n      cx,\n      cy,\n      radius,\n      height,\n      tooltipLabel,\n      color,\n      opacity,\n      seriesName,\n      gradientStops: this.getGradientStops(color),\n      min: d.min,\n      max: d.max\n    };\n  }\n\n  getTooltipText({\n    tooltipLabel,\n    value,\n    seriesName,\n    min,\n    max\n  }) {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(seriesName)} • ${escapeLabel(tooltipLabel)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}${this.getTooltipMinMaxText(min, max)}</span>\n    `;\n  }\n\n  getTooltipMinMaxText(min, max) {\n    if (min !== undefined || max !== undefined) {\n      let result = ' (';\n\n      if (min !== undefined) {\n        if (max === undefined) {\n          result += '≥';\n        }\n\n        result += min.toLocaleString();\n\n        if (max !== undefined) {\n          result += ' - ';\n        }\n      } else if (max !== undefined) {\n        result += '≤';\n      }\n\n      if (max !== undefined) {\n        result += max.toLocaleString();\n      }\n\n      result += ')';\n      return result;\n    } else {\n      return '';\n    }\n  }\n\n  getGradientStops(color) {\n    return [{\n      offset: 0,\n      color,\n      opacity: 0.2\n    }, {\n      offset: 100,\n      color,\n      opacity: 1\n    }];\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  activateCircle() {\n    this.barVisible = true;\n    this.activate.emit({\n      name: this.data.name\n    });\n  }\n\n  deactivateCircle() {\n    this.barVisible = false;\n    this.circle.opacity = 0;\n    this.deactivate.emit({\n      name: this.data.name\n    });\n  }\n\n}\n\nCircleSeriesComponent.ɵfac = function CircleSeriesComponent_Factory(t) {\n  return new (t || CircleSeriesComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nCircleSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CircleSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-circle-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    type: \"type\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    scaleType: \"scaleType\",\n    visibleValue: \"visibleValue\",\n    activeEntries: \"activeEntries\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c11,\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngIf\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"], [\"class\", \"tooltip-bar\", 4, \"ngIf\"], [\"ngx-charts-circle\", \"\", \"ngx-tooltip\", \"\", 1, \"circle\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"pointerEvents\", \"data\", \"classNames\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"], [1, \"tooltip-bar\"]],\n  template: function CircleSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, CircleSeriesComponent__svg_g_0_Template, 6, 22, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.circle);\n    }\n  },\n  directives: [i2.NgIf, SvgLinearGradientComponent, CircleComponent, TooltipDirective],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':enter', [style({\n      opacity: 0\n    }), animate(250, style({\n      opacity: 1\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CircleSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-circle-series]',\n      template: `\n    <svg:g *ngIf=\"circle\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"circle.gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        *ngIf=\"!isSSR && barVisible && type === 'standard'\"\n        [@animationState]=\"'active'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:rect\n        *ngIf=\"isSSR && barVisible && type === 'standard'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:g\n        ngx-charts-circle\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circle.radius\"\n        [fill]=\"circle.color\"\n        [class.active]=\"isActive({ name: circle.seriesName })\"\n        [pointerEvents]=\"circle.value === 0 ? 'none' : 'all'\"\n        [data]=\"circle.value\"\n        [classNames]=\"circle.classNames\"\n        (select)=\"onClick(circle.data)\"\n        (activate)=\"activateCircle()\"\n        (deactivate)=\"deactivateCircle()\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':enter', [style({\n        opacity: 0\n      }), animate(250, style({\n        opacity: 1\n      }))])])]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    visibleValue: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nclass GridPanelComponent {}\n\nGridPanelComponent.ɵfac = function GridPanelComponent_Factory(t) {\n  return new (t || GridPanelComponent)();\n};\n\nGridPanelComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GridPanelComponent,\n  selectors: [[\"g\", \"ngx-charts-grid-panel\", \"\"]],\n  inputs: {\n    width: \"width\",\n    height: \"height\",\n    x: \"x\",\n    y: \"y\"\n  },\n  attrs: _c13,\n  decls: 1,\n  vars: 4,\n  consts: [[\"stroke\", \"none\", 1, \"gridpanel\"]],\n  template: function GridPanelComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelement(0, \"rect\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"height\", ctx.height)(\"width\", ctx.width)(\"x\", ctx.x)(\"y\", ctx.y);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GridPanelComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-grid-panel]',\n      template: `\n    <svg:rect [attr.height]=\"height\" [attr.width]=\"width\" [attr.x]=\"x\" [attr.y]=\"y\" stroke=\"none\" class=\"gridpanel\" />\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }]\n  });\n})();\n\nvar ClassEnum;\n\n(function (ClassEnum) {\n  ClassEnum[\"Odd\"] = \"odd\";\n  ClassEnum[\"Even\"] = \"even\";\n})(ClassEnum || (ClassEnum = {}));\n\nclass GridPanelSeriesComponent {\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.gridPanels = this.getGridPanels();\n  }\n\n  getGridPanels() {\n    return this.data.map(d => {\n      let offset;\n      let width;\n      let height;\n      let x;\n      let y;\n      let className = ClassEnum.Odd;\n\n      if (this.orient === BarOrientation.Vertical) {\n        const position = this.xScale(d.name);\n        const positionIndex = Number.parseInt((position / this.xScale.step()).toString(), 10);\n\n        if (positionIndex % 2 === 1) {\n          className = ClassEnum.Even;\n        }\n\n        offset = this.xScale.bandwidth() * this.xScale.paddingInner();\n        width = this.xScale.bandwidth() + offset;\n        height = this.dims.height;\n        x = this.xScale(d.name) - offset / 2;\n        y = 0;\n      } else if (this.orient === BarOrientation.Horizontal) {\n        const position = this.yScale(d.name);\n        const positionIndex = Number.parseInt((position / this.yScale.step()).toString(), 10);\n\n        if (positionIndex % 2 === 1) {\n          className = ClassEnum.Even;\n        }\n\n        offset = this.yScale.bandwidth() * this.yScale.paddingInner();\n        width = this.dims.width;\n        height = this.yScale.bandwidth() + offset;\n        x = 0;\n        y = this.yScale(d.name) - offset / 2;\n      }\n\n      return {\n        name: d.name,\n        class: className,\n        height,\n        width,\n        x,\n        y\n      };\n    });\n  }\n\n}\n\nGridPanelSeriesComponent.ɵfac = function GridPanelSeriesComponent_Factory(t) {\n  return new (t || GridPanelSeriesComponent)();\n};\n\nGridPanelSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GridPanelSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-grid-panel-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    dims: \"dims\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    orient: \"orient\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c14,\n  decls: 1,\n  vars: 1,\n  consts: [[\"ngx-charts-grid-panel\", \"\", 3, \"height\", \"width\", \"x\", \"y\", \"grid-panel\", \"odd\", \"even\", 4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-grid-panel\", \"\", 3, \"height\", \"width\", \"x\", \"y\"]],\n  template: function GridPanelSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, GridPanelSeriesComponent__svg_g_0_Template, 1, 10, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.gridPanels);\n    }\n  },\n  directives: [i2.NgForOf, GridPanelComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GridPanelSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-grid-panel-series]',\n      template: `\n    <svg:g\n      ngx-charts-grid-panel\n      *ngFor=\"let gridPanel of gridPanels\"\n      [height]=\"gridPanel.height\"\n      [width]=\"gridPanel.width\"\n      [x]=\"gridPanel.x\"\n      [y]=\"gridPanel.y\"\n      [class.grid-panel]=\"true\"\n      [class.odd]=\"gridPanel.class === 'odd'\"\n      [class.even]=\"gridPanel.class === 'even'\"\n    ></svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    orient: [{\n      type: Input\n    }]\n  });\n})();\n\nclass SvgRadialGradientComponent {\n  constructor() {\n    this.endOpacity = 1;\n    this.cx = 0;\n    this.cy = 0;\n  }\n\n  get stops() {\n    return this.stopsInput || this.stopsDefault;\n  }\n\n  set stops(value) {\n    this.stopsInput = value;\n  }\n\n  ngOnChanges(changes) {\n    this.r = '30%';\n\n    if ('color' in changes || 'startOpacity' in changes || 'endOpacity' in changes) {\n      this.stopsDefault = [{\n        offset: 0,\n        color: this.color,\n        opacity: this.startOpacity\n      }, {\n        offset: 100,\n        color: this.color,\n        opacity: this.endOpacity\n      }];\n    }\n  }\n\n}\n\nSvgRadialGradientComponent.ɵfac = function SvgRadialGradientComponent_Factory(t) {\n  return new (t || SvgRadialGradientComponent)();\n};\n\nSvgRadialGradientComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SvgRadialGradientComponent,\n  selectors: [[\"g\", \"ngx-charts-svg-radial-gradient\", \"\"]],\n  inputs: {\n    color: \"color\",\n    name: \"name\",\n    startOpacity: \"startOpacity\",\n    endOpacity: \"endOpacity\",\n    cx: \"cx\",\n    cy: \"cy\",\n    stops: \"stops\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c15,\n  decls: 2,\n  vars: 5,\n  consts: [[\"gradientUnits\", \"userSpaceOnUse\", 3, \"id\"], [3, \"stop-color\", \"stop-opacity\", 4, \"ngFor\", \"ngForOf\"]],\n  template: function SvgRadialGradientComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"radialGradient\", 0);\n      i0.ɵɵtemplate(1, SvgRadialGradientComponent__svg_stop_1_Template, 1, 5, \"stop\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"id\", ctx.name);\n      i0.ɵɵattribute(\"cx\", ctx.cx)(\"cy\", ctx.cy)(\"r\", ctx.r);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.stops);\n    }\n  },\n  directives: [i2.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SvgRadialGradientComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-svg-radial-gradient]',\n      template: `\n    <svg:radialGradient [id]=\"name\" [attr.cx]=\"cx\" [attr.cy]=\"cy\" [attr.r]=\"r\" gradientUnits=\"userSpaceOnUse\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:radialGradient>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    color: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    startOpacity: [{\n      type: Input\n    }],\n    endOpacity: [{\n      type: Input\n    }],\n    cx: [{\n      type: Input\n    }],\n    cy: [{\n      type: Input\n    }],\n    stops: [{\n      type: Input\n    }]\n  });\n})();\n\nclass AreaComponent {\n  constructor(element) {\n    this.opacity = 1;\n    this.startOpacity = 0.5;\n    this.endOpacity = 1;\n    this.gradient = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.animationsLoaded = false;\n    this.hasGradient = false;\n    this.barOrientation = BarOrientation;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges() {\n    this.update();\n\n    if (!this.animationsLoaded) {\n      this.loadAnimation();\n      this.animationsLoaded = true;\n    }\n  }\n\n  update() {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (this.gradient || this.stops) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n\n    this.updatePathEl();\n  }\n\n  loadAnimation() {\n    this.areaPath = this.startingPath;\n    setTimeout(this.updatePathEl.bind(this), 100);\n  }\n\n  updatePathEl() {\n    const node = select(this.element).select('.area');\n\n    if (this.animations) {\n      node.transition().duration(750).attr('d', this.path);\n    } else {\n      node.attr('d', this.path);\n    }\n  }\n\n  getGradient() {\n    if (this.stops) {\n      return this.stops;\n    }\n\n    return [{\n      offset: 0,\n      color: this.fill,\n      opacity: this.startOpacity\n    }, {\n      offset: 100,\n      color: this.fill,\n      opacity: this.endOpacity\n    }];\n  }\n\n}\n\nAreaComponent.ɵfac = function AreaComponent_Factory(t) {\n  return new (t || AreaComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nAreaComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AreaComponent,\n  selectors: [[\"g\", \"ngx-charts-area\", \"\"]],\n  inputs: {\n    data: \"data\",\n    path: \"path\",\n    startingPath: \"startingPath\",\n    fill: \"fill\",\n    opacity: \"opacity\",\n    startOpacity: \"startOpacity\",\n    endOpacity: \"endOpacity\",\n    gradient: \"gradient\",\n    stops: \"stops\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c16,\n  decls: 2,\n  vars: 5,\n  consts: [[4, \"ngIf\"], [1, \"area\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"]],\n  template: function AreaComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, AreaComponent__svg_defs_0_Template, 2, 3, \"defs\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelement(1, \"path\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.gradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"opacity\", ctx.opacity);\n      i0.ɵɵattribute(\"d\", ctx.areaPath)(\"fill\", ctx.gradient ? ctx.gradientFill : ctx.fill);\n    }\n  },\n  directives: [i2.NgIf, SvgLinearGradientComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AreaComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-area]',\n      template: `\n    <svg:defs *ngIf=\"gradient\">\n      <svg:g\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"barOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n    </svg:defs>\n    <svg:path class=\"area\" [attr.d]=\"areaPath\" [attr.fill]=\"gradient ? gradientFill : fill\" [style.opacity]=\"opacity\" />\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    path: [{\n      type: Input\n    }],\n    startingPath: [{\n      type: Input\n    }],\n    fill: [{\n      type: Input\n    }],\n    opacity: [{\n      type: Input\n    }],\n    startOpacity: [{\n      type: Input\n    }],\n    endOpacity: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    stops: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})(); // Robert Penner's easeOutExpo\n\n\nfunction easeOutExpo(t, b, c, d) {\n  return c * (-Math.pow(2, -10 * t / d) + 1) * 1024 / 1023 + b;\n}\n/**\n * Counts from a number to the end incrementally.\n */\n\n\nfunction count(countFrom, countTo, countDecimals, countDuration, callback) {\n  const startVal = Number(countFrom);\n  const endVal = Number(countTo);\n  const countDown = startVal > endVal;\n  const decimals = Math.max(0, countDecimals);\n  const dec = Math.pow(10, decimals);\n  const duration = Number(countDuration) * 1000;\n  let startTime;\n\n  function runCount(timestamp) {\n    let frameVal;\n    const progress = timestamp - startTime;\n\n    if (countDown) {\n      frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);\n    } else {\n      frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);\n    }\n\n    if (countDown) {\n      frameVal = frameVal < endVal ? endVal : frameVal;\n    } else {\n      frameVal = frameVal > endVal ? endVal : frameVal;\n    }\n\n    frameVal = Math.round(frameVal * dec) / dec;\n    const tick = progress < duration;\n    callback({\n      value: frameVal,\n      progress,\n      timestamp,\n      finished: !tick\n    });\n\n    if (tick) {\n      return requestAnimationFrame(val => runCount(val));\n    }\n  }\n\n  return requestAnimationFrame(timestamp => {\n    startTime = timestamp;\n    return runCount(timestamp);\n  });\n}\n/**\n * Determine decimals places\n *\n * @export\n */\n\n\nfunction decimalChecker(countTo) {\n  const endVal = Number(countTo);\n\n  if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {\n    return 2;\n  }\n\n  return 0;\n}\n/**\n * Count up component\n *\n * Loosely inspired by:\n *  - https://github.com/izupet/angular2-counto\n *  - https://inorganik.github.io/countUp.js/\n *\n * @export\n */\n\n\nclass CountUpDirective {\n  constructor(cd, element) {\n    this.cd = cd;\n    this.countDuration = 1;\n    this.countPrefix = '';\n    this.countSuffix = '';\n    this.countChange = new EventEmitter();\n    this.countFinish = new EventEmitter();\n    this.value = '';\n    this._countDecimals = 0;\n    this._countTo = 0;\n    this._countFrom = 0;\n    this.nativeElement = element.nativeElement;\n  }\n\n  set countDecimals(val) {\n    this._countDecimals = val;\n  }\n\n  get countDecimals() {\n    if (this._countDecimals) return this._countDecimals;\n    return decimalChecker(this.countTo);\n  }\n\n  set countTo(val) {\n    this._countTo = parseFloat(val);\n    this.start();\n  }\n\n  get countTo() {\n    return this._countTo;\n  }\n\n  set countFrom(val) {\n    this._countFrom = parseFloat(val);\n    this.start();\n  }\n\n  get countFrom() {\n    return this._countFrom;\n  }\n\n  ngOnDestroy() {\n    cancelAnimationFrame(this.animationReq);\n  }\n\n  start() {\n    cancelAnimationFrame(this.animationReq);\n\n    const valueFormatting = this.valueFormatting || (value => `${this.countPrefix}${value.toLocaleString()}${this.countSuffix}`);\n\n    const callback = ({\n      value,\n      progress,\n      finished\n    }) => {\n      this.value = valueFormatting(value);\n      this.cd.markForCheck();\n      if (!finished) this.countChange.emit({\n        value: this.value,\n        progress\n      });\n      if (finished) this.countFinish.emit({\n        value: this.value,\n        progress\n      });\n    };\n\n    this.animationReq = count(this.countFrom, this.countTo, this.countDecimals, this.countDuration, callback);\n  }\n\n}\n\nCountUpDirective.ɵfac = function CountUpDirective_Factory(t) {\n  return new (t || CountUpDirective)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nCountUpDirective.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CountUpDirective,\n  selectors: [[\"\", \"ngx-charts-count-up\", \"\"]],\n  inputs: {\n    countDuration: \"countDuration\",\n    countPrefix: \"countPrefix\",\n    countSuffix: \"countSuffix\",\n    valueFormatting: \"valueFormatting\",\n    countDecimals: \"countDecimals\",\n    countTo: \"countTo\",\n    countFrom: \"countFrom\"\n  },\n  outputs: {\n    countChange: \"countChange\",\n    countFinish: \"countFinish\"\n  },\n  attrs: _c17,\n  decls: 1,\n  vars: 1,\n  template: function CountUpDirective_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtext(0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵtextInterpolate1(\" \", ctx.value, \" \");\n    }\n  },\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CountUpDirective, [{\n    type: Component,\n    args: [{\n      selector: '[ngx-charts-count-up]',\n      template: ` {{ value }} `\n    }]\n  }], function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.ElementRef\n    }];\n  }, {\n    countDuration: [{\n      type: Input\n    }],\n    countPrefix: [{\n      type: Input\n    }],\n    countSuffix: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    countDecimals: [{\n      type: Input\n    }],\n    countTo: [{\n      type: Input\n    }],\n    countFrom: [{\n      type: Input\n    }],\n    countChange: [{\n      type: Output\n    }],\n    countFinish: [{\n      type: Output\n    }]\n  });\n})(); // If we don't check whether 'window' and 'global' variables are defined,\n// code will fail in browser/node with 'variable is undefined' error.\n\n\nlet root;\n\nif (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} // tslint:disable-next-line:variable-name\n\n\nconst MouseEvent = root.MouseEvent;\n\nfunction createMouseEvent(name, bubbles = false, cancelable = true) {\n  // Calling new of an event does not work correctly on IE. The following is a tested workaround\n  // See https://stackoverflow.com/questions/27176983/dispatchevent-not-working-in-ie11\n  if (typeof MouseEvent === 'function') {\n    // Sane browsers\n    return new MouseEvent(name, {\n      bubbles,\n      cancelable\n    });\n  } else {\n    // IE\n    const event = document.createEvent('MouseEvent');\n    event.initEvent(name, bubbles, cancelable);\n    return event;\n  }\n}\n\nclass TooltipArea {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.anchorOpacity = 0;\n    this.anchorPos = -1;\n    this.anchorValues = [];\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n    this.showPercentage = false;\n    this.tooltipDisabled = false;\n    this.hover = new EventEmitter();\n  }\n\n  getValues(xVal) {\n    const results = [];\n\n    for (const group of this.results) {\n      const item = group.series.find(d => d.name.toString() === xVal.toString());\n      let groupName = group.name;\n\n      if (groupName instanceof Date) {\n        groupName = groupName.toLocaleDateString();\n      }\n\n      if (item) {\n        const label = item.name;\n        let val = item.value;\n\n        if (this.showPercentage) {\n          val = (item.d1 - item.d0).toFixed(2) + '%';\n        }\n\n        let color;\n\n        if (this.colors.scaleType === ScaleType.Linear) {\n          let v = val;\n\n          if (item.d1) {\n            v = item.d1;\n          }\n\n          color = this.colors.getColor(v);\n        } else {\n          color = this.colors.getColor(group.name);\n        }\n\n        const data = Object.assign({}, item, {\n          value: val,\n          name: label,\n          series: groupName,\n          min: item.min,\n          max: item.max,\n          color\n        });\n        results.push(data);\n      }\n    }\n\n    return results;\n  }\n\n  mouseMove(event) {\n    if (!isPlatformBrowser(this.platformId)) {\n      return;\n    }\n\n    const xPos = event.pageX - event.target.getBoundingClientRect().left;\n    const closestIndex = this.findClosestPointIndex(xPos);\n    const closestPoint = this.xSet[closestIndex];\n    this.anchorPos = this.xScale(closestPoint);\n    this.anchorPos = Math.max(0, this.anchorPos);\n    this.anchorPos = Math.min(this.dims.width, this.anchorPos);\n    this.anchorValues = this.getValues(closestPoint);\n\n    if (this.anchorPos !== this.lastAnchorPos) {\n      const ev = createMouseEvent('mouseleave');\n      this.tooltipAnchor.nativeElement.dispatchEvent(ev);\n      this.anchorOpacity = 0.7;\n      this.hover.emit({\n        value: closestPoint\n      });\n      this.showTooltip();\n      this.lastAnchorPos = this.anchorPos;\n    }\n  }\n\n  findClosestPointIndex(xPos) {\n    let minIndex = 0;\n    let maxIndex = this.xSet.length - 1;\n    let minDiff = Number.MAX_VALUE;\n    let closestIndex = 0;\n\n    while (minIndex <= maxIndex) {\n      const currentIndex = (minIndex + maxIndex) / 2 | 0;\n      const currentElement = this.xScale(this.xSet[currentIndex]);\n      const curDiff = Math.abs(currentElement - xPos);\n\n      if (curDiff < minDiff) {\n        minDiff = curDiff;\n        closestIndex = currentIndex;\n      }\n\n      if (currentElement < xPos) {\n        minIndex = currentIndex + 1;\n      } else if (currentElement > xPos) {\n        maxIndex = currentIndex - 1;\n      } else {\n        minDiff = 0;\n        closestIndex = currentIndex;\n        break;\n      }\n    }\n\n    return closestIndex;\n  }\n\n  showTooltip() {\n    const event = createMouseEvent('mouseenter');\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\n  }\n\n  hideTooltip() {\n    const event = createMouseEvent('mouseleave');\n    this.tooltipAnchor.nativeElement.dispatchEvent(event);\n    this.anchorOpacity = 0;\n    this.lastAnchorPos = -1;\n  }\n\n  getToolTipText(tooltipItem) {\n    let result = '';\n\n    if (tooltipItem.series !== undefined) {\n      result += tooltipItem.series;\n    } else {\n      result += '???';\n    }\n\n    result += ': ';\n\n    if (tooltipItem.value !== undefined) {\n      result += tooltipItem.value.toLocaleString();\n    }\n\n    if (tooltipItem.min !== undefined || tooltipItem.max !== undefined) {\n      result += ' (';\n\n      if (tooltipItem.min !== undefined) {\n        if (tooltipItem.max === undefined) {\n          result += '≥';\n        }\n\n        result += tooltipItem.min.toLocaleString();\n\n        if (tooltipItem.max !== undefined) {\n          result += ' - ';\n        }\n      } else if (tooltipItem.max !== undefined) {\n        result += '≤';\n      }\n\n      if (tooltipItem.max !== undefined) {\n        result += tooltipItem.max.toLocaleString();\n      }\n\n      result += ')';\n    }\n\n    return result;\n  }\n\n}\n\nTooltipArea.ɵfac = function TooltipArea_Factory(t) {\n  return new (t || TooltipArea)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nTooltipArea.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TooltipArea,\n  selectors: [[\"g\", \"ngx-charts-tooltip-area\", \"\"]],\n  viewQuery: function TooltipArea_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c18, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipAnchor = _t.first);\n    }\n  },\n  inputs: {\n    dims: \"dims\",\n    xSet: \"xSet\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    results: \"results\",\n    colors: \"colors\",\n    showPercentage: \"showPercentage\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\"\n  },\n  outputs: {\n    hover: \"hover\"\n  },\n  attrs: _c19,\n  decls: 6,\n  vars: 18,\n  consts: [[\"y\", \"0\", 1, \"tooltip-area\", 2, \"opacity\", \"0\", \"cursor\", \"auto\", 3, \"mousemove\", \"mouseleave\"], [\"defaultTooltipTemplate\", \"\"], [\"y\", \"0\", \"ngx-tooltip\", \"\", 1, \"tooltip-anchor\", 3, \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipSpacing\", \"tooltipTemplate\", \"tooltipContext\", \"tooltipImmediateExit\"], [\"tooltipAnchor\", \"\"], [1, \"area-tooltip-container\"], [\"class\", \"tooltip-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"tooltip-item\"], [1, \"tooltip-item-color\"]],\n  template: function TooltipArea_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\");\n      i0.ɵɵelementStart(1, \"rect\", 0);\n      i0.ɵɵlistener(\"mousemove\", function TooltipArea_Template__svg_rect_mousemove_1_listener($event) {\n        return ctx.mouseMove($event);\n      })(\"mouseleave\", function TooltipArea_Template__svg_rect_mouseleave_1_listener() {\n        return ctx.hideTooltip();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(2, TooltipArea__svg_ng_template_2_Template, 2, 1, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n      i0.ɵɵelement(4, \"rect\", 2, 3);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(3);\n\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"x\", 0)(\"width\", ctx.dims.width)(\"height\", ctx.dims.height);\n      i0.ɵɵadvance(3);\n      i0.ɵɵstyleProp(\"opacity\", ctx.anchorOpacity)(\"pointer-events\", \"none\");\n      i0.ɵɵproperty(\"@animationState\", ctx.anchorOpacity !== 0 ? \"active\" : \"inactive\")(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipPlacement\", ctx.placementTypes.Right)(\"tooltipType\", ctx.styleTypes.tooltip)(\"tooltipSpacing\", 15)(\"tooltipTemplate\", ctx.tooltipTemplate ? ctx.tooltipTemplate : _r0)(\"tooltipContext\", ctx.anchorValues)(\"tooltipImmediateExit\", true);\n      i0.ɵɵattribute(\"x\", ctx.anchorPos)(\"width\", 1)(\"height\", ctx.dims.height);\n    }\n  },\n  directives: [TooltipDirective, i2.NgForOf],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition('inactive => active', [style({\n      opacity: 0\n    }), animate(250, style({\n      opacity: 0.7\n    }))]), transition('active => inactive', [style({\n      opacity: 0.7\n    }), animate(250, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TooltipArea, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-tooltip-area]',\n      template: `\n    <svg:g>\n      <svg:rect\n        class=\"tooltip-area\"\n        [attr.x]=\"0\"\n        y=\"0\"\n        [attr.width]=\"dims.width\"\n        [attr.height]=\"dims.height\"\n        style=\"opacity: 0; cursor: 'auto';\"\n        (mousemove)=\"mouseMove($event)\"\n        (mouseleave)=\"hideTooltip()\"\n      />\n      <ng-template #defaultTooltipTemplate let-model=\"model\">\n        <xhtml:div class=\"area-tooltip-container\">\n          <xhtml:div *ngFor=\"let tooltipItem of model\" class=\"tooltip-item\">\n            <xhtml:span class=\"tooltip-item-color\" [style.background-color]=\"tooltipItem.color\"></xhtml:span>\n            {{ getToolTipText(tooltipItem) }}\n          </xhtml:div>\n        </xhtml:div>\n      </ng-template>\n      <svg:rect\n        #tooltipAnchor\n        [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\n        class=\"tooltip-anchor\"\n        [attr.x]=\"anchorPos\"\n        y=\"0\"\n        [attr.width]=\"1\"\n        [attr.height]=\"dims.height\"\n        [style.opacity]=\"anchorOpacity\"\n        [style.pointer-events]=\"'none'\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Right\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipSpacing]=\"15\"\n        [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\"\n        [tooltipContext]=\"anchorValues\"\n        [tooltipImmediateExit]=\"true\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition('inactive => active', [style({\n        opacity: 0\n      }), animate(250, style({\n        opacity: 0.7\n      }))]), transition('active => inactive', [style({\n        opacity: 0.7\n      }), animate(250, style({\n        opacity: 0\n      }))])])]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    dims: [{\n      type: Input\n    }],\n    xSet: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    results: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    showPercentage: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    hover: [{\n      type: Output\n    }],\n    tooltipAnchor: [{\n      type: ViewChild,\n      args: ['tooltipAnchor', {\n        static: false\n      }]\n    }]\n  });\n})();\n\nclass Timeline {\n  constructor(element, cd) {\n    this.cd = cd;\n    this.height = 50;\n    this.select = new EventEmitter();\n    this.onDomainChange = new EventEmitter();\n    this.initialized = false;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n\n    if (!this.initialized) {\n      this.addBrush();\n      this.initialized = true;\n    }\n  }\n\n  update() {\n    this.dims = this.getDims();\n    this.height = this.dims.height;\n    const offsetY = this.view[1] - this.height;\n    this.xDomain = this.getXDomain();\n    this.xScale = this.getXScale();\n\n    if (this.brush) {\n      this.updateBrush();\n    }\n\n    this.transform = `translate(0 , ${offsetY})`;\n    this.filterId = 'filter' + id().toString();\n    this.filter = `url(#${this.filterId})`;\n    this.cd.markForCheck();\n  }\n\n  getXDomain() {\n    let values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.name)) {\n          values.push(d.name);\n        }\n      }\n    }\n\n    let domain = [];\n\n    if (this.scaleType === ScaleType.Time) {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n    } else if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max];\n    } else {\n      domain = values;\n    }\n\n    return domain;\n  }\n\n  getXScale() {\n    let scale;\n\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime().range([0, this.dims.width]).domain(this.xDomain);\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().range([0, this.dims.width]).padding(0.1).domain(this.xDomain);\n    }\n\n    return scale;\n  }\n\n  addBrush() {\n    if (this.brush) return;\n    const height = this.height;\n    const width = this.view[0];\n    this.brush = brushX().extent([[0, 0], [width, height]]).on('brush end', ({\n      selection\n    }) => {\n      const newSelection = selection || this.xScale.range();\n      const newDomain = newSelection.map(this.xScale.invert);\n      this.onDomainChange.emit(newDomain);\n      this.cd.markForCheck();\n    });\n    select(this.element).select('.brush').call(this.brush);\n  }\n\n  updateBrush() {\n    if (!this.brush) return;\n    const height = this.height;\n    const width = this.view[0];\n    this.brush.extent([[0, 0], [width, height]]);\n    select(this.element).select('.brush').call(this.brush); // clear hardcoded properties so they can be defined by CSS\n\n    select(this.element).select('.selection').attr('fill', undefined).attr('stroke', undefined).attr('fill-opacity', undefined);\n    this.cd.markForCheck();\n  }\n\n  getDims() {\n    const width = this.view[0];\n    const dims = {\n      width,\n      height: this.height\n    };\n    return dims;\n  }\n\n}\n\nTimeline.ɵfac = function Timeline_Factory(t) {\n  return new (t || Timeline)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nTimeline.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: Timeline,\n  selectors: [[\"g\", \"ngx-charts-timeline\", \"\"]],\n  inputs: {\n    view: \"view\",\n    results: \"results\",\n    scheme: \"scheme\",\n    customColors: \"customColors\",\n    legend: \"legend\",\n    autoScale: \"autoScale\",\n    scaleType: \"scaleType\",\n    height: \"height\"\n  },\n  outputs: {\n    select: \"select\",\n    onDomainChange: \"onDomainChange\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c20,\n  ngContentSelectors: _c2,\n  decls: 7,\n  vars: 4,\n  consts: [[1, \"timeline\"], [\"in\", \"SourceGraphic\", \"type\", \"matrix\", \"values\", \"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"], [1, \"embedded-chart\"], [\"x\", \"0\", \"y\", \"0\", 1, \"brush-background\"], [1, \"brush\"]],\n  template: function Timeline_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0);\n      i0.ɵɵelementStart(1, \"filter\");\n      i0.ɵɵelement(2, \"feColorMatrix\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"g\", 2);\n      i0.ɵɵprojection(4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"rect\", 3);\n      i0.ɵɵelement(6, \"g\", 4);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"id\", ctx.filterId);\n      i0.ɵɵadvance(4);\n      i0.ɵɵattribute(\"width\", ctx.view[0])(\"height\", ctx.height);\n    }\n  },\n  styles: [\".timeline .brush-background{fill:#0000000d}.timeline .brush .selection{fill:#0000001a;stroke-width:1px;stroke:#888}.timeline .brush .handle{fill-opacity:0}.timeline .embedded-chart{opacity:.6}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Timeline, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-timeline]',\n      template: `\n    <svg:g class=\"timeline\" [attr.transform]=\"transform\">\n      <svg:filter [attr.id]=\"filterId\">\n        <svg:feColorMatrix\n          in=\"SourceGraphic\"\n          type=\"matrix\"\n          values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"\n        />\n      </svg:filter>\n      <svg:g class=\"embedded-chart\">\n        <ng-content></ng-content>\n      </svg:g>\n      <svg:rect x=\"0\" [attr.width]=\"view[0]\" y=\"0\" [attr.height]=\"height\" class=\"brush-background\" />\n      <svg:g class=\"brush\"></svg:g>\n    </svg:g>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".timeline .brush-background{fill:#0000000d}.timeline .brush .selection{fill:#0000001a;stroke-width:1px;stroke:#888}.timeline .brush .handle{fill-opacity:0}.timeline .embedded-chart{opacity:.6}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    view: [{\n      type: Input\n    }],\n    results: [{\n      type: Input\n    }],\n    scheme: [{\n      type: Input\n    }],\n    customColors: [{\n      type: Input\n    }],\n    legend: [{\n      type: Input\n    }],\n    autoScale: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    onDomainChange: [{\n      type: Output\n    }]\n  });\n})();\n\nclass AdvancedLegendComponent {\n  constructor() {\n    this.label = 'Total';\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.legendItems = [];\n\n    this.labelFormatting = label => label;\n\n    this.percentageFormatting = percentage => percentage;\n\n    this.defaultValueFormatting = value => value.toLocaleString();\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  getTotal() {\n    return this.data.map(d => Number(d.value)).reduce((sum, d) => sum + d, 0);\n  }\n\n  update() {\n    this.total = this.getTotal();\n    this.roundedTotal = this.total;\n    this.legendItems = this.getLegendItems();\n  }\n\n  getLegendItems() {\n    return this.data.map(d => {\n      const label = formatLabel(d.name);\n      const value = d.value;\n      const color = this.colors.getColor(label);\n      const percentage = this.total > 0 ? value / this.total * 100 : 0;\n      const formattedLabel = typeof this.labelFormatting === 'function' ? this.labelFormatting(label) : label;\n      return {\n        _value: value,\n        data: d,\n        value,\n        color,\n        label: formattedLabel,\n        displayLabel: trimLabel(formattedLabel, 20),\n        origialLabel: d.name,\n        percentage: this.percentageFormatting ? this.percentageFormatting(percentage) : percentage.toLocaleString()\n      };\n    });\n  }\n\n  trackBy(index, item) {\n    return item.label;\n  }\n\n}\n\nAdvancedLegendComponent.ɵfac = function AdvancedLegendComponent_Factory(t) {\n  return new (t || AdvancedLegendComponent)();\n};\n\nAdvancedLegendComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AdvancedLegendComponent,\n  selectors: [[\"ngx-charts-advanced-legend\"]],\n  inputs: {\n    width: \"width\",\n    data: \"data\",\n    colors: \"colors\",\n    label: \"label\",\n    animations: \"animations\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    percentageFormatting: \"percentageFormatting\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 8,\n  vars: 7,\n  consts: [[1, \"advanced-pie-legend\"], [\"class\", \"total-value\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"valueFormatting\", 4, \"ngIf\"], [\"class\", \"total-value\", 4, \"ngIf\"], [1, \"total-label\"], [1, \"legend-items-container\"], [1, \"legend-items\"], [\"tabindex\", \"-1\", \"class\", \"legend-item\", 3, \"mouseenter\", \"mouseleave\", \"click\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-count-up\", \"\", 1, \"total-value\", 3, \"countTo\", \"valueFormatting\"], [1, \"total-value\"], [\"tabindex\", \"-1\", 1, \"legend-item\", 3, \"mouseenter\", \"mouseleave\", \"click\"], [1, \"item-color\"], [\"class\", \"item-value\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"valueFormatting\", 4, \"ngIf\"], [\"class\", \"item-value\", 4, \"ngIf\"], [1, \"item-label\"], [\"class\", \"item-percent\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"countSuffix\", 4, \"ngIf\"], [\"class\", \"item-percent\", 4, \"ngIf\"], [\"ngx-charts-count-up\", \"\", 1, \"item-value\", 3, \"countTo\", \"valueFormatting\"], [1, \"item-value\"], [\"ngx-charts-count-up\", \"\", 1, \"item-percent\", 3, \"countTo\", \"countSuffix\"], [1, \"item-percent\"]],\n  template: function AdvancedLegendComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, AdvancedLegendComponent_div_1_Template, 1, 2, \"div\", 1);\n      i0.ɵɵtemplate(2, AdvancedLegendComponent_div_2_Template, 2, 1, \"div\", 2);\n      i0.ɵɵelementStart(3, \"div\", 3);\n      i0.ɵɵtext(4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 4);\n      i0.ɵɵelementStart(6, \"div\", 5);\n      i0.ɵɵtemplate(7, AdvancedLegendComponent_div_7_Template, 8, 7, \"div\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"width\", ctx.width, \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.label, \" \");\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.legendItems)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [i2.NgIf, i2.NgForOf, CountUpDirective],\n  styles: [\".advanced-pie-legend{float:left;position:relative;top:50%;transform:translateY(-50%)}.advanced-pie-legend .total-value{font-size:36px}.advanced-pie-legend .total-label{font-size:24px;margin-bottom:19px}.advanced-pie-legend .legend-items-container{width:100%}.advanced-pie-legend .legend-items-container .legend-items{white-space:nowrap;overflow:auto}.advanced-pie-legend .legend-items-container .legend-items .legend-item{margin-right:20px;display:inline-block;cursor:pointer}.advanced-pie-legend .legend-items-container .legend-items .legend-item:focus{outline:none}.advanced-pie-legend .legend-items-container .legend-items .legend-item:hover{color:#000;transition:.2s}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value{font-size:24px;margin-top:-6px;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-label{font-size:14px;opacity:.7;margin-left:11px;margin-top:-6px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent{font-size:24px;opacity:.7;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-color{border-left:4px solid;width:4px;height:42px;float:left;margin-right:7px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AdvancedLegendComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-advanced-legend',\n      template: `\n    <div class=\"advanced-pie-legend\" [style.width.px]=\"width\">\n      <div\n        *ngIf=\"animations\"\n        class=\"total-value\"\n        ngx-charts-count-up\n        [countTo]=\"roundedTotal\"\n        [valueFormatting]=\"valueFormatting\"\n      ></div>\n      <div class=\"total-value\" *ngIf=\"!animations\">\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\n      </div>\n      <div class=\"total-label\">\n        {{ label }}\n      </div>\n      <div class=\"legend-items-container\">\n        <div class=\"legend-items\">\n          <div\n            *ngFor=\"let legendItem of legendItems; trackBy: trackBy\"\n            tabindex=\"-1\"\n            class=\"legend-item\"\n            (mouseenter)=\"activate.emit(legendItem.data)\"\n            (mouseleave)=\"deactivate.emit(legendItem.data)\"\n            (click)=\"select.emit(legendItem.data)\"\n          >\n            <div class=\"item-color\" [style.border-left-color]=\"legendItem.color\"></div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-value\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem._value\"\n              [valueFormatting]=\"valueFormatting\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-value\">\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\n            </div>\n            <div class=\"item-label\">{{ legendItem.displayLabel }}</div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-percent\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem.percentage\"\n              [countSuffix]=\"'%'\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-percent\">{{ legendItem.percentage.toLocaleString() }}%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".advanced-pie-legend{float:left;position:relative;top:50%;transform:translateY(-50%)}.advanced-pie-legend .total-value{font-size:36px}.advanced-pie-legend .total-label{font-size:24px;margin-bottom:19px}.advanced-pie-legend .legend-items-container{width:100%}.advanced-pie-legend .legend-items-container .legend-items{white-space:nowrap;overflow:auto}.advanced-pie-legend .legend-items-container .legend-items .legend-item{margin-right:20px;display:inline-block;cursor:pointer}.advanced-pie-legend .legend-items-container .legend-items .legend-item:focus{outline:none}.advanced-pie-legend .legend-items-container .legend-items .legend-item:hover{color:#000;transition:.2s}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value{font-size:24px;margin-top:-6px;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-label{font-size:14px;opacity:.7;margin-left:11px;margin-top:-6px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent{font-size:24px;opacity:.7;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-color{border-left:4px solid;width:4px;height:42px;float:left;margin-right:7px}\\n\"]\n    }]\n  }], null, {\n    width: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    percentageFormatting: [{\n      type: Input\n    }]\n  });\n})();\n\nconst COMPONENTS = [AreaComponent, BaseChartComponent, CountUpDirective, TooltipArea, ChartComponent, LegendComponent, LegendEntryComponent, ScaleLegendComponent, CircleComponent, CircleSeriesComponent, GridPanelComponent, GridPanelSeriesComponent, SvgLinearGradientComponent, SvgRadialGradientComponent, Timeline, AdvancedLegendComponent];\n\nclass ChartCommonModule {}\n\nChartCommonModule.ɵfac = function ChartCommonModule_Factory(t) {\n  return new (t || ChartCommonModule)();\n};\n\nChartCommonModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ChartCommonModule\n});\nChartCommonModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, AxesModule, TooltipModule], CommonModule, AxesModule, TooltipModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ChartCommonModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, AxesModule, TooltipModule],\n      declarations: [...COMPONENTS, VisibilityObserver],\n      exports: [CommonModule, AxesModule, TooltipModule, ...COMPONENTS, VisibilityObserver]\n    }]\n  }], null, null);\n})();\n\nfunction calculateViewDimensions({\n  width,\n  height,\n  margins,\n  showXAxis = false,\n  showYAxis = false,\n  xAxisHeight = 0,\n  yAxisWidth = 0,\n  showXLabel = false,\n  showYLabel = false,\n  showLegend = false,\n  legendType = ScaleType.Ordinal,\n  legendPosition = LegendPosition.Right,\n  columns = 12\n}) {\n  let xOffset = margins[3];\n  let chartWidth = width;\n  let chartHeight = height - margins[0] - margins[2];\n\n  if (showLegend && legendPosition === LegendPosition.Right) {\n    if (legendType === ScaleType.Ordinal) {\n      columns -= 2;\n    } else {\n      columns -= 1;\n    }\n  }\n\n  chartWidth = chartWidth * columns / 12;\n  chartWidth = chartWidth - margins[1] - margins[3];\n\n  if (showXAxis) {\n    chartHeight -= 5;\n    chartHeight -= xAxisHeight;\n\n    if (showXLabel) {\n      // text height + spacing between axis label and tick labels\n      const offset = 25 + 5;\n      chartHeight -= offset;\n    }\n  }\n\n  if (showYAxis) {\n    chartWidth -= 5;\n    chartWidth -= yAxisWidth;\n    xOffset += yAxisWidth;\n    xOffset += 10;\n\n    if (showYLabel) {\n      // text height + spacing between axis label and tick labels\n      const offset = 25 + 5;\n      chartWidth -= offset;\n      xOffset += offset;\n    }\n  }\n\n  chartWidth = Math.max(0, chartWidth);\n  chartHeight = Math.max(0, chartHeight);\n  return {\n    width: Math.floor(chartWidth),\n    height: Math.floor(chartHeight),\n    xOffset: Math.floor(xOffset)\n  };\n}\n\nlet colorSets = [{\n  name: 'vivid',\n  selectable: true,\n  group: ScaleType.Ordinal,\n  domain: ['#647c8a', '#3f51b5', '#2196f3', '#00b862', '#afdf0a', '#a7b61a', '#f3e562', '#ff9800', '#ff5722', '#ff4514']\n}, {\n  name: 'natural',\n  selectable: true,\n  group: ScaleType.Ordinal,\n  domain: ['#bf9d76', '#e99450', '#d89f59', '#f2dfa7', '#a5d7c6', '#7794b1', '#afafaf', '#707160', '#ba9383', '#d9d5c3']\n}, {\n  name: 'cool',\n  selectable: true,\n  group: ScaleType.Ordinal,\n  domain: ['#a8385d', '#7aa3e5', '#a27ea8', '#aae3f5', '#adcded', '#a95963', '#8796c0', '#7ed3ed', '#50abcc', '#ad6886']\n}, {\n  name: 'fire',\n  selectable: true,\n  group: ScaleType.Ordinal,\n  domain: ['#ff3d00', '#bf360c', '#ff8f00', '#ff6f00', '#ff5722', '#e65100', '#ffca28', '#ffab00']\n}, {\n  name: 'solar',\n  selectable: true,\n  group: ScaleType.Linear,\n  domain: ['#fff8e1', '#ffecb3', '#ffe082', '#ffd54f', '#ffca28', '#ffc107', '#ffb300', '#ffa000', '#ff8f00', '#ff6f00']\n}, {\n  name: 'air',\n  selectable: true,\n  group: ScaleType.Linear,\n  domain: ['#e1f5fe', '#b3e5fc', '#81d4fa', '#4fc3f7', '#29b6f6', '#03a9f4', '#039be5', '#0288d1', '#0277bd', '#01579b']\n}, {\n  name: 'aqua',\n  selectable: true,\n  group: ScaleType.Linear,\n  domain: ['#e0f7fa', '#b2ebf2', '#80deea', '#4dd0e1', '#26c6da', '#00bcd4', '#00acc1', '#0097a7', '#00838f', '#006064']\n}, {\n  name: 'flame',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#A10A28', '#D3342D', '#EF6D49', '#FAAD67', '#FDDE90', '#DBED91', '#A9D770', '#6CBA67', '#2C9653', '#146738']\n}, {\n  name: 'ocean',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#1D68FB', '#33C0FC', '#4AFFFE', '#AFFFFF', '#FFFC63', '#FDBD2D', '#FC8A25', '#FA4F1E', '#FA141B', '#BA38D1']\n}, {\n  name: 'forest',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#55C22D', '#C1F33D', '#3CC099', '#AFFFFF', '#8CFC9D', '#76CFFA', '#BA60FB', '#EE6490', '#C42A1C', '#FC9F32']\n}, {\n  name: 'horizon',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#2597FB', '#65EBFD', '#99FDD0', '#FCEE4B', '#FEFCFA', '#FDD6E3', '#FCB1A8', '#EF6F7B', '#CB96E8', '#EFDEE0']\n}, {\n  name: 'neons',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#FF3333', '#FF33FF', '#CC33FF', '#0000FF', '#33CCFF', '#33FFFF', '#33FF66', '#CCFF33', '#FFCC00', '#FF6600']\n}, {\n  name: 'picnic',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#FAC51D', '#66BD6D', '#FAA026', '#29BB9C', '#E96B56', '#55ACD2', '#B7332F', '#2C83C9', '#9166B8', '#92E7E8']\n}, {\n  name: 'night',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#2B1B5A', '#501356', '#183356', '#28203F', '#391B3C', '#1E2B3C', '#120634', '#2D0432', '#051932', '#453080', '#75267D', '#2C507D', '#4B3880', '#752F7D', '#35547D']\n}, {\n  name: 'nightLights',\n  selectable: false,\n  group: ScaleType.Ordinal,\n  domain: ['#4e31a5', '#9c25a7', '#3065ab', '#57468b', '#904497', '#46648b', '#32118d', '#a00fb3', '#1052a2', '#6e51bd', '#b63cc3', '#6c97cb', '#8671c1', '#b455be', '#7496c3']\n}];\n\nclass ColorHelper {\n  constructor(scheme, type, domain, customColors) {\n    if (typeof scheme === 'string') {\n      scheme = colorSets.find(cs => {\n        return cs.name === scheme;\n      });\n    }\n\n    this.colorDomain = scheme.domain;\n    this.scaleType = type;\n    this.domain = domain;\n    this.customColors = customColors;\n    this.scale = this.generateColorScheme(scheme, type, this.domain);\n  }\n\n  generateColorScheme(scheme, type, domain) {\n    if (typeof scheme === 'string') {\n      scheme = colorSets.find(cs => {\n        return cs.name === scheme;\n      });\n    }\n\n    let colorScale;\n\n    switch (type) {\n      case ScaleType.Quantile:\n        colorScale = scaleQuantile().range(scheme.domain).domain(domain);\n        break;\n\n      case ScaleType.Ordinal:\n        colorScale = scaleOrdinal().range(scheme.domain).domain(domain);\n        break;\n\n      case ScaleType.Linear:\n        {\n          const colorDomain = [...scheme.domain];\n\n          if (colorDomain.length === 1) {\n            colorDomain.push(colorDomain[0]);\n            this.colorDomain = colorDomain;\n          }\n\n          const points = range(0, 1, 1.0 / colorDomain.length);\n          colorScale = scaleLinear().range(colorDomain).domain(points);\n        }\n        break;\n\n      default:\n        break;\n    }\n\n    return colorScale;\n  }\n\n  getColor(value) {\n    if (value === undefined || value === null) {\n      throw new Error('Value can not be null');\n    }\n\n    if (this.scaleType === ScaleType.Linear) {\n      const valueScale = scaleLinear().domain(this.domain).range([0, 1]);\n      return this.scale(valueScale(value));\n    } else {\n      if (typeof this.customColors === 'function') {\n        return this.customColors(value);\n      }\n\n      const formattedValue = value.toString();\n      let found; // todo type customColors\n\n      if (this.customColors && this.customColors.length > 0) {\n        found = this.customColors.find(mapping => {\n          return mapping.name.toLowerCase() === formattedValue.toLowerCase();\n        });\n      }\n\n      if (found) {\n        return found.value;\n      } else {\n        return this.scale(value);\n      }\n    }\n  }\n\n  getLinearGradientStops(value, start) {\n    if (start === undefined) {\n      start = this.domain[0];\n    }\n\n    const valueScale = scaleLinear().domain(this.domain).range([0, 1]);\n    const colorValueScale = scaleBand().domain(this.colorDomain).range([0, 1]);\n    const endColor = this.getColor(value); // generate the stops\n\n    const startVal = valueScale(start);\n    const startColor = this.getColor(start);\n    const endVal = valueScale(value);\n    let i = 1;\n    let currentVal = startVal;\n    const stops = [];\n    stops.push({\n      color: startColor,\n      offset: startVal,\n      originalOffset: startVal,\n      opacity: 1\n    });\n\n    while (currentVal < endVal && i < this.colorDomain.length) {\n      const color = this.colorDomain[i];\n      const offset = colorValueScale(color);\n\n      if (offset <= startVal) {\n        i++;\n        continue;\n      }\n\n      if (offset.toFixed(4) >= (endVal - colorValueScale.bandwidth()).toFixed(4)) {\n        break;\n      }\n\n      stops.push({\n        color,\n        offset,\n        opacity: 1\n      });\n      currentVal = offset;\n      i++;\n    }\n\n    if (stops[stops.length - 1].offset < 100) {\n      stops.push({\n        color: endColor,\n        offset: endVal,\n        opacity: 1\n      });\n    }\n\n    if (endVal === startVal) {\n      stops[0].offset = 0;\n      stops[1].offset = 100;\n    } else {\n      // normalize the offsets into percentages\n      if (stops[stops.length - 1].offset !== 100) {\n        for (const s of stops) {\n          s.offset = (s.offset - startVal) / (endVal - startVal) * 100;\n        }\n      }\n    }\n\n    return stops;\n  }\n\n}\n/**\n * Based on the data, return an array with unique values.\n *\n * @export\n * @returns array\n */\n\n\nfunction getUniqueXDomainValues(results) {\n  const valueSet = new Set();\n\n  for (const result of results) {\n    for (const d of result.series) {\n      valueSet.add(d.name);\n    }\n  }\n\n  return Array.from(valueSet);\n}\n/**\n * Get the scaleType of enumerable of values.\n * @returns  'time', 'linear' or 'ordinal'\n */\n\n\nfunction getScaleType(values, checkDateType = true) {\n  if (checkDateType) {\n    const allDates = values.every(value => value instanceof Date);\n\n    if (allDates) {\n      return ScaleType.Time;\n    }\n  }\n\n  const allNumbers = values.every(value => typeof value === 'number');\n\n  if (allNumbers) {\n    return ScaleType.Linear;\n  }\n\n  return ScaleType.Ordinal;\n}\n\nfunction getXDomainArray(values, xScaleMin, xScaleMax) {\n  const scaleType = getScaleType(values);\n  let xSet = [];\n  let domain = [];\n\n  if (scaleType === ScaleType.Linear) {\n    values = values.map(v => Number(v));\n  }\n\n  let min;\n  let max;\n\n  if (scaleType === ScaleType.Time || scaleType === ScaleType.Linear) {\n    const mappedValues = values.map(v => Number(v));\n    min = xScaleMin ? xScaleMin : Math.min(...mappedValues);\n    max = xScaleMax ? xScaleMax : Math.max(...mappedValues);\n  }\n\n  if (scaleType === ScaleType.Time) {\n    domain = [new Date(min), new Date(max)];\n    xSet = [...values].sort((a, b) => {\n      const aDate = a.getTime();\n      const bDate = b.getTime();\n      if (aDate > bDate) return 1;\n      if (bDate > aDate) return -1;\n      return 0;\n    });\n  } else if (scaleType === ScaleType.Linear) {\n    domain = [min, max]; // Use compare function to sort numbers numerically\n\n    xSet = [...values].sort((a, b) => a - b);\n  } else {\n    domain = values;\n    xSet = values;\n  }\n\n  return {\n    domain,\n    xSet,\n    scaleType\n  };\n}\n\nfunction sortLinear(data, property, direction = 'asc') {\n  return data.sort((a, b) => {\n    if (direction === 'asc') {\n      return a[property] - b[property];\n    } else {\n      return b[property] - a[property];\n    }\n  });\n}\n\nfunction sortByDomain(data, property, direction = 'asc', domain) {\n  return data.sort((a, b) => {\n    const aVal = a[property];\n    const bVal = b[property];\n    const aIdx = domain.indexOf(aVal);\n    const bIdx = domain.indexOf(bVal);\n\n    if (direction === 'asc') {\n      return aIdx - bIdx;\n    } else {\n      return bIdx - aIdx;\n    }\n  });\n}\n\nfunction sortByTime(data, property, direction = 'asc') {\n  return data.sort((a, b) => {\n    const aDate = a[property].getTime();\n    const bDate = b[property].getTime();\n\n    if (direction === 'asc') {\n      if (aDate > bDate) return 1;\n      if (bDate > aDate) return -1;\n      return 0;\n    } else {\n      if (aDate > bDate) return -1;\n      if (bDate > aDate) return 1;\n      return 0;\n    }\n  });\n}\n\nclass AreaSeriesComponent {\n  constructor() {\n    this.baseValue = 'auto';\n    this.stacked = false;\n    this.normalized = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.updateGradient();\n    let currentArea;\n    let startingArea;\n\n    const xProperty = d => {\n      const label = d.name;\n      return this.xScale(label);\n    };\n\n    if (this.stacked || this.normalized) {\n      currentArea = area().x(xProperty).y0((d, i) => this.yScale(d.d0)).y1((d, i) => this.yScale(d.d1));\n      startingArea = area().x(xProperty).y0(d => this.yScale.range()[0]).y1(d => this.yScale.range()[0]);\n    } else {\n      currentArea = area().x(xProperty).y0(() => this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)).y1(d => this.yScale(d.value));\n      startingArea = area().x(xProperty).y0(d => this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)).y1(d => this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue));\n    }\n\n    currentArea.curve(this.curve);\n    startingArea.curve(this.curve);\n    this.opacity = 0.8;\n    let data = this.data.series;\n\n    if (this.scaleType === ScaleType.Linear) {\n      data = sortLinear(data, 'name');\n    } else if (this.scaleType === ScaleType.Time) {\n      data = sortByTime(data, 'name');\n    } else {\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n\n    this.path = currentArea(data);\n    this.startingPath = startingArea(data);\n  }\n\n  updateGradient() {\n    if (this.colors.scaleType === ScaleType.Linear) {\n      this.hasGradient = true;\n\n      if (this.stacked || this.normalized) {\n        const d0values = this.data.series.map(d => d.d0);\n        const d1values = this.data.series.map(d => d.d1);\n        const max = Math.max(...d1values);\n        const min = Math.min(...d0values);\n        this.gradientStops = this.colors.getLinearGradientStops(max, min);\n      } else {\n        const values = this.data.series.map(d => d.value);\n        const max = Math.max(...values);\n        this.gradientStops = this.colors.getLinearGradientStops(max);\n      }\n    } else {\n      this.hasGradient = false;\n      this.gradientStops = undefined;\n    }\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry) {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n\n}\n\nAreaSeriesComponent.ɵfac = function AreaSeriesComponent_Factory(t) {\n  return new (t || AreaSeriesComponent)();\n};\n\nAreaSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AreaSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-area-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    baseValue: \"baseValue\",\n    colors: \"colors\",\n    scaleType: \"scaleType\",\n    stacked: \"stacked\",\n    normalized: \"normalized\",\n    gradient: \"gradient\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c21,\n  decls: 1,\n  vars: 12,\n  consts: [[\"ngx-charts-area\", \"\", 1, \"area-series\", 3, \"data\", \"path\", \"fill\", \"stops\", \"startingPath\", \"opacity\", \"gradient\", \"animations\"]],\n  template: function AreaSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelement(0, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"active\", ctx.isActive(ctx.data))(\"inactive\", ctx.isInactive(ctx.data));\n      i0.ɵɵproperty(\"data\", ctx.data)(\"path\", ctx.path)(\"fill\", ctx.colors.getColor(ctx.data.name))(\"stops\", ctx.gradientStops)(\"startingPath\", ctx.startingPath)(\"opacity\", ctx.opacity)(\"gradient\", ctx.gradient || ctx.hasGradient)(\"animations\", ctx.animations);\n    }\n  },\n  directives: [AreaComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AreaSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-area-series]',\n      template: `\n    <svg:g\n      ngx-charts-area\n      class=\"area-series\"\n      [data]=\"data\"\n      [path]=\"path\"\n      [fill]=\"colors.getColor(data.name)\"\n      [stops]=\"gradientStops\"\n      [startingPath]=\"startingPath\"\n      [opacity]=\"opacity\"\n      [gradient]=\"gradient || hasGradient\"\n      [animations]=\"animations\"\n      [class.active]=\"isActive(data)\"\n      [class.inactive]=\"isInactive(data)\"\n    />\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    baseValue: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    stacked: [{\n      type: Input\n    }],\n    normalized: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})();\n\nclass AreaChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.xAxis = false;\n    this.yAxis = false;\n    this.baseValue = 'auto';\n    this.autoScale = false;\n    this.timeline = false;\n    this.showGridLines = true;\n    this.curve = curveLinear;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.roundDomains = false;\n    this.tooltipDisabled = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.timelineHeight = 50;\n    this.timelinePadding = 10;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n    this.updateTimeline();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline() {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain() {\n    let values = getUniqueXDomainValues(this.results);\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n\n    if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === ScaleType.Time) {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === ScaleType.Linear) {\n      domain = [min, max]; // Use compare function to sort numbers numerically\n\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain() {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const values = [...domain];\n\n    if (!this.autoScale) {\n      values.push(0);\n    }\n\n    if (this.baseValue !== 'auto') {\n      values.push(this.baseValue);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n    return [min, max];\n  }\n\n  getSeriesDomain() {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width) {\n    let scale;\n\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime();\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear();\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height) {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getScaleType(values) {\n    let date = true;\n    let num = true;\n\n    for (const value of values) {\n      if (isDate(value)) {\n        date = false;\n      }\n\n      if (isNumber(value)) {\n        num = false;\n      }\n    }\n\n    if (date) {\n      return ScaleType.Time;\n    }\n\n    if (num) {\n      return ScaleType.Linear;\n    }\n\n    return ScaleType.Ordinal;\n  }\n\n  updateDomain(domain) {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item) {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  hideCircles() {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series) {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({\n        value: entry,\n        entries: []\n      });\n    }\n\n    this.activeEntries = [];\n  }\n\n}\n\nAreaChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵAreaChartComponent_BaseFactory;\n  return function AreaChartComponent_Factory(t) {\n    return (ɵAreaChartComponent_BaseFactory || (ɵAreaChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(AreaChartComponent)))(t || AreaChartComponent);\n  };\n}();\n\nAreaChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AreaChartComponent,\n  selectors: [[\"ngx-charts-area-chart\"]],\n  contentQueries: function AreaChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n      i0.ɵɵcontentQuery(dirIndex, _c23, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);\n    }\n  },\n  hostBindings: function AreaChartComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseleave\", function AreaChartComponent_mouseleave_HostBindingHandler() {\n        return ctx.hideCircles();\n      });\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    baseValue: \"baseValue\",\n    autoScale: \"autoScale\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    timeline: \"timeline\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    roundDomains: \"roundDomains\",\n    tooltipDisabled: \"tooltipDisabled\",\n    xScaleMin: \"xScaleMin\",\n    xScaleMax: \"xScaleMax\",\n    yScaleMin: \"yScaleMin\",\n    yScaleMax: \"yScaleMax\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 11,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"area-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"mouseleave\", 4, \"ngIf\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\", 4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"data\", \"activeEntries\", \"scaleType\", \"gradient\", \"curve\", \"animations\"], [3, \"mouseleave\"], [\"ngx-charts-tooltip-area\", \"\", 3, \"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"tooltipDisabled\", \"tooltipTemplate\", \"hover\"], [4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-circle-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"activeEntries\", \"data\", \"scaleType\", \"visibleValue\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"data\", \"scaleType\", \"gradient\", \"curve\", \"animations\"]],\n  template: function AreaChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function AreaChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function AreaChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function AreaChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"defs\");\n      i0.ɵɵelementStart(2, \"clipPath\");\n      i0.ɵɵelement(3, \"rect\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"g\", 1);\n      i0.ɵɵtemplate(5, AreaChartComponent__svg_g_5_Template, 1, 10, \"g\", 2);\n      i0.ɵɵtemplate(6, AreaChartComponent__svg_g_6_Template, 1, 9, \"g\", 3);\n      i0.ɵɵelementStart(7, \"g\");\n      i0.ɵɵtemplate(8, AreaChartComponent__svg_g_8_Template, 2, 10, \"g\", 4);\n      i0.ɵɵtemplate(9, AreaChartComponent__svg_g_9_Template, 3, 9, \"g\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(10, AreaChartComponent__svg_g_10_Template, 2, 13, \"g\", 6);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(17, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"id\", ctx.clipPathId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"clip-path\", ctx.clipPath);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.tooltipDisabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.timeline && ctx.scaleType != \"ordinal\");\n    }\n  },\n  directives: [ChartComponent, i2.NgIf, i2.NgForOf, XAxisComponent, YAxisComponent, AreaSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline],\n  styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AreaChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-area-chart',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [baseValue]=\"baseValue\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [baseValue]=\"baseValue\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    baseValue: [{\n      type: Input\n    }],\n    autoScale: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    timeline: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    xScaleMin: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    yScaleMin: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    seriesTooltipTemplate: [{\n      type: ContentChild,\n      args: ['seriesTooltipTemplate']\n    }],\n    hideCircles: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass AreaChartNormalizedComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.showXAxisLabel = false;\n    this.showYAxisLabel = false;\n    this.showGridLines = true;\n    this.curve = curveLinear;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.roundDomains = false;\n    this.tooltipDisabled = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.yDomain = [0, 100];\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.seriesType = SeriesType;\n    this.timelineHeight = 50;\n    this.timelinePadding = 10;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.seriesDomain = this.getSeriesDomain();\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let d0 = 0;\n      let total = 0;\n\n      for (const group of this.results) {\n        const d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n\n          if (this.scaleType === ScaleType.Time) {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n\n          return a === b;\n        });\n\n        if (d) {\n          total += d.value;\n        }\n      }\n\n      for (const group of this.results) {\n        let d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n\n          if (this.scaleType === ScaleType.Time) {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n\n          return a === b;\n        });\n\n        if (d) {\n          d.d0 = d0;\n          d.d1 = d0 + d.value;\n          d0 += d.value;\n        } else {\n          d = {\n            name: val,\n            value: 0,\n            d0,\n            d1: d0\n          };\n          group.series.push(d);\n        }\n\n        if (total > 0) {\n          d.d0 = d.d0 * 100 / total;\n          d.d1 = d.d1 * 100 / total;\n        } else {\n          d.d0 = 0;\n          d.d1 = 0;\n        }\n      }\n    }\n\n    this.updateTimeline();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline() {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain() {\n    let values = getUniqueXDomainValues(this.results);\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === ScaleType.Time) {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      domain = [min, max]; // Use compare function to sort numbers numerically\n\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getSeriesDomain() {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width) {\n    let scale;\n\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime();\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear();\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height) {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain) {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item) {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  hideCircles() {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series) {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({\n        value: entry,\n        entries: []\n      });\n    }\n\n    this.activeEntries = [];\n  }\n\n}\n\nAreaChartNormalizedComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵAreaChartNormalizedComponent_BaseFactory;\n  return function AreaChartNormalizedComponent_Factory(t) {\n    return (ɵAreaChartNormalizedComponent_BaseFactory || (ɵAreaChartNormalizedComponent_BaseFactory = i0.ɵɵgetInheritedFactory(AreaChartNormalizedComponent)))(t || AreaChartNormalizedComponent);\n  };\n}();\n\nAreaChartNormalizedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AreaChartNormalizedComponent,\n  selectors: [[\"ngx-charts-area-chart-normalized\"]],\n  contentQueries: function AreaChartNormalizedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n      i0.ɵɵcontentQuery(dirIndex, _c23, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);\n    }\n  },\n  hostBindings: function AreaChartNormalizedComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseleave\", function AreaChartNormalizedComponent_mouseleave_HostBindingHandler() {\n        return ctx.hideCircles();\n      });\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    timeline: \"timeline\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    roundDomains: \"roundDomains\",\n    tooltipDisabled: \"tooltipDisabled\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 11,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"area-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"mouseleave\", 4, \"ngIf\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\", 4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"activeEntries\", \"gradient\", \"normalized\", \"curve\", \"animations\"], [3, \"mouseleave\"], [\"ngx-charts-tooltip-area\", \"\", 3, \"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\", \"hover\"], [4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-circle-series\", \"\", 3, \"type\", \"xScale\", \"yScale\", \"colors\", \"activeEntries\", \"data\", \"scaleType\", \"visibleValue\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"gradient\", \"normalized\", \"curve\", \"animations\"]],\n  template: function AreaChartNormalizedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function AreaChartNormalizedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function AreaChartNormalizedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function AreaChartNormalizedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"defs\");\n      i0.ɵɵelementStart(2, \"clipPath\");\n      i0.ɵɵelement(3, \"rect\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"g\", 1);\n      i0.ɵɵtemplate(5, AreaChartNormalizedComponent__svg_g_5_Template, 1, 10, \"g\", 2);\n      i0.ɵɵtemplate(6, AreaChartNormalizedComponent__svg_g_6_Template, 1, 9, \"g\", 3);\n      i0.ɵɵelementStart(7, \"g\");\n      i0.ɵɵtemplate(8, AreaChartNormalizedComponent__svg_g_8_Template, 2, 10, \"g\", 4);\n      i0.ɵɵtemplate(9, AreaChartNormalizedComponent__svg_g_9_Template, 3, 10, \"g\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(10, AreaChartNormalizedComponent__svg_g_10_Template, 2, 13, \"g\", 6);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(17, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"id\", ctx.clipPathId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"clip-path\", ctx.clipPath);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.tooltipDisabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.timeline && ctx.scaleType != \"ordinal\");\n    }\n  },\n  directives: [ChartComponent, i2.NgIf, i2.NgForOf, XAxisComponent, YAxisComponent, AreaSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline],\n  styles: [_c25],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AreaChartNormalizedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-area-chart-normalized',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [activeEntries]=\"activeEntries\"\n              [gradient]=\"gradient\"\n              [normalized]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [showPercentage]=\"true\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [normalized]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    timeline: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    seriesTooltipTemplate: [{\n      type: ContentChild,\n      args: ['seriesTooltipTemplate']\n    }],\n    hideCircles: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass AreaChartStackedComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.xAxis = false;\n    this.yAxis = false;\n    this.timeline = false;\n    this.showGridLines = true;\n    this.curve = curveLinear;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.roundDomains = false;\n    this.tooltipDisabled = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.timelineHeight = 50;\n    this.timelinePadding = 10;\n    this.seriesType = SeriesType;\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let d0 = 0;\n\n      for (const group of this.results) {\n        let d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n\n          if (this.scaleType === ScaleType.Time) {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n\n          return a === b;\n        });\n\n        if (d) {\n          d.d0 = d0;\n          d.d1 = d0 + d.value;\n          d0 += d.value;\n        } else {\n          d = {\n            name: val,\n            value: 0,\n            d0,\n            d1: d0\n          };\n          group.series.push(d);\n        }\n      }\n    }\n\n    this.updateTimeline();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline() {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain() {\n    let values = getUniqueXDomainValues(this.results);\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n\n    if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === ScaleType.Time) {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === ScaleType.Linear) {\n      domain = [min, max]; // Use compare function to sort numbers numerically\n\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain() {\n    const domain = [];\n\n    for (let i = 0; i < this.xSet.length; i++) {\n      const val = this.xSet[i];\n      let sum = 0;\n\n      for (const group of this.results) {\n        const d = group.series.find(item => {\n          let a = item.name;\n          let b = val;\n\n          if (this.scaleType === ScaleType.Time) {\n            a = a.valueOf();\n            b = b.valueOf();\n          }\n\n          return a === b;\n        });\n\n        if (d) {\n          sum += d.value;\n        }\n      }\n\n      domain.push(sum);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(0, ...domain);\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...domain);\n    return [min, max];\n  }\n\n  getSeriesDomain() {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width) {\n    let scale;\n\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime();\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear();\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().padding(0.1);\n    }\n\n    scale.range([0, width]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale(domain, height) {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain) {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item) {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  hideCircles() {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data, series) {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  trackBy(index, item) {\n    return `${item.name}`;\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({\n        value: entry,\n        entries: []\n      });\n    }\n\n    this.activeEntries = [];\n  }\n\n}\n\nAreaChartStackedComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵAreaChartStackedComponent_BaseFactory;\n  return function AreaChartStackedComponent_Factory(t) {\n    return (ɵAreaChartStackedComponent_BaseFactory || (ɵAreaChartStackedComponent_BaseFactory = i0.ɵɵgetInheritedFactory(AreaChartStackedComponent)))(t || AreaChartStackedComponent);\n  };\n}();\n\nAreaChartStackedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AreaChartStackedComponent,\n  selectors: [[\"ngx-charts-area-chart-stacked\"]],\n  contentQueries: function AreaChartStackedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n      i0.ɵɵcontentQuery(dirIndex, _c23, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);\n    }\n  },\n  hostBindings: function AreaChartStackedComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseleave\", function AreaChartStackedComponent_mouseleave_HostBindingHandler() {\n        return ctx.hideCircles();\n      });\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    timeline: \"timeline\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    roundDomains: \"roundDomains\",\n    tooltipDisabled: \"tooltipDisabled\",\n    xScaleMin: \"xScaleMin\",\n    xScaleMax: \"xScaleMax\",\n    yScaleMin: \"yScaleMin\",\n    yScaleMax: \"yScaleMax\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 11,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"area-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"mouseleave\", 4, \"ngIf\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\", 4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"gradient\", \"activeEntries\", \"stacked\", \"curve\", \"animations\"], [3, \"mouseleave\"], [\"ngx-charts-tooltip-area\", \"\", 3, \"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"tooltipDisabled\", \"tooltipTemplate\", \"hover\"], [\"ngx-charts-circle-series\", \"\", 3, \"type\", \"xScale\", \"yScale\", \"colors\", \"activeEntries\", \"data\", \"scaleType\", \"visibleValue\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"legend\", \"scaleType\", \"onDomainChange\"], [\"ngx-charts-area-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"gradient\", \"stacked\", \"curve\", \"animations\"]],\n  template: function AreaChartStackedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function AreaChartStackedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function AreaChartStackedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function AreaChartStackedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"defs\");\n      i0.ɵɵelementStart(2, \"clipPath\");\n      i0.ɵɵelement(3, \"rect\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"g\", 1);\n      i0.ɵɵtemplate(5, AreaChartStackedComponent__svg_g_5_Template, 1, 10, \"g\", 2);\n      i0.ɵɵtemplate(6, AreaChartStackedComponent__svg_g_6_Template, 1, 9, \"g\", 3);\n      i0.ɵɵelementStart(7, \"g\");\n      i0.ɵɵtemplate(8, AreaChartStackedComponent__svg_g_8_Template, 2, 10, \"g\", 4);\n      i0.ɵɵtemplate(9, AreaChartStackedComponent__svg_g_9_Template, 3, 10, \"g\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(10, AreaChartStackedComponent__svg_g_10_Template, 2, 13, \"g\", 6);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(17, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"id\", ctx.clipPathId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"clip-path\", ctx.clipPath);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.tooltipDisabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.timeline && ctx.scaleType != \"ordinal\");\n    }\n  },\n  directives: [ChartComponent, i2.NgIf, i2.NgForOf, XAxisComponent, YAxisComponent, AreaSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline],\n  styles: [_c25],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AreaChartStackedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-area-chart-stacked',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [activeEntries]=\"activeEntries\"\n              [stacked]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [stacked]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    timeline: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    xScaleMin: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    yScaleMin: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    seriesTooltipTemplate: [{\n      type: ContentChild,\n      args: ['seriesTooltipTemplate']\n    }],\n    hideCircles: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass AreaChartModule {}\n\nAreaChartModule.ɵfac = function AreaChartModule_Factory(t) {\n  return new (t || AreaChartModule)();\n};\n\nAreaChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AreaChartModule\n});\nAreaChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AreaChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent],\n      exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent]\n    }]\n  }], null, null);\n})();\n\nclass BarComponent {\n  constructor(element) {\n    this.roundEdges = true;\n    this.gradient = false;\n    this.offset = 0;\n    this.isActive = false;\n    this.animations = true;\n    this.noBarWhenZero = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.hasGradient = false;\n    this.hideBar = false;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    if (changes.roundEdges) {\n      this.loadAnimation();\n    }\n\n    this.update();\n  }\n\n  update() {\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (this.gradient || this.stops) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n\n    this.updatePathEl();\n    this.checkToHideBar();\n  }\n\n  loadAnimation() {\n    this.path = this.getStartingPath();\n    setTimeout(this.update.bind(this), 100);\n  }\n\n  updatePathEl() {\n    const node = select(this.element).select('.bar');\n    const path = this.getPath();\n\n    if (this.animations) {\n      node.transition().duration(500).attr('d', path);\n    } else {\n      node.attr('d', path);\n    }\n  }\n\n  getGradient() {\n    if (this.stops) {\n      return this.stops;\n    }\n\n    return [{\n      offset: 0,\n      color: this.fill,\n      opacity: this.getStartOpacity()\n    }, {\n      offset: 100,\n      color: this.fill,\n      opacity: 1\n    }];\n  }\n\n  getStartingPath() {\n    if (!this.animations) {\n      return this.getPath();\n    }\n\n    let radius = this.getRadius();\n    let path;\n\n    if (this.roundEdges) {\n      if (this.orientation === BarOrientation.Vertical) {\n        radius = Math.min(this.height, radius);\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n      } else if (this.orientation === BarOrientation.Horizontal) {\n        radius = Math.min(this.width, radius);\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n      }\n    } else {\n      if (this.orientation === BarOrientation.Vertical) {\n        path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n      } else if (this.orientation === BarOrientation.Horizontal) {\n        path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n      }\n    }\n\n    return path;\n  }\n\n  getPath() {\n    let radius = this.getRadius();\n    let path;\n\n    if (this.roundEdges) {\n      if (this.orientation === BarOrientation.Vertical) {\n        radius = Math.min(this.height, radius);\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n      } else if (this.orientation === BarOrientation.Horizontal) {\n        radius = Math.min(this.width, radius);\n        path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n      }\n    } else {\n      path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n    }\n\n    return path;\n  }\n\n  getRadius() {\n    let radius = 0;\n\n    if (this.roundEdges && this.height > 5 && this.width > 5) {\n      radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n    }\n\n    return radius;\n  }\n\n  getStartOpacity() {\n    if (this.roundEdges) {\n      return 0.2;\n    } else {\n      return 0.5;\n    }\n  }\n\n  get edges() {\n    let edges = [false, false, false, false];\n\n    if (this.roundEdges) {\n      if (this.orientation === BarOrientation.Vertical) {\n        if (this.data.value > 0) {\n          edges = [true, true, false, false];\n        } else {\n          edges = [false, false, true, true];\n        }\n      } else if (this.orientation === BarOrientation.Horizontal) {\n        if (this.data.value > 0) {\n          edges = [false, true, false, true];\n        } else {\n          edges = [true, false, true, false];\n        }\n      }\n    }\n\n    return edges;\n  }\n\n  onMouseEnter() {\n    this.activate.emit(this.data);\n  }\n\n  onMouseLeave() {\n    this.deactivate.emit(this.data);\n  }\n\n  checkToHideBar() {\n    this.hideBar = this.noBarWhenZero && (this.orientation === BarOrientation.Vertical && this.height === 0 || this.orientation === BarOrientation.Horizontal && this.width === 0);\n  }\n\n}\n\nBarComponent.ɵfac = function BarComponent_Factory(t) {\n  return new (t || BarComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nBarComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarComponent,\n  selectors: [[\"g\", \"ngx-charts-bar\", \"\"]],\n  hostBindings: function BarComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseenter\", function BarComponent_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function BarComponent_mouseleave_HostBindingHandler() {\n        return ctx.onMouseLeave();\n      });\n    }\n  },\n  inputs: {\n    fill: \"fill\",\n    data: \"data\",\n    width: \"width\",\n    height: \"height\",\n    x: \"x\",\n    y: \"y\",\n    orientation: \"orientation\",\n    roundEdges: \"roundEdges\",\n    gradient: \"gradient\",\n    offset: \"offset\",\n    isActive: \"isActive\",\n    stops: \"stops\",\n    animations: \"animations\",\n    ariaLabel: \"ariaLabel\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c26,\n  decls: 2,\n  vars: 8,\n  consts: [[4, \"ngIf\"], [\"stroke\", \"none\", \"role\", \"img\", \"tabIndex\", \"-1\", 1, \"bar\", 3, \"click\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"]],\n  template: function BarComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, BarComponent__svg_defs_0_Template, 2, 3, \"defs\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"path\", 1);\n      i0.ɵɵlistener(\"click\", function BarComponent_Template__svg_path_click_1_listener() {\n        return ctx.select.emit(ctx.data);\n      });\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.hasGradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"active\", ctx.isActive)(\"hidden\", ctx.hideBar);\n      i0.ɵɵattribute(\"d\", ctx.path)(\"aria-label\", ctx.ariaLabel)(\"fill\", ctx.hasGradient ? ctx.gradientFill : ctx.fill);\n    }\n  },\n  directives: [i2.NgIf, SvgLinearGradientComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-bar]',\n      template: `\n    <svg:defs *ngIf=\"hasGradient\">\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\"orientation\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path\n      class=\"bar\"\n      stroke=\"none\"\n      role=\"img\"\n      tabIndex=\"-1\"\n      [class.active]=\"isActive\"\n      [class.hidden]=\"hideBar\"\n      [attr.d]=\"path\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.fill]=\"hasGradient ? gradientFill : fill\"\n      (click)=\"select.emit(data)\"\n    />\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    fill: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }],\n    orientation: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    offset: [{\n      type: Input\n    }],\n    isActive: [{\n      type: Input\n    }],\n    stops: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nvar BarChartType;\n\n(function (BarChartType) {\n  BarChartType[\"Standard\"] = \"standard\";\n  BarChartType[\"Normalized\"] = \"normalized\";\n  BarChartType[\"Stacked\"] = \"stacked\";\n})(BarChartType || (BarChartType = {}));\n\nvar D0Types;\n\n(function (D0Types) {\n  D0Types[\"positive\"] = \"positive\";\n  D0Types[\"negative\"] = \"negative\";\n})(D0Types || (D0Types = {}));\n\nclass BarLabelComponent {\n  constructor(element) {\n    this.dimensionsChanged = new EventEmitter();\n    this.horizontalPadding = 2;\n    this.verticalPadding = 5;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  getSize() {\n    const h = this.element.getBoundingClientRect().height;\n    const w = this.element.getBoundingClientRect().width;\n    return {\n      height: h,\n      width: w,\n      negative: this.value < 0\n    };\n  }\n\n  ngAfterViewInit() {\n    this.dimensionsChanged.emit(this.getSize());\n  }\n\n  update() {\n    if (this.valueFormatting) {\n      this.formatedValue = this.valueFormatting(this.value);\n    } else {\n      this.formatedValue = formatLabel(this.value);\n    }\n\n    if (this.orientation === 'horizontal') {\n      this.x = this.barX + this.barWidth; // if the value is negative then it's on the left of the x0.\n      // we need to put the data label in front of the bar\n\n      if (this.value < 0) {\n        this.x = this.x - this.horizontalPadding;\n        this.textAnchor = 'end';\n      } else {\n        this.x = this.x + this.horizontalPadding;\n        this.textAnchor = 'start';\n      }\n\n      this.y = this.barY + this.barHeight / 2;\n    } else {\n      // orientation must be \"vertical\"\n      this.x = this.barX + this.barWidth / 2;\n      this.y = this.barY + this.barHeight;\n\n      if (this.value < 0) {\n        this.y = this.y + this.verticalPadding;\n        this.textAnchor = 'end';\n      } else {\n        this.y = this.y - this.verticalPadding;\n        this.textAnchor = 'start';\n      }\n\n      this.transform = `rotate(-45, ${this.x} , ${this.y})`;\n    }\n  }\n\n}\n\nBarLabelComponent.ɵfac = function BarLabelComponent_Factory(t) {\n  return new (t || BarLabelComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nBarLabelComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarLabelComponent,\n  selectors: [[\"g\", \"ngx-charts-bar-label\", \"\"]],\n  inputs: {\n    value: \"value\",\n    valueFormatting: \"valueFormatting\",\n    barX: \"barX\",\n    barY: \"barY\",\n    barWidth: \"barWidth\",\n    barHeight: \"barHeight\",\n    orientation: \"orientation\"\n  },\n  outputs: {\n    dimensionsChanged: \"dimensionsChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c27,\n  decls: 2,\n  vars: 5,\n  consts: [[\"alignment-baseline\", \"middle\", 1, \"textDataLabel\"]],\n  template: function BarLabelComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"text\", 0);\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"text-anchor\", ctx.textAnchor)(\"transform\", ctx.transform)(\"x\", ctx.x)(\"y\", ctx.y);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", ctx.formatedValue, \" \");\n    }\n  },\n  styles: [\".textDataLabel[_ngcontent-%COMP%]{font-size:11px}\"],\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarLabelComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-bar-label]',\n      template: `\n    <svg:text\n      class=\"textDataLabel\"\n      alignment-baseline=\"middle\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n    >\n      {{ formatedValue }}\n    </svg:text>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".textDataLabel{font-size:11px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    value: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    barX: [{\n      type: Input\n    }],\n    barY: [{\n      type: Input\n    }],\n    barWidth: [{\n      type: Input\n    }],\n    barHeight: [{\n      type: Input\n    }],\n    orientation: [{\n      type: Input\n    }],\n    dimensionsChanged: [{\n      type: Output\n    }]\n  });\n})();\n\nclass SeriesHorizontal {\n  constructor() {\n    this.type = BarChartType.Standard;\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.dataLabelWidthChanged = new EventEmitter();\n    this.barsForDataLabels = [];\n    this.barOrientation = BarOrientation;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.updateTooltipSettings();\n    const d0 = {\n      [D0Types.positive]: 0,\n      [D0Types.negative]: 0\n    };\n    let d0Type;\n    d0Type = D0Types.positive;\n    let total;\n\n    if (this.type === BarChartType.Normalized) {\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n\n    const xScaleMin = Math.max(this.xScale.domain()[0], 0);\n    this.bars = this.series.map(d => {\n      let value = d.value;\n      const label = this.getLabel(d);\n      const formattedLabel = formatLabel(label);\n      const roundEdges = this.roundEdges;\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n      const bar = {\n        value,\n        label,\n        roundEdges,\n        data: d,\n        formattedLabel\n      };\n      bar.height = this.yScale.bandwidth();\n\n      if (this.type === BarChartType.Standard) {\n        bar.width = Math.abs(this.xScale(value) - this.xScale(xScaleMin));\n\n        if (value < 0) {\n          bar.x = this.xScale(value);\n        } else {\n          bar.x = this.xScale(xScaleMin);\n        }\n\n        bar.y = this.yScale(label);\n      } else if (this.type === BarChartType.Stacked) {\n        const offset0 = d0[d0Type];\n        const offset1 = offset0 + value;\n        d0[d0Type] += value;\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\n        bar.x = this.xScale(offset0);\n        bar.y = 0;\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n      } else if (this.type === BarChartType.Normalized) {\n        let offset0 = d0[d0Type];\n        let offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        if (total > 0) {\n          offset0 = offset0 * 100 / total;\n          offset1 = offset1 * 100 / total;\n        } else {\n          offset0 = 0;\n          offset1 = 0;\n        }\n\n        bar.width = this.xScale(offset1) - this.xScale(offset0);\n        bar.x = this.xScale(offset0);\n        bar.y = 0;\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n        value = (offset1 - offset0).toFixed(2) + '%';\n      }\n\n      if (this.colors.scaleType === ScaleType.Ordinal) {\n        bar.color = this.colors.getColor(label);\n      } else {\n        if (this.type === BarChartType.Standard) {\n          bar.color = this.colors.getColor(value);\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\n        } else {\n          bar.color = this.colors.getColor(bar.offset1);\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n        }\n      }\n\n      let tooltipLabel = formattedLabel;\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n\n      if (this.seriesName !== null && this.seriesName !== undefined) {\n        tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n        bar.data.series = this.seriesName;\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n      }\n\n      bar.tooltipText = this.tooltipDisabled ? undefined : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()}</span>\n      `;\n      return bar;\n    });\n    this.updateDataLabels();\n  }\n\n  updateDataLabels() {\n    if (this.type === BarChartType.Stacked) {\n      this.barsForDataLabels = [];\n      const section = {};\n      section.series = this.seriesName;\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => d > 0 ? sum + d : sum, 0);\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => d < 0 ? sum + d : sum, 0);\n      section.total = totalPositive + totalNegative;\n      section.x = 0;\n      section.y = 0; // if total is positive then we show it on the right, otherwise on the left\n\n      if (section.total > 0) {\n        section.width = this.xScale(totalPositive);\n      } else {\n        section.width = this.xScale(totalNegative);\n      }\n\n      section.height = this.yScale.bandwidth();\n      this.barsForDataLabels.push(section);\n    } else {\n      this.barsForDataLabels = this.series.map(d => {\n        const section = {};\n        section.series = this.seriesName ?? d.label;\n        section.total = d.value;\n        section.x = this.xScale(0);\n        section.y = this.yScale(d.label);\n        section.width = this.xScale(section.total) - this.xScale(0);\n        section.height = this.yScale.bandwidth();\n        return section;\n      });\n    }\n  }\n\n  updateTooltipSettings() {\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : PlacementTypes.Top;\n    this.tooltipType = this.tooltipDisabled ? undefined : StyleTypes.tooltip;\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(active => {\n      return entry.name === active.name && entry.value === active.value;\n    });\n    return item !== undefined;\n  }\n\n  getLabel(dataItem) {\n    if (dataItem.label) {\n      return dataItem.label;\n    }\n\n    return dataItem.name;\n  }\n\n  trackBy(index, bar) {\n    return bar.label;\n  }\n\n  trackDataLabelBy(index, barLabel) {\n    return index + '#' + barLabel.series + '#' + barLabel.total;\n  }\n\n  click(data) {\n    this.select.emit(data);\n  }\n\n}\n\nSeriesHorizontal.ɵfac = function SeriesHorizontal_Factory(t) {\n  return new (t || SeriesHorizontal)();\n};\n\nSeriesHorizontal.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SeriesHorizontal,\n  selectors: [[\"g\", \"ngx-charts-series-horizontal\", \"\"]],\n  inputs: {\n    dims: \"dims\",\n    type: \"type\",\n    series: \"series\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    activeEntries: \"activeEntries\",\n    seriesName: \"seriesName\",\n    tooltipTemplate: \"tooltipTemplate\",\n    roundEdges: \"roundEdges\",\n    animations: \"animations\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    dataLabelWidthChanged: \"dataLabelWidthChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c28,\n  decls: 2,\n  vars: 3,\n  consts: [[\"ngx-charts-bar\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"stops\", \"data\", \"orientation\", \"roundEdges\", \"gradient\", \"isActive\", \"ariaLabel\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [4, \"ngIf\"], [\"ngx-charts-bar\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"stops\", \"data\", \"orientation\", \"roundEdges\", \"gradient\", \"isActive\", \"ariaLabel\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-bar-label\", \"\", 3, \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"value\", \"valueFormatting\", \"orientation\", \"dimensionsChanged\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-bar-label\", \"\", 3, \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"value\", \"valueFormatting\", \"orientation\", \"dimensionsChanged\"]],\n  template: function SeriesHorizontal_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, SeriesHorizontal__svg_g_0_Template, 1, 21, \"g\", 0);\n      i0.ɵɵtemplate(1, SeriesHorizontal__svg_g_1_Template, 2, 2, \"g\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.bars)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showDataLabel);\n    }\n  },\n  directives: [i2.NgForOf, i2.NgIf, BarComponent, TooltipDirective, BarLabelComponent],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SeriesHorizontal, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-series-horizontal]',\n      template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"barOrientation.Horizontal\"\n      [roundEdges]=\"bar.roundEdges\"\n      (select)=\"click($event)\"\n      [gradient]=\"gradient\"\n      [isActive]=\"isActive(bar.data)\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [animations]=\"animations\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Horizontal\"\n        (dimensionsChanged)=\"dataLabelWidthChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])]\n    }]\n  }], null, {\n    dims: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    series: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    seriesName: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    dataLabelWidthChanged: [{\n      type: Output\n    }]\n  });\n})();\n\nclass BarHorizontalComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.roundEdges = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.dataLabelMaxWidth = {\n      negative: 0,\n      positive: 0\n    };\n  }\n\n  update() {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = {\n        negative: 0,\n        positive: 0\n      };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getXScale() {\n    this.xDomain = this.getXDomain();\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getYScale() {\n    this.yDomain = this.getYDomain();\n    const spacing = this.yDomain.length / (this.dims.height / this.barPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.yDomain);\n  }\n\n  getXDomain() {\n    const values = this.results.map(d => d.value);\n    const min = this.xScaleMin ? Math.min(this.xScaleMin, ...values) : Math.min(0, ...values);\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...values) : Math.max(0, ...values);\n    return [min, max];\n  }\n\n  getYDomain() {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.yDomain;\n    } else {\n      domain = this.xDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === 'ordinal') {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.xDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n\n    if (event.index === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarHorizontalComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarHorizontalComponent_BaseFactory;\n  return function BarHorizontalComponent_Factory(t) {\n    return (ɵBarHorizontalComponent_BaseFactory || (ɵBarHorizontalComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarHorizontalComponent)))(t || BarHorizontalComponent);\n  };\n}();\n\nBarHorizontalComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarHorizontalComponent,\n  selectors: [[\"ngx-charts-bar-horizontal\"]],\n  contentQueries: function BarHorizontalComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    roundEdges: \"roundEdges\",\n    xScaleMax: \"xScaleMax\",\n    xScaleMin: \"xScaleMin\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 5,\n  vars: 25,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-series-horizontal\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"activeEntries\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"dimensionsChanged\"]],\n  template: function BarHorizontalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function BarHorizontalComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function BarHorizontalComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, true);\n      })(\"legendLabelDeactivate\", function BarHorizontalComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, true);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, BarHorizontalComponent__svg_g_2_Template, 1, 10, \"g\", 2);\n      i0.ɵɵtemplate(3, BarHorizontalComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n      i0.ɵɵelementStart(4, \"g\", 4);\n      i0.ɵɵlistener(\"select\", function BarHorizontalComponent_Template__svg_g_select_4_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function BarHorizontalComponent_Template__svg_g_activate_4_listener($event) {\n        return ctx.onActivate($event);\n      })(\"deactivate\", function BarHorizontalComponent_Template__svg_g_deactivate_4_listener($event) {\n        return ctx.onDeactivate($event);\n      })(\"dataLabelWidthChanged\", function BarHorizontalComponent_Template__svg_g_dataLabelWidthChanged_4_listener($event) {\n        return ctx.onDataLabelMaxWidthChanged($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(22, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"xScale\", ctx.xScale)(\"yScale\", ctx.yScale)(\"colors\", ctx.colors)(\"series\", ctx.results)(\"dims\", ctx.dims)(\"gradient\", ctx.gradient)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"activeEntries\", ctx.activeEntries)(\"roundEdges\", ctx.roundEdges)(\"animations\", ctx.animations)(\"showDataLabel\", ctx.showDataLabel)(\"dataLabelFormatting\", ctx.dataLabelFormatting)(\"noBarWhenZero\", ctx.noBarWhenZero);\n    }\n  },\n  directives: [ChartComponent, i2.NgIf, SeriesHorizontal, XAxisComponent, YAxisComponent],\n  styles: [_c25],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarHorizontalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-horizontal',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-horizontal\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    xScaleMin: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass BarHorizontal2DComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.groupPadding = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.roundEdges = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.dataLabelMaxWidth = {\n      negative: 0,\n      positive: 0\n    };\n    this.isSSR = false;\n    this.barOrientation = BarOrientation;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  update() {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = {\n        negative: 0,\n        positive: 0\n      };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n    this.groupScale = this.getGroupScale();\n    this.innerScale = this.getInnerScale();\n    this.valueScale = this.getValueScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupScale() {\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).paddingOuter(spacing / 2).domain(this.groupDomain);\n  }\n\n  getInnerScale() {\n    const height = this.groupScale.bandwidth();\n    const spacing = this.innerDomain.length / (height / this.barPadding + 1);\n    return scaleBand().rangeRound([0, height]).paddingInner(spacing).domain(this.innerDomain);\n  }\n\n  getValueScale() {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const min = Math.min(0, ...domain);\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(0, ...domain);\n    return [min, max];\n  }\n\n  groupTransform(group) {\n    return `translate(0, ${this.groupScale(group.label)})`;\n  }\n\n  onClick(data, group) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarHorizontal2DComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarHorizontal2DComponent_BaseFactory;\n  return function BarHorizontal2DComponent_Factory(t) {\n    return (ɵBarHorizontal2DComponent_BaseFactory || (ɵBarHorizontal2DComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarHorizontal2DComponent)))(t || BarHorizontal2DComponent);\n  };\n}();\n\nBarHorizontal2DComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarHorizontal2DComponent,\n  selectors: [[\"ngx-charts-bar-horizontal-2d\"]],\n  contentQueries: function BarHorizontal2DComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    groupPadding: \"groupPadding\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    roundEdges: \"roundEdges\",\n    xScaleMax: \"xScaleMax\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 7,\n  vars: 18,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-grid-panel-series\", \"\", 3, \"xScale\", \"yScale\", \"data\", \"dims\", \"orient\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-series-horizontal\", \"\", 3, \"xScale\", \"activeEntries\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"seriesName\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"]],\n  template: function BarHorizontal2DComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function BarHorizontal2DComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarHorizontal2DComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarHorizontal2DComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵelement(2, \"g\", 2);\n      i0.ɵɵtemplate(3, BarHorizontal2DComponent__svg_g_3_Template, 1, 10, \"g\", 3);\n      i0.ɵɵtemplate(4, BarHorizontal2DComponent__svg_g_4_Template, 1, 9, \"g\", 4);\n      i0.ɵɵtemplate(5, BarHorizontal2DComponent__svg_g_5_Template, 2, 2, \"g\", 5);\n      i0.ɵɵtemplate(6, BarHorizontal2DComponent__svg_g_6_Template, 2, 2, \"g\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(15, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"xScale\", ctx.valueScale)(\"yScale\", ctx.groupScale)(\"data\", ctx.results)(\"dims\", ctx.dims)(\"orient\", ctx.barOrientation.Horizontal);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  directives: [ChartComponent, GridPanelSeriesComponent, i2.NgIf, XAxisComponent, YAxisComponent, i2.NgForOf, SeriesHorizontal],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarHorizontal2DComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-horizontal-2d',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"valueScale\"\n          [yScale]=\"groupScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Horizontal\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    groupPadding: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass BarHorizontalNormalizedComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.noBarWhenZero = true;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.valueDomain = [0, 100];\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.barChartType = BarChartType;\n    this.isSSR = false;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getYScale() {\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getXScale() {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group) {\n    return `translate(0, ${this.yScale(group.name)})`;\n  }\n\n  onClick(data, group) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarHorizontalNormalizedComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarHorizontalNormalizedComponent_BaseFactory;\n  return function BarHorizontalNormalizedComponent_Factory(t) {\n    return (ɵBarHorizontalNormalizedComponent_BaseFactory || (ɵBarHorizontalNormalizedComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarHorizontalNormalizedComponent)))(t || BarHorizontalNormalizedComponent);\n  };\n}();\n\nBarHorizontalNormalizedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarHorizontalNormalizedComponent,\n  selectors: [[\"ngx-charts-bar-horizontal-normalized\"]],\n  contentQueries: function BarHorizontalNormalizedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 13,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-series-horizontal\", \"\", 3, \"type\", \"xScale\", \"yScale\", \"activeEntries\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"seriesName\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\"]],\n  template: function BarHorizontalNormalizedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function BarHorizontalNormalizedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarHorizontalNormalizedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarHorizontalNormalizedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, BarHorizontalNormalizedComponent__svg_g_2_Template, 1, 10, \"g\", 2);\n      i0.ɵɵtemplate(3, BarHorizontalNormalizedComponent__svg_g_3_Template, 1, 8, \"g\", 3);\n      i0.ɵɵtemplate(4, BarHorizontalNormalizedComponent__svg_g_4_Template, 2, 2, \"g\", 4);\n      i0.ɵɵtemplate(5, BarHorizontalNormalizedComponent__svg_g_5_Template, 2, 2, \"g\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  directives: [ChartComponent, i2.NgIf, XAxisComponent, YAxisComponent, i2.NgForOf, SeriesHorizontal],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarHorizontalNormalizedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-horizontal-normalized',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass BarHorizontalStackedComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.dataLabelMaxWidth = {\n      negative: 0,\n      positive: 0\n    };\n    this.barChartType = BarChartType;\n    this.isSSR = false;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  update() {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxWidth = {\n        negative: 0,\n        positive: 0\n      };\n    }\n\n    this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n    let smallest = 0;\n    let biggest = 0;\n\n    for (const group of this.results) {\n      let smallestSum = 0;\n      let biggestSum = 0;\n\n      for (const d of group.series) {\n        if (d.value < 0) {\n          smallestSum += d.value;\n        } else {\n          biggestSum += d.value;\n        }\n\n        smallest = d.value < smallest ? d.value : smallest;\n        biggest = d.value > biggest ? d.value : biggest;\n      }\n\n      domain.push(smallestSum);\n      domain.push(biggestSum);\n    }\n\n    domain.push(smallest);\n    domain.push(biggest);\n    const min = Math.min(0, ...domain);\n    const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(...domain);\n    return [min, max];\n  }\n\n  getYScale() {\n    const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getXScale() {\n    const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group) {\n    return `translate(0, ${this.yScale(group.name)})`;\n  }\n\n  onClick(data, group) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxWidthChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n    } else {\n      this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n    }\n\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarHorizontalStackedComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarHorizontalStackedComponent_BaseFactory;\n  return function BarHorizontalStackedComponent_Factory(t) {\n    return (ɵBarHorizontalStackedComponent_BaseFactory || (ɵBarHorizontalStackedComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarHorizontalStackedComponent)))(t || BarHorizontalStackedComponent);\n  };\n}();\n\nBarHorizontalStackedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarHorizontalStackedComponent,\n  selectors: [[\"ngx-charts-bar-horizontal-stacked\"]],\n  contentQueries: function BarHorizontalStackedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    xScaleMax: \"xScaleMax\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 13,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"yAxisOffset\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-series-horizontal\", \"\", 3, \"type\", \"xScale\", \"yScale\", \"colors\", \"series\", \"activeEntries\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"seriesName\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"]],\n  template: function BarHorizontalStackedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function BarHorizontalStackedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarHorizontalStackedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarHorizontalStackedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, BarHorizontalStackedComponent__svg_g_2_Template, 1, 10, \"g\", 2);\n      i0.ɵɵtemplate(3, BarHorizontalStackedComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n      i0.ɵɵtemplate(4, BarHorizontalStackedComponent__svg_g_4_Template, 2, 2, \"g\", 4);\n      i0.ɵɵtemplate(5, BarHorizontalStackedComponent__svg_g_5_Template, 2, 2, \"g\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  directives: [ChartComponent, i2.NgIf, XAxisComponent, YAxisComponent, i2.NgForOf, SeriesHorizontal],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarHorizontalStackedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-horizontal-stacked',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass SeriesVerticalComponent {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.type = BarChartType.Standard;\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.dataLabelHeightChanged = new EventEmitter();\n    this.barsForDataLabels = [];\n    this.barOrientation = BarOrientation;\n    this.isSSR = false;\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.updateTooltipSettings();\n    let width;\n\n    if (this.series.length) {\n      width = this.xScale.bandwidth();\n    }\n\n    width = Math.round(width);\n    const yScaleMin = Math.max(this.yScale.domain()[0], 0);\n    const d0 = {\n      [D0Types.positive]: 0,\n      [D0Types.negative]: 0\n    };\n    let d0Type = D0Types.positive;\n    let total;\n\n    if (this.type === BarChartType.Normalized) {\n      total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n\n    this.bars = this.series.map((d, index) => {\n      let value = d.value;\n      const label = this.getLabel(d);\n      const formattedLabel = formatLabel(label);\n      const roundEdges = this.roundEdges;\n      d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n      const bar = {\n        value,\n        label,\n        roundEdges,\n        data: d,\n        width,\n        formattedLabel,\n        height: 0,\n        x: 0,\n        y: 0\n      };\n\n      if (this.type === BarChartType.Standard) {\n        bar.height = Math.abs(this.yScale(value) - this.yScale(yScaleMin));\n        bar.x = this.xScale(label);\n\n        if (value < 0) {\n          bar.y = this.yScale(0);\n        } else {\n          bar.y = this.yScale(value);\n        }\n      } else if (this.type === BarChartType.Stacked) {\n        const offset0 = d0[d0Type];\n        const offset1 = offset0 + value;\n        d0[d0Type] += value;\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\n        bar.x = 0;\n        bar.y = this.yScale(offset1);\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n      } else if (this.type === BarChartType.Normalized) {\n        let offset0 = d0[d0Type];\n        let offset1 = offset0 + value;\n        d0[d0Type] += value;\n\n        if (total > 0) {\n          offset0 = offset0 * 100 / total;\n          offset1 = offset1 * 100 / total;\n        } else {\n          offset0 = 0;\n          offset1 = 0;\n        }\n\n        bar.height = this.yScale(offset0) - this.yScale(offset1);\n        bar.x = 0;\n        bar.y = this.yScale(offset1);\n        bar.offset0 = offset0;\n        bar.offset1 = offset1;\n        value = (offset1 - offset0).toFixed(2) + '%';\n      }\n\n      if (this.colors.scaleType === ScaleType.Ordinal) {\n        bar.color = this.colors.getColor(label);\n      } else {\n        if (this.type === BarChartType.Standard) {\n          bar.color = this.colors.getColor(value);\n          bar.gradientStops = this.colors.getLinearGradientStops(value);\n        } else {\n          bar.color = this.colors.getColor(bar.offset1);\n          bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n        }\n      }\n\n      let tooltipLabel = formattedLabel;\n      bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n\n      if (this.seriesName !== null && this.seriesName !== undefined) {\n        tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n        bar.data.series = this.seriesName;\n        bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n      }\n\n      bar.tooltipText = this.tooltipDisabled ? undefined : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()}</span>\n      `;\n      return bar;\n    });\n    this.updateDataLabels();\n  }\n\n  updateDataLabels() {\n    if (this.type === BarChartType.Stacked) {\n      this.barsForDataLabels = [];\n      const section = {};\n      section.series = this.seriesName;\n      const totalPositive = this.series.map(d => d.value).reduce((sum, d) => d > 0 ? sum + d : sum, 0);\n      const totalNegative = this.series.map(d => d.value).reduce((sum, d) => d < 0 ? sum + d : sum, 0);\n      section.total = totalPositive + totalNegative;\n      section.x = 0;\n      section.y = 0;\n\n      if (section.total > 0) {\n        section.height = this.yScale(totalPositive);\n      } else {\n        section.height = this.yScale(totalNegative);\n      }\n\n      section.width = this.xScale.bandwidth();\n      this.barsForDataLabels.push(section);\n    } else {\n      this.barsForDataLabels = this.series.map(d => {\n        const section = {};\n        section.series = this.seriesName ?? d.label;\n        section.total = d.value;\n        section.x = this.xScale(d.label);\n        section.y = this.yScale(0);\n        section.height = this.yScale(section.total) - this.yScale(0);\n        section.width = this.xScale.bandwidth();\n        return section;\n      });\n    }\n  }\n\n  updateTooltipSettings() {\n    this.tooltipPlacement = this.tooltipDisabled ? undefined : PlacementTypes.Top;\n    this.tooltipType = this.tooltipDisabled ? undefined : StyleTypes.tooltip;\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(active => {\n      return entry.name === active.name && entry.value === active.value;\n    });\n    return item !== undefined;\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  getLabel(dataItem) {\n    if (dataItem.label) {\n      return dataItem.label;\n    }\n\n    return dataItem.name;\n  }\n\n  trackBy(index, bar) {\n    return bar.label;\n  }\n\n  trackDataLabelBy(index, barLabel) {\n    return index + '#' + barLabel.series + '#' + barLabel.total;\n  }\n\n}\n\nSeriesVerticalComponent.ɵfac = function SeriesVerticalComponent_Factory(t) {\n  return new (t || SeriesVerticalComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nSeriesVerticalComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SeriesVerticalComponent,\n  selectors: [[\"g\", \"ngx-charts-series-vertical\", \"\"]],\n  inputs: {\n    dims: \"dims\",\n    type: \"type\",\n    series: \"series\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    gradient: \"gradient\",\n    activeEntries: \"activeEntries\",\n    seriesName: \"seriesName\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\",\n    roundEdges: \"roundEdges\",\n    animations: \"animations\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    dataLabelHeightChanged: \"dataLabelHeightChanged\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c29,\n  decls: 3,\n  vars: 3,\n  consts: [[4, \"ngIf\"], [\"ngx-charts-bar\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"stops\", \"data\", \"orientation\", \"roundEdges\", \"gradient\", \"ariaLabel\", \"isActive\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"noBarWhenZero\", \"animations\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-bar\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"stops\", \"data\", \"orientation\", \"roundEdges\", \"gradient\", \"ariaLabel\", \"isActive\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"noBarWhenZero\", \"animations\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-bar-label\", \"\", 3, \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"value\", \"valueFormatting\", \"orientation\", \"dimensionsChanged\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-bar-label\", \"\", 3, \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"value\", \"valueFormatting\", \"orientation\", \"dimensionsChanged\"]],\n  template: function SeriesVerticalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, SeriesVerticalComponent__svg_g_0_Template, 2, 2, \"g\", 0);\n      i0.ɵɵtemplate(1, SeriesVerticalComponent__svg_g_1_Template, 2, 2, \"g\", 0);\n      i0.ɵɵtemplate(2, SeriesVerticalComponent__svg_g_2_Template, 2, 2, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showDataLabel);\n    }\n  },\n  directives: [i2.NgIf, i2.NgForOf, BarComponent, TooltipDirective, BarLabelComponent],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SeriesVerticalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-series-vertical]',\n      template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [@animationState]=\"'active'\"\n        [@.disabled]=\"!animations\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Vertical\"\n        (dimensionsChanged)=\"dataLabelHeightChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    dims: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    series: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    seriesName: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    dataLabelHeightChanged: [{\n      type: Output\n    }]\n  });\n})();\n\nclass BarVerticalComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.roundEdges = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.dataLabelMaxHeight = {\n      negative: 0,\n      positive: 0\n    };\n  }\n\n  update() {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = {\n        negative: 0,\n        positive: 0\n      };\n    }\n\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  getXScale() {\n    this.xDomain = this.getXDomain();\n    const spacing = this.xDomain.length / (this.dims.width / this.barPadding + 1);\n    return scaleBand().range([0, this.dims.width]).paddingInner(spacing).domain(this.xDomain);\n  }\n\n  getYScale() {\n    this.yDomain = this.getYDomain();\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.yDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getXDomain() {\n    return this.results.map(d => d.label);\n  }\n\n  getYDomain() {\n    const values = this.results.map(d => d.value);\n    let min = this.yScaleMin ? Math.min(this.yScaleMin, ...values) : Math.min(0, ...values);\n\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n      min = Math.min(min, ...this.yAxisTicks);\n    }\n\n    let max = this.yScaleMax ? Math.max(this.yScaleMax, ...values) : Math.max(0, ...values);\n\n    if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n      max = Math.max(max, ...this.yAxisTicks);\n    }\n\n    return [min, max];\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.xDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.xDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onDataLabelMaxHeightChanged(event) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n\n    if (event.index === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarVerticalComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarVerticalComponent_BaseFactory;\n  return function BarVerticalComponent_Factory(t) {\n    return (ɵBarVerticalComponent_BaseFactory || (ɵBarVerticalComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarVerticalComponent)))(t || BarVerticalComponent);\n  };\n}();\n\nBarVerticalComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarVerticalComponent,\n  selectors: [[\"ngx-charts-bar-vertical\"]],\n  contentQueries: function BarVerticalComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    roundEdges: \"roundEdges\",\n    yScaleMax: \"yScaleMax\",\n    yScaleMin: \"yScaleMin\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 5,\n  vars: 25,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-series-vertical\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"showDataLabel\", \"dataLabelFormatting\", \"activeEntries\", \"roundEdges\", \"animations\", \"noBarWhenZero\", \"activate\", \"deactivate\", \"select\", \"dataLabelHeightChanged\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"]],\n  template: function BarVerticalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function BarVerticalComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function BarVerticalComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, true);\n      })(\"legendLabelDeactivate\", function BarVerticalComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, true);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, BarVerticalComponent__svg_g_2_Template, 1, 11, \"g\", 2);\n      i0.ɵɵtemplate(3, BarVerticalComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n      i0.ɵɵelementStart(4, \"g\", 4);\n      i0.ɵɵlistener(\"activate\", function BarVerticalComponent_Template__svg_g_activate_4_listener($event) {\n        return ctx.onActivate($event);\n      })(\"deactivate\", function BarVerticalComponent_Template__svg_g_deactivate_4_listener($event) {\n        return ctx.onDeactivate($event);\n      })(\"select\", function BarVerticalComponent_Template__svg_g_select_4_listener($event) {\n        return ctx.onClick($event);\n      })(\"dataLabelHeightChanged\", function BarVerticalComponent_Template__svg_g_dataLabelHeightChanged_4_listener($event) {\n        return ctx.onDataLabelMaxHeightChanged($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(22, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"xScale\", ctx.xScale)(\"yScale\", ctx.yScale)(\"colors\", ctx.colors)(\"series\", ctx.results)(\"dims\", ctx.dims)(\"gradient\", ctx.gradient)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"showDataLabel\", ctx.showDataLabel)(\"dataLabelFormatting\", ctx.dataLabelFormatting)(\"activeEntries\", ctx.activeEntries)(\"roundEdges\", ctx.roundEdges)(\"animations\", ctx.animations)(\"noBarWhenZero\", ctx.noBarWhenZero);\n    }\n  },\n  directives: [ChartComponent, i2.NgIf, SeriesVerticalComponent, XAxisComponent, YAxisComponent],\n  styles: [_c25],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarVerticalComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-vertical',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (select)=\"onClick($event)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    yScaleMin: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass BarVertical2DComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.scaleType = ScaleType.Ordinal;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.groupPadding = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.roundEdges = true;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.dataLabelMaxHeight = {\n      negative: 0,\n      positive: 0\n    };\n    this.isSSR = false;\n    this.barOrientation = BarOrientation;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  update() {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = {\n        negative: 0,\n        positive: 0\n      };\n    }\n\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n\n    this.formatDates();\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n    this.groupScale = this.getGroupScale();\n    this.innerScale = this.getInnerScale();\n    this.valueScale = this.getValueScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  onDataLabelMaxHeightChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  getGroupScale() {\n    const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).paddingOuter(spacing / 2).domain(this.groupDomain);\n  }\n\n  getInnerScale() {\n    const width = this.groupScale.bandwidth();\n    const spacing = this.innerDomain.length / (width / this.barPadding + 1);\n    return scaleBand().rangeRound([0, width]).paddingInner(spacing).domain(this.innerDomain);\n  }\n\n  getValueScale() {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const min = Math.min(0, ...domain);\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(0, ...domain);\n    return [min, max];\n  }\n\n  groupTransform(group) {\n    return `translate(${this.groupScale(group.label)}, 0)`;\n  }\n\n  onClick(data, group) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarVertical2DComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarVertical2DComponent_BaseFactory;\n  return function BarVertical2DComponent_Factory(t) {\n    return (ɵBarVertical2DComponent_BaseFactory || (ɵBarVertical2DComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarVertical2DComponent)))(t || BarVertical2DComponent);\n  };\n}();\n\nBarVertical2DComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarVertical2DComponent,\n  selectors: [[\"ngx-charts-bar-vertical-2d\"]],\n  contentQueries: function BarVertical2DComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    scaleType: \"scaleType\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    groupPadding: \"groupPadding\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    roundEdges: \"roundEdges\",\n    yScaleMax: \"yScaleMax\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 7,\n  vars: 18,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-grid-panel-series\", \"\", 3, \"xScale\", \"yScale\", \"data\", \"dims\", \"orient\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-series-vertical\", \"\", 3, \"activeEntries\", \"xScale\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"showDataLabel\", \"dataLabelFormatting\", \"seriesName\", \"roundEdges\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-series-vertical\", \"\", 3, \"activeEntries\", \"xScale\", \"yScale\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"showDataLabel\", \"dataLabelFormatting\", \"seriesName\", \"roundEdges\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"]],\n  template: function BarVertical2DComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function BarVertical2DComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarVertical2DComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarVertical2DComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵelement(2, \"g\", 2);\n      i0.ɵɵtemplate(3, BarVertical2DComponent__svg_g_3_Template, 1, 10, \"g\", 3);\n      i0.ɵɵtemplate(4, BarVertical2DComponent__svg_g_4_Template, 1, 9, \"g\", 4);\n      i0.ɵɵtemplate(5, BarVertical2DComponent__svg_g_5_Template, 2, 2, \"g\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(6, BarVertical2DComponent__svg_g_6_Template, 2, 2, \"g\", 5);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(15, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"xScale\", ctx.groupScale)(\"yScale\", ctx.valueScale)(\"data\", ctx.results)(\"dims\", ctx.dims)(\"orient\", ctx.barOrientation.Vertical);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  directives: [ChartComponent, GridPanelSeriesComponent, i2.NgIf, XAxisComponent, YAxisComponent, i2.NgForOf, SeriesVerticalComponent],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarVertical2DComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-vertical-2d',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"groupScale\"\n          [yScale]=\"valueScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Vertical\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            ngx-charts-series-vertical\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n            [activeEntries]=\"activeEntries\"\n            [xScale]=\"innerScale\"\n            [yScale]=\"valueScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [roundEdges]=\"roundEdges\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          ngx-charts-series-vertical\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n          [activeEntries]=\"activeEntries\"\n          [xScale]=\"innerScale\"\n          [yScale]=\"valueScale\"\n          [colors]=\"colors\"\n          [series]=\"group.series\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [seriesName]=\"group.name\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event, group)\"\n          (activate)=\"onActivate($event, group)\"\n          (deactivate)=\"onDeactivate($event, group)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    groupPadding: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass BarVerticalNormalizedComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.noBarWhenZero = true;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.valueDomain = [0, 100];\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.isSSR = false;\n    this.barChartType = BarChartType;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getXScale() {\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getYScale() {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  groupTransform(group) {\n    return `translate(${this.xScale(group.name)}, 0)`;\n  }\n\n  onClick(data, group) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarVerticalNormalizedComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarVerticalNormalizedComponent_BaseFactory;\n  return function BarVerticalNormalizedComponent_Factory(t) {\n    return (ɵBarVerticalNormalizedComponent_BaseFactory || (ɵBarVerticalNormalizedComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarVerticalNormalizedComponent)))(t || BarVerticalNormalizedComponent);\n  };\n}();\n\nBarVerticalNormalizedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarVerticalNormalizedComponent,\n  selectors: [[\"ngx-charts-bar-vertical-normalized\"]],\n  contentQueries: function BarVerticalNormalizedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 13,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-series-vertical\", \"\", 3, \"type\", \"xScale\", \"yScale\", \"activeEntries\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"seriesName\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\"]],\n  template: function BarVerticalNormalizedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function BarVerticalNormalizedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarVerticalNormalizedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarVerticalNormalizedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, BarVerticalNormalizedComponent__svg_g_2_Template, 1, 9, \"g\", 2);\n      i0.ɵɵtemplate(3, BarVerticalNormalizedComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n      i0.ɵɵtemplate(4, BarVerticalNormalizedComponent__svg_g_4_Template, 2, 2, \"g\", 4);\n      i0.ɵɵtemplate(5, BarVerticalNormalizedComponent__svg_g_5_Template, 2, 2, \"g\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  directives: [ChartComponent, i2.NgIf, XAxisComponent, YAxisComponent, i2.NgForOf, SeriesVerticalComponent],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarVerticalNormalizedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-vertical-normalized',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass BarVerticalStackedComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.tooltipDisabled = false;\n    this.showGridLines = true;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.barPadding = 8;\n    this.roundDomains = false;\n    this.showDataLabel = false;\n    this.noBarWhenZero = true;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.dataLabelMaxHeight = {\n      negative: 0,\n      positive: 0\n    };\n    this.isSSR = false;\n    this.barChartType = BarChartType;\n\n    this.trackBy = (index, item) => {\n      return item.name;\n    };\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  update() {\n    super.update();\n\n    if (!this.showDataLabel) {\n      this.dataLabelMaxHeight = {\n        negative: 0,\n        positive: 0\n      };\n    }\n\n    this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.showDataLabel) {\n      this.dims.height -= this.dataLabelMaxHeight.negative;\n    }\n\n    this.formatDates();\n    this.groupDomain = this.getGroupDomain();\n    this.innerDomain = this.getInnerDomain();\n    this.valueDomain = this.getValueDomain();\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n  }\n\n  getGroupDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.label)) {\n        domain.push(group.label);\n      }\n    }\n\n    return domain;\n  }\n\n  getInnerDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.label)) {\n          domain.push(d.label);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n    let smallest = 0;\n    let biggest = 0;\n\n    for (const group of this.results) {\n      let smallestSum = 0;\n      let biggestSum = 0;\n\n      for (const d of group.series) {\n        if (d.value < 0) {\n          smallestSum += d.value;\n        } else {\n          biggestSum += d.value;\n        }\n\n        smallest = d.value < smallest ? d.value : smallest;\n        biggest = d.value > biggest ? d.value : biggest;\n      }\n\n      domain.push(smallestSum);\n      domain.push(biggestSum);\n    }\n\n    domain.push(smallest);\n    domain.push(biggest);\n    const min = Math.min(0, ...domain);\n    const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(...domain);\n    return [min, max];\n  }\n\n  getXScale() {\n    const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n    return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n  }\n\n  getYScale() {\n    const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  onDataLabelMaxHeightChanged(event, groupIndex) {\n    if (event.size.negative) {\n      this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n    } else {\n      this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n    }\n\n    if (groupIndex === this.results.length - 1) {\n      setTimeout(() => this.update());\n    }\n  }\n\n  groupTransform(group) {\n    return `translate(${this.xScale(group.name) || 0}, 0)`;\n  }\n\n  onClick(data, group) {\n    if (group) {\n      data.series = group.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.innerDomain;\n    } else {\n      domain = this.valueDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.innerDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.valueDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nBarVerticalStackedComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBarVerticalStackedComponent_BaseFactory;\n  return function BarVerticalStackedComponent_Factory(t) {\n    return (ɵBarVerticalStackedComponent_BaseFactory || (ɵBarVerticalStackedComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BarVerticalStackedComponent)))(t || BarVerticalStackedComponent);\n  };\n}();\n\nBarVerticalStackedComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BarVerticalStackedComponent,\n  selectors: [[\"ngx-charts-bar-vertical-stacked\"]],\n  contentQueries: function BarVerticalStackedComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    barPadding: \"barPadding\",\n    roundDomains: \"roundDomains\",\n    yScaleMax: \"yScaleMax\",\n    showDataLabel: \"showDataLabel\",\n    dataLabelFormatting: \"dataLabelFormatting\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 13,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"bar-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"xAxisOffset\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-series-vertical\", \"\", 3, \"type\", \"xScale\", \"yScale\", \"activeEntries\", \"colors\", \"series\", \"dims\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"showDataLabel\", \"dataLabelFormatting\", \"seriesName\", \"animations\", \"noBarWhenZero\", \"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"]],\n  template: function BarVerticalStackedComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function BarVerticalStackedComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, undefined, true);\n      })(\"legendLabelDeactivate\", function BarVerticalStackedComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, undefined, true);\n      })(\"legendLabelClick\", function BarVerticalStackedComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, BarVerticalStackedComponent__svg_g_2_Template, 1, 10, \"g\", 2);\n      i0.ɵɵtemplate(3, BarVerticalStackedComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n      i0.ɵɵtemplate(4, BarVerticalStackedComponent__svg_g_4_Template, 2, 2, \"g\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(5, BarVerticalStackedComponent__svg_g_5_Template, 2, 2, \"g\", 4);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  directives: [ChartComponent, i2.NgIf, XAxisComponent, YAxisComponent, i2.NgForOf, SeriesVerticalComponent],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1,\n      transform: '*'\n    }), animate(500, style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarVerticalStackedComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bar-vertical-stacked',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            [type]=\"barChartType.Stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1,\n        transform: '*'\n      }), animate(500, style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }))])])],\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    barPadding: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    showDataLabel: [{\n      type: Input\n    }],\n    dataLabelFormatting: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass BarChartModule {}\n\nBarChartModule.ɵfac = function BarChartModule_Factory(t) {\n  return new (t || BarChartModule)();\n};\n\nBarChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: BarChartModule\n});\nBarChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BarChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [BarComponent, BarHorizontalComponent, BarHorizontal2DComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarVerticalComponent, BarVertical2DComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BarLabelComponent, SeriesHorizontal, SeriesVerticalComponent],\n      exports: [BarComponent, BarHorizontalComponent, BarHorizontal2DComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarVerticalComponent, BarVertical2DComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BarLabelComponent, SeriesHorizontal, SeriesVerticalComponent]\n    }]\n  }], null, null);\n})();\n\nclass BoxComponent {\n  constructor(element, cd) {\n    this.cd = cd;\n    this.roundEdges = true;\n    this.gradient = false;\n    this.offset = 0;\n    this.isActive = false;\n    this.animations = true;\n    this.noBarWhenZero = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.BarOrientation = BarOrientation;\n    this.initialized = false;\n    this.hasGradient = false;\n    this.hideBar = false;\n    this.nativeElm = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    if (!this.initialized) {\n      this.loadAnimation();\n      this.initialized = true;\n    } else {\n      this.update();\n    }\n  }\n\n  update() {\n    this.boxStrokeWidth = Math.max(this.strokeWidth, 1);\n    this.whiskerStrokeWidth = Math.max(this.strokeWidth / 2, 1);\n    this.medianLineWidth = 1.5 * this.strokeWidth;\n    this.gradientId = 'grad' + id().toString();\n    this.gradientFill = `url(#${this.gradientId})`;\n\n    if (this.gradient) {\n      this.gradientStops = this.getGradient();\n      this.hasGradient = true;\n    } else {\n      this.hasGradient = false;\n    }\n\n    this.updateLineEl();\n    this.updatePathEl();\n    this.checkToHideBar();\n    this.maskLineId = 'mask' + id().toString();\n    this.maskLine = `url(#${this.maskLineId})`;\n\n    if (this.cd) {\n      this.cd.markForCheck();\n    }\n  }\n\n  loadAnimation() {\n    this.boxPath = this.oldPath = this.getStartingPath();\n    this.oldLineCoordinates = this.getStartingLineCoordinates();\n    setTimeout(this.update.bind(this), 100);\n  }\n\n  updatePathEl() {\n    const nodeBar = select(this.nativeElm).selectAll('.bar');\n    const path = this.getPath();\n\n    if (this.animations) {\n      nodeBar.attr('d', this.oldPath).transition().ease(easeSinInOut).duration(500).attrTween('d', this.pathTween(path, 4));\n    } else {\n      nodeBar.attr('d', path);\n    }\n\n    this.oldPath = path;\n  }\n\n  updateLineEl() {\n    const lineEl = select(this.nativeElm).selectAll('.bar-line');\n    const lineCoordinates = this.lineCoordinates;\n    const oldLineCoordinates = this.oldLineCoordinates;\n\n    if (this.animations) {\n      lineEl.attr('x1', (_, index) => oldLineCoordinates[index].v1.x).attr('y1', (_, index) => oldLineCoordinates[index].v1.y).attr('x2', (_, index) => oldLineCoordinates[index].v2.x).attr('y2', (_, index) => oldLineCoordinates[index].v2.y).transition().ease(easeSinInOut).duration(500).attr('x1', (_, index) => lineCoordinates[index].v1.x).attr('y1', (_, index) => lineCoordinates[index].v1.y).attr('x2', (_, index) => lineCoordinates[index].v2.x).attr('y2', (_, index) => lineCoordinates[index].v2.y);\n    } else {\n      lineEl.attr('x1', (_, index) => lineCoordinates[index].v1.x).attr('y1', (_, index) => lineCoordinates[index].v1.y).attr('x2', (_, index) => lineCoordinates[index].v2.x).attr('y2', (_, index) => lineCoordinates[index].v2.y);\n    }\n\n    this.oldLineCoordinates = [...lineCoordinates];\n  }\n  /**\n   * See [D3 Selections](https://www.d3indepth.com/selections/)\n   * @param d The joined data.\n   * @param index The index of the element within the selection\n   * @param node The node element (Line).\n   */\n\n\n  lineTween(attr, d, index, node) {\n    const nodeLineEl = node[index];\n    return nodeLineEl[attr].baseVal.value;\n  } // TODO: Refactor into another .ts file if https://github.com/swimlane/ngx-charts/pull/1179 gets merged.\n\n\n  pathTween(d1, precision) {\n    return function () {\n      // tslint:disable-next-line: no-this-assignment\n      const path0 = this;\n      const path1 = this.cloneNode();\n      path1.setAttribute('d', d1);\n      const n0 = path0?.getTotalLength();\n      const n1 = path1?.getTotalLength(); // Uniform sampling of distance based on specified precision.\n\n      const distances = [0];\n      let i = 0;\n      const dt = precision / Math.max(n0, n1);\n\n      while (i < 1) {\n        distances.push(i);\n        i += dt;\n      }\n\n      distances.push(1); // Compute point-interpolators at each distance.\n\n      const points = distances.map(t => {\n        const p0 = path0.getPointAtLength(t * n0);\n        const p1 = path1.getPointAtLength(t * n1);\n        return interpolate([p0.x, p0.y], [p1.x, p1.y]);\n      }); // 't': T is the fraction of time (between 0 and 1) since the transition began.\n\n      return t => {\n        return t < 1 ? 'M' + points.map(p => p(t)).join('L') : d1;\n      };\n    };\n  }\n\n  getStartingPath() {\n    if (!this.animations) {\n      return this.getPath();\n    }\n\n    const radius = this.roundEdges ? 1 : 0;\n    const {\n      x,\n      y\n    } = this.lineCoordinates[2].v1;\n    return roundedRect(x - this.width, y - 1, this.width, 2, radius, this.edges);\n  }\n\n  getPath() {\n    const radius = this.getRadius();\n    let path = '';\n    path = roundedRect(this.x, this.y, this.width, this.height, Math.min(this.height, radius), this.edges);\n    return path;\n  }\n\n  getStartingLineCoordinates() {\n    if (!this.animations) {\n      return [...this.lineCoordinates];\n    }\n\n    const lineCoordinates = cloneDeep(this.lineCoordinates);\n    lineCoordinates[1].v1.y = lineCoordinates[1].v2.y = lineCoordinates[3].v1.y = lineCoordinates[3].v2.y = lineCoordinates[0].v1.y = lineCoordinates[0].v2.y = lineCoordinates[2].v1.y;\n    return lineCoordinates;\n  }\n\n  getRadius() {\n    let radius = 0;\n\n    if (this.roundEdges && this.height > 5 && this.width > 5) {\n      radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n    }\n\n    return radius;\n  }\n\n  getGradient() {\n    return [{\n      offset: 0,\n      color: this.fill,\n      opacity: this.getStartOpacity()\n    }, {\n      offset: 100,\n      color: this.fill,\n      opacity: 1\n    }];\n  }\n\n  getStartOpacity() {\n    if (this.roundEdges) {\n      return 0.2;\n    } else {\n      return 0.5;\n    }\n  }\n\n  get edges() {\n    let edges = [false, false, false, false];\n\n    if (this.roundEdges) {\n      edges = [true, true, true, true];\n    }\n\n    return edges;\n  }\n\n  onMouseEnter() {\n    this.activate.emit(this.data);\n  }\n\n  onMouseLeave() {\n    this.deactivate.emit(this.data);\n  }\n\n  checkToHideBar() {\n    this.hideBar = this.noBarWhenZero && this.height === 0;\n  }\n\n}\n\nBoxComponent.ɵfac = function BoxComponent_Factory(t) {\n  return new (t || BoxComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nBoxComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BoxComponent,\n  selectors: [[\"g\", \"ngx-charts-box\", \"\"]],\n  hostBindings: function BoxComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseenter\", function BoxComponent_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function BoxComponent_mouseleave_HostBindingHandler() {\n        return ctx.onMouseLeave();\n      });\n    }\n  },\n  inputs: {\n    strokeColor: \"strokeColor\",\n    strokeWidth: \"strokeWidth\",\n    fill: \"fill\",\n    data: \"data\",\n    width: \"width\",\n    height: \"height\",\n    x: \"x\",\n    y: \"y\",\n    lineCoordinates: \"lineCoordinates\",\n    roundEdges: \"roundEdges\",\n    gradient: \"gradient\",\n    gradientStops: \"gradientStops\",\n    offset: \"offset\",\n    isActive: \"isActive\",\n    animations: \"animations\",\n    ariaLabel: \"ariaLabel\",\n    noBarWhenZero: \"noBarWhenZero\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c30,\n  decls: 9,\n  vars: 13,\n  consts: [[\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\", 4, \"ngIf\"], [\"height\", \"100%\", \"width\", \"100%\", \"fill\", \"white\", \"fill-opacity\", \"1\"], [\"fill\", \"black\", \"fill-opacity\", \"1\", 1, \"bar\"], [\"role\", \"img\", \"tabIndex\", \"-1\", 1, \"bar\", 3, \"click\"], [\"class\", \"bar-line\", \"fill\", \"none\", 3, \"hidden\", 4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"], [\"fill\", \"none\", 1, \"bar-line\"]],\n  template: function BoxComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"defs\");\n      i0.ɵɵtemplate(1, BoxComponent__svg_g_1_Template, 1, 3, \"g\", 0);\n      i0.ɵɵelementStart(2, \"mask\");\n      i0.ɵɵelementStart(3, \"g\");\n      i0.ɵɵelement(4, \"rect\", 1);\n      i0.ɵɵelement(5, \"path\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"g\");\n      i0.ɵɵelementStart(7, \"path\", 3);\n      i0.ɵɵlistener(\"click\", function BoxComponent_Template__svg_path_click_7_listener() {\n        return ctx.select.emit(ctx.data);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(8, BoxComponent__svg_line_8_Template, 1, 9, \"line\", 4);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasGradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"id\", ctx.maskLineId);\n      i0.ɵɵadvance(3);\n      i0.ɵɵattribute(\"d\", ctx.boxPath);\n      i0.ɵɵadvance(2);\n      i0.ɵɵclassProp(\"active\", ctx.isActive)(\"hidden\", ctx.hideBar);\n      i0.ɵɵattribute(\"d\", ctx.boxPath)(\"stroke\", ctx.strokeColor)(\"stroke-width\", ctx.boxStrokeWidth)(\"aria-label\", ctx.ariaLabel)(\"fill\", ctx.hasGradient ? ctx.gradientFill : ctx.fill);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.lineCoordinates);\n    }\n  },\n  directives: [i2.NgIf, i2.NgForOf, SvgLinearGradientComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BoxComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-box]',\n      template: `\n    <svg:defs>\n      <svg:g\n        *ngIf=\"hasGradient\"\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"BarOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n      <svg:mask [attr.id]=\"maskLineId\">\n        <svg:g>\n          <rect height=\"100%\" width=\"100%\" fill=\"white\" fill-opacity=\"1\" />\n          <path class=\"bar\" [attr.d]=\"boxPath\" fill=\"black\" fill-opacity=\"1\" />\n        </svg:g>\n      </svg:mask>\n    </svg:defs>\n    <svg:g>\n      <svg:path\n        class=\"bar\"\n        role=\"img\"\n        tabIndex=\"-1\"\n        [class.active]=\"isActive\"\n        [class.hidden]=\"hideBar\"\n        [attr.d]=\"boxPath\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"boxStrokeWidth\"\n        [attr.aria-label]=\"ariaLabel\"\n        [attr.fill]=\"hasGradient ? gradientFill : fill\"\n        (click)=\"select.emit(data)\"\n      />\n      <svg:line\n        *ngFor=\"let line of lineCoordinates; let i = index\"\n        class=\"bar-line\"\n        [class.hidden]=\"hideBar\"\n        [attr.x1]=\"line.v1.x\"\n        [attr.y1]=\"line.v1.y\"\n        [attr.x2]=\"line.v2.x\"\n        [attr.y2]=\"line.v2.y\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"i === 2 ? medianLineWidth : whiskerStrokeWidth\"\n        [attr.mask]=\"i ? undefined : maskLine\"\n        fill=\"none\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    strokeColor: [{\n      type: Input\n    }],\n    strokeWidth: [{\n      type: Input\n    }],\n    fill: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }],\n    lineCoordinates: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    gradientStops: [{\n      type: Input\n    }],\n    offset: [{\n      type: Input\n    }],\n    isActive: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }],\n    noBarWhenZero: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass BoxSeriesComponent {\n  constructor() {\n    this.animations = true;\n    this.tooltipDisabled = false;\n    this.gradient = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  update() {\n    this.updateTooltipSettings();\n    const width = this.series && this.series.series.length ? Math.round(this.xScale.bandwidth()) : null;\n    const seriesName = this.series.name; // Calculate Quantile and Whiskers for each box serie.\n\n    this.counts = this.series.series;\n    const mappedCounts = this.counts.map(serie => Number(serie.value));\n    this.whiskers = [min(mappedCounts), max(mappedCounts)]; // We get the group count and must sort it in order to retrieve quantiles.\n\n    const groupCounts = this.counts.map(item => item.value).sort((a, b) => Number(a) - Number(b));\n    this.quartiles = this.getBoxQuantiles(groupCounts);\n    this.lineCoordinates = this.getLinesCoordinates(seriesName.toString(), this.whiskers, this.quartiles, width);\n    const value = this.quartiles[1];\n    const formattedLabel = formatLabel(seriesName);\n    const box = {\n      value,\n      data: this.counts,\n      label: seriesName,\n      formattedLabel,\n      width,\n      height: 0,\n      x: 0,\n      y: 0,\n      roundEdges: this.roundEdges,\n      quartiles: this.quartiles,\n      lineCoordinates: this.lineCoordinates\n    };\n    box.height = Math.abs(this.yScale(this.quartiles[0]) - this.yScale(this.quartiles[2]));\n    box.x = this.xScale(seriesName.toString());\n    box.y = this.yScale(this.quartiles[2]);\n    box.ariaLabel = formattedLabel + ' - Median: ' + value.toLocaleString();\n\n    if (this.colors.scaleType === ScaleType.Ordinal) {\n      box.color = this.colors.getColor(seriesName);\n    } else {\n      box.color = this.colors.getColor(this.quartiles[1]);\n      box.gradientStops = this.colors.getLinearGradientStops(this.quartiles[0], this.quartiles[2]);\n    }\n\n    const tooltipLabel = formattedLabel;\n    const formattedTooltipLabel = `\n    <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n    <span class=\"tooltip-val\">\n      • Q1: ${this.quartiles[0]} • Q2: ${this.quartiles[1]} • Q3: ${this.quartiles[2]}<br>\n      • Min: ${this.whiskers[0]} • Max: ${this.whiskers[1]}\n    </span>`;\n    box.tooltipText = this.tooltipDisabled ? undefined : formattedTooltipLabel;\n    this.tooltipTitle = this.tooltipDisabled ? undefined : box.tooltipText;\n    this.box = box;\n  }\n\n  getBoxQuantiles(inputData) {\n    return [quantile(inputData, 0.25), quantile(inputData, 0.5), quantile(inputData, 0.75)];\n  }\n\n  getLinesCoordinates(seriesName, whiskers, quartiles, barWidth) {\n    // The X value is not being centered, so had to sum half the width to align it.\n    const commonX = this.xScale(seriesName);\n    const offsetX = commonX + barWidth / 2;\n    const medianLineWidth = Math.max(barWidth + 4 * this.strokeWidth, 1);\n    const whiskerLineWidth = Math.max(barWidth / 3, 1);\n    const whiskerZero = this.yScale(whiskers[0]);\n    const whiskerOne = this.yScale(whiskers[1]);\n    const median = this.yScale(quartiles[1]);\n    const topLine = {\n      v1: {\n        x: offsetX + whiskerLineWidth / 2,\n        y: whiskerZero\n      },\n      v2: {\n        x: offsetX - whiskerLineWidth / 2,\n        y: whiskerZero\n      }\n    };\n    const medianLine = {\n      v1: {\n        x: offsetX + medianLineWidth / 2,\n        y: median\n      },\n      v2: {\n        x: offsetX - medianLineWidth / 2,\n        y: median\n      }\n    };\n    const bottomLine = {\n      v1: {\n        x: offsetX + whiskerLineWidth / 2,\n        y: whiskerOne\n      },\n      v2: {\n        x: offsetX - whiskerLineWidth / 2,\n        y: whiskerOne\n      }\n    };\n    const verticalLine = {\n      v1: {\n        x: offsetX,\n        y: whiskerZero\n      },\n      v2: {\n        x: offsetX,\n        y: whiskerOne\n      }\n    };\n    return [verticalLine, topLine, medianLine, bottomLine];\n  }\n\n  updateTooltipSettings() {\n    if (this.tooltipDisabled) {\n      this.tooltipPlacement = undefined;\n      this.tooltipType = undefined;\n    } else {\n      if (!this.tooltipPlacement) {\n        this.tooltipPlacement = PlacementTypes.Top;\n      }\n\n      if (!this.tooltipType) {\n        this.tooltipType = StyleTypes.tooltip;\n      }\n    }\n  }\n\n}\n\nBoxSeriesComponent.ɵfac = function BoxSeriesComponent_Factory(t) {\n  return new (t || BoxSeriesComponent)();\n};\n\nBoxSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BoxSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-box-series\", \"\"]],\n  inputs: {\n    dims: \"dims\",\n    series: \"series\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    animations: \"animations\",\n    strokeColor: \"strokeColor\",\n    strokeWidth: \"strokeWidth\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\",\n    tooltipPlacement: \"tooltipPlacement\",\n    tooltipType: \"tooltipType\",\n    roundEdges: \"roundEdges\",\n    gradient: \"gradient\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c31,\n  decls: 1,\n  vars: 22,\n  consts: [[\"ngx-charts-box\", \"\", \"ngx-tooltip\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"roundEdges\", \"fill\", \"gradientStops\", \"strokeColor\", \"strokeWidth\", \"data\", \"lineCoordinates\", \"gradient\", \"ariaLabel\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"animations\", \"select\", \"activate\", \"deactivate\"]],\n  template: function BoxSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0);\n      i0.ɵɵlistener(\"select\", function BoxSeriesComponent_Template__svg_g_select_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function BoxSeriesComponent_Template__svg_g_activate_0_listener($event) {\n        return ctx.activate.emit($event);\n      })(\"deactivate\", function BoxSeriesComponent_Template__svg_g_deactivate_0_listener($event) {\n        return ctx.deactivate.emit($event);\n      });\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"@animationState\", \"active\")(\"@.disabled\", !ctx.animations)(\"width\", ctx.box.width)(\"height\", ctx.box.height)(\"x\", ctx.box.x)(\"y\", ctx.box.y)(\"roundEdges\", ctx.box.roundEdges)(\"fill\", ctx.box.color)(\"gradientStops\", ctx.box.gradientStops)(\"strokeColor\", ctx.strokeColor)(\"strokeWidth\", ctx.strokeWidth)(\"data\", ctx.box.data)(\"lineCoordinates\", ctx.box.lineCoordinates)(\"gradient\", ctx.gradient)(\"ariaLabel\", ctx.box.ariaLabel)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipPlacement\", ctx.tooltipPlacement)(\"tooltipType\", ctx.tooltipType)(\"tooltipTitle\", ctx.tooltipTitle)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipContext\", ctx.box.data)(\"animations\", ctx.animations);\n    }\n  },\n  directives: [BoxComponent, TooltipDirective],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BoxSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-box-series]',\n      template: `\n    <svg:g\n      ngx-charts-box\n      [@animationState]=\"'active'\"\n      [@.disabled]=\"!animations\"\n      [width]=\"box.width\"\n      [height]=\"box.height\"\n      [x]=\"box.x\"\n      [y]=\"box.y\"\n      [roundEdges]=\"box.roundEdges\"\n      [fill]=\"box.color\"\n      [gradientStops]=\"box.gradientStops\"\n      [strokeColor]=\"strokeColor\"\n      [strokeWidth]=\"strokeWidth\"\n      [data]=\"box.data\"\n      [lineCoordinates]=\"box.lineCoordinates\"\n      [gradient]=\"gradient\"\n      [ariaLabel]=\"box.ariaLabel\"\n      (select)=\"onClick($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTitle\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"box.data\"\n      [animations]=\"animations\"\n    ></svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])]\n    }]\n  }], null, {\n    dims: [{\n      type: Input\n    }],\n    series: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    strokeColor: [{\n      type: Input\n    }],\n    strokeWidth: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    tooltipPlacement: [{\n      type: Input\n    }],\n    tooltipType: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nclass BoxChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    /** Show or hide the legend. */\n\n    this.legend = false;\n    this.legendPosition = LegendPosition.Right;\n    this.legendTitle = 'Legend';\n    this.showGridLines = true;\n    this.xAxis = true;\n    this.yAxis = true;\n    this.showXAxisLabel = true;\n    this.showYAxisLabel = true;\n    this.roundDomains = false;\n    this.roundEdges = true;\n    this.strokeColor = '#FFFFFF';\n    this.strokeWidth = 2;\n    this.tooltipDisabled = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    /** Chart Margins (For each side, counterclock wise). */\n\n    this.margin = [10, 20, 10, 20];\n    /** Chart X axis dimension. */\n\n    this.xAxisHeight = 0;\n    /** Chart Y axis dimension. */\n\n    this.yAxisWidth = 0;\n  }\n\n  trackBy(index, item) {\n    return item.name;\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n    this.setScales();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  setColors() {\n    let domain = [];\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  setScales() {\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n  }\n\n  getXScale(domain, width) {\n    const scale = scaleBand().domain(domain.map(d => d.toString())).rangeRound([0, width]).padding(0.5);\n    return scale;\n  }\n\n  getYScale(domain, height) {\n    const scale = scaleLinear().domain(domain).range([height, 0]);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getUniqueBoxChartXDomainValues(results) {\n    const valueSet = new Set();\n\n    for (const result of results) {\n      valueSet.add(result.name);\n    }\n\n    return Array.from(valueSet);\n  }\n\n  getXDomain() {\n    let domain = [];\n    const values = this.getUniqueBoxChartXDomainValues(this.results);\n    let min;\n    let max;\n\n    if (typeof values[0] === 'string') {\n      domain = values.map(val => val.toString());\n    } else if (typeof values[0] === 'number') {\n      const mappedValues = values.map(v => Number(v));\n      min = Math.min(...mappedValues);\n      max = Math.max(...mappedValues);\n      domain = [min, max];\n    } else {\n      const mappedValues = values.map(v => Number(new Date(v)));\n      min = Math.min(...mappedValues);\n      max = Math.max(...mappedValues);\n      domain = [new Date(min), new Date(max)];\n    }\n\n    return domain;\n  }\n\n  getYDomain() {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    const values = [...domain];\n    const mappedValues = values.map(v => Number(v));\n    const min = Math.min(...mappedValues);\n    const max = Math.max(...mappedValues);\n    return [min, max];\n  }\n\n  getSeriesDomain() {\n    return this.results.map(d => `${d.name}`);\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  onActivate(data) {\n    this.activate.emit(data);\n  }\n\n  onDeactivate(data) {\n    this.deactivate.emit(data);\n  }\n\n  getLegendOptions() {\n    const legendOpts = {\n      scaleType: this.schemeType,\n      colors: this.colors,\n      domain: [],\n      position: this.legendPosition,\n      title: this.legendTitle\n    };\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      legendOpts.domain = this.xDomain;\n      legendOpts.colors = this.colors;\n    } else {\n      legendOpts.domain = this.yDomain;\n      legendOpts.colors = this.colors.scale;\n    }\n\n    return legendOpts;\n  }\n\n}\n\nBoxChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBoxChartComponent_BaseFactory;\n  return function BoxChartComponent_Factory(t) {\n    return (ɵBoxChartComponent_BaseFactory || (ɵBoxChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BoxChartComponent)))(t || BoxChartComponent);\n  };\n}();\n\nBoxChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BoxChartComponent,\n  selectors: [[\"ngx-charts-box-chart\"]],\n  contentQueries: function BoxChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendPosition: \"legendPosition\",\n    legendTitle: \"legendTitle\",\n    legendOptionsConfig: \"legendOptionsConfig\",\n    showGridLines: \"showGridLines\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    roundDomains: \"roundDomains\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    roundEdges: \"roundEdges\",\n    strokeColor: \"strokeColor\",\n    strokeWidth: \"strokeWidth\",\n    tooltipDisabled: \"tooltipDisabled\",\n    gradient: \"gradient\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 21,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"box-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"showGridLines\", \"dims\", \"xScale\", \"showLabel\", \"labelText\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"showGridLines\", \"dims\", \"yScale\", \"showLabel\", \"labelText\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-box-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"roundEdges\", \"strokeColor\", \"strokeWidth\", \"tooltipDisabled\", \"tooltipTemplate\", \"series\", \"dims\", \"animations\", \"gradient\", \"activate\", \"deactivate\", \"select\"]],\n  template: function BoxChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function BoxChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function BoxChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function BoxChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵelementStart(2, \"g\", 2);\n      i0.ɵɵlistener(\"dimensionsChanged\", function BoxChartComponent_Template__svg_g_dimensionsChanged_2_listener($event) {\n        return ctx.updateXAxisHeight($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"g\", 3);\n      i0.ɵɵlistener(\"dimensionsChanged\", function BoxChartComponent_Template__svg_g_dimensionsChanged_3_listener($event) {\n        return ctx.updateYAxisWidth($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"g\");\n      i0.ɵɵtemplate(5, BoxChartComponent__svg_g_5_Template, 2, 12, \"g\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(18, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"showGridLines\", ctx.showGridLines)(\"dims\", ctx.dims)(\"xScale\", ctx.xScale)(\"showLabel\", ctx.showXAxisLabel)(\"labelText\", ctx.xAxisLabel);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"showGridLines\", ctx.showGridLines)(\"dims\", ctx.dims)(\"yScale\", ctx.yScale)(\"showLabel\", ctx.showYAxisLabel)(\"labelText\", ctx.yAxisLabel);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.results)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [ChartComponent, XAxisComponent, YAxisComponent, i2.NgForOf, BoxSeriesComponent],\n  styles: [_c25],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BoxChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-box-chart',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"box-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [yScale]=\"yScale\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n      </svg:g>\n      <svg:g [attr.transform]=\"transform\">\n        <svg:g *ngFor=\"let result of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-box-series\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [roundEdges]=\"roundEdges\"\n            [strokeColor]=\"strokeColor\"\n            [strokeWidth]=\"strokeWidth\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [series]=\"result\"\n            [dims]=\"dims\"\n            [animations]=\"animations\"\n            [gradient]=\"gradient\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n            (select)=\"onClick($event)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendOptionsConfig: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    roundEdges: [{\n      type: Input\n    }],\n    strokeColor: [{\n      type: Input\n    }],\n    strokeWidth: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate', {\n        static: false\n      }]\n    }]\n  });\n})();\n\nclass BoxChartModule {}\n\nBoxChartModule.ɵfac = function BoxChartModule_Factory(t) {\n  return new (t || BoxChartModule)();\n};\n\nBoxChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: BoxChartModule\n});\nBoxChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BoxChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [BoxChartComponent, BoxSeriesComponent, BoxComponent],\n      exports: [BoxChartComponent, BoxSeriesComponent, BoxComponent]\n    }]\n  }], null, null);\n})();\n\nfunction getDomain(values, scaleType, autoScale, minVal, maxVal) {\n  let domain = [];\n\n  if (scaleType === ScaleType.Linear) {\n    values = values.map(v => Number(v));\n\n    if (!autoScale) {\n      values.push(0);\n    }\n  }\n\n  if (scaleType === ScaleType.Time || scaleType === ScaleType.Linear) {\n    const min = minVal ? minVal : Math.min(...values);\n    const max = maxVal ? maxVal : Math.max(...values);\n    domain = [min, max];\n  } else {\n    domain = values;\n  }\n\n  return domain;\n}\n\nfunction getScale(domain, range, scaleType, roundDomains) {\n  switch (scaleType) {\n    case ScaleType.Time:\n      return scaleTime().range(range).domain(domain);\n\n    case ScaleType.Linear:\n      {\n        const scale = scaleLinear().range(range).domain(domain);\n\n        if (roundDomains) {\n          return scale.nice();\n        }\n\n        return scale;\n      }\n\n    case ScaleType.Ordinal:\n      return scalePoint().range([range[0], range[1]]).domain(domain.map(r => r.toString()));\n\n    default:\n      return undefined;\n  }\n}\n\nclass BubbleSeriesComponent {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.tooltipDisabled = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n    this.isSSR = false;\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.circles = this.getCircles();\n  }\n\n  getCircles() {\n    const seriesName = this.data.name;\n    return this.data.series.map((d, i) => {\n      if (typeof d.y !== 'undefined' && typeof d.x !== 'undefined') {\n        const y = d.y;\n        const x = d.x;\n        const r = d.r;\n        const radius = this.rScale(r || 1);\n        const tooltipLabel = formatLabel(d.name);\n        const cx = this.xScaleType === ScaleType.Linear ? this.xScale(Number(x)) : this.xScale(x);\n        const cy = this.yScaleType === ScaleType.Linear ? this.yScale(Number(y)) : this.yScale(y);\n        const color = this.colors.scaleType === ScaleType.Linear ? this.colors.getColor(r) : this.colors.getColor(seriesName);\n        const isActive = !this.activeEntries.length ? true : this.isActive({\n          name: seriesName\n        });\n        const opacity = isActive ? 1 : 0.3;\n        const data = Object.assign({}, d, {\n          series: seriesName,\n          name: d.name,\n          value: d.y,\n          x: d.x,\n          radius: d.r\n        });\n        return {\n          data,\n          x,\n          y,\n          r,\n          classNames: [`circle-data-${i}`],\n          value: y,\n          label: x,\n          cx,\n          cy,\n          radius,\n          tooltipLabel,\n          color,\n          opacity,\n          seriesName,\n          isActive,\n          transform: `translate(${cx},${cy})`\n        };\n      }\n    }).filter(circle => circle !== undefined);\n  }\n\n  getTooltipText(circle) {\n    const hasRadius = typeof circle.r !== 'undefined';\n    const hasTooltipLabel = circle.tooltipLabel && circle.tooltipLabel.length;\n    const hasSeriesName = circle.seriesName && circle.seriesName.length;\n    const radiusValue = hasRadius ? formatLabel(circle.r) : '';\n    const xAxisLabel = this.xAxisLabel && this.xAxisLabel !== '' ? `${this.xAxisLabel}:` : '';\n    const yAxisLabel = this.yAxisLabel && this.yAxisLabel !== '' ? `${this.yAxisLabel}:` : '';\n    const x = formatLabel(circle.x);\n    const y = formatLabel(circle.y);\n    const name = hasSeriesName && hasTooltipLabel ? `${circle.seriesName} • ${circle.tooltipLabel}` : circle.seriesName + circle.tooltipLabel;\n    const tooltipTitle = hasSeriesName || hasTooltipLabel ? `<span class=\"tooltip-label\">${escapeLabel(name)}</span>` : '';\n    return `\n      ${tooltipTitle}\n      <span class=\"tooltip-label\">\n        <label>${escapeLabel(xAxisLabel)}</label> ${escapeLabel(x)}<br />\n        <label>${escapeLabel(yAxisLabel)}</label> ${escapeLabel(y)}\n      </span>\n      <span class=\"tooltip-val\">\n        ${escapeLabel(radiusValue)}\n      </span>\n    `;\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isVisible(circle) {\n    if (this.activeEntries.length > 0) {\n      return this.isActive({\n        name: circle.seriesName\n      });\n    }\n\n    return circle.opacity !== 0;\n  }\n\n  activateCircle(circle) {\n    circle.barVisible = true;\n    this.activate.emit({\n      name: this.data.name\n    });\n  }\n\n  deactivateCircle(circle) {\n    circle.barVisible = false;\n    this.deactivate.emit({\n      name: this.data.name\n    });\n  }\n\n  trackBy(index, circle) {\n    return `${circle.data.series} ${circle.data.name}`;\n  }\n\n}\n\nBubbleSeriesComponent.ɵfac = function BubbleSeriesComponent_Factory(t) {\n  return new (t || BubbleSeriesComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nBubbleSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BubbleSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-bubble-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    rScale: \"rScale\",\n    xScaleType: \"xScaleType\",\n    yScaleType: \"yScaleType\",\n    colors: \"colors\",\n    visibleValue: \"visibleValue\",\n    activeEntries: \"activeEntries\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c32,\n  decls: 1,\n  vars: 2,\n  consts: [[4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-circle\", \"\", \"class\", \"circle\", \"ngx-tooltip\", \"\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"opacity\", \"active\", \"pointerEvents\", \"data\", \"classNames\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\", 4, \"ngIf\"], [\"ngx-charts-circle\", \"\", \"ngx-tooltip\", \"\", 1, \"circle\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"pointerEvents\", \"data\", \"classNames\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"]],\n  template: function BubbleSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, BubbleSeriesComponent__svg_g_0_Template, 4, 3, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.circles)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [i2.NgForOf, i2.NgIf, CircleComponent, TooltipDirective],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':enter', [style({\n      opacity: 0,\n      transform: 'scale(0)'\n    }), animate(250, style({\n      opacity: 1,\n      transform: 'scale(1)'\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BubbleSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-bubble-series]',\n      template: `\n    <svg:g *ngFor=\"let circle of circles; trackBy: trackBy\">\n      <svg:g [attr.transform]=\"circle.transform\">\n        <svg:g\n          *ngIf=\"!isSSR\"\n          ngx-charts-circle\n          [@animationState]=\"'active'\"\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n        <svg:g\n          *ngIf=\"isSSR\"\n          ngx-charts-circle\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n      </svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':enter', [style({\n        opacity: 0,\n        transform: 'scale(0)'\n      }), animate(250, style({\n        opacity: 1,\n        transform: 'scale(1)'\n      }))])])]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    rScale: [{\n      type: Input\n    }],\n    xScaleType: [{\n      type: Input\n    }],\n    yScaleType: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    visibleValue: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nclass BubbleChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.showGridLines = true;\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.xAxis = true;\n    this.yAxis = true;\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.roundDomains = false;\n    this.maxRadius = 10;\n    this.minRadius = 3;\n    this.schemeType = ScaleType.Ordinal;\n    this.tooltipDisabled = false;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.scaleType = ScaleType.Linear;\n    this.margin = [10, 20, 10, 20];\n    this.bubblePadding = [0, 0, 0, 0];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.activeEntries = [];\n    this.isSSR = false;\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    this.seriesDomain = this.results.map(d => d.name);\n    this.rDomain = this.getRDomain();\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n    this.transform = `translate(${this.dims.xOffset},${this.margin[0]})`;\n    const colorDomain = this.schemeType === ScaleType.Ordinal ? this.seriesDomain : this.rDomain;\n    this.colors = new ColorHelper(this.scheme, this.schemeType, colorDomain, this.customColors);\n    this.data = this.results;\n    this.minRadius = Math.max(this.minRadius, 1);\n    this.maxRadius = Math.max(this.maxRadius, 1);\n    this.rScale = this.getRScale(this.rDomain, [this.minRadius, this.maxRadius]);\n    this.bubblePadding = [0, 0, 0, 0];\n    this.setScales();\n    this.bubblePadding = this.getBubblePadding();\n    this.setScales();\n    this.legendOptions = this.getLegendOptions();\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  hideCircles() {\n    this.deactivateAll();\n  }\n\n  onClick(data, series) {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  getBubblePadding() {\n    let yMin = 0;\n    let xMin = 0;\n    let yMax = this.dims.height;\n    let xMax = this.dims.width;\n\n    for (const s of this.data) {\n      for (const d of s.series) {\n        const r = this.rScale(d.r);\n        const cx = this.xScaleType === ScaleType.Linear ? this.xScale(Number(d.x)) : this.xScale(d.x);\n        const cy = this.yScaleType === ScaleType.Linear ? this.yScale(Number(d.y)) : this.yScale(d.y);\n        xMin = Math.max(r - cx, xMin);\n        yMin = Math.max(r - cy, yMin);\n        yMax = Math.max(cy + r, yMax);\n        xMax = Math.max(cx + r, xMax);\n      }\n    }\n\n    xMax = Math.max(xMax - this.dims.width, 0);\n    yMax = Math.max(yMax - this.dims.height, 0);\n    return [yMin, xMax, yMax, xMin];\n  }\n\n  setScales() {\n    let width = this.dims.width;\n\n    if (this.xScaleMin === undefined && this.xScaleMax === undefined) {\n      width = width - this.bubblePadding[1];\n    }\n\n    let height = this.dims.height;\n\n    if (this.yScaleMin === undefined && this.yScaleMax === undefined) {\n      height = height - this.bubblePadding[2];\n    }\n\n    this.xScale = this.getXScale(this.xDomain, width);\n    this.yScale = this.getYScale(this.yDomain, height);\n  }\n\n  getYScale(domain, height) {\n    return getScale(domain, [height, this.bubblePadding[0]], this.yScaleType, this.roundDomains);\n  }\n\n  getXScale(domain, width) {\n    return getScale(domain, [this.bubblePadding[3], width], this.xScaleType, this.roundDomains);\n  }\n\n  getRScale(domain, range) {\n    const scale = scaleLinear().range(range).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      position: this.legendPosition,\n      title: undefined\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.rDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  getXDomain() {\n    const values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.x)) {\n          values.push(d.x);\n        }\n      }\n    }\n\n    this.xScaleType = getScaleType(values);\n    return getDomain(values, this.xScaleType, this.autoScale, this.xScaleMin, this.xScaleMax);\n  }\n\n  getYDomain() {\n    const values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.y)) {\n          values.push(d.y);\n        }\n      }\n    }\n\n    this.yScaleType = getScaleType(values);\n    return getDomain(values, this.yScaleType, this.autoScale, this.yScaleMin, this.yScaleMax);\n  }\n\n  getRDomain() {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        const value = Number(d.r) || 1;\n        min = Math.min(min, value);\n        max = Math.max(max, value);\n      }\n    }\n\n    return [min, max];\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({\n        value: entry,\n        entries: []\n      });\n    }\n\n    this.activeEntries = [];\n  }\n\n  trackBy(index, item) {\n    return `${item.name}`;\n  }\n\n}\n\nBubbleChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵBubbleChartComponent_BaseFactory;\n  return function BubbleChartComponent_Factory(t) {\n    return (ɵBubbleChartComponent_BaseFactory || (ɵBubbleChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BubbleChartComponent)))(t || BubbleChartComponent);\n  };\n}();\n\nBubbleChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: BubbleChartComponent,\n  selectors: [[\"ngx-charts-bubble-chart\"]],\n  contentQueries: function BubbleChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  hostBindings: function BubbleChartComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseleave\", function BubbleChartComponent_mouseleave_HostBindingHandler() {\n        return ctx.hideCircles();\n      });\n    }\n  },\n  inputs: {\n    showGridLines: \"showGridLines\",\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    roundDomains: \"roundDomains\",\n    maxRadius: \"maxRadius\",\n    minRadius: \"minRadius\",\n    autoScale: \"autoScale\",\n    schemeType: \"schemeType\",\n    tooltipDisabled: \"tooltipDisabled\",\n    xScaleMin: \"xScaleMin\",\n    xScaleMax: \"xScaleMax\",\n    yScaleMin: \"yScaleMin\",\n    yScaleMax: \"yScaleMax\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 10,\n  vars: 19,\n  consts: [[3, \"view\", \"showLegend\", \"activeEntries\", \"legendOptions\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"bubble-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"showGridLines\", \"dims\", \"xScale\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"showGridLines\", \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"x\", \"0\", \"y\", \"0\", 1, \"bubble-chart-area\", 2, \"fill\", \"rgb(255, 0, 0)\", \"opacity\", \"0\", \"cursor\", \"auto\", 3, \"mouseenter\"], [4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"showGridLines\", \"dims\", \"xScale\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"showGridLines\", \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-bubble-series\", \"\", 3, \"xScale\", \"yScale\", \"rScale\", \"xScaleType\", \"yScaleType\", \"xAxisLabel\", \"yAxisLabel\", \"colors\", \"data\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"]],\n  template: function BubbleChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function BubbleChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function BubbleChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function BubbleChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"defs\");\n      i0.ɵɵelementStart(2, \"clipPath\");\n      i0.ɵɵelement(3, \"rect\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"g\", 1);\n      i0.ɵɵtemplate(5, BubbleChartComponent__svg_g_5_Template, 1, 10, \"g\", 2);\n      i0.ɵɵtemplate(6, BubbleChartComponent__svg_g_6_Template, 1, 9, \"g\", 3);\n      i0.ɵɵelementStart(7, \"rect\", 4);\n      i0.ɵɵlistener(\"mouseenter\", function BubbleChartComponent_Template__svg_rect_mouseenter_7_listener() {\n        return ctx.deactivateAll();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(8, BubbleChartComponent__svg_g_8_Template, 2, 3, \"g\", 5);\n      i0.ɵɵtemplate(9, BubbleChartComponent__svg_g_9_Template, 2, 3, \"g\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(16, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"activeEntries\", ctx.activeEntries)(\"legendOptions\", ctx.legendOptions)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"id\", ctx.clipPathId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.dims.width)(\"height\", ctx.dims.height);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  directives: [ChartComponent, i2.NgIf, XAxisComponent, YAxisComponent, i2.NgForOf, BubbleSeriesComponent],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BubbleChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-bubble-chart',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [activeEntries]=\"activeEntries\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"bubble-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [showGridLines]=\"showGridLines\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n        <svg:rect\n          class=\"bubble-chart-area\"\n          x=\"0\"\n          y=\"0\"\n          [attr.width]=\"dims.width\"\n          [attr.height]=\"dims.height\"\n          style=\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\"\n          (mouseenter)=\"deactivateAll()\"\n        />\n        <svg:g *ngIf=\"!isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])],\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    showGridLines: [{\n      type: Input\n    }],\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    maxRadius: [{\n      type: Input\n    }],\n    minRadius: [{\n      type: Input\n    }],\n    autoScale: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    xScaleMin: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    yScaleMin: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    hideCircles: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass BubbleChartModule {}\n\nBubbleChartModule.ɵfac = function BubbleChartModule_Factory(t) {\n  return new (t || BubbleChartModule)();\n};\n\nBubbleChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: BubbleChartModule\n});\nBubbleChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BubbleChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [BubbleChartComponent, BubbleSeriesComponent],\n      exports: [BubbleChartComponent, BubbleSeriesComponent]\n    }]\n  }], null, null);\n})();\n\nclass HeatMapCellComponent {\n  constructor(element) {\n    this.gradient = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.barOrientation = BarOrientation;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    this.transform = `translate(${this.x} , ${this.y})`;\n    this.startOpacity = 0.3;\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n    this.gradientStops = this.getGradientStops();\n\n    if (this.animations) {\n      this.loadAnimation();\n    }\n  }\n\n  getGradientStops() {\n    return [{\n      offset: 0,\n      color: this.fill,\n      opacity: this.startOpacity\n    }, {\n      offset: 100,\n      color: this.fill,\n      opacity: 1\n    }];\n  }\n\n  loadAnimation() {\n    const node = select(this.element).select('.cell');\n    node.attr('opacity', 0);\n    this.animateToCurrentForm();\n  }\n\n  animateToCurrentForm() {\n    const node = select(this.element).select('.cell');\n    node.transition().duration(750).attr('opacity', 1);\n  }\n\n  onClick() {\n    this.select.emit(this.data);\n  }\n\n  onMouseEnter() {\n    this.activate.emit(this.data);\n  }\n\n  onMouseLeave() {\n    this.deactivate.emit(this.data);\n  }\n\n}\n\nHeatMapCellComponent.ɵfac = function HeatMapCellComponent_Factory(t) {\n  return new (t || HeatMapCellComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nHeatMapCellComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: HeatMapCellComponent,\n  selectors: [[\"g\", \"ngx-charts-heat-map-cell\", \"\"]],\n  hostBindings: function HeatMapCellComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseenter\", function HeatMapCellComponent_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function HeatMapCellComponent_mouseleave_HostBindingHandler() {\n        return ctx.onMouseLeave();\n      });\n    }\n  },\n  inputs: {\n    fill: \"fill\",\n    x: \"x\",\n    y: \"y\",\n    width: \"width\",\n    height: \"height\",\n    data: \"data\",\n    gradient: \"gradient\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c33,\n  decls: 3,\n  vars: 5,\n  consts: [[1, \"cell\"], [4, \"ngIf\"], [\"rx\", \"3\", 1, \"cell\", 3, \"click\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"]],\n  template: function HeatMapCellComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0);\n      i0.ɵɵtemplate(1, HeatMapCellComponent__svg_defs_1_Template, 2, 3, \"defs\", 1);\n      i0.ɵɵelementStart(2, \"rect\", 2);\n      i0.ɵɵlistener(\"click\", function HeatMapCellComponent_Template__svg_rect_click_2_listener() {\n        return ctx.onClick();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"fill\", ctx.gradient ? ctx.gradientUrl : ctx.fill)(\"width\", ctx.width)(\"height\", ctx.height);\n    }\n  },\n  directives: [i2.NgIf, SvgLinearGradientComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HeatMapCellComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-heat-map-cell]',\n      template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\">\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        rx=\"3\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    fill: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    onMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    onMouseLeave: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass HeatCellSeriesComponent {\n  constructor() {\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n  }\n\n  ngOnInit() {\n    if (!this.tooltipText) {\n      this.tooltipText = this.getTooltipText;\n    }\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.cells = this.getCells();\n  }\n\n  getCells() {\n    const cells = [];\n    this.data.map(row => {\n      row.series.map(cell => {\n        const value = cell.value;\n        cell.series = row.name;\n        cells.push({\n          row,\n          cell,\n          x: this.xScale(row.name),\n          y: this.yScale(cell.name),\n          width: this.xScale.bandwidth(),\n          height: this.yScale.bandwidth(),\n          fill: this.colors.getColor(value),\n          data: value,\n          label: formatLabel(cell.name),\n          series: row.name\n        });\n      });\n    });\n    return cells;\n  }\n\n  getTooltipText({\n    label,\n    data,\n    series\n  }) {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(series)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${data.toLocaleString()}</span>\n    `;\n  }\n\n  trackBy(index, item) {\n    return item.label;\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n}\n\nHeatCellSeriesComponent.ɵfac = function HeatCellSeriesComponent_Factory(t) {\n  return new (t || HeatCellSeriesComponent)();\n};\n\nHeatCellSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: HeatCellSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-heat-map-cell-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    colors: \"colors\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    gradient: \"gradient\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipText: \"tooltipText\",\n    tooltipTemplate: \"tooltipTemplate\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c34,\n  decls: 1,\n  vars: 2,\n  consts: [[\"ngx-charts-heat-map-cell\", \"\", \"ngx-tooltip\", \"\", 3, \"x\", \"y\", \"width\", \"height\", \"fill\", \"data\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-heat-map-cell\", \"\", \"ngx-tooltip\", \"\", 3, \"x\", \"y\", \"width\", \"height\", \"fill\", \"data\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"]],\n  template: function HeatCellSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, HeatCellSeriesComponent__svg_g_0_Template, 1, 18, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.cells)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [i2.NgForOf, HeatMapCellComponent, TooltipDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HeatCellSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-heat-map-cell-series]',\n      template: `\n    <svg:g\n      ngx-charts-heat-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [data]=\"c.data\"\n      (select)=\"onClick(c.cell)\"\n      (activate)=\"activate.emit(c.cell)\"\n      (deactivate)=\"deactivate.emit(c.cell)\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\n    ></svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nclass HeatMapComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.innerPadding = 8;\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.tooltipDisabled = false;\n    this.activeEntries = [];\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.scaleType = ScaleType.Linear;\n  }\n\n  update() {\n    super.update();\n    this.formatDates();\n    this.xDomain = this.getXDomain();\n    this.yDomain = this.getYDomain();\n    this.valueDomain = this.getValueDomain();\n    this.scaleType = getScaleType(this.valueDomain, false);\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.scaleType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.scaleType === ScaleType.Linear) {\n      let min = this.min;\n      let max = this.max;\n\n      if (!this.min) {\n        min = Math.min(0, ...this.valueDomain);\n      }\n\n      if (!this.max) {\n        max = Math.max(...this.valueDomain);\n      }\n\n      this.valueDomain = [min, max];\n    }\n\n    this.xScale = this.getXScale();\n    this.yScale = this.getYScale();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    this.rects = this.getRects();\n  }\n\n  getXDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      if (!domain.includes(group.name)) {\n        domain.push(group.name);\n      }\n    }\n\n    return domain;\n  }\n\n  getYDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.name)) {\n          domain.push(d.name);\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getValueDomain() {\n    const domain = [];\n\n    for (const group of this.results) {\n      for (const d of group.series) {\n        if (!domain.includes(d.value)) {\n          domain.push(d.value);\n        }\n      }\n    }\n\n    return domain;\n  }\n  /**\n   * Converts the input to gap paddingInner in fraction\n   * Supports the following inputs:\n   *    Numbers: 8\n   *    Strings: \"8\", \"8px\", \"8%\"\n   *    Arrays: [8,2], \"8,2\", \"[8,2]\"\n   *    Mixed: [8,\"2%\"], [\"8px\",\"2%\"], \"8,2%\", \"[8,2%]\"\n   *\n   * @memberOf HeatMapComponent\n   */\n\n\n  getDimension(value, index = 0, N, L) {\n    if (typeof value === 'string') {\n      value = value.replace('[', '').replace(']', '').replace('px', '') // tslint:disable-next-line: quotemark\n      .replace(\"'\", '');\n\n      if (value.includes(',')) {\n        value = value.split(',');\n      }\n    }\n\n    if (Array.isArray(value) && typeof index === 'number') {\n      return this.getDimension(value[index], null, N, L);\n    }\n\n    if (typeof value === 'string' && value.includes('%')) {\n      return +value.replace('%', '') / 100;\n    }\n\n    return N / (L / +value + 1);\n  }\n\n  getXScale() {\n    const f = this.getDimension(this.innerPadding, 0, this.xDomain.length, this.dims.width);\n    return scaleBand().rangeRound([0, this.dims.width]).domain(this.xDomain).paddingInner(f);\n  }\n\n  getYScale() {\n    const f = this.getDimension(this.innerPadding, 1, this.yDomain.length, this.dims.height);\n    return scaleBand().rangeRound([this.dims.height, 0]).domain(this.yDomain).paddingInner(f);\n  }\n\n  getRects() {\n    const rects = [];\n    this.xDomain.map(xVal => {\n      this.yDomain.map(yVal => {\n        rects.push({\n          x: this.xScale(xVal),\n          y: this.yScale(yVal),\n          rx: 3,\n          width: this.xScale.bandwidth(),\n          height: this.yScale.bandwidth(),\n          fill: 'rgba(200,200,200,0.03)'\n        });\n      });\n    });\n    return rects;\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);\n  }\n\n  getLegendOptions() {\n    return {\n      scaleType: this.scaleType,\n      domain: this.valueDomain,\n      colors: this.scaleType === ScaleType.Ordinal ? this.colors : this.colors.scale,\n      title: this.scaleType === ScaleType.Ordinal ? this.legendTitle : undefined,\n      position: this.legendPosition\n    };\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    const items = this.results.map(g => g.series).flat().filter(i => {\n      if (fromLegend) {\n        return i.label === item.name;\n      } else {\n        return i.name === item.name && i.series === item.series;\n      }\n    });\n    this.activeEntries = [...items];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(event, group, fromLegend = false) {\n    const item = Object.assign({}, event);\n\n    if (group) {\n      item.series = group.name;\n    }\n\n    this.activeEntries = this.activeEntries.filter(i => {\n      if (fromLegend) {\n        return i.label !== item.name;\n      } else {\n        return !(i.name === item.name && i.series === item.series);\n      }\n    });\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nHeatMapComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵHeatMapComponent_BaseFactory;\n  return function HeatMapComponent_Factory(t) {\n    return (ɵHeatMapComponent_BaseFactory || (ɵHeatMapComponent_BaseFactory = i0.ɵɵgetInheritedFactory(HeatMapComponent)))(t || HeatMapComponent);\n  };\n}();\n\nHeatMapComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: HeatMapComponent,\n  selectors: [[\"ngx-charts-heat-map\"]],\n  contentQueries: function HeatMapComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    gradient: \"gradient\",\n    innerPadding: \"innerPadding\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipText: \"tooltipText\",\n    min: \"min\",\n    max: \"max\",\n    activeEntries: \"activeEntries\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 6,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"animations\", \"legendOptions\", \"legendLabelClick\"], [1, \"heat-map\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-heat-map-cell-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipTemplate\", \"tooltipText\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"]],\n  template: function HeatMapComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function HeatMapComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, HeatMapComponent__svg_g_2_Template, 1, 9, \"g\", 2);\n      i0.ɵɵtemplate(3, HeatMapComponent__svg_g_3_Template, 1, 8, \"g\", 3);\n      i0.ɵɵtemplate(4, HeatMapComponent__svg_rect_4_Template, 1, 6, \"rect\", 4);\n      i0.ɵɵelementStart(5, \"g\", 5);\n      i0.ɵɵlistener(\"select\", function HeatMapComponent_Template__svg_g_select_5_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function HeatMapComponent_Template__svg_g_activate_5_listener($event) {\n        return ctx.onActivate($event, undefined);\n      })(\"deactivate\", function HeatMapComponent_Template__svg_g_deactivate_5_listener($event) {\n        return ctx.onDeactivate($event, undefined);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(17, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"animations\", ctx.animations)(\"legendOptions\", ctx.legendOptions);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.rects);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"xScale\", ctx.xScale)(\"yScale\", ctx.yScale)(\"colors\", ctx.colors)(\"data\", ctx.results)(\"gradient\", ctx.gradient)(\"animations\", ctx.animations)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipText\", ctx.tooltipText);\n    }\n  },\n  directives: [ChartComponent, i2.NgIf, i2.NgForOf, HeatCellSeriesComponent, XAxisComponent, YAxisComponent],\n  styles: [_c25],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HeatMapComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-heat-map',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [animations]=\"animations\"\n      [legendOptions]=\"legendOptions\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"heat-map chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:rect\n          *ngFor=\"let rect of rects\"\n          [attr.x]=\"rect.x\"\n          [attr.y]=\"rect.y\"\n          [attr.rx]=\"rect.rx\"\n          [attr.width]=\"rect.width\"\n          [attr.height]=\"rect.height\"\n          [attr.fill]=\"rect.fill\"\n        />\n        <svg:g\n          ngx-charts-heat-map-cell-series\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [data]=\"results\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, undefined)\"\n          (deactivate)=\"onDeactivate($event, undefined)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    innerPadding: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass HeatMapModule {}\n\nHeatMapModule.ɵfac = function HeatMapModule_Factory(t) {\n  return new (t || HeatMapModule)();\n};\n\nHeatMapModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: HeatMapModule\n});\nHeatMapModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HeatMapModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent],\n      exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent]\n    }]\n  }], null, null);\n})();\n\nclass LineComponent {\n  constructor(element, platformId) {\n    this.element = element;\n    this.platformId = platformId;\n    this.fill = 'none';\n    this.animations = true; // @Output() select = new EventEmitter();\n\n    this.initialized = false;\n    this.isSSR = false;\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  ngOnChanges(changes) {\n    if (!this.initialized) {\n      this.initialized = true;\n      this.initialPath = this.path;\n    } else {\n      this.updatePathEl();\n    }\n  }\n\n  updatePathEl() {\n    const node = select(this.element.nativeElement).select('.line');\n\n    if (this.animations) {\n      node.transition().duration(750).attr('d', this.path);\n    } else {\n      node.attr('d', this.path);\n    }\n  }\n\n}\n\nLineComponent.ɵfac = function LineComponent_Factory(t) {\n  return new (t || LineComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nLineComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LineComponent,\n  selectors: [[\"g\", \"ngx-charts-line\", \"\"]],\n  inputs: {\n    path: \"path\",\n    stroke: \"stroke\",\n    data: \"data\",\n    fill: \"fill\",\n    animations: \"animations\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c36,\n  decls: 2,\n  vars: 2,\n  consts: [[4, \"ngIf\"], [\"stroke-width\", \"1.5px\", 1, \"line\"]],\n  template: function LineComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, LineComponent__svg_g_0_Template, 2, 4, \"g\", 0);\n      i0.ɵɵtemplate(1, LineComponent__svg_g_1_Template, 2, 3, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  directives: [i2.NgIf],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':enter', [style({\n      strokeDasharray: 2000,\n      strokeDashoffset: 2000\n    }), animate(1000, style({\n      strokeDashoffset: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LineComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-line]',\n      template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:path\n        [@animationState]=\"'active'\"\n        class=\"line\"\n        [attr.d]=\"initialPath\"\n        [attr.fill]=\"fill\"\n        [attr.stroke]=\"stroke\"\n        stroke-width=\"1.5px\"\n      />\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:path class=\"line\" [attr.d]=\"initialPath\" [attr.fill]=\"fill\" [attr.stroke]=\"stroke\" stroke-width=\"1.5px\" />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':enter', [style({\n        strokeDasharray: 2000,\n        strokeDashoffset: 2000\n      }), animate(1000, style({\n        strokeDashoffset: 0\n      }))])])]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    path: [{\n      type: Input\n    }],\n    stroke: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    fill: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }]\n  });\n})();\n\nclass LineSeriesComponent {\n  constructor() {\n    this.animations = true;\n    this.barOrientation = BarOrientation;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.updateGradients();\n    const data = this.sortData(this.data.series);\n    const lineGen = this.getLineGenerator();\n    this.path = lineGen(data) || '';\n    const areaGen = this.getAreaGenerator();\n    this.areaPath = areaGen(data) || '';\n\n    if (this.hasRange) {\n      const range = this.getRangeGenerator();\n      this.outerPath = range(data) || '';\n    }\n\n    if (this.hasGradient) {\n      this.stroke = this.gradientUrl;\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n\n      if (max === min) {\n        this.stroke = this.colors.getColor(max);\n      }\n    } else {\n      this.stroke = this.colors.getColor(this.data.name);\n    }\n  }\n\n  getLineGenerator() {\n    return line().x(d => {\n      const label = d.name;\n      let value;\n\n      if (this.scaleType === ScaleType.Time) {\n        value = this.xScale(label);\n      } else if (this.scaleType === ScaleType.Linear) {\n        value = this.xScale(Number(label));\n      } else {\n        value = this.xScale(label);\n      }\n\n      return value;\n    }).y(d => this.yScale(d.value)).curve(this.curve);\n  }\n\n  getRangeGenerator() {\n    return area().x(d => {\n      const label = d.name;\n      let value;\n\n      if (this.scaleType === ScaleType.Time) {\n        value = this.xScale(label);\n      } else if (this.scaleType === ScaleType.Linear) {\n        value = this.xScale(Number(label));\n      } else {\n        value = this.xScale(label);\n      }\n\n      return value;\n    }).y0(d => this.yScale(typeof d.min === 'number' ? d.min : d.value)).y1(d => this.yScale(typeof d.max === 'number' ? d.max : d.value)).curve(this.curve);\n  }\n\n  getAreaGenerator() {\n    const xProperty = d => {\n      const label = d.name;\n      return this.xScale(label);\n    };\n\n    return area().x(xProperty).y0(() => this.yScale.range()[0]).y1(d => this.yScale(d.value)).curve(this.curve);\n  }\n\n  sortData(data) {\n    if (this.scaleType === ScaleType.Linear) {\n      data = sortLinear(data, 'name');\n    } else if (this.scaleType === ScaleType.Time) {\n      data = sortByTime(data, 'name');\n    } else {\n      data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n\n    return data;\n  }\n\n  updateGradients() {\n    if (this.colors.scaleType === ScaleType.Linear) {\n      this.hasGradient = true;\n      this.gradientId = 'grad' + id().toString();\n      this.gradientUrl = `url(#${this.gradientId})`;\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\n      this.areaGradientStops = this.colors.getLinearGradientStops(max);\n    } else {\n      this.hasGradient = false;\n      this.gradientStops = undefined;\n      this.areaGradientStops = undefined;\n    }\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry) {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n\n}\n\nLineSeriesComponent.ɵfac = function LineSeriesComponent_Factory(t) {\n  return new (t || LineSeriesComponent)();\n};\n\nLineSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LineSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-line-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    scaleType: \"scaleType\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    rangeFillOpacity: \"rangeFillOpacity\",\n    hasRange: \"hasRange\",\n    animations: \"animations\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c37,\n  decls: 6,\n  vars: 22,\n  consts: [[\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\", 4, \"ngIf\"], [\"ngx-charts-area\", \"\", 1, \"line-highlight\", 3, \"data\", \"path\", \"fill\", \"opacity\", \"startOpacity\", \"gradient\", \"stops\", \"animations\"], [\"ngx-charts-line\", \"\", 1, \"line-series\", 3, \"data\", \"path\", \"stroke\", \"animations\"], [\"ngx-charts-area\", \"\", \"class\", \"line-series-range\", 3, \"data\", \"path\", \"fill\", \"active\", \"inactive\", \"opacity\", \"animations\", 4, \"ngIf\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"], [\"ngx-charts-area\", \"\", 1, \"line-series-range\", 3, \"data\", \"path\", \"fill\", \"opacity\", \"animations\"]],\n  template: function LineSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\");\n      i0.ɵɵelementStart(1, \"defs\");\n      i0.ɵɵtemplate(2, LineSeriesComponent__svg_g_2_Template, 1, 3, \"g\", 0);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"g\", 1);\n      i0.ɵɵelement(4, \"g\", 2);\n      i0.ɵɵtemplate(5, LineSeriesComponent__svg_g_5_Template, 1, 9, \"g\", 3);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasGradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"active\", ctx.isActive(ctx.data))(\"inactive\", ctx.isInactive(ctx.data));\n      i0.ɵɵproperty(\"data\", ctx.data)(\"path\", ctx.areaPath)(\"fill\", ctx.hasGradient ? ctx.gradientUrl : ctx.colors.getColor(ctx.data.name))(\"opacity\", 0.25)(\"startOpacity\", 0)(\"gradient\", true)(\"stops\", ctx.areaGradientStops)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"active\", ctx.isActive(ctx.data))(\"inactive\", ctx.isInactive(ctx.data));\n      i0.ɵɵproperty(\"data\", ctx.data)(\"path\", ctx.path)(\"stroke\", ctx.stroke)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasRange);\n    }\n  },\n  directives: [i2.NgIf, AreaComponent, LineComponent, SvgLinearGradientComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LineSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-line-series]',\n      template: `\n    <svg:g>\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          *ngIf=\"hasGradient\"\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-area\n        class=\"line-highlight\"\n        [data]=\"data\"\n        [path]=\"areaPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [opacity]=\"0.25\"\n        [startOpacity]=\"0\"\n        [gradient]=\"true\"\n        [stops]=\"areaGradientStops\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-line\n        class=\"line-series\"\n        [data]=\"data\"\n        [path]=\"path\"\n        [stroke]=\"stroke\"\n        [animations]=\"animations\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n      />\n      <svg:g\n        ngx-charts-area\n        *ngIf=\"hasRange\"\n        class=\"line-series-range\"\n        [data]=\"data\"\n        [path]=\"outerPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [opacity]=\"rangeFillOpacity\"\n        [animations]=\"animations\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    rangeFillOpacity: [{\n      type: Input\n    }],\n    hasRange: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }]\n  });\n})();\n\nclass LineChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.showGridLines = true;\n    this.curve = curveLinear;\n    this.activeEntries = [];\n    this.trimXAxisTicks = true;\n    this.trimYAxisTicks = true;\n    this.rotateXAxisTicks = true;\n    this.maxXAxisTickLength = 16;\n    this.maxYAxisTickLength = 16;\n    this.roundDomains = false;\n    this.tooltipDisabled = false;\n    this.showRefLines = false;\n    this.showRefLabels = true;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.timelineHeight = 50;\n    this.timelinePadding = 10;\n    this.isSSR = false;\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n\n    if (this.timeline) {\n      this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n    }\n\n    this.xDomain = this.getXDomain();\n\n    if (this.filteredDomain) {\n      this.xDomain = this.filteredDomain;\n    }\n\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    this.yScale = this.getYScale(this.yDomain, this.dims.height);\n    this.updateTimeline();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    this.clipPathId = 'clip' + id().toString();\n    this.clipPath = `url(#${this.clipPathId})`;\n  }\n\n  updateTimeline() {\n    if (this.timeline) {\n      this.timelineWidth = this.dims.width;\n      this.timelineXDomain = this.getXDomain();\n      this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n      this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n      this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n    }\n  }\n\n  getXDomain() {\n    let values = getUniqueXDomainValues(this.results);\n    this.scaleType = getScaleType(values);\n    let domain = [];\n\n    if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n    }\n\n    let min;\n    let max;\n\n    if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n      min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n      max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n    }\n\n    if (this.scaleType === ScaleType.Time) {\n      domain = [new Date(min), new Date(max)];\n      this.xSet = [...values].sort((a, b) => {\n        const aDate = a.getTime();\n        const bDate = b.getTime();\n        if (aDate > bDate) return 1;\n        if (bDate > aDate) return -1;\n        return 0;\n      });\n    } else if (this.scaleType === ScaleType.Linear) {\n      domain = [min, max]; // Use compare function to sort numbers numerically\n\n      this.xSet = [...values].sort((a, b) => a - b);\n    } else {\n      domain = values;\n      this.xSet = values;\n    }\n\n    return domain;\n  }\n\n  getYDomain() {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n\n        if (d.min !== undefined) {\n          this.hasRange = true;\n\n          if (domain.indexOf(d.min) < 0) {\n            domain.push(d.min);\n          }\n        }\n\n        if (d.max !== undefined) {\n          this.hasRange = true;\n\n          if (domain.indexOf(d.max) < 0) {\n            domain.push(d.max);\n          }\n        }\n      }\n    }\n\n    const values = [...domain];\n\n    if (!this.autoScale) {\n      values.push(0);\n    }\n\n    const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n    const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n    return [min, max];\n  }\n\n  getSeriesDomain() {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width) {\n    let scale;\n\n    if (this.scaleType === ScaleType.Time) {\n      scale = scaleTime().range([0, width]).domain(domain);\n    } else if (this.scaleType === ScaleType.Linear) {\n      scale = scaleLinear().range([0, width]).domain(domain);\n\n      if (this.roundDomains) {\n        scale = scale.nice();\n      }\n    } else if (this.scaleType === ScaleType.Ordinal) {\n      scale = scalePoint().range([0, width]).padding(0.1).domain(domain);\n    }\n\n    return scale;\n  }\n\n  getYScale(domain, height) {\n    const scale = scaleLinear().range([height, 0]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  updateDomain(domain) {\n    this.filteredDomain = domain;\n    this.xDomain = this.filteredDomain;\n    this.xScale = this.getXScale(this.xDomain, this.dims.width);\n  }\n\n  updateHoveredVertical(item) {\n    this.hoveredVertical = item.value;\n    this.deactivateAll();\n  }\n\n  hideCircles() {\n    this.hoveredVertical = null;\n    this.deactivateAll();\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  trackBy(index, item) {\n    return `${item.name}`;\n  }\n\n  setColors() {\n    let domain;\n\n    if (this.schemeType === ScaleType.Ordinal) {\n      domain = this.seriesDomain;\n    } else {\n      domain = this.yDomain;\n    }\n\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    const opts = {\n      scaleType: this.schemeType,\n      colors: undefined,\n      domain: [],\n      title: undefined,\n      position: this.legendPosition\n    };\n\n    if (opts.scaleType === ScaleType.Ordinal) {\n      opts.domain = this.seriesDomain;\n      opts.colors = this.colors;\n      opts.title = this.legendTitle;\n    } else {\n      opts.domain = this.yDomain;\n      opts.colors = this.colors.scale;\n    }\n\n    return opts;\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    this.deactivateAll();\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({\n        value: entry,\n        entries: []\n      });\n    }\n\n    this.activeEntries = [];\n  }\n\n}\n\nLineChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵLineChartComponent_BaseFactory;\n  return function LineChartComponent_Factory(t) {\n    return (ɵLineChartComponent_BaseFactory || (ɵLineChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(LineChartComponent)))(t || LineChartComponent);\n  };\n}();\n\nLineChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LineChartComponent,\n  selectors: [[\"ngx-charts-line-chart\"]],\n  contentQueries: function LineChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n      i0.ɵɵcontentQuery(dirIndex, _c23, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.seriesTooltipTemplate = _t.first);\n    }\n  },\n  hostBindings: function LineChartComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mouseleave\", function LineChartComponent_mouseleave_HostBindingHandler() {\n        return ctx.hideCircles();\n      });\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    autoScale: \"autoScale\",\n    timeline: \"timeline\",\n    gradient: \"gradient\",\n    showGridLines: \"showGridLines\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    rangeFillOpacity: \"rangeFillOpacity\",\n    trimXAxisTicks: \"trimXAxisTicks\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    rotateXAxisTicks: \"rotateXAxisTicks\",\n    maxXAxisTickLength: \"maxXAxisTickLength\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    xAxisTicks: \"xAxisTicks\",\n    yAxisTicks: \"yAxisTicks\",\n    roundDomains: \"roundDomains\",\n    tooltipDisabled: \"tooltipDisabled\",\n    showRefLines: \"showRefLines\",\n    referenceLines: \"referenceLines\",\n    showRefLabels: \"showRefLabels\",\n    xScaleMin: \"xScaleMin\",\n    xScaleMax: \"xScaleMax\",\n    yScaleMin: \"yScaleMin\",\n    yScaleMax: \"yScaleMax\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 12,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"line-chart\", \"chart\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"dimensionsChanged\", 4, \"ngIf\"], [4, \"ngIf\"], [3, \"mouseleave\", 4, \"ngIf\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"scaleType\", \"legend\", \"onDomainChange\", 4, \"ngIf\"], [\"ngx-charts-x-axis\", \"\", 3, \"xScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"dimensionsChanged\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"dimensionsChanged\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-line-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"activeEntries\", \"scaleType\", \"curve\", \"rangeFillOpacity\", \"hasRange\", \"animations\"], [3, \"mouseleave\"], [\"ngx-charts-tooltip-area\", \"\", 3, \"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"tooltipDisabled\", \"tooltipTemplate\", \"hover\"], [4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-circle-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-timeline\", \"\", 3, \"results\", \"view\", \"height\", \"scheme\", \"customColors\", \"scaleType\", \"legend\", \"onDomainChange\"], [\"ngx-charts-line-series\", \"\", 3, \"xScale\", \"yScale\", \"colors\", \"data\", \"scaleType\", \"curve\", \"hasRange\", \"animations\"]],\n  template: function LineChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function LineChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function LineChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function LineChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"defs\");\n      i0.ɵɵelementStart(2, \"clipPath\");\n      i0.ɵɵelement(3, \"rect\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"g\", 1);\n      i0.ɵɵtemplate(5, LineChartComponent__svg_g_5_Template, 1, 10, \"g\", 2);\n      i0.ɵɵtemplate(6, LineChartComponent__svg_g_6_Template, 1, 12, \"g\", 3);\n      i0.ɵɵelementStart(7, \"g\");\n      i0.ɵɵtemplate(8, LineChartComponent__svg_g_8_Template, 2, 2, \"g\", 4);\n      i0.ɵɵtemplate(9, LineChartComponent__svg_g_9_Template, 2, 2, \"g\", 4);\n      i0.ɵɵtemplate(10, LineChartComponent__svg_g_10_Template, 3, 9, \"g\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(11, LineChartComponent__svg_g_11_Template, 2, 13, \"g\", 6);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(17, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"id\", ctx.clipPathId);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"width\", ctx.dims.width + 10)(\"height\", ctx.dims.height + 10)(\"transform\", \"translate(-5, -5)\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"clip-path\", ctx.clipPath);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.tooltipDisabled);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.timeline && ctx.scaleType != \"ordinal\");\n    }\n  },\n  directives: [ChartComponent, i2.NgIf, XAxisComponent, YAxisComponent, i2.NgForOf, LineSeriesComponent, TooltipArea, CircleSeriesComponent, Timeline],\n  styles: [_c25],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LineChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-line-chart',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [referenceLines]=\"referenceLines\"\n          [showRefLines]=\"showRefLines\"\n          [showRefLabels]=\"showRefLabels\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngIf=\"!isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n          <svg:g *ngIf=\"isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [activeEntries]=\"activeEntries\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [scaleType]=\"scaleType\"\n        [legend]=\"legend\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-line-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [curve]=\"curve\"\n            [hasRange]=\"hasRange\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])],\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    autoScale: [{\n      type: Input\n    }],\n    timeline: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    rangeFillOpacity: [{\n      type: Input\n    }],\n    trimXAxisTicks: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    rotateXAxisTicks: [{\n      type: Input\n    }],\n    maxXAxisTickLength: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    xAxisTicks: [{\n      type: Input\n    }],\n    yAxisTicks: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    showRefLines: [{\n      type: Input\n    }],\n    referenceLines: [{\n      type: Input\n    }],\n    showRefLabels: [{\n      type: Input\n    }],\n    xScaleMin: [{\n      type: Input\n    }],\n    xScaleMax: [{\n      type: Input\n    }],\n    yScaleMin: [{\n      type: Input\n    }],\n    yScaleMax: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    seriesTooltipTemplate: [{\n      type: ContentChild,\n      args: ['seriesTooltipTemplate']\n    }],\n    hideCircles: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nclass LineChartModule {}\n\nLineChartModule.ɵfac = function LineChartModule_Factory(t) {\n  return new (t || LineChartModule)();\n};\n\nLineChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: LineChartModule\n});\nLineChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LineChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [LineComponent, LineChartComponent, LineSeriesComponent],\n      exports: [LineComponent, LineChartComponent, LineSeriesComponent]\n    }]\n  }], null, null);\n})();\n\nclass PieLabelComponent {\n  constructor(platformId) {\n    this.platformId = platformId;\n    this.animations = true;\n    this.labelTrim = true;\n    this.labelTrimSize = 10;\n    this.trimLabel = trimLabel;\n  }\n\n  ngOnChanges(changes) {\n    this.setTransforms();\n    this.update();\n  }\n\n  setTransforms() {\n    if (isPlatformServer(this.platformId)) {\n      this.styleTransform = `translate3d(${this.textX}px,${this.textY}px, 0)`;\n      this.attrTransform = `translate(${this.textX},${this.textY})`;\n      this.textTransition = !this.animations ? null : 'transform 0.75s';\n    } else {\n      const isIE = /(edge|msie|trident)/i.test(navigator.userAgent);\n      this.styleTransform = isIE ? null : `translate3d(${this.textX}px,${this.textY}px, 0)`;\n      this.attrTransform = !isIE ? null : `translate(${this.textX},${this.textY})`;\n      this.textTransition = isIE || !this.animations ? null : 'transform 0.75s';\n    }\n  }\n\n  update() {\n    let startRadius = this.radius;\n\n    if (this.explodeSlices) {\n      startRadius = this.radius * this.value / this.max;\n    }\n\n    const innerArc = arc().innerRadius(startRadius).outerRadius(startRadius); // Calculate innerPos then scale outer position to match label position\n\n    const innerPos = innerArc.centroid(this.data);\n    let scale = this.data.pos[1] / innerPos[1];\n\n    if (this.data.pos[1] === 0 || innerPos[1] === 0) {\n      scale = 1;\n    }\n\n    const outerPos = [scale * innerPos[0], scale * innerPos[1]];\n    this.line = `M${innerPos}L${outerPos}L${this.data.pos}`;\n  }\n\n  get textX() {\n    return this.data.pos[0];\n  }\n\n  get textY() {\n    return this.data.pos[1];\n  }\n\n  textAnchor() {\n    return this.midAngle(this.data) < Math.PI ? TextAnchor.Start : TextAnchor.End;\n  }\n\n  midAngle(d) {\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\n  }\n\n}\n\nPieLabelComponent.ɵfac = function PieLabelComponent_Factory(t) {\n  return new (t || PieLabelComponent)(i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nPieLabelComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PieLabelComponent,\n  selectors: [[\"g\", \"ngx-charts-pie-label\", \"\"]],\n  inputs: {\n    data: \"data\",\n    radius: \"radius\",\n    label: \"label\",\n    color: \"color\",\n    max: \"max\",\n    value: \"value\",\n    explodeSlices: \"explodeSlices\",\n    animations: \"animations\",\n    labelTrim: \"labelTrim\",\n    labelTrimSize: \"labelTrimSize\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c38,\n  decls: 6,\n  vars: 17,\n  consts: [[\"dy\", \".35em\", 1, \"pie-label\"], [\"fill\", \"none\", 1, \"pie-label-line\", \"line\"]],\n  template: function PieLabelComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"title\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(2, \"g\");\n      i0.ɵɵelementStart(3, \"text\", 0);\n      i0.ɵɵtext(4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"path\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(ctx.label);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"transform\", ctx.styleTransform)(\"transition\", ctx.textTransition);\n      i0.ɵɵattribute(\"transform\", ctx.attrTransform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"text-anchor\", ctx.textAnchor())(\"shape-rendering\", \"crispEdges\");\n      i0.ɵɵclassProp(\"animation\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", ctx.labelTrim ? ctx.trimLabel(ctx.label, ctx.labelTrimSize) : ctx.label, \" \");\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"animation\", ctx.animations);\n      i0.ɵɵattribute(\"d\", ctx.line)(\"stroke\", ctx.color);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieLabelComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-pie-label]',\n      template: `\n    <title>{{ label }}</title>\n    <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\n      <svg:text\n        class=\"pie-label\"\n        [class.animation]=\"animations\"\n        dy=\".35em\"\n        [style.textAnchor]=\"textAnchor()\"\n        [style.shapeRendering]=\"'crispEdges'\"\n      >\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\n      </svg:text>\n    </svg:g>\n    <svg:path\n      [attr.d]=\"line\"\n      [attr.stroke]=\"color\"\n      fill=\"none\"\n      class=\"pie-label-line line\"\n      [class.animation]=\"animations\"\n    ></svg:path>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    radius: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    color: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    explodeSlices: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    labelTrim: [{\n      type: Input\n    }],\n    labelTrimSize: [{\n      type: Input\n    }]\n  });\n})();\n\nclass PolarSeriesComponent {\n  constructor() {\n    this.tooltipDisabled = false;\n    this.gradient = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.circleRadius = 3;\n    this.barOrientation = BarOrientation;\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.updateGradients();\n    const line = this.getLineGenerator();\n    const data = this.sortData(this.data.series);\n    const seriesName = this.data.name;\n    const linearScaleType = this.colors.scaleType === ScaleType.Linear;\n    const min = this.yScale.domain()[0];\n    this.seriesColor = this.colors.getColor(linearScaleType ? min : seriesName);\n    this.path = line(data) || '';\n    this.circles = data.map(d => {\n      const a = this.getAngle(d);\n      const r = this.getRadius(d);\n      const value = d.value;\n      const color = this.colors.getColor(linearScaleType ? Math.abs(value) : seriesName);\n      const cData = Object.assign({}, d, {\n        series: seriesName,\n        value,\n        name: d.name\n      });\n      return {\n        data: cData,\n        cx: r * Math.sin(a),\n        cy: -r * Math.cos(a),\n        value,\n        color,\n        label: d.name\n      };\n    });\n    this.active = this.isActive(this.data);\n    this.inactive = this.isInactive(this.data);\n\n    this.tooltipText = this.tooltipText || (c => this.defaultTooltipText(c));\n  }\n\n  getAngle(d) {\n    const label = d.name;\n\n    if (this.scaleType === ScaleType.Time) {\n      return this.xScale(label);\n    } else if (this.scaleType === ScaleType.Linear) {\n      return this.xScale(Number(label));\n    }\n\n    return this.xScale(label);\n  }\n\n  getRadius(d) {\n    return this.yScale(d.value);\n  }\n\n  getLineGenerator() {\n    return lineRadial().angle(d => this.getAngle(d)).radius(d => this.getRadius(d)).curve(this.curve);\n  }\n\n  sortData(data) {\n    if (this.scaleType === ScaleType.Linear) {\n      return sortLinear(data, 'name');\n    } else if (this.scaleType === ScaleType.Time) {\n      return sortByTime(data, 'name');\n    }\n\n    return sortByDomain(data, 'name', 'asc', this.xScale.domain());\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item !== undefined;\n  }\n\n  isInactive(entry) {\n    if (!this.activeEntries || this.activeEntries.length === 0) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name;\n    });\n    return item === undefined;\n  }\n\n  defaultTooltipText({\n    label,\n    value\n  }) {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(this.data.name)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n  }\n\n  updateGradients() {\n    this.hasGradient = this.gradient || this.colors.scaleType === ScaleType.Linear;\n\n    if (!this.hasGradient) {\n      return;\n    }\n\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n\n    if (this.colors.scaleType === ScaleType.Linear) {\n      const values = this.data.series.map(d => d.value);\n      const max = Math.max(...values);\n      const min = Math.min(...values);\n      this.gradientStops = this.colors.getLinearGradientStops(max, min);\n    } else {\n      this.gradientStops = undefined;\n    }\n  }\n\n}\n\nPolarSeriesComponent.ɵfac = function PolarSeriesComponent_Factory(t) {\n  return new (t || PolarSeriesComponent)();\n};\n\nPolarSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PolarSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-polar-series\", \"\"]],\n  inputs: {\n    name: \"name\",\n    data: \"data\",\n    xScale: \"xScale\",\n    yScale: \"yScale\",\n    colors: \"colors\",\n    scaleType: \"scaleType\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    rangeFillOpacity: \"rangeFillOpacity\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipText: \"tooltipText\",\n    gradient: \"gradient\",\n    tooltipTemplate: \"tooltipTemplate\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c39,\n  decls: 5,\n  vars: 11,\n  consts: [[1, \"polar-charts-series\"], [\"ngx-charts-svg-radial-gradient\", \"\", 3, \"color\", \"name\", \"startOpacity\", \"endOpacity\", \"stops\", 4, \"ngIf\"], [\"ngx-charts-line\", \"\", 1, \"polar-series-path\", 3, \"path\", \"stroke\", \"fill\", \"animations\"], [\"ngx-charts-circle\", \"\", \"class\", \"circle\", \"ngx-tooltip\", \"\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"opacity\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-svg-radial-gradient\", \"\", 3, \"color\", \"name\", \"startOpacity\", \"endOpacity\", \"stops\"], [\"ngx-charts-circle\", \"\", \"ngx-tooltip\", \"\", 1, \"circle\", 3, \"cx\", \"cy\", \"r\", \"fill\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"]],\n  template: function PolarSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0);\n      i0.ɵɵelementStart(1, \"defs\");\n      i0.ɵɵtemplate(2, PolarSeriesComponent__svg_g_2_Template, 1, 5, \"g\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(3, \"g\", 2);\n      i0.ɵɵtemplate(4, PolarSeriesComponent__svg_g_4_Template, 1, 12, \"g\", 3);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasGradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"active\", ctx.active)(\"inactive\", ctx.inactive);\n      i0.ɵɵproperty(\"path\", ctx.path)(\"stroke\", ctx.hasGradient ? ctx.gradientUrl : ctx.seriesColor)(\"fill\", ctx.hasGradient ? ctx.gradientUrl : ctx.seriesColor)(\"animations\", ctx.animations);\n      i0.ɵɵattribute(\"fill-opacity\", ctx.rangeFillOpacity);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.circles);\n    }\n  },\n  directives: [i2.NgIf, LineComponent, i2.NgForOf, SvgRadialGradientComponent, CircleComponent, TooltipDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PolarSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-polar-series]',\n      template: `\n    <svg:g class=\"polar-charts-series\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          *ngIf=\"hasGradient\"\n          [color]=\"seriesColor\"\n          [name]=\"gradientId\"\n          [startOpacity]=\"0.25\"\n          [endOpacity]=\"1\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-line\n        class=\"polar-series-path\"\n        [path]=\"path\"\n        [stroke]=\"hasGradient ? gradientUrl : seriesColor\"\n        [class.active]=\"active\"\n        [class.inactive]=\"inactive\"\n        [attr.fill-opacity]=\"rangeFillOpacity\"\n        [fill]=\"hasGradient ? gradientUrl : seriesColor\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-circle\n        *ngFor=\"let circle of circles\"\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circleRadius\"\n        [fill]=\"circle.color\"\n        [style.opacity]=\"inactive ? 0.2 : 1\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n        (select)=\"select.emit(circle.data)\"\n        (activate)=\"activate.emit({ name: circle.data.series })\"\n        (deactivate)=\"deactivate.emit({ name: circle.data.series })\"\n      ></svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    name: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    xScale: [{\n      type: Input\n    }],\n    yScale: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    scaleType: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    rangeFillOpacity: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nconst twoPI = 2 * Math.PI;\n\nclass PolarChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.showGridLines = true;\n    this.curve = curveCardinalClosed;\n    this.activeEntries = [];\n    this.rangeFillOpacity = 0.15;\n    this.trimYAxisTicks = true;\n    this.maxYAxisTickLength = 16;\n    this.roundDomains = false;\n    this.tooltipDisabled = false;\n    this.showSeriesOnHover = true;\n    this.gradient = false;\n    this.yAxisMinScale = 0;\n    this.labelTrim = true;\n    this.labelTrimSize = 10;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter(); // series: any; // ???\n\n    this.margin = [10, 20, 10, 20];\n    this.xAxisHeight = 0;\n    this.yAxisWidth = 0;\n    this.orientation = Orientation;\n    this.isSSR = false;\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.isSSR = true;\n    }\n  }\n\n  update() {\n    super.update();\n    this.setDims();\n    this.setScales();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    this.setTicks();\n  }\n\n  setDims() {\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showXAxis: this.xAxis,\n      showYAxis: this.yAxis,\n      xAxisHeight: this.xAxisHeight,\n      yAxisWidth: this.yAxisWidth,\n      showXLabel: this.showXAxisLabel,\n      showYLabel: this.showYAxisLabel,\n      showLegend: this.legend,\n      legendType: this.schemeType,\n      legendPosition: this.legendPosition\n    });\n    const halfWidth = Math.floor(this.dims.width / 2);\n    const halfHeight = Math.floor(this.dims.height / 2);\n    const outerRadius = this.outerRadius = Math.min(halfHeight / 1.5, halfWidth / 1.5);\n    const yOffset = Math.max(0, halfHeight - outerRadius);\n    this.yAxisDims = { ...this.dims,\n      width: halfWidth\n    };\n    this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n    this.transformYAxis = `translate(0, ${yOffset})`;\n    this.labelOffset = this.dims.height + 40;\n    this.transformPlot = `translate(${halfWidth}, ${halfHeight})`;\n  }\n\n  setScales() {\n    const xValues = this.getXValues();\n    this.scaleType = getScaleType(xValues);\n    this.xDomain = this.filteredDomain || this.getXDomain(xValues);\n    this.yDomain = this.getYDomain();\n    this.seriesDomain = this.getSeriesDomain();\n    this.xScale = this.getXScale(this.xDomain, twoPI);\n    this.yScale = this.getYScale(this.yDomain, this.outerRadius);\n    this.yAxisScale = this.getYScale(this.yDomain.reverse(), this.outerRadius);\n  }\n\n  setTicks() {\n    let tickFormat;\n\n    if (this.xAxisTickFormatting) {\n      tickFormat = this.xAxisTickFormatting;\n    } else if (this.xScale.tickFormat) {\n      tickFormat = this.xScale.tickFormat.apply(this.xScale, [5]);\n    } else {\n      tickFormat = d => {\n        if (isDate(d)) {\n          return d.toLocaleDateString();\n        }\n\n        return d.toLocaleString();\n      };\n    }\n\n    const outerRadius = this.outerRadius;\n    const s = 1.1;\n    this.thetaTicks = this.xDomain.map(d => {\n      const startAngle = this.xScale(d);\n      const dd = s * outerRadius * (startAngle > Math.PI ? -1 : 1);\n      const label = tickFormat(d);\n      const startPos = [outerRadius * Math.sin(startAngle), -outerRadius * Math.cos(startAngle)];\n      const pos = [dd, s * startPos[1]];\n      return {\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle: startAngle,\n        value: outerRadius,\n        label,\n        startPos,\n        pos\n      };\n    });\n    const minDistance = 10;\n    /* from pie chart, abstract out -*/\n\n    for (let i = 0; i < this.thetaTicks.length - 1; i++) {\n      const a = this.thetaTicks[i];\n\n      for (let j = i + 1; j < this.thetaTicks.length; j++) {\n        const b = this.thetaTicks[j]; // if they're on the same side\n\n        if (b.pos[0] * a.pos[0] > 0) {\n          // if they're overlapping\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n\n          if (o > 0) {\n            // push the second up or down\n            b.pos[1] += Math.sign(b.pos[0]) * o;\n          }\n        }\n      }\n    }\n\n    this.radiusTicks = this.yAxisScale.ticks(Math.floor(this.dims.height / 50)).map(d => this.yScale(d));\n  }\n\n  getXValues() {\n    const values = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (!values.includes(d.name)) {\n          values.push(d.name);\n        }\n      }\n    }\n\n    return values;\n  }\n\n  getXDomain(values = this.getXValues()) {\n    if (this.scaleType === ScaleType.Time) {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      return [min, max];\n    } else if (this.scaleType === ScaleType.Linear) {\n      values = values.map(v => Number(v));\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      return [min, max];\n    }\n\n    return values;\n  }\n\n  getYValues() {\n    const domain = [];\n\n    for (const results of this.results) {\n      for (const d of results.series) {\n        if (domain.indexOf(d.value) < 0) {\n          domain.push(d.value);\n        }\n\n        if (d.min !== undefined) {\n          if (domain.indexOf(d.min) < 0) {\n            domain.push(d.min);\n          }\n        }\n\n        if (d.max !== undefined) {\n          if (domain.indexOf(d.max) < 0) {\n            domain.push(d.max);\n          }\n        }\n      }\n    }\n\n    return domain;\n  }\n\n  getYDomain(domain = this.getYValues()) {\n    let min = Math.min(...domain);\n    const max = Math.max(this.yAxisMinScale, ...domain);\n    min = Math.max(0, min);\n\n    if (!this.autoScale) {\n      min = Math.min(0, min);\n    }\n\n    return [min, max];\n  }\n\n  getSeriesDomain() {\n    return this.results.map(d => d.name);\n  }\n\n  getXScale(domain, width) {\n    switch (this.scaleType) {\n      case ScaleType.Time:\n        return scaleTime().range([0, width]).domain(domain);\n\n      case ScaleType.Linear:\n        const scale = scaleLinear().range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n\n      default:\n        return scalePoint().range([0, width - twoPI / domain.length]).padding(0).domain(domain);\n    }\n  }\n\n  getYScale(domain, height) {\n    const scale = scaleLinear().range([0, height]).domain(domain);\n    return this.roundDomains ? scale.nice() : scale;\n  }\n\n  onClick(data, series) {\n    if (series) {\n      data.series = series.name;\n    }\n\n    this.select.emit(data);\n  }\n\n  setColors() {\n    const domain = this.schemeType === ScaleType.Ordinal ? this.seriesDomain : this.yDomain.reverse();\n    this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    if (this.schemeType === ScaleType.Ordinal) {\n      return {\n        scaleType: this.schemeType,\n        colors: this.colors,\n        domain: this.seriesDomain,\n        title: this.legendTitle,\n        position: this.legendPosition\n      };\n    }\n\n    return {\n      scaleType: this.schemeType,\n      colors: this.colors.scale,\n      domain: this.yDomain,\n      title: undefined,\n      position: this.legendPosition\n    };\n  }\n\n  updateYAxisWidth({\n    width\n  }) {\n    this.yAxisWidth = width;\n    this.update();\n  }\n\n  updateXAxisHeight({\n    height\n  }) {\n    this.xAxisHeight = height;\n    this.update();\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = this.showSeriesOnHover ? [item, ...this.activeEntries] : this.activeEntries;\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  deactivateAll() {\n    this.activeEntries = [...this.activeEntries];\n\n    for (const entry of this.activeEntries) {\n      this.deactivate.emit({\n        value: entry,\n        entries: []\n      });\n    }\n\n    this.activeEntries = [];\n  }\n\n  trackBy(index, item) {\n    return `${item.name}`;\n  }\n\n}\n\nPolarChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵPolarChartComponent_BaseFactory;\n  return function PolarChartComponent_Factory(t) {\n    return (ɵPolarChartComponent_BaseFactory || (ɵPolarChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PolarChartComponent)))(t || PolarChartComponent);\n  };\n}();\n\nPolarChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PolarChartComponent,\n  selectors: [[\"ngx-charts-polar-chart\"]],\n  contentQueries: function PolarChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    xAxis: \"xAxis\",\n    yAxis: \"yAxis\",\n    showXAxisLabel: \"showXAxisLabel\",\n    showYAxisLabel: \"showYAxisLabel\",\n    xAxisLabel: \"xAxisLabel\",\n    yAxisLabel: \"yAxisLabel\",\n    autoScale: \"autoScale\",\n    showGridLines: \"showGridLines\",\n    curve: \"curve\",\n    activeEntries: \"activeEntries\",\n    schemeType: \"schemeType\",\n    rangeFillOpacity: \"rangeFillOpacity\",\n    trimYAxisTicks: \"trimYAxisTicks\",\n    maxYAxisTickLength: \"maxYAxisTickLength\",\n    xAxisTickFormatting: \"xAxisTickFormatting\",\n    yAxisTickFormatting: \"yAxisTickFormatting\",\n    roundDomains: \"roundDomains\",\n    tooltipDisabled: \"tooltipDisabled\",\n    showSeriesOnHover: \"showSeriesOnHover\",\n    gradient: \"gradient\",\n    yAxisMinScale: \"yAxisMinScale\",\n    labelTrim: \"labelTrim\",\n    labelTrimSize: \"labelTrimSize\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 10,\n  vars: 17,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"polar-chart\", \"chart\"], [\"cx\", \"0\", \"cy\", \"0\", 1, \"polar-chart-background\"], [4, \"ngIf\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"dimensionsChanged\", 4, \"ngIf\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\", 4, \"ngIf\"], [\"class\", \"gridline-path radial-gridline-path\", \"cx\", \"0\", \"cy\", \"0\", 4, \"ngFor\", \"ngForOf\"], [\"cx\", \"0\", \"cy\", \"0\", 1, \"gridline-path\", \"radial-gridline-path\"], [\"ngx-charts-pie-label\", \"\", 3, \"data\", \"radius\", \"label\", \"max\", \"value\", \"explodeSlices\", \"animations\", \"labelTrim\", \"labelTrimSize\", 4, \"ngFor\", \"ngForOf\"], [\"ngx-charts-pie-label\", \"\", 3, \"data\", \"radius\", \"label\", \"max\", \"value\", \"explodeSlices\", \"animations\", \"labelTrim\", \"labelTrimSize\"], [\"ngx-charts-y-axis\", \"\", 3, \"yScale\", \"dims\", \"showGridLines\", \"showLabel\", \"labelText\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"dimensionsChanged\"], [\"ngx-charts-axis-label\", \"\", 3, \"label\", \"offset\", \"orient\", \"height\", \"width\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-polar-series\", \"\", 3, \"gradient\", \"xScale\", \"yScale\", \"colors\", \"data\", \"activeEntries\", \"scaleType\", \"curve\", \"rangeFillOpacity\", \"animations\", \"tooltipDisabled\", \"tooltipTemplate\", \"select\", \"activate\", \"deactivate\"]],\n  template: function PolarChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function PolarChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function PolarChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function PolarChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵelementStart(2, \"g\");\n      i0.ɵɵelement(3, \"circle\", 2);\n      i0.ɵɵtemplate(4, PolarChartComponent__svg_g_4_Template, 2, 1, \"g\", 3);\n      i0.ɵɵtemplate(5, PolarChartComponent__svg_g_5_Template, 2, 1, \"g\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(6, PolarChartComponent__svg_g_6_Template, 1, 9, \"g\", 4);\n      i0.ɵɵtemplate(7, PolarChartComponent__svg_g_7_Template, 1, 5, \"g\", 5);\n      i0.ɵɵtemplate(8, PolarChartComponent__svg_g_8_Template, 2, 3, \"g\", 3);\n      i0.ɵɵtemplate(9, PolarChartComponent__svg_g_9_Template, 2, 3, \"g\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(14, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transformPlot);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"r\", ctx.outerRadius);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showGridLines);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.yAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.xAxis && ctx.showXAxisLabel);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isSSR);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isSSR);\n    }\n  },\n  directives: [ChartComponent, i2.NgIf, i2.NgForOf, PieLabelComponent, YAxisComponent, AxisLabelComponent, PolarSeriesComponent],\n  styles: [_c25, \".pie-label{font-size:11px}.pie-label.animation{-webkit-animation:.75s ease-in fadeIn;animation:.75s ease-in fadeIn}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{-webkit-animation:3s linear drawOut;animation:3s linear drawOut;transition:d .75s}@-webkit-keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\", \".polar-chart .polar-chart-background{fill:none}.polar-chart .radial-gridline-path{stroke-dasharray:10 10;fill:none}.polar-chart .pie-label-line{stroke:#2f3646}.polar-charts-series .polar-series-area,.polar-series-path{pointer-events:none}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('animationState', [transition(':leave', [style({\n      opacity: 1\n    }), animate(500, style({\n      opacity: 0\n    }))])])]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PolarChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-polar-chart',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g class=\"polar-chart chart\" [attr.transform]=\"transform\">\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:circle class=\"polar-chart-background\" cx=\"0\" cy=\"0\" [attr.r]=\"this.outerRadius\" />\n          <svg:g *ngIf=\"showGridLines\">\n            <svg:circle\n              *ngFor=\"let r of radiusTicks\"\n              class=\"gridline-path radial-gridline-path\"\n              cx=\"0\"\n              cy=\"0\"\n              [attr.r]=\"r\"\n            />\n          </svg:g>\n          <svg:g *ngIf=\"xAxis\">\n            <svg:g\n              ngx-charts-pie-label\n              *ngFor=\"let tick of thetaTicks\"\n              [data]=\"tick\"\n              [radius]=\"outerRadius\"\n              [label]=\"tick.label\"\n              [max]=\"outerRadius\"\n              [value]=\"showGridLines ? 1 : outerRadius\"\n              [explodeSlices]=\"true\"\n              [animations]=\"animations\"\n              [labelTrim]=\"labelTrim\"\n              [labelTrimSize]=\"labelTrimSize\"\n            ></svg:g>\n          </svg:g>\n        </svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          [attr.transform]=\"transformYAxis\"\n          *ngIf=\"yAxis\"\n          [yScale]=\"yAxisScale\"\n          [dims]=\"yAxisDims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-axis-label\n          *ngIf=\"xAxis && showXAxisLabel\"\n          [label]=\"xAxisLabel\"\n          [offset]=\"labelOffset\"\n          [orient]=\"orientation.Bottom\"\n          [height]=\"dims.height\"\n          [width]=\"dims.width\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      animations: [trigger('animationState', [transition(':leave', [style({\n        opacity: 1\n      }), animate(500, style({\n        opacity: 0\n      }))])])],\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{-webkit-animation:.75s ease-in fadeIn;animation:.75s ease-in fadeIn}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{-webkit-animation:3s linear drawOut;animation:3s linear drawOut;transition:d .75s}@-webkit-keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\", \".polar-chart .polar-chart-background{fill:none}.polar-chart .radial-gridline-path{stroke-dasharray:10 10;fill:none}.polar-chart .pie-label-line{stroke:#2f3646}.polar-charts-series .polar-series-area,.polar-series-path{pointer-events:none}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    xAxis: [{\n      type: Input\n    }],\n    yAxis: [{\n      type: Input\n    }],\n    showXAxisLabel: [{\n      type: Input\n    }],\n    showYAxisLabel: [{\n      type: Input\n    }],\n    xAxisLabel: [{\n      type: Input\n    }],\n    yAxisLabel: [{\n      type: Input\n    }],\n    autoScale: [{\n      type: Input\n    }],\n    showGridLines: [{\n      type: Input\n    }],\n    curve: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    schemeType: [{\n      type: Input\n    }],\n    rangeFillOpacity: [{\n      type: Input\n    }],\n    trimYAxisTicks: [{\n      type: Input\n    }],\n    maxYAxisTickLength: [{\n      type: Input\n    }],\n    xAxisTickFormatting: [{\n      type: Input\n    }],\n    yAxisTickFormatting: [{\n      type: Input\n    }],\n    roundDomains: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    showSeriesOnHover: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    yAxisMinScale: [{\n      type: Input\n    }],\n    labelTrim: [{\n      type: Input\n    }],\n    labelTrimSize: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass PieArcComponent {\n  constructor(element) {\n    this.startAngle = 0;\n    this.endAngle = Math.PI * 2;\n    this.cornerRadius = 0;\n    this.explodeSlices = false;\n    this.gradient = false;\n    this.animate = true;\n    this.pointerEvents = true;\n    this.isActive = false;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.dblclick = new EventEmitter();\n    this.barOrientation = BarOrientation;\n    this.initialized = false;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  getGradient() {\n    return this.gradient ? this.gradientFill : this.fill;\n  }\n\n  getPointerEvents() {\n    return this.pointerEvents ? 'auto' : 'none';\n  }\n\n  update() {\n    const calc = this.calculateArc();\n    this.startOpacity = 0.5;\n    this.radialGradientId = 'linearGrad' + id().toString();\n    this.gradientFill = `url(#${this.radialGradientId})`;\n\n    if (this.animate) {\n      if (this.initialized) {\n        this.updateAnimation();\n      } else {\n        this.loadAnimation();\n        this.initialized = true;\n      }\n    } else {\n      this.path = calc.startAngle(this.startAngle).endAngle(this.endAngle)();\n    }\n  }\n\n  calculateArc() {\n    let outerRadius = this.outerRadius;\n\n    if (this.explodeSlices && this.innerRadius === 0) {\n      outerRadius = this.outerRadius * this.value / this.max;\n    }\n\n    return arc().innerRadius(this.innerRadius).outerRadius(outerRadius).cornerRadius(this.cornerRadius);\n  }\n\n  loadAnimation() {\n    const node = select(this.element).selectAll('.arc').data([{\n      startAngle: this.startAngle,\n      endAngle: this.endAngle\n    }]);\n    const calc = this.calculateArc();\n    node.transition().attrTween('d', function (d) {\n      this._current = this._current || d;\n      const copyOfD = Object.assign({}, d);\n      copyOfD.endAngle = copyOfD.startAngle;\n      const interpolater = interpolate(copyOfD, copyOfD);\n      this._current = interpolater(0);\n      return function (t) {\n        return calc(interpolater(t));\n      };\n    }).transition().duration(750).attrTween('d', function (d) {\n      this._current = this._current || d;\n      const interpolater = interpolate(this._current, d);\n      this._current = interpolater(0);\n      return function (t) {\n        return calc(interpolater(t));\n      };\n    });\n  }\n\n  updateAnimation() {\n    const node = select(this.element).selectAll('.arc').data([{\n      startAngle: this.startAngle,\n      endAngle: this.endAngle\n    }]);\n    const calc = this.calculateArc();\n    node.transition().duration(750).attrTween('d', function (d) {\n      this._current = this._current || d;\n      const interpolater = interpolate(this._current, d);\n      this._current = interpolater(0);\n      return function (t) {\n        return calc(interpolater(t));\n      };\n    });\n  }\n\n  onClick() {\n    clearTimeout(this._timeout);\n    this._timeout = setTimeout(() => this.select.emit(this.data), 200);\n  }\n\n  onDblClick(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    clearTimeout(this._timeout);\n    this.dblclick.emit({\n      data: this.data,\n      nativeEvent: event\n    });\n  }\n\n}\n\nPieArcComponent.ɵfac = function PieArcComponent_Factory(t) {\n  return new (t || PieArcComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nPieArcComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PieArcComponent,\n  selectors: [[\"g\", \"ngx-charts-pie-arc\", \"\"]],\n  inputs: {\n    fill: \"fill\",\n    startAngle: \"startAngle\",\n    endAngle: \"endAngle\",\n    innerRadius: \"innerRadius\",\n    outerRadius: \"outerRadius\",\n    cornerRadius: \"cornerRadius\",\n    value: \"value\",\n    max: \"max\",\n    data: \"data\",\n    explodeSlices: \"explodeSlices\",\n    gradient: \"gradient\",\n    animate: \"animate\",\n    pointerEvents: \"pointerEvents\",\n    isActive: \"isActive\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    dblclick: \"dblclick\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c40,\n  decls: 3,\n  vars: 7,\n  consts: [[1, \"arc-group\"], [4, \"ngIf\"], [1, \"arc\", 3, \"click\", \"dblclick\", \"mouseenter\", \"mouseleave\"], [\"ngx-charts-svg-radial-gradient\", \"\", 3, \"color\", \"name\", \"startOpacity\"]],\n  template: function PieArcComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0);\n      i0.ɵɵtemplate(1, PieArcComponent__svg_defs_1_Template, 2, 3, \"defs\", 1);\n      i0.ɵɵelementStart(2, \"path\", 2);\n      i0.ɵɵlistener(\"click\", function PieArcComponent_Template__svg_path_click_2_listener() {\n        return ctx.onClick();\n      })(\"dblclick\", function PieArcComponent_Template__svg_path_dblclick_2_listener($event) {\n        return ctx.onDblClick($event);\n      })(\"mouseenter\", function PieArcComponent_Template__svg_path_mouseenter_2_listener() {\n        return ctx.activate.emit(ctx.data);\n      })(\"mouseleave\", function PieArcComponent_Template__svg_path_mouseleave_2_listener() {\n        return ctx.deactivate.emit(ctx.data);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"pointer-events\", ctx.getPointerEvents());\n      i0.ɵɵclassProp(\"active\", ctx.isActive);\n      i0.ɵɵattribute(\"d\", ctx.path)(\"fill\", ctx.getGradient());\n    }\n  },\n  directives: [i2.NgIf, SvgRadialGradientComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieArcComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-pie-arc]',\n      template: `\n    <svg:g class=\"arc-group\">\n      <svg:defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-radial-gradient [color]=\"fill\" [name]=\"radialGradientId\" [startOpacity]=\"startOpacity\" />\n      </svg:defs>\n      <svg:path\n        [attr.d]=\"path\"\n        class=\"arc\"\n        [class.active]=\"isActive\"\n        [attr.fill]=\"getGradient()\"\n        (click)=\"onClick()\"\n        (dblclick)=\"onDblClick($event)\"\n        (mouseenter)=\"activate.emit(data)\"\n        (mouseleave)=\"deactivate.emit(data)\"\n        [style.pointer-events]=\"getPointerEvents()\"\n      />\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    fill: [{\n      type: Input\n    }],\n    startAngle: [{\n      type: Input\n    }],\n    endAngle: [{\n      type: Input\n    }],\n    innerRadius: [{\n      type: Input\n    }],\n    outerRadius: [{\n      type: Input\n    }],\n    cornerRadius: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    explodeSlices: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    animate: [{\n      type: Input\n    }],\n    pointerEvents: [{\n      type: Input\n    }],\n    isActive: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    dblclick: [{\n      type: Output\n    }]\n  });\n})();\n\nclass PieSeriesComponent {\n  constructor() {\n    this.series = [];\n    this.innerRadius = 60;\n    this.outerRadius = 80;\n    this.trimLabels = true;\n    this.maxLabelLength = 10;\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.dblclick = new EventEmitter();\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    const pieGenerator = pie().value(d => d.value).sort(null);\n    const arcData = pieGenerator(this.series);\n    this.max = max(arcData, d => {\n      return d.value;\n    });\n    this.data = this.calculateLabelPositions(arcData);\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\n  }\n\n  midAngle(d) {\n    return d.startAngle + (d.endAngle - d.startAngle) / 2;\n  }\n\n  outerArc() {\n    const factor = 1.5;\n    return arc().innerRadius(this.outerRadius * factor).outerRadius(this.outerRadius * factor);\n  }\n\n  calculateLabelPositions(pieData) {\n    const factor = 1.5;\n    const minDistance = 10;\n    const labelPositions = pieData;\n    labelPositions.forEach(d => {\n      d.pos = this.outerArc().centroid(d);\n      d.pos[0] = factor * this.outerRadius * (this.midAngle(d) < Math.PI ? 1 : -1);\n    });\n\n    for (let i = 0; i < labelPositions.length - 1; i++) {\n      const a = labelPositions[i];\n\n      if (!this.labelVisible(a)) {\n        continue;\n      }\n\n      for (let j = i + 1; j < labelPositions.length; j++) {\n        const b = labelPositions[j];\n\n        if (!this.labelVisible(b)) {\n          continue;\n        } // if they're on the same side\n\n\n        if (b.pos[0] * a.pos[0] > 0) {\n          // if they're overlapping\n          const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n\n          if (o > 0) {\n            // push the second up or down\n            b.pos[1] += Math.sign(b.pos[0]) * o;\n          }\n        }\n      }\n    }\n\n    return labelPositions;\n  }\n\n  labelVisible(myArc) {\n    return this.showLabels && myArc.endAngle - myArc.startAngle > Math.PI / 30;\n  }\n\n  getTooltipTitle(a) {\n    return this.tooltipTemplate ? undefined : this.tooltipText(a);\n  }\n\n  labelText(myArc) {\n    if (this.labelFormatting) {\n      return this.labelFormatting(myArc.data.name);\n    }\n\n    return this.label(myArc);\n  }\n\n  label(myArc) {\n    return formatLabel(myArc.data.name);\n  }\n\n  defaultTooltipText(myArc) {\n    const label = this.label(myArc);\n    const val = formatLabel(myArc.data.value);\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n\n  color(myArc) {\n    return this.colors.getColor(this.label(myArc));\n  }\n\n  trackBy(index, item) {\n    return item.data.name;\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n\n}\n\nPieSeriesComponent.ɵfac = function PieSeriesComponent_Factory(t) {\n  return new (t || PieSeriesComponent)();\n};\n\nPieSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PieSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-pie-series\", \"\"]],\n  inputs: {\n    colors: \"colors\",\n    series: \"series\",\n    dims: \"dims\",\n    innerRadius: \"innerRadius\",\n    outerRadius: \"outerRadius\",\n    explodeSlices: \"explodeSlices\",\n    showLabels: \"showLabels\",\n    gradient: \"gradient\",\n    activeEntries: \"activeEntries\",\n    labelFormatting: \"labelFormatting\",\n    trimLabels: \"trimLabels\",\n    maxLabelLength: \"maxLabelLength\",\n    tooltipText: \"tooltipText\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\",\n    dblclick: \"dblclick\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c41,\n  decls: 1,\n  vars: 2,\n  consts: [[4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-pie-label\", \"\", 3, \"data\", \"radius\", \"color\", \"label\", \"labelTrim\", \"labelTrimSize\", \"max\", \"value\", \"explodeSlices\", \"animations\", 4, \"ngIf\"], [\"ngx-charts-pie-arc\", \"\", \"ngx-tooltip\", \"\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"fill\", \"value\", \"gradient\", \"data\", \"max\", \"explodeSlices\", \"isActive\", \"animate\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\", \"dblclick\"], [\"ngx-charts-pie-label\", \"\", 3, \"data\", \"radius\", \"color\", \"label\", \"labelTrim\", \"labelTrimSize\", \"max\", \"value\", \"explodeSlices\", \"animations\"]],\n  template: function PieSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, PieSeriesComponent__svg_g_0_Template, 3, 19, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.data)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [i2.NgForOf, i2.NgIf, PieArcComponent, TooltipDirective, PieLabelComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-pie-series]',\n      template: `\n    <svg:g *ngFor=\"let arc of data; trackBy: trackBy\">\n      <svg:g\n        ngx-charts-pie-label\n        *ngIf=\"labelVisible(arc)\"\n        [data]=\"arc\"\n        [radius]=\"outerRadius\"\n        [color]=\"color(arc)\"\n        [label]=\"labelText(arc)\"\n        [labelTrim]=\"trimLabels\"\n        [labelTrimSize]=\"maxLabelLength\"\n        [max]=\"max\"\n        [value]=\"arc.value\"\n        [explodeSlices]=\"explodeSlices\"\n        [animations]=\"animations\"\n      ></svg:g>\n      <svg:g\n        ngx-charts-pie-arc\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [gradient]=\"gradient\"\n        [data]=\"arc.data\"\n        [max]=\"max\"\n        [explodeSlices]=\"explodeSlices\"\n        [isActive]=\"isActive(arc.data)\"\n        [animate]=\"animations\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        (dblclick)=\"dblclick.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"getTooltipTitle(arc)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"arc.data\"\n      ></svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    colors: [{\n      type: Input\n    }],\n    series: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    innerRadius: [{\n      type: Input\n    }],\n    outerRadius: [{\n      type: Input\n    }],\n    explodeSlices: [{\n      type: Input\n    }],\n    showLabels: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    trimLabels: [{\n      type: Input\n    }],\n    maxLabelLength: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    dblclick: [{\n      type: Output\n    }]\n  });\n})();\n\nclass AdvancedPieChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.activeEntries = [];\n    this.tooltipDisabled = false;\n    this.label = 'Total';\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [20, 20, 20, 20];\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width * 4 / 12.0,\n      height: this.height,\n      margins: this.margin\n    });\n    this.formatDates();\n    this.domain = this.getDomain();\n    this.setColors();\n    const xOffset = this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n    this.legendWidth = this.width - this.dims.width - this.margin[1];\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2.5;\n    this.innerRadius = this.outerRadius * 0.75;\n    this.transform = `translate(${xOffset} , ${yOffset})`;\n  }\n\n  getDomain() {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nAdvancedPieChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵAdvancedPieChartComponent_BaseFactory;\n  return function AdvancedPieChartComponent_Factory(t) {\n    return (ɵAdvancedPieChartComponent_BaseFactory || (ɵAdvancedPieChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(AdvancedPieChartComponent)))(t || AdvancedPieChartComponent);\n  };\n}();\n\nAdvancedPieChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: AdvancedPieChartComponent,\n  selectors: [[\"ngx-charts-advanced-pie-chart\"]],\n  contentQueries: function AdvancedPieChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    gradient: \"gradient\",\n    activeEntries: \"activeEntries\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipText: \"tooltipText\",\n    label: \"label\",\n    valueFormatting: \"valueFormatting\",\n    nameFormatting: \"nameFormatting\",\n    percentageFormatting: \"percentageFormatting\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 7,\n  vars: 37,\n  consts: [[1, \"advanced-pie\", \"chart\"], [3, \"view\", \"showLegend\", \"animations\"], [1, \"pie\", \"chart\"], [\"ngx-charts-pie-series\", \"\", 3, \"colors\", \"series\", \"innerRadius\", \"activeEntries\", \"outerRadius\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"tooltipText\", \"animations\", \"select\", \"activate\", \"deactivate\"], [1, \"advanced-pie-legend-wrapper\"], [3, \"data\", \"colors\", \"width\", \"label\", \"animations\", \"valueFormatting\", \"labelFormatting\", \"percentageFormatting\", \"select\", \"activate\", \"deactivate\"]],\n  template: function AdvancedPieChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\");\n      i0.ɵɵelementStart(1, \"div\", 0);\n      i0.ɵɵelementStart(2, \"ngx-charts-chart\", 1);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(3, \"g\", 2);\n      i0.ɵɵelementStart(4, \"g\", 3);\n      i0.ɵɵlistener(\"select\", function AdvancedPieChartComponent_Template__svg_g_select_4_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function AdvancedPieChartComponent_Template__svg_g_activate_4_listener($event) {\n        return ctx.onActivate($event);\n      })(\"deactivate\", function AdvancedPieChartComponent_Template__svg_g_deactivate_4_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵnamespaceHTML();\n      i0.ɵɵelementStart(5, \"div\", 4);\n      i0.ɵɵelementStart(6, \"ngx-charts-advanced-legend\", 5);\n      i0.ɵɵlistener(\"select\", function AdvancedPieChartComponent_Template_ngx_charts_advanced_legend_select_6_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function AdvancedPieChartComponent_Template_ngx_charts_advanced_legend_activate_6_listener($event) {\n        return ctx.onActivate($event, true);\n      })(\"deactivate\", function AdvancedPieChartComponent_Template_ngx_charts_advanced_legend_deactivate_6_listener($event) {\n        return ctx.onDeactivate($event, true);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵstyleProp(\"width\", ctx.width, \"px\")(\"height\", ctx.height, \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"width\", ctx.dims.width, \"px\")(\"height\", ctx.dims.height, \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(34, _c24, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"colors\", ctx.colors)(\"series\", ctx.results)(\"innerRadius\", ctx.innerRadius)(\"activeEntries\", ctx.activeEntries)(\"outerRadius\", ctx.outerRadius)(\"gradient\", ctx.gradient)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipText\", ctx.tooltipText)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"width\", ctx.width - ctx.dims.width, \"px\")(\"height\", ctx.height, \"px\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"data\", ctx.results)(\"colors\", ctx.colors)(\"width\", ctx.width - ctx.dims.width - ctx.margin[1])(\"label\", ctx.label)(\"animations\", ctx.animations)(\"valueFormatting\", ctx.valueFormatting)(\"labelFormatting\", ctx.nameFormatting)(\"percentageFormatting\", ctx.percentageFormatting);\n    }\n  },\n  directives: [ChartComponent, PieSeriesComponent, AdvancedLegendComponent],\n  styles: [_c25, \".advanced-pie{display:inline-block;float:left}.advanced-pie-legend-wrapper{display:inline-block}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AdvancedPieChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-advanced-pie-chart',\n      template: `\n    <div [style.width.px]=\"width\" [style.height.px]=\"height\">\n      <div class=\"advanced-pie chart\" [style.width.px]=\"dims.width\" [style.height.px]=\"dims.height\">\n        <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n          <svg:g [attr.transform]=\"transform\" class=\"pie chart\">\n            <svg:g\n              ngx-charts-pie-series\n              [colors]=\"colors\"\n              [series]=\"results\"\n              [innerRadius]=\"innerRadius\"\n              [activeEntries]=\"activeEntries\"\n              [outerRadius]=\"outerRadius\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipText]=\"tooltipText\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n              [animations]=\"animations\"\n            ></svg:g>\n          </svg:g>\n        </ngx-charts-chart>\n      </div>\n      <div class=\"advanced-pie-legend-wrapper\" [style.width.px]=\"width - dims.width\" [style.height.px]=\"height\">\n        <ngx-charts-advanced-legend\n          [data]=\"results\"\n          [colors]=\"colors\"\n          [width]=\"width - dims.width - margin[1]\"\n          [label]=\"label\"\n          [animations]=\"animations\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"nameFormatting\"\n          [percentageFormatting]=\"percentageFormatting\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, true)\"\n          (deactivate)=\"onDeactivate($event, true)\"\n        >\n        </ngx-charts-advanced-legend>\n      </div>\n    </div>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".advanced-pie{display:inline-block;float:left}.advanced-pie-legend-wrapper{display:inline-block}\\n\"]\n    }]\n  }], null, {\n    gradient: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    nameFormatting: [{\n      type: Input\n    }],\n    percentageFormatting: [{\n      type: Input\n    }]\n  });\n})();\n\nclass PieChartComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.labels = false;\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.explodeSlices = false;\n    this.doughnut = false;\n    this.arcWidth = 0.25;\n    this.activeEntries = [];\n    this.tooltipDisabled = false;\n    this.trimLabels = true;\n    this.maxLabelLength = 10;\n    this.dblclick = new EventEmitter();\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n  }\n\n  update() {\n    super.update();\n\n    if (this.labels && this.hasNoOptionalMarginsSet()) {\n      this.margins = [30, 80, 30, 80];\n    } else if (!this.labels && this.hasNoOptionalMarginsSet()) {\n      // default value for margins\n      this.margins = [20, 20, 20, 20];\n    }\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margins,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n    this.formatDates();\n    const xOffset = this.margins[3] + this.dims.width / 2;\n    const yOffset = this.margins[0] + this.dims.height / 2;\n    this.translation = `translate(${xOffset}, ${yOffset})`;\n    this.outerRadius = Math.min(this.dims.width, this.dims.height);\n\n    if (this.labels) {\n      // make room for labels\n      this.outerRadius /= 3;\n    } else {\n      this.outerRadius /= 2;\n    }\n\n    this.innerRadius = 0;\n\n    if (this.doughnut) {\n      this.innerRadius = this.outerRadius * (1 - this.arcWidth);\n    }\n\n    this.domain = this.getDomain(); // sort data according to domain\n\n    this.data = this.results.sort((a, b) => {\n      return this.domain.indexOf(a.name) - this.domain.indexOf(b.name);\n    });\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n  }\n\n  getDomain() {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n  getLegendOptions() {\n    return {\n      scaleType: ScaleType.Ordinal,\n      domain: this.domain,\n      colors: this.colors,\n      title: this.legendTitle,\n      position: this.legendPosition\n    };\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  hasNoOptionalMarginsSet() {\n    return !this.margins || this.margins.length <= 0;\n  }\n\n}\n\nPieChartComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵPieChartComponent_BaseFactory;\n  return function PieChartComponent_Factory(t) {\n    return (ɵPieChartComponent_BaseFactory || (ɵPieChartComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PieChartComponent)))(t || PieChartComponent);\n  };\n}();\n\nPieChartComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PieChartComponent,\n  selectors: [[\"ngx-charts-pie-chart\"]],\n  contentQueries: function PieChartComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    labels: \"labels\",\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    explodeSlices: \"explodeSlices\",\n    doughnut: \"doughnut\",\n    arcWidth: \"arcWidth\",\n    gradient: \"gradient\",\n    activeEntries: \"activeEntries\",\n    tooltipDisabled: \"tooltipDisabled\",\n    labelFormatting: \"labelFormatting\",\n    trimLabels: \"trimLabels\",\n    maxLabelLength: \"maxLabelLength\",\n    tooltipText: \"tooltipText\",\n    margins: \"margins\"\n  },\n  outputs: {\n    dblclick: \"dblclick\",\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 24,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelActivate\", \"legendLabelDeactivate\", \"legendLabelClick\"], [1, \"pie-chart\", \"chart\"], [\"ngx-charts-pie-series\", \"\", 3, \"colors\", \"series\", \"showLabels\", \"labelFormatting\", \"trimLabels\", \"maxLabelLength\", \"activeEntries\", \"innerRadius\", \"outerRadius\", \"explodeSlices\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipTemplate\", \"tooltipText\", \"dblclick\", \"select\", \"activate\", \"deactivate\"]],\n  template: function PieChartComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelActivate\", function PieChartComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event, true);\n      })(\"legendLabelDeactivate\", function PieChartComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event, true);\n      })(\"legendLabelClick\", function PieChartComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵelementStart(2, \"g\", 2);\n      i0.ɵɵlistener(\"dblclick\", function PieChartComponent_Template__svg_g_dblclick_2_listener($event) {\n        return ctx.dblclick.emit($event);\n      })(\"select\", function PieChartComponent_Template__svg_g_select_2_listener($event) {\n        return ctx.onClick($event);\n      })(\"activate\", function PieChartComponent_Template__svg_g_activate_2_listener($event) {\n        return ctx.onActivate($event);\n      })(\"deactivate\", function PieChartComponent_Template__svg_g_deactivate_2_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(21, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.translation);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"colors\", ctx.colors)(\"series\", ctx.data)(\"showLabels\", ctx.labels)(\"labelFormatting\", ctx.labelFormatting)(\"trimLabels\", ctx.trimLabels)(\"maxLabelLength\", ctx.maxLabelLength)(\"activeEntries\", ctx.activeEntries)(\"innerRadius\", ctx.innerRadius)(\"outerRadius\", ctx.outerRadius)(\"explodeSlices\", ctx.explodeSlices)(\"gradient\", ctx.gradient)(\"animations\", ctx.animations)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipText\", ctx.tooltipText);\n    }\n  },\n  directives: [ChartComponent, PieSeriesComponent],\n  styles: [_c25, _c42],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieChartComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-pie-chart',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\n        <svg:g\n          ngx-charts-pie-series\n          [colors]=\"colors\"\n          [series]=\"data\"\n          [showLabels]=\"labels\"\n          [labelFormatting]=\"labelFormatting\"\n          [trimLabels]=\"trimLabels\"\n          [maxLabelLength]=\"maxLabelLength\"\n          [activeEntries]=\"activeEntries\"\n          [innerRadius]=\"innerRadius\"\n          [outerRadius]=\"outerRadius\"\n          [explodeSlices]=\"explodeSlices\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (dblclick)=\"dblclick.emit($event)\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{-webkit-animation:.75s ease-in fadeIn;animation:.75s ease-in fadeIn}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{-webkit-animation:3s linear drawOut;animation:3s linear drawOut;transition:d .75s}@-webkit-keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\"]\n    }]\n  }], null, {\n    labels: [{\n      type: Input\n    }],\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    explodeSlices: [{\n      type: Input\n    }],\n    doughnut: [{\n      type: Input\n    }],\n    arcWidth: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    trimLabels: [{\n      type: Input\n    }],\n    maxLabelLength: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    dblclick: [{\n      type: Output\n    }],\n    margins: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nfunction gridSize(dims, len, minWidth) {\n  let rows = 1;\n  let cols = len;\n  const width = dims.width;\n\n  if (width > minWidth) {\n    while (width / cols < minWidth) {\n      rows += 1;\n      cols = Math.ceil(len / rows);\n    }\n  }\n\n  return [cols, rows];\n}\n\nfunction gridLayout(dims, data, minWidth, designatedTotal) {\n  const xScale = scaleBand();\n  const yScale = scaleBand();\n  const width = dims.width;\n  const height = dims.height;\n  const [columns, rows] = gridSize(dims, data.length, minWidth);\n  const xDomain = [];\n  const yDomain = [];\n\n  for (let i = 0; i < rows; i++) {\n    yDomain.push(i);\n  }\n\n  for (let i = 0; i < columns; i++) {\n    xDomain.push(i);\n  }\n\n  xScale.domain(xDomain);\n  yScale.domain(yDomain);\n  xScale.rangeRound([0, width], 0.1);\n  yScale.rangeRound([0, height], 0.1);\n  const res = [];\n  const total = designatedTotal ? designatedTotal : getTotal(data);\n  const cardWidth = xScale.bandwidth();\n  const cardHeight = yScale.bandwidth();\n\n  for (let i = 0; i < data.length; i++) {\n    res[i] = {};\n    res[i].data = {\n      name: data[i] ? data[i].name : '',\n      value: data[i] ? data[i].value : undefined,\n      extra: data[i] ? data[i].extra : undefined,\n      label: data[i] ? data[i].label : ''\n    };\n    res[i].x = xScale(i % columns);\n    res[i].y = yScale(Math.floor(i / columns));\n    res[i].width = cardWidth;\n    res[i].height = cardHeight;\n    res[i].data.percent = total > 0 ? res[i].data.value / total : 0;\n    res[i].data.total = total;\n  }\n\n  return res;\n}\n\nfunction getTotal(results) {\n  return results.map(d => d ? d.value : 0).reduce((sum, val) => sum + val, 0);\n}\n\nclass PieGridSeriesComponent {\n  constructor(element) {\n    this.innerRadius = 70;\n    this.outerRadius = 80;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.layout = pie().value(d => d.data.value).sort(null);\n    this.arcs = this.getArcs();\n  }\n\n  getArcs() {\n    return this.layout(this.data).map((arc, index) => {\n      const label = arc.data.data.name;\n      const other = arc.data.data.other;\n\n      if (index === 0) {\n        arc.startAngle = 0;\n      }\n\n      const color = this.colors(label);\n      return {\n        data: arc.data.data,\n        class: 'arc ' + 'arc' + index,\n        fill: color,\n        startAngle: other ? 0 : arc.startAngle,\n        endAngle: arc.endAngle,\n        animate: this.animations && !other,\n        pointerEvents: !other\n      };\n    });\n  }\n\n  onClick(data) {\n    this.select.emit(this.data[0].data);\n  }\n\n  trackBy(index, item) {\n    return item.data.name;\n  }\n\n  label(arc) {\n    return arc.data.name;\n  }\n\n  color(arc) {\n    return this.colors(this.label(arc));\n  }\n\n}\n\nPieGridSeriesComponent.ɵfac = function PieGridSeriesComponent_Factory(t) {\n  return new (t || PieGridSeriesComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nPieGridSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PieGridSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-pie-grid-series\", \"\"]],\n  inputs: {\n    colors: \"colors\",\n    data: \"data\",\n    innerRadius: \"innerRadius\",\n    outerRadius: \"outerRadius\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c43,\n  decls: 2,\n  vars: 2,\n  consts: [[1, \"pie-grid-arcs\"], [\"ngx-charts-pie-arc\", \"\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"fill\", \"value\", \"data\", \"gradient\", \"pointerEvents\", \"animate\", \"select\", \"activate\", \"deactivate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-pie-arc\", \"\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"fill\", \"value\", \"data\", \"gradient\", \"pointerEvents\", \"animate\", \"select\", \"activate\", \"deactivate\"]],\n  template: function PieGridSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0);\n      i0.ɵɵtemplate(1, PieGridSeriesComponent__svg_g_1_Template, 1, 11, \"g\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.arcs)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [i2.NgForOf, PieArcComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieGridSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-pie-grid-series]',\n      template: `\n    <svg:g class=\"pie-grid-arcs\">\n      <svg:g\n        ngx-charts-pie-arc\n        *ngFor=\"let arc of arcs; trackBy: trackBy\"\n        [attr.class]=\"arc.class\"\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [data]=\"arc.data\"\n        [gradient]=\"false\"\n        [pointerEvents]=\"arc.pointerEvents\"\n        [animate]=\"arc.animate\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n      ></svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    colors: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    innerRadius: [{\n      type: Input\n    }],\n    outerRadius: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nclass PieGridComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.tooltipDisabled = false;\n    this.label = 'Total';\n    this.minWidth = 150;\n    this.activeEntries = [];\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.margin = [20, 20, 20, 20];\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n    this.formatDates();\n    this.domain = this.getDomain();\n    this.data = gridLayout(this.dims, this.results, this.minWidth, this.designatedTotal);\n    this.transform = `translate(${this.margin[3]} , ${this.margin[0]})`;\n    this.series = this.getSeries();\n    this.setColors();\n    this.tooltipText = this.tooltipText || this.defaultTooltipText;\n  }\n\n  defaultTooltipText({\n    data\n  }) {\n    const label = trimLabel(formatLabel(data.name));\n    const val = data.value.toLocaleString();\n    return `\n      <span class=\"tooltip-label\">${label}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n\n  getDomain() {\n    return this.results.map(d => d.label);\n  }\n\n  getSeries() {\n    const total = this.designatedTotal ? this.designatedTotal : this.getTotal();\n    return this.data.map(d => {\n      const baselineLabelHeight = 20;\n      const padding = 10;\n      const name = d.data.name;\n      const label = formatLabel(name);\n      const value = d.data.value;\n      const radius = min([d.width - padding, d.height - baselineLabelHeight]) / 2 - 5;\n      const innerRadius = radius * 0.9;\n      let count = 0;\n\n      const colors = () => {\n        count += 1;\n\n        if (count === 1) {\n          return 'rgba(100,100,100,0.3)';\n        } else {\n          return this.colorScale.getColor(label);\n        }\n      };\n\n      const xPos = d.x + (d.width - padding) / 2;\n      const yPos = d.y + (d.height - baselineLabelHeight) / 2;\n      return {\n        transform: `translate(${xPos}, ${yPos})`,\n        colors,\n        innerRadius,\n        outerRadius: radius,\n        name,\n        label: trimLabel(label),\n        total: value,\n        value,\n        percent: format('.1%')(d.data.percent),\n        data: [d, {\n          data: {\n            other: true,\n            value: total - value,\n            name: d.data.name\n          }\n        }]\n      };\n    });\n  }\n\n  getTotal() {\n    return this.results.map(d => d.value).reduce((sum, d) => sum + d, 0);\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    this.colorScale = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n  onActivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item, fromLegend = false) {\n    item = this.results.find(d => {\n      if (fromLegend) {\n        return d.label === item.name;\n      } else {\n        return d.name === item.name;\n      }\n    });\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value && d.series === item.series;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n}\n\nPieGridComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵPieGridComponent_BaseFactory;\n  return function PieGridComponent_Factory(t) {\n    return (ɵPieGridComponent_BaseFactory || (ɵPieGridComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PieGridComponent)))(t || PieGridComponent);\n  };\n}();\n\nPieGridComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PieGridComponent,\n  selectors: [[\"ngx-charts-pie-grid\"]],\n  contentQueries: function PieGridComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    designatedTotal: \"designatedTotal\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipText: \"tooltipText\",\n    label: \"label\",\n    minWidth: \"minWidth\",\n    activeEntries: \"activeEntries\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 8,\n  consts: [[3, \"view\", \"showLegend\", \"animations\"], [1, \"pie-grid\", \"chart\"], [\"class\", \"pie-grid-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"pie-grid-item\"], [\"ngx-charts-pie-grid-series\", \"\", \"ngx-tooltip\", \"\", 3, \"colors\", \"data\", \"innerRadius\", \"outerRadius\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"], [\"class\", \"label percent-label\", \"dy\", \"-0.5em\", \"x\", \"0\", \"y\", \"5\", \"ngx-charts-count-up\", \"\", \"text-anchor\", \"middle\", 3, \"countTo\", \"countSuffix\", 4, \"ngIf\"], [\"class\", \"label percent-label\", \"dy\", \"-0.5em\", \"x\", \"0\", \"y\", \"5\", \"text-anchor\", \"middle\", 4, \"ngIf\"], [\"dy\", \"0.5em\", \"x\", \"0\", \"y\", \"5\", \"text-anchor\", \"middle\", 1, \"label\"], [\"class\", \"label\", \"dy\", \"1.23em\", \"x\", \"0\", \"text-anchor\", \"middle\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"countPrefix\", 4, \"ngIf\"], [\"class\", \"label\", \"dy\", \"1.23em\", \"x\", \"0\", \"text-anchor\", \"middle\", 4, \"ngIf\"], [\"dy\", \"-0.5em\", \"x\", \"0\", \"y\", \"5\", \"ngx-charts-count-up\", \"\", \"text-anchor\", \"middle\", 1, \"label\", \"percent-label\", 3, \"countTo\", \"countSuffix\"], [\"dy\", \"-0.5em\", \"x\", \"0\", \"y\", \"5\", \"text-anchor\", \"middle\", 1, \"label\", \"percent-label\"], [\"dy\", \"1.23em\", \"x\", \"0\", \"text-anchor\", \"middle\", \"ngx-charts-count-up\", \"\", 1, \"label\", 3, \"countTo\", \"countPrefix\"], [\"dy\", \"1.23em\", \"x\", \"0\", \"text-anchor\", \"middle\", 1, \"label\"]],\n  template: function PieGridComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, PieGridComponent__svg_g_2_Template, 8, 19, \"g\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(5, _c24, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.series);\n    }\n  },\n  directives: [ChartComponent, i2.NgForOf, PieGridSeriesComponent, TooltipDirective, i2.NgIf, CountUpDirective],\n  styles: [_c25, \".pie-grid .arc1{opacity:.4}.pie-grid .percent-label{font-size:16px;font-weight:400}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieGridComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-pie-grid',\n      template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"pie-grid chart\">\n        <svg:g *ngFor=\"let series of series\" class=\"pie-grid-item\" [attr.transform]=\"series.transform\">\n          <svg:g\n            ngx-charts-pie-grid-series\n            [colors]=\"series.colors\"\n            [data]=\"series.data\"\n            [innerRadius]=\"series.innerRadius\"\n            [outerRadius]=\"series.outerRadius\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipPlacement]=\"placementTypes.Top\"\n            [tooltipType]=\"styleTypes.tooltip\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText({ data: series })\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"series.data[0].data\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          />\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label percent-label\"\n            dy=\"-0.5em\"\n            x=\"0\"\n            y=\"5\"\n            ngx-charts-count-up\n            [countTo]=\"series.percent\"\n            [countSuffix]=\"'%'\"\n            text-anchor=\"middle\"\n          ></svg:text>\n          <svg:text *ngIf=\"!animations\" class=\"label percent-label\" dy=\"-0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.percent.toLocaleString() }}\n          </svg:text>\n          <svg:text class=\"label\" dy=\"0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.label }}\n          </svg:text>\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n            ngx-charts-count-up\n            [countTo]=\"series.total\"\n            [countPrefix]=\"label + ': '\"\n          ></svg:text>\n          <svg:text\n            *ngIf=\"!animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n          >\n            {{ label }}: {{ series.total.toLocaleString() }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-grid .arc1{opacity:.4}.pie-grid .percent-label{font-size:16px;font-weight:400}\\n\"]\n    }]\n  }], null, {\n    designatedTotal: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipText: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    minWidth: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass PieChartModule {}\n\nPieChartModule.ɵfac = function PieChartModule_Factory(t) {\n  return new (t || PieChartModule)();\n};\n\nPieChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: PieChartModule\n});\nPieChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PieChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [AdvancedPieChartComponent, PieLabelComponent, PieArcComponent, PieChartComponent, PieGridComponent, PieGridSeriesComponent, PieSeriesComponent],\n      exports: [AdvancedPieChartComponent, PieLabelComponent, PieArcComponent, PieChartComponent, PieGridComponent, PieGridSeriesComponent, PieSeriesComponent]\n    }]\n  }], null, null);\n})();\n\nclass PolarChartModule {}\n\nPolarChartModule.ɵfac = function PolarChartModule_Factory(t) {\n  return new (t || PolarChartModule)();\n};\n\nPolarChartModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: PolarChartModule\n});\nPolarChartModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule, PieChartModule, LineChartModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(PolarChartModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule, PieChartModule, LineChartModule],\n      declarations: [PolarChartComponent, PolarSeriesComponent],\n      exports: [PolarChartComponent, PolarSeriesComponent]\n    }]\n  }], null, null);\n})();\n\nfunction calculateTextWidth(fontFamilyKey, text, defaultWidth = 8) {\n  return text.split('').reduce((acc, curr) => {\n    const width = fontFamilyKey[curr] || defaultWidth;\n    return acc + width;\n  }, 0);\n}\n\nconst VERDANA_FONT_WIDTHS_16_PX = {\n  '0': 10,\n  '1': 10,\n  '2': 10,\n  '3': 10,\n  '4': 10,\n  '5': 10,\n  '6': 10,\n  '7': 10,\n  '8': 10,\n  '9': 10,\n  A: 11,\n  B: 11,\n  C: 11,\n  D: 12,\n  E: 10,\n  F: 9,\n  G: 12,\n  H: 12,\n  I: 7,\n  J: 7,\n  K: 11,\n  L: 9,\n  M: 13,\n  N: 12,\n  O: 13,\n  P: 10,\n  Q: 13,\n  R: 11,\n  S: 11,\n  T: 10,\n  U: 12,\n  V: 11,\n  W: 16,\n  X: 11,\n  Y: 10,\n  Z: 11,\n  a: 10,\n  b: 10,\n  c: 8,\n  d: 10,\n  e: 10,\n  f: 6,\n  g: 10,\n  h: 10,\n  i: 4,\n  j: 6,\n  k: 9,\n  l: 4,\n  m: 16,\n  n: 10,\n  o: 10,\n  p: 10,\n  q: 10,\n  r: 7,\n  s: 8,\n  t: 6,\n  u: 10,\n  v: 9,\n  w: 13,\n  x: 9,\n  y: 9,\n  z: 8,\n  '!': 6,\n  '@': 16,\n  '#': 13,\n  $: 10,\n  '%': 17,\n  '^': 13,\n  '&': 12,\n  '*': 10,\n  '(': 7,\n  ')': 7,\n  _: 10,\n  '-': 7,\n  '+': 13,\n  '=': 13,\n  ',': 6,\n  '.': 6,\n  '/': 7,\n  \"'\": 4,\n  ':': 7,\n  '|': 7,\n  '?': 9,\n  ';': 7,\n  '<': 13,\n  '>': 13\n};\n\nclass CardComponent {\n  constructor(element, cd, zone, platformId) {\n    this.cd = cd;\n    this.zone = zone;\n    this.platformId = platformId;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.value = '';\n    this.textFontSize = 12;\n    this.textTransform = '';\n    this.initialized = false;\n    this.bandHeight = 10;\n    this.textPadding = [10, 20, 5, 20];\n    this.labelFontSize = 15;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  ngOnInit() {\n    if (isPlatformServer(this.platformId)) {\n      this.scaleTextSSR();\n    }\n  }\n\n  ngOnDestroy() {\n    if (isPlatformBrowser(this.platformId)) {\n      cancelAnimationFrame(this.animationReq);\n    }\n  }\n\n  update() {\n    this.zone.run(() => {\n      const hasValue = this.data && typeof this.data.value !== 'undefined';\n\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n\n      const labelFormatting = this.labelFormatting || (card => escapeLabel(trimLabel(card.label, 55)));\n\n      this.transform = `translate(${this.x} , ${this.y})`;\n      this.textWidth = Math.max(0, this.width) - this.textPadding[1] - this.textPadding[3];\n      this.cardWidth = Math.max(0, this.width);\n      this.cardHeight = Math.max(0, this.height);\n      this.label = this.label ? this.label : this.data.name;\n      const cardData = {\n        label: this.label,\n        data: this.data,\n        value: this.data.value\n      };\n      this.formattedLabel = labelFormatting(cardData);\n      this.transformBand = `translate(0 , ${this.cardHeight - this.bandHeight})`;\n      const value = hasValue ? valueFormatting(cardData) : '';\n      this.value = this.paddedValue(value);\n      this.setPadding();\n      this.bandPath = roundedRect(0, 0, this.cardWidth, this.bandHeight, 3, [false, false, true, true]);\n      setTimeout(() => {\n        if (isPlatformBrowser(this.platformId)) {\n          this.scaleText();\n        }\n\n        this.value = value;\n\n        if (hasValue && !this.initialized) {\n          setTimeout(() => this.startCount(), 20);\n        }\n      }, 8);\n    });\n  }\n\n  paddedValue(value) {\n    if (this.medianSize && this.medianSize > value.length) {\n      value += '\\u2007'.repeat(this.medianSize - value.length);\n    }\n\n    return value;\n  }\n\n  startCount() {\n    if (!this.initialized && this.animations) {\n      cancelAnimationFrame(this.animationReq);\n      const val = this.data.value;\n      const decs = decimalChecker(val);\n\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n\n      const callback = ({\n        value,\n        finished\n      }) => {\n        this.zone.run(() => {\n          value = finished ? val : value;\n          this.value = valueFormatting({\n            label: this.label,\n            data: this.data,\n            value\n          });\n\n          if (!finished) {\n            this.value = this.paddedValue(this.value);\n          }\n\n          this.cd.markForCheck();\n        });\n      };\n\n      this.animationReq = count(0, val, decs, 1, callback);\n      this.initialized = true;\n    }\n  }\n\n  scaleText() {\n    this.zone.run(() => {\n      const {\n        width,\n        height\n      } = this.textEl.nativeElement.getBoundingClientRect();\n\n      if (width === 0 || height === 0) {\n        return;\n      }\n\n      const textPadding = this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n      const availableWidth = this.cardWidth - 2 * textPadding;\n      const availableHeight = this.cardHeight / 3;\n      const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n      this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n      this.labelFontSize = Math.min(this.textFontSize, 15);\n      this.setPadding();\n      this.cd.markForCheck();\n    });\n  }\n\n  scaleTextSSR() {\n    const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, this.value, 10);\n    const height = 18;\n    const textPadding = this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n    const availableWidth = this.cardWidth - 2 * textPadding;\n    const availableHeight = this.cardHeight / 3;\n    const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n    this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n    this.labelFontSize = Math.min(this.textFontSize, 15);\n    this.setPadding();\n  }\n\n  setPadding() {\n    this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n    const padding = this.cardHeight / 2;\n    this.textPadding[0] = padding - this.textFontSize - this.labelFontSize / 2;\n    this.textPadding[2] = padding - this.labelFontSize;\n  }\n\n  onClick() {\n    this.select.emit(this.data);\n  }\n\n}\n\nCardComponent.ɵfac = function CardComponent_Factory(t) {\n  return new (t || CardComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(PLATFORM_ID));\n};\n\nCardComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CardComponent,\n  selectors: [[\"g\", \"ngx-charts-card\", \"\"]],\n  viewQuery: function CardComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c45, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.textEl = _t.first);\n    }\n  },\n  inputs: {\n    color: \"color\",\n    bandColor: \"bandColor\",\n    textColor: \"textColor\",\n    x: \"x\",\n    y: \"y\",\n    width: \"width\",\n    height: \"height\",\n    label: \"label\",\n    data: \"data\",\n    medianSize: \"medianSize\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c46,\n  decls: 10,\n  vars: 25,\n  consts: [[1, \"cell\", 3, \"click\"], [\"rx\", \"3\", \"ry\", \"3\", 1, \"card\"], [\"class\", \"card-band\", \"stroke\", \"none\", 4, \"ngIf\"], [\"x\", \"5\", \"alignment-baseline\", \"hanging\", 1, \"trimmed-label\"], [3, \"innerHTML\"], [\"text-anchor\", \"start\", \"alignment-baseline\", \"hanging\", 1, \"value-text\"], [\"textEl\", \"\"], [\"stroke\", \"none\", 1, \"card-band\"]],\n  template: function CardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\", 0);\n      i0.ɵɵlistener(\"click\", function CardComponent_Template__svg_g_click_0_listener() {\n        return ctx.onClick();\n      });\n      i0.ɵɵelement(1, \"rect\", 1);\n      i0.ɵɵtemplate(2, CardComponent__svg_path_2_Template, 1, 3, \"path\", 2);\n      i0.ɵɵelementStart(3, \"title\");\n      i0.ɵɵtext(4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"foreignObject\", 3);\n      i0.ɵɵnamespaceHTML();\n      i0.ɵɵelement(6, \"p\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(7, \"text\", 5, 6);\n      i0.ɵɵtext(9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"fill\", ctx.color);\n      i0.ɵɵattribute(\"width\", ctx.cardWidth)(\"height\", ctx.cardHeight);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.bandColor && ctx.bandColor !== ctx.color);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.label);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"x\", ctx.textPadding[3])(\"y\", ctx.cardHeight - ctx.textPadding[2])(\"width\", ctx.textWidth)(\"height\", ctx.labelFontSize + ctx.textPadding[2]);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"color\", ctx.textColor)(\"font-size\", ctx.labelFontSize, \"px\")(\"line-height\", ctx.labelFontSize, \"px\");\n      i0.ɵɵproperty(\"innerHTML\", ctx.formattedLabel, i0.ɵɵsanitizeHtml);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"fill\", ctx.textColor)(\"font-size\", ctx.textFontSize, \"pt\");\n      i0.ɵɵattribute(\"x\", ctx.textPadding[3])(\"y\", ctx.textPadding[0]);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.value, \" \");\n    }\n  },\n  directives: [i2.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CardComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-card]',\n      template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\" (click)=\"onClick()\">\n      <svg:rect class=\"card\" [style.fill]=\"color\" [attr.width]=\"cardWidth\" [attr.height]=\"cardHeight\" rx=\"3\" ry=\"3\" />\n      <svg:path\n        *ngIf=\"bandColor && bandColor !== color\"\n        class=\"card-band\"\n        [attr.fill]=\"bandColor\"\n        [attr.transform]=\"transformBand\"\n        stroke=\"none\"\n        [attr.d]=\"bandPath\"\n      />\n      <title>{{ label }}</title>\n      <svg:foreignObject\n        class=\"trimmed-label\"\n        x=\"5\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"cardHeight - textPadding[2]\"\n        [attr.width]=\"textWidth\"\n        [attr.height]=\"labelFontSize + textPadding[2]\"\n        alignment-baseline=\"hanging\"\n      >\n        <xhtml:p\n          [style.color]=\"textColor\"\n          [style.fontSize.px]=\"labelFontSize\"\n          [style.lineHeight.px]=\"labelFontSize\"\n          [innerHTML]=\"formattedLabel\"\n        >\n        </xhtml:p>\n      </svg:foreignObject>\n      <svg:text\n        #textEl\n        class=\"value-text\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"textPadding[0]\"\n        [style.fill]=\"textColor\"\n        text-anchor=\"start\"\n        alignment-baseline=\"hanging\"\n        [style.font-size.pt]=\"textFontSize\"\n      >\n        {{ value }}\n      </svg:text>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, {\n    color: [{\n      type: Input\n    }],\n    bandColor: [{\n      type: Input\n    }],\n    textColor: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    medianSize: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    textEl: [{\n      type: ViewChild,\n      args: ['textEl', {\n        static: false\n      }]\n    }]\n  });\n})();\n/**\n * Converts a hex to RGB\n *\n * @export\n */\n\n\nfunction hexToRgb(value) {\n  // deprecated, use d3.color()\n  return d3_color.rgb(value);\n}\n/**\n * Accepts a color (string) and returns a inverted hex color (string)\n * http://stackoverflow.com/questions/9600295/automatically-change-text-color-to-assure-readability\n *\n * @export\n */\n\n\nfunction invertColor(value) {\n  const color = d3_color.rgb(value);\n  const {\n    r,\n    g,\n    b,\n    opacity\n  } = color;\n\n  if (opacity === 0) {\n    return color.toString();\n  }\n\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n  const depth = yiq >= 128 ? -0.8 : 0.8;\n  return shadeRGBColor(color, depth);\n}\n/**\n * Given a rgb, it will darken/lighten\n * http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\n *\n * @export\n * @param \\{ r, g, b }\n */\n\n\nfunction shadeRGBColor({\n  r,\n  g,\n  b\n}, percent) {\n  const t = percent < 0 ? 0 : 255;\n  const p = percent < 0 ? percent * -1 : percent;\n  r = Math.round((t - r) * p) + r;\n  g = Math.round((t - g) * p) + g;\n  b = Math.round((t - b) * p) + b;\n  return `rgb(${r}, ${g}, ${b})`;\n}\n\nclass CardSeriesComponent {\n  constructor() {\n    this.innerPadding = 15;\n    this.emptyColor = 'rgba(0, 0, 0, 0)';\n    this.animations = true;\n    this.select = new EventEmitter();\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    if (this.data.length > 2) {\n      const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n\n      const sortedLengths = this.data.map(d => {\n        const hasValue = d && d.data && typeof d.data.value !== 'undefined' && d.data.value !== null;\n        return hasValue ? valueFormatting({\n          data: d.data,\n          label: d ? d.data.name : '',\n          value: d && d.data ? d.data.value : ''\n        }).length : 0;\n      }).sort((a, b) => b - a);\n      const idx = Math.ceil(this.data.length / 2);\n      this.medianSize = sortedLengths[idx];\n    }\n\n    const cards = this.getCards();\n    this.cards = cards.filter(d => d.data.value !== null);\n    this.emptySlots = cards.filter(d => d.data.value === null);\n  }\n\n  getCards() {\n    const yPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[0] + this.innerPadding[2];\n    const xPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[1] + this.innerPadding[3];\n    return this.data.map((d, index) => {\n      let label = d.data.name;\n\n      if (label && label.constructor.name === 'Date') {\n        label = label.toLocaleDateString();\n      } else {\n        label = label ? label.toLocaleString() : label;\n      }\n\n      const value = d.data.value;\n      const valueColor = label ? this.colors.getColor(label) : this.emptyColor;\n      const color = this.cardColor || valueColor || '#000';\n      return {\n        x: d.x,\n        y: d.y,\n        width: d.width - xPadding,\n        height: d.height - yPadding,\n        color,\n        bandColor: this.bandColor || valueColor,\n        textColor: this.textColor || invertColor(color),\n        label,\n        data: d.data,\n        tooltipText: `${label}: ${value}`\n      };\n    });\n  }\n\n  trackBy(index, card) {\n    return card.label;\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n}\n\nCardSeriesComponent.ɵfac = function CardSeriesComponent_Factory(t) {\n  return new (t || CardSeriesComponent)();\n};\n\nCardSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: CardSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-card-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    dims: \"dims\",\n    colors: \"colors\",\n    innerPadding: \"innerPadding\",\n    cardColor: \"cardColor\",\n    bandColor: \"bandColor\",\n    emptyColor: \"emptyColor\",\n    textColor: \"textColor\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c47,\n  decls: 2,\n  vars: 4,\n  consts: [[\"class\", \"card-empty\", \"rx\", \"3\", \"ry\", \"3\", 3, \"fill\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-card\", \"\", 3, \"x\", \"y\", \"width\", \"height\", \"color\", \"bandColor\", \"textColor\", \"data\", \"label\", \"medianSize\", \"valueFormatting\", \"labelFormatting\", \"animations\", \"select\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"rx\", \"3\", \"ry\", \"3\", 1, \"card-empty\"], [\"ngx-charts-card\", \"\", 3, \"x\", \"y\", \"width\", \"height\", \"color\", \"bandColor\", \"textColor\", \"data\", \"label\", \"medianSize\", \"valueFormatting\", \"labelFormatting\", \"animations\", \"select\"]],\n  template: function CardSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, CardSeriesComponent__svg_rect_0_Template, 1, 6, \"rect\", 0);\n      i0.ɵɵtemplate(1, CardSeriesComponent__svg_g_1_Template, 1, 13, \"g\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.emptySlots)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.cards)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [i2.NgForOf, CardComponent],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CardSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-card-series]',\n      template: `\n    <svg:rect\n      *ngFor=\"let c of emptySlots; trackBy: trackBy\"\n      class=\"card-empty\"\n      [attr.x]=\"c.x\"\n      [attr.y]=\"c.y\"\n      [style.fill]=\"emptyColor\"\n      [attr.width]=\"c.width\"\n      [attr.height]=\"c.height\"\n      rx=\"3\"\n      ry=\"3\"\n    />\n    <svg:g\n      ngx-charts-card\n      *ngFor=\"let c of cards; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [color]=\"c.color\"\n      [bandColor]=\"c.bandColor\"\n      [textColor]=\"c.textColor\"\n      [data]=\"c.data\"\n      [label]=\"c.label\"\n      [medianSize]=\"medianSize\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n    />\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    innerPadding: [{\n      type: Input\n    }],\n    cardColor: [{\n      type: Input\n    }],\n    bandColor: [{\n      type: Input\n    }],\n    emptyColor: [{\n      type: Input\n    }],\n    textColor: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})();\n\nclass NumberCardComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.emptyColor = 'rgba(0, 0, 0, 0)';\n    this.innerPadding = 15;\n    this.margin = [10, 10, 10, 10];\n  }\n\n  get clickable() {\n    return !!this.select.observers.length;\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n    this.formatDates();\n    this.domain = this.getDomain();\n    this.setColors();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    const size = gridSize(this.dims, this.results.length, 150);\n    const N = size[0] * size[1];\n    const data = this.results.slice();\n\n    while (data.length < N) {\n      data.push({\n        value: null\n      });\n    }\n\n    this.data = gridLayout(this.dims, data, 150, this.designatedTotal);\n  }\n\n  getDomain() {\n    return this.results.map(d => d.label);\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n}\n\nNumberCardComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵNumberCardComponent_BaseFactory;\n  return function NumberCardComponent_Factory(t) {\n    return (ɵNumberCardComponent_BaseFactory || (ɵNumberCardComponent_BaseFactory = i0.ɵɵgetInheritedFactory(NumberCardComponent)))(t || NumberCardComponent);\n  };\n}();\n\nNumberCardComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NumberCardComponent,\n  selectors: [[\"ngx-charts-number-card\"]],\n  inputs: {\n    cardColor: \"cardColor\",\n    bandColor: \"bandColor\",\n    emptyColor: \"emptyColor\",\n    innerPadding: \"innerPadding\",\n    textColor: \"textColor\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    designatedTotal: \"designatedTotal\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 20,\n  consts: [[3, \"view\", \"showLegend\", \"animations\"], [1, \"number-card\", \"chart\"], [\"ngx-charts-card-series\", \"\", 3, \"colors\", \"cardColor\", \"bandColor\", \"textColor\", \"emptyColor\", \"data\", \"dims\", \"innerPadding\", \"valueFormatting\", \"labelFormatting\", \"animations\", \"select\"]],\n  template: function NumberCardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵelementStart(2, \"g\", 2);\n      i0.ɵɵlistener(\"select\", function NumberCardComponent_Template__svg_g_select_2_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(17, _c24, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassProp(\"clickable\", ctx.clickable);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"colors\", ctx.colors)(\"cardColor\", ctx.cardColor)(\"bandColor\", ctx.bandColor)(\"textColor\", ctx.textColor)(\"emptyColor\", ctx.emptyColor)(\"data\", ctx.data)(\"dims\", ctx.dims)(\"innerPadding\", ctx.innerPadding)(\"valueFormatting\", ctx.valueFormatting)(\"labelFormatting\", ctx.labelFormatting)(\"animations\", ctx.animations);\n    }\n  },\n  directives: [ChartComponent, CardSeriesComponent],\n  styles: [_c25, \"ngx-charts-number-card .cell .trimmed-label{font-size:12px;pointer-events:none;overflow:hidden;text-align:left;line-height:1em}ngx-charts-number-card .cell .trimmed-label p{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;width:100%;padding:0;margin:0}ngx-charts-number-card .cell .value-text{pointer-events:none}ngx-charts-number-card .number-card.clickable .cell .card,ngx-charts-number-card .number-card.clickable .cell .card-band{cursor:pointer}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NumberCardComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-number-card',\n      template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"number-card chart\" [class.clickable]=\"clickable\">\n        <svg:g\n          ngx-charts-card-series\n          [colors]=\"colors\"\n          [cardColor]=\"cardColor\"\n          [bandColor]=\"bandColor\"\n          [textColor]=\"textColor\"\n          [emptyColor]=\"emptyColor\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [innerPadding]=\"innerPadding\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \"ngx-charts-number-card .cell .trimmed-label{font-size:12px;pointer-events:none;overflow:hidden;text-align:left;line-height:1em}ngx-charts-number-card .cell .trimmed-label p{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;width:100%;padding:0;margin:0}ngx-charts-number-card .cell .value-text{pointer-events:none}ngx-charts-number-card .number-card.clickable .cell .card,ngx-charts-number-card .number-card.clickable .cell .card-band{cursor:pointer}\\n\"]\n    }]\n  }], null, {\n    cardColor: [{\n      type: Input\n    }],\n    bandColor: [{\n      type: Input\n    }],\n    emptyColor: [{\n      type: Input\n    }],\n    innerPadding: [{\n      type: Input\n    }],\n    textColor: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    designatedTotal: [{\n      type: Input\n    }]\n  });\n})();\n\nclass NumberCardModule {}\n\nNumberCardModule.ɵfac = function NumberCardModule_Factory(t) {\n  return new (t || NumberCardModule)();\n};\n\nNumberCardModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NumberCardModule\n});\nNumberCardModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NumberCardModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [CardComponent, CardSeriesComponent, NumberCardComponent],\n      exports: [CardComponent, CardSeriesComponent, NumberCardComponent]\n    }]\n  }], null, null);\n})();\n\nclass TreeMapCellComponent {\n  constructor(element) {\n    this.gradient = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.initialized = false;\n    this.orientation = BarOrientation;\n    this.element = element.nativeElement;\n  }\n\n  ngOnChanges() {\n    this.update();\n\n    this.valueFormatting = this.valueFormatting || (value => value.toLocaleString());\n\n    const labelFormatting = this.labelFormatting || (cell => escapeLabel(trimLabel(cell.label, 55)));\n\n    const cellData = {\n      data: this.data,\n      label: this.label,\n      value: this.value\n    };\n    this.formattedValue = this.valueFormatting(cellData.value);\n    this.formattedLabel = labelFormatting(cellData);\n    this.gradientId = 'grad' + id().toString();\n    this.gradientUrl = `url(#${this.gradientId})`;\n    this.gradientStops = this.getGradientStops();\n  }\n\n  update() {\n    if (this.initialized) {\n      this.animateToCurrentForm();\n    } else {\n      if (this.animations) {\n        this.loadAnimation();\n      }\n\n      this.initialized = true;\n    }\n  }\n\n  loadAnimation() {\n    const node = select(this.element).select('.cell');\n    node.attr('opacity', 0).attr('x', this.x).attr('y', this.y);\n    this.animateToCurrentForm();\n  }\n\n  getTextColor() {\n    return invertColor(this.fill);\n  }\n\n  animateToCurrentForm() {\n    const node = select(this.element).select('.cell');\n\n    if (this.animations) {\n      node.transition().duration(750).attr('opacity', 1).attr('x', this.x).attr('y', this.y).attr('width', this.width).attr('height', this.height);\n    } else {\n      node.attr('opacity', 1).attr('x', this.x).attr('y', this.y).attr('width', this.width).attr('height', this.height);\n    }\n  }\n\n  onClick() {\n    this.select.emit(this.data);\n  }\n\n  getGradientStops() {\n    return [{\n      offset: 0,\n      color: this.fill,\n      opacity: 0.3\n    }, {\n      offset: 100,\n      color: this.fill,\n      opacity: 1\n    }];\n  }\n\n}\n\nTreeMapCellComponent.ɵfac = function TreeMapCellComponent_Factory(t) {\n  return new (t || TreeMapCellComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nTreeMapCellComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TreeMapCellComponent,\n  selectors: [[\"g\", \"ngx-charts-tree-map-cell\", \"\"]],\n  inputs: {\n    data: \"data\",\n    fill: \"fill\",\n    x: \"x\",\n    y: \"y\",\n    width: \"width\",\n    height: \"height\",\n    label: \"label\",\n    value: \"value\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    gradient: \"gradient\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c48,\n  decls: 4,\n  vars: 7,\n  consts: [[4, \"ngIf\"], [1, \"cell\", 3, \"click\"], [\"class\", \"treemap-label\", 3, \"pointer-events\", 4, \"ngIf\"], [\"ngx-charts-svg-linear-gradient\", \"\", 3, \"orientation\", \"name\", \"stops\"], [1, \"treemap-label\"], [1, \"treemap-label\", 3, \"innerHTML\"], [\"class\", \"treemap-val\", \"ngx-charts-count-up\", \"\", 3, \"countTo\", \"valueFormatting\", 4, \"ngIf\"], [\"class\", \"treemap-val\", 4, \"ngIf\"], [\"ngx-charts-count-up\", \"\", 1, \"treemap-val\", 3, \"countTo\", \"valueFormatting\"], [1, \"treemap-val\"]],\n  template: function TreeMapCellComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\");\n      i0.ɵɵtemplate(1, TreeMapCellComponent__svg_defs_1_Template, 2, 3, \"defs\", 0);\n      i0.ɵɵelementStart(2, \"rect\", 1);\n      i0.ɵɵlistener(\"click\", function TreeMapCellComponent_Template__svg_rect_click_2_listener() {\n        return ctx.onClick();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, TreeMapCellComponent__svg_foreignObject_3_Template, 6, 15, \"foreignObject\", 2);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.gradient);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"fill\", ctx.gradient ? ctx.gradientUrl : ctx.fill)(\"width\", ctx.width)(\"height\", ctx.height)(\"x\", ctx.x)(\"y\", ctx.y);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.width >= 70 && ctx.height >= 35);\n    }\n  },\n  directives: [i2.NgIf, SvgLinearGradientComponent, CountUpDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMapCellComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-tree-map-cell]',\n      template: `\n    <svg:g>\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"orientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n      <svg:foreignObject\n        *ngIf=\"width >= 70 && height >= 35\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"treemap-label\"\n        [style.pointer-events]=\"'none'\"\n      >\n        <xhtml:p [style.color]=\"getTextColor()\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\n          <xhtml:span class=\"treemap-label\" [innerHTML]=\"formattedLabel\"> </xhtml:span>\n          <xhtml:br />\n          <xhtml:span\n            *ngIf=\"animations\"\n            class=\"treemap-val\"\n            ngx-charts-count-up\n            [countTo]=\"value\"\n            [valueFormatting]=\"valueFormatting\"\n          >\n          </xhtml:span>\n          <xhtml:span *ngIf=\"!animations\" class=\"treemap-val\">\n            {{ formattedValue }}\n          </xhtml:span>\n        </xhtml:p>\n      </svg:foreignObject>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, {\n    data: [{\n      type: Input\n    }],\n    fill: [{\n      type: Input\n    }],\n    x: [{\n      type: Input\n    }],\n    y: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    height: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})();\n\nclass TreeMapCellSeriesComponent {\n  constructor() {\n    this.gradient = false;\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.styleTypes = StyleTypes;\n    this.placementTypes = PlacementTypes;\n  }\n\n  ngOnChanges(changes) {\n    this.cells = this.getCells();\n  }\n\n  getCells() {\n    return this.data.children.filter(d => {\n      return d.depth === 1;\n    }).map((d, index) => {\n      const label = d.id;\n      return {\n        data: d.data,\n        x: d.x0,\n        y: d.y0,\n        width: d.x1 - d.x0,\n        height: d.y1 - d.y0,\n        fill: this.colors.getColor(label),\n        label,\n        value: d.value\n      };\n    });\n  }\n\n  getTooltipText({\n    label,\n    value\n  }) {\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  trackBy(index, item) {\n    return item.label;\n  }\n\n}\n\nTreeMapCellSeriesComponent.ɵfac = function TreeMapCellSeriesComponent_Factory(t) {\n  return new (t || TreeMapCellSeriesComponent)();\n};\n\nTreeMapCellSeriesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TreeMapCellSeriesComponent,\n  selectors: [[\"g\", \"ngx-charts-tree-map-cell-series\", \"\"]],\n  inputs: {\n    data: \"data\",\n    dims: \"dims\",\n    colors: \"colors\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    gradient: \"gradient\",\n    tooltipDisabled: \"tooltipDisabled\",\n    tooltipTemplate: \"tooltipTemplate\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c49,\n  decls: 1,\n  vars: 2,\n  consts: [[\"ngx-charts-tree-map-cell\", \"\", \"ngx-tooltip\", \"\", 3, \"data\", \"x\", \"y\", \"width\", \"height\", \"fill\", \"label\", \"value\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-tree-map-cell\", \"\", \"ngx-tooltip\", \"\", 3, \"data\", \"x\", \"y\", \"width\", \"height\", \"fill\", \"label\", \"value\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"animations\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\"]],\n  template: function TreeMapCellSeriesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, TreeMapCellSeriesComponent__svg_g_0_Template, 1, 18, \"g\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.cells)(\"ngForTrackBy\", ctx.trackBy);\n    }\n  },\n  directives: [i2.NgForOf, TreeMapCellComponent, TooltipDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMapCellSeriesComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-tree-map-cell-series]',\n      template: `\n    <svg:g\n      ngx-charts-tree-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [data]=\"c.data\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [label]=\"c.label\"\n      [value]=\"c.value\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"c.data\"\n    ></svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    data: [{\n      type: Input\n    }],\n    dims: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }]\n  });\n})();\n\nclass TreeMapComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.tooltipDisabled = false;\n    this.gradient = false;\n    this.select = new EventEmitter();\n    this.margin = [10, 10, 10, 10];\n  }\n\n  update() {\n    super.update();\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n    this.domain = this.getDomain();\n    this.treemap = treemap().size([this.dims.width, this.dims.height]);\n    const rootNode = {\n      name: 'root',\n      value: 0,\n      isRoot: true\n    };\n    const root = stratify().id(d => {\n      let label = d.name;\n\n      if (label.constructor.name === 'Date') {\n        label = label.toLocaleDateString();\n      } else {\n        label = label.toLocaleString();\n      }\n\n      return label;\n    }).parentId(d => d.isRoot ? null : 'root')([rootNode, ...this.results]).sum(d => d.value);\n    this.data = this.treemap(root);\n    this.setColors();\n    this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n  }\n\n  getDomain() {\n    return this.results.map(d => d.name);\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n}\n\nTreeMapComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵTreeMapComponent_BaseFactory;\n  return function TreeMapComponent_Factory(t) {\n    return (ɵTreeMapComponent_BaseFactory || (ɵTreeMapComponent_BaseFactory = i0.ɵɵgetInheritedFactory(TreeMapComponent)))(t || TreeMapComponent);\n  };\n}();\n\nTreeMapComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TreeMapComponent,\n  selectors: [[\"ngx-charts-tree-map\"]],\n  contentQueries: function TreeMapComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  inputs: {\n    results: \"results\",\n    tooltipDisabled: \"tooltipDisabled\",\n    valueFormatting: \"valueFormatting\",\n    labelFormatting: \"labelFormatting\",\n    gradient: \"gradient\"\n  },\n  outputs: {\n    select: \"select\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 3,\n  vars: 16,\n  consts: [[3, \"view\", \"showLegend\", \"animations\"], [1, \"tree-map\", \"chart\"], [\"ngx-charts-tree-map-cell-series\", \"\", 3, \"colors\", \"data\", \"dims\", \"tooltipDisabled\", \"tooltipTemplate\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"animations\", \"select\"]],\n  template: function TreeMapComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵelementStart(2, \"g\", 2);\n      i0.ɵɵlistener(\"select\", function TreeMapComponent_Template__svg_g_select_2_listener($event) {\n        return ctx.onClick($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(13, _c24, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"colors\", ctx.colors)(\"data\", ctx.data)(\"dims\", ctx.dims)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipTemplate\", ctx.tooltipTemplate)(\"valueFormatting\", ctx.valueFormatting)(\"labelFormatting\", ctx.labelFormatting)(\"gradient\", ctx.gradient)(\"animations\", ctx.animations);\n    }\n  },\n  directives: [ChartComponent, TreeMapCellSeriesComponent],\n  styles: [\".tree-map .treemap-val{font-size:1.3em;padding-top:5px;display:inline-block}.tree-map .treemap-label p{display:table-cell;text-align:center;line-height:1.2em;vertical-align:middle}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMapComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-tree-map',\n      template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\n        <svg:g\n          ngx-charts-tree-map-cell-series\n          [colors]=\"colors\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".tree-map .treemap-val{font-size:1.3em;padding-top:5px;display:inline-block}.tree-map .treemap-label p{display:table-cell;text-align:center;line-height:1.2em;vertical-align:middle}\\n\"]\n    }]\n  }], null, {\n    results: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    labelFormatting: [{\n      type: Input\n    }],\n    gradient: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }]\n  });\n})();\n\nclass TreeMapModule {}\n\nTreeMapModule.ɵfac = function TreeMapModule_Factory(t) {\n  return new (t || TreeMapModule)();\n};\n\nTreeMapModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: TreeMapModule\n});\nTreeMapModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMapModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule],\n      declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent],\n      exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent]\n    }]\n  }], null, null);\n})();\n\nvar ElementType;\n\n(function (ElementType) {\n  ElementType[\"Value\"] = \"value\";\n  ElementType[\"Units\"] = \"units\";\n})(ElementType || (ElementType = {}));\n\nclass LinearGaugeComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.min = 0;\n    this.max = 100;\n    this.value = 0;\n    this.margin = [10, 20, 10, 20];\n    this.valueResizeScale = 1;\n    this.unitsResizeScale = 1;\n    this.valueTextTransform = '';\n    this.valueTranslate = '';\n    this.unitsTextTransform = '';\n    this.unitsTranslate = '';\n    this.barOrientation = BarOrientation;\n  }\n\n  ngAfterViewInit() {\n    super.ngAfterViewInit();\n    setTimeout(() => {\n      this.scaleText(ElementType.Value);\n      this.scaleText(ElementType.Units);\n    });\n  }\n\n  update() {\n    super.update();\n    this.hasPreviousValue = this.previousValue !== undefined;\n    this.max = Math.max(this.max, this.value);\n    this.min = Math.min(this.min, this.value);\n\n    if (this.hasPreviousValue) {\n      this.max = Math.max(this.max, this.previousValue);\n      this.min = Math.min(this.min, this.previousValue);\n    }\n\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin\n    });\n    this.valueDomain = this.getValueDomain();\n    this.valueScale = this.getValueScale();\n    this.displayValue = this.getDisplayValue();\n    this.setColors();\n    const xOffset = this.margin[3] + this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n    this.transform = `translate(${xOffset}, ${yOffset})`;\n    this.transformLine = `translate(${this.margin[3] + this.valueScale(this.previousValue)}, ${yOffset})`;\n    this.valueTranslate = `translate(0, -15)`;\n    this.unitsTranslate = `translate(0, 15)`;\n\n    if (isPlatformServer(this.platformId)) {\n      this.scaleTextSSR('value');\n      this.scaleTextSSR('units');\n    } else {\n      setTimeout(() => this.scaleText(ElementType.Value), 50);\n      setTimeout(() => this.scaleText(ElementType.Units), 50);\n    }\n  }\n\n  getValueDomain() {\n    return [this.min, this.max];\n  }\n\n  getValueScale() {\n    return scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n  }\n\n  getDisplayValue() {\n    if (this.valueFormatting) {\n      return this.valueFormatting(this.value);\n    }\n\n    return this.value.toLocaleString();\n  }\n\n  scaleText(element, repeat = true) {\n    let el;\n    let resizeScale;\n\n    if (element === ElementType.Value) {\n      el = this.valueTextEl;\n      resizeScale = this.valueResizeScale;\n    } else {\n      el = this.unitsTextEl;\n      resizeScale = this.unitsResizeScale;\n    }\n\n    const {\n      width,\n      height\n    } = el.nativeElement.getBoundingClientRect();\n    if (width === 0 || height === 0) return;\n    const oldScale = resizeScale;\n    const availableWidth = this.dims.width;\n    const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n    const resizeScaleWidth = Math.floor(availableWidth / (width / resizeScale) * 100) / 100;\n    const resizeScaleHeight = Math.floor(availableHeight / (height / resizeScale) * 100) / 100;\n    resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n\n    if (resizeScale !== oldScale) {\n      if (element === ElementType.Value) {\n        this.valueResizeScale = resizeScale;\n        this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n      } else {\n        this.unitsResizeScale = resizeScale;\n        this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n      }\n\n      this.cd.markForCheck();\n\n      if (repeat && isPlatformBrowser(this.platformId)) {\n        setTimeout(() => {\n          this.scaleText(element, false);\n        }, 50);\n      }\n    }\n  }\n\n  scaleTextSSR(element) {\n    let resizeScale = 1;\n    const value = element === 'value' ? this.displayValue : this.units;\n    const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, value, 10);\n    const height = 25;\n    const availableWidth = this.dims.width;\n    const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n    const resizeScaleWidth = Math.floor(availableWidth / (width / resizeScale) * 100) / 100;\n    const resizeScaleHeight = Math.floor(availableHeight / (height / resizeScale) * 100) / 100;\n    resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n\n    if (element === 'value') {\n      this.valueResizeScale = resizeScale;\n      this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n    } else {\n      this.unitsResizeScale = resizeScale;\n      this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n    }\n\n    this.cd.markForCheck();\n  }\n\n  onClick() {\n    this.select.emit({\n      name: 'Value',\n      value: this.value\n    });\n  }\n\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, [this.value], this.customColors);\n  }\n\n}\n\nLinearGaugeComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵLinearGaugeComponent_BaseFactory;\n  return function LinearGaugeComponent_Factory(t) {\n    return (ɵLinearGaugeComponent_BaseFactory || (ɵLinearGaugeComponent_BaseFactory = i0.ɵɵgetInheritedFactory(LinearGaugeComponent)))(t || LinearGaugeComponent);\n  };\n}();\n\nLinearGaugeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: LinearGaugeComponent,\n  selectors: [[\"ngx-charts-linear-gauge\"]],\n  viewQuery: function LinearGaugeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c50, 5);\n      i0.ɵɵviewQuery(_c51, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.valueTextEl = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.unitsTextEl = _t.first);\n    }\n  },\n  inputs: {\n    min: \"min\",\n    max: \"max\",\n    value: \"value\",\n    units: \"units\",\n    previousValue: \"previousValue\",\n    valueFormatting: \"valueFormatting\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 15,\n  vars: 38,\n  consts: [[3, \"view\", \"showLegend\", \"animations\", \"click\"], [1, \"linear-gauge\", \"chart\"], [\"ngx-charts-bar\", \"\", 1, \"background-bar\", 3, \"width\", \"height\", \"x\", \"y\", \"data\", \"orientation\", \"roundEdges\", \"animations\"], [\"ngx-charts-bar\", \"\", 3, \"width\", \"height\", \"x\", \"y\", \"fill\", \"data\", \"orientation\", \"roundEdges\", \"animations\"], [\"x1\", \"0\", \"y1\", \"5\", \"x2\", \"0\", \"y2\", \"15\", 4, \"ngIf\"], [\"x1\", \"0\", \"y1\", \"-5\", \"x2\", \"0\", \"y2\", \"-15\", 4, \"ngIf\"], [\"alignment-baseline\", \"after-edge\", 1, \"value\"], [\"valueTextEl\", \"\"], [\"alignment-baseline\", \"before-edge\", 1, \"units\"], [\"unitsTextEl\", \"\"], [\"x1\", \"0\", \"y1\", \"5\", \"x2\", \"0\", \"y2\", \"15\"], [\"x1\", \"0\", \"y1\", \"-5\", \"x2\", \"0\", \"y2\", \"-15\"]],\n  template: function LinearGaugeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"click\", function LinearGaugeComponent_Template_ngx_charts_chart_click_0_listener() {\n        return ctx.onClick();\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵelement(2, \"g\", 2);\n      i0.ɵɵelement(3, \"g\", 3);\n      i0.ɵɵtemplate(4, LinearGaugeComponent__svg_line_4_Template, 1, 2, \"line\", 4);\n      i0.ɵɵtemplate(5, LinearGaugeComponent__svg_line_5_Template, 1, 2, \"line\", 5);\n      i0.ɵɵelementStart(6, \"g\");\n      i0.ɵɵelementStart(7, \"g\");\n      i0.ɵɵelementStart(8, \"text\", 6, 7);\n      i0.ɵɵtext(10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"g\");\n      i0.ɵɵelementStart(12, \"text\", 8, 9);\n      i0.ɵɵtext(14);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(33, _c24, ctx.width, ctx.height))(\"showLegend\", false)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"width\", ctx.dims.width)(\"height\", 3)(\"x\", ctx.margin[3])(\"y\", ctx.dims.height / 2 + ctx.margin[0] - 2)(\"data\", i0.ɵɵpureFunction0(36, _c52))(\"orientation\", ctx.barOrientation.Horizontal)(\"roundEdges\", true)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"width\", ctx.valueScale(ctx.value))(\"height\", 3)(\"x\", ctx.margin[3])(\"y\", ctx.dims.height / 2 + ctx.margin[0] - 2)(\"fill\", ctx.colors.getColor(ctx.units))(\"data\", i0.ɵɵpureFunction0(37, _c52))(\"orientation\", ctx.barOrientation.Horizontal)(\"roundEdges\", true)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasPreviousValue);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.hasPreviousValue);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.valueTranslate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"text-anchor\", \"middle\");\n      i0.ɵɵattribute(\"transform\", ctx.valueTextTransform);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.displayValue, \" \");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.unitsTranslate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵstyleProp(\"text-anchor\", \"middle\");\n      i0.ɵɵattribute(\"transform\", ctx.unitsTextTransform);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.units, \" \");\n    }\n  },\n  directives: [ChartComponent, BarComponent, i2.NgIf],\n  styles: [_c25, \".linear-gauge{cursor:pointer}.linear-gauge .background-bar path{fill:#0000000d}.linear-gauge .units{fill:#666}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LinearGaugeComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-linear-gauge',\n      template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\" (click)=\"onClick()\">\n      <svg:g class=\"linear-gauge chart\">\n        <svg:g\n          ngx-charts-bar\n          class=\"background-bar\"\n          [width]=\"dims.width\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-bar\n          [width]=\"valueScale(value)\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [fill]=\"colors.getColor(units)\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"5\"\n          x2=\"0\"\n          y2=\"15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"-5\"\n          x2=\"0\"\n          y2=\"-15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:g [attr.transform]=\"transform\">\n          <svg:g [attr.transform]=\"valueTranslate\">\n            <svg:text\n              #valueTextEl\n              class=\"value\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"valueTextTransform\"\n              alignment-baseline=\"after-edge\"\n            >\n              {{ displayValue }}\n            </svg:text>\n          </svg:g>\n\n          <svg:g [attr.transform]=\"unitsTranslate\">\n            <svg:text\n              #unitsTextEl\n              class=\"units\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"unitsTextTransform\"\n              alignment-baseline=\"before-edge\"\n            >\n              {{ units }}\n            </svg:text>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".linear-gauge{cursor:pointer}.linear-gauge .background-bar path{fill:#0000000d}.linear-gauge .units{fill:#666}\\n\"]\n    }]\n  }], null, {\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    units: [{\n      type: Input\n    }],\n    previousValue: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    valueTextEl: [{\n      type: ViewChild,\n      args: ['valueTextEl']\n    }],\n    unitsTextEl: [{\n      type: ViewChild,\n      args: ['unitsTextEl']\n    }]\n  });\n})();\n\nclass GaugeArcComponent {\n  constructor() {\n    this.isActive = false;\n    this.tooltipDisabled = false;\n    this.animations = true;\n    this.select = new EventEmitter();\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.placementTypes = PlacementTypes;\n    this.styleTypes = StyleTypes;\n  }\n\n  tooltipText(arc) {\n    const label = formatLabel(arc.data.name);\n    let val;\n\n    if (this.valueFormatting) {\n      val = this.valueFormatting(arc.data.value);\n    } else {\n      val = formatLabel(arc.data.value);\n    }\n\n    return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n  }\n\n}\n\nGaugeArcComponent.ɵfac = function GaugeArcComponent_Factory(t) {\n  return new (t || GaugeArcComponent)();\n};\n\nGaugeArcComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GaugeArcComponent,\n  selectors: [[\"g\", \"ngx-charts-gauge-arc\", \"\"]],\n  inputs: {\n    backgroundArc: \"backgroundArc\",\n    valueArc: \"valueArc\",\n    cornerRadius: \"cornerRadius\",\n    colors: \"colors\",\n    isActive: \"isActive\",\n    tooltipDisabled: \"tooltipDisabled\",\n    valueFormatting: \"valueFormatting\",\n    tooltipTemplate: \"tooltipTemplate\",\n    animations: \"animations\"\n  },\n  outputs: {\n    select: \"select\",\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  attrs: _c53,\n  decls: 2,\n  vars: 23,\n  consts: [[\"ngx-charts-pie-arc\", \"\", 1, \"background-arc\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"data\", \"animate\", \"pointerEvents\"], [\"ngx-charts-pie-arc\", \"\", \"ngx-tooltip\", \"\", 3, \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"fill\", \"data\", \"animate\", \"isActive\", \"tooltipDisabled\", \"tooltipPlacement\", \"tooltipType\", \"tooltipTitle\", \"tooltipTemplate\", \"tooltipContext\", \"select\", \"activate\", \"deactivate\"]],\n  template: function GaugeArcComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelement(0, \"g\", 0);\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵlistener(\"select\", function GaugeArcComponent_Template__svg_g_select_1_listener($event) {\n        return ctx.select.emit($event);\n      })(\"activate\", function GaugeArcComponent_Template__svg_g_activate_1_listener($event) {\n        return ctx.activate.emit($event);\n      })(\"deactivate\", function GaugeArcComponent_Template__svg_g_deactivate_1_listener($event) {\n        return ctx.deactivate.emit($event);\n      });\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"startAngle\", 0)(\"endAngle\", ctx.backgroundArc.endAngle)(\"innerRadius\", ctx.backgroundArc.innerRadius)(\"outerRadius\", ctx.backgroundArc.outerRadius)(\"cornerRadius\", ctx.cornerRadius)(\"data\", ctx.backgroundArc.data)(\"animate\", false)(\"pointerEvents\", false);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"startAngle\", 0)(\"endAngle\", ctx.valueArc.endAngle)(\"innerRadius\", ctx.valueArc.innerRadius)(\"outerRadius\", ctx.valueArc.outerRadius)(\"cornerRadius\", ctx.cornerRadius)(\"fill\", ctx.colors.getColor(ctx.valueArc.data.name))(\"data\", ctx.valueArc.data)(\"animate\", ctx.animations)(\"isActive\", ctx.isActive)(\"tooltipDisabled\", ctx.tooltipDisabled)(\"tooltipPlacement\", ctx.placementTypes.Top)(\"tooltipType\", ctx.styleTypes.tooltip)(\"tooltipTitle\", ctx.tooltipTemplate ? undefined : ctx.tooltipText(ctx.valueArc))(\"tooltipTemplate\", ctx.tooltipTemplate)(\"tooltipContext\", ctx.valueArc.data);\n    }\n  },\n  directives: [PieArcComponent, TooltipDirective],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GaugeArcComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-gauge-arc]',\n      template: `\n    <svg:g\n      ngx-charts-pie-arc\n      class=\"background-arc\"\n      [startAngle]=\"0\"\n      [endAngle]=\"backgroundArc.endAngle\"\n      [innerRadius]=\"backgroundArc.innerRadius\"\n      [outerRadius]=\"backgroundArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [data]=\"backgroundArc.data\"\n      [animate]=\"false\"\n      [pointerEvents]=\"false\"\n    ></svg:g>\n    <svg:g\n      ngx-charts-pie-arc\n      [startAngle]=\"0\"\n      [endAngle]=\"valueArc.endAngle\"\n      [innerRadius]=\"valueArc.innerRadius\"\n      [outerRadius]=\"valueArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [fill]=\"colors.getColor(valueArc.data.name)\"\n      [data]=\"valueArc.data\"\n      [animate]=\"animations\"\n      [isActive]=\"isActive\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(valueArc)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"valueArc.data\"\n    ></svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    backgroundArc: [{\n      type: Input\n    }],\n    valueArc: [{\n      type: Input\n    }],\n    cornerRadius: [{\n      type: Input\n    }],\n    colors: [{\n      type: Input\n    }],\n    isActive: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    tooltipTemplate: [{\n      type: Input\n    }],\n    animations: [{\n      type: Input\n    }],\n    select: [{\n      type: Output\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }]\n  });\n})();\n\nclass GaugeAxisComponent {\n  constructor() {\n    this.rotate = '';\n  }\n\n  ngOnChanges(changes) {\n    this.update();\n  }\n\n  update() {\n    this.rotationAngle = -90 + this.startAngle;\n    this.rotate = `rotate(${this.rotationAngle})`;\n    this.ticks = this.getTicks();\n  }\n\n  getTicks() {\n    const bigTickSegment = this.angleSpan / this.bigSegments;\n    const smallTickSegment = bigTickSegment / this.smallSegments;\n    const tickLength = 20;\n    const ticks = {\n      big: [],\n      small: []\n    };\n    const startDistance = this.radius + 10;\n    const textDist = startDistance + tickLength + 10;\n\n    for (let i = 0; i <= this.bigSegments; i++) {\n      const angleDeg = i * bigTickSegment;\n      const angle = angleDeg * Math.PI / 180;\n      const textAnchor = this.getTextAnchor(angleDeg);\n      let skip = false;\n\n      if (i === 0 && this.angleSpan === 360) {\n        skip = true;\n      }\n\n      if (!skip) {\n        let text = Number.parseFloat(this.valueScale.invert(angleDeg).toString()).toLocaleString();\n\n        if (this.tickFormatting) {\n          text = this.tickFormatting(text);\n        }\n\n        ticks.big.push({\n          line: this.getTickPath(startDistance, tickLength, angle),\n          textAnchor,\n          text,\n          textTransform: `\n            translate(${textDist * Math.cos(angle)}, ${textDist * Math.sin(angle)}) rotate(${-this.rotationAngle})\n          `\n        });\n      }\n\n      if (i === this.bigSegments) {\n        continue;\n      }\n\n      for (let j = 1; j <= this.smallSegments; j++) {\n        const smallAngleDeg = angleDeg + j * smallTickSegment;\n        const smallAngle = smallAngleDeg * Math.PI / 180;\n        ticks.small.push({\n          line: this.getTickPath(startDistance, tickLength / 2, smallAngle)\n        });\n      }\n    }\n\n    return ticks;\n  }\n\n  getTextAnchor(angle) {\n    // [0, 45] = 'middle';\n    // [46, 135] = 'start';\n    // [136, 225] = 'middle';\n    // [226, 315] = 'end';\n    angle = (this.startAngle + angle) % 360;\n    let textAnchor = TextAnchor.Middle;\n\n    if (angle > 45 && angle <= 135) {\n      textAnchor = TextAnchor.Start;\n    } else if (angle > 225 && angle <= 315) {\n      textAnchor = TextAnchor.End;\n    }\n\n    return textAnchor;\n  }\n\n  getTickPath(startDistance, tickLength, angle) {\n    const y1 = startDistance * Math.sin(angle);\n    const y2 = (startDistance + tickLength) * Math.sin(angle);\n    const x1 = startDistance * Math.cos(angle);\n    const x2 = (startDistance + tickLength) * Math.cos(angle);\n    const points = [{\n      x: x1,\n      y: y1\n    }, {\n      x: x2,\n      y: y2\n    }];\n    const lineGenerator = line().x(d => d.x).y(d => d.y);\n    return lineGenerator(points);\n  }\n\n}\n\nGaugeAxisComponent.ɵfac = function GaugeAxisComponent_Factory(t) {\n  return new (t || GaugeAxisComponent)();\n};\n\nGaugeAxisComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GaugeAxisComponent,\n  selectors: [[\"g\", \"ngx-charts-gauge-axis\", \"\"]],\n  inputs: {\n    bigSegments: \"bigSegments\",\n    smallSegments: \"smallSegments\",\n    min: \"min\",\n    max: \"max\",\n    angleSpan: \"angleSpan\",\n    startAngle: \"startAngle\",\n    radius: \"radius\",\n    valueScale: \"valueScale\",\n    tickFormatting: \"tickFormatting\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  attrs: _c54,\n  decls: 4,\n  vars: 4,\n  consts: [[\"class\", \"gauge-tick gauge-tick-large\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"gauge-tick gauge-tick-small\", 4, \"ngFor\", \"ngForOf\"], [1, \"gauge-tick\", \"gauge-tick-large\"], [\"alignment-baseline\", \"central\"], [1, \"gauge-tick\", \"gauge-tick-small\"]],\n  template: function GaugeAxisComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(0, \"g\");\n      i0.ɵɵtemplate(1, GaugeAxisComponent__svg_g_1_Template, 2, 1, \"g\", 0);\n      i0.ɵɵtemplate(2, GaugeAxisComponent__svg_g_2_Template, 3, 4, \"g\", 0);\n      i0.ɵɵtemplate(3, GaugeAxisComponent__svg_g_3_Template, 2, 1, \"g\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"transform\", ctx.rotate);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks.big);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks.big);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ticks.small);\n    }\n  },\n  directives: [i2.NgForOf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GaugeAxisComponent, [{\n    type: Component,\n    args: [{\n      selector: 'g[ngx-charts-gauge-axis]',\n      template: `\n    <svg:g [attr.transform]=\"rotate\">\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:text\n          [style.textAnchor]=\"tick.textAnchor\"\n          [attr.transform]=\"tick.textTransform\"\n          alignment-baseline=\"central\"\n        >\n          {{ tick.text }}\n        </svg:text>\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.small\" class=\"gauge-tick gauge-tick-small\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n    </svg:g>\n  `,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], null, {\n    bigSegments: [{\n      type: Input\n    }],\n    smallSegments: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    angleSpan: [{\n      type: Input\n    }],\n    startAngle: [{\n      type: Input\n    }],\n    radius: [{\n      type: Input\n    }],\n    valueScale: [{\n      type: Input\n    }],\n    tickFormatting: [{\n      type: Input\n    }]\n  });\n})();\n\nclass GaugeComponent extends BaseChartComponent {\n  constructor() {\n    super(...arguments);\n    this.legend = false;\n    this.legendTitle = 'Legend';\n    this.legendPosition = LegendPosition.Right;\n    this.min = 0;\n    this.max = 100;\n    this.bigSegments = 10;\n    this.smallSegments = 5;\n    this.showAxis = true;\n    this.startAngle = -120;\n    this.angleSpan = 240;\n    this.activeEntries = [];\n    this.tooltipDisabled = false;\n    this.showText = true;\n    this.activate = new EventEmitter();\n    this.deactivate = new EventEmitter();\n    this.resizeScale = 1;\n    this.rotation = '';\n    this.textTransform = 'scale(1, 1)';\n    this.cornerRadius = 10;\n  }\n\n  ngAfterViewInit() {\n    super.ngAfterViewInit();\n    setTimeout(() => this.scaleText());\n  }\n\n  update() {\n    super.update();\n\n    if (!this.showAxis) {\n      if (!this.margin) {\n        this.margin = [10, 20, 10, 20];\n      }\n    } else {\n      if (!this.margin) {\n        this.margin = [60, 100, 60, 100];\n      }\n    } // make the starting angle positive\n\n\n    if (this.startAngle < 0) {\n      this.startAngle = this.startAngle % 360 + 360;\n    }\n\n    this.angleSpan = Math.min(this.angleSpan, 360);\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: this.margin,\n      showLegend: this.legend,\n      legendPosition: this.legendPosition\n    });\n    this.domain = this.getDomain();\n    this.valueDomain = this.getValueDomain();\n    this.valueScale = this.getValueScale();\n    this.displayValue = this.getDisplayValue();\n    this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2;\n    this.arcs = this.getArcs();\n    this.setColors();\n    this.legendOptions = this.getLegendOptions();\n    const xOffset = this.margin[3] + this.dims.width / 2;\n    const yOffset = this.margin[0] + this.dims.height / 2;\n    this.transform = `translate(${xOffset}, ${yOffset})`;\n    this.rotation = `rotate(${this.startAngle})`;\n    setTimeout(() => this.scaleText(), 50);\n  }\n\n  getArcs() {\n    const arcs = [];\n    const availableRadius = this.outerRadius * 0.7;\n    const radiusPerArc = Math.min(availableRadius / this.results.length, 10);\n    const arcWidth = radiusPerArc * 0.7;\n    this.textRadius = this.outerRadius - this.results.length * radiusPerArc;\n    this.cornerRadius = Math.floor(arcWidth / 2);\n    let i = 0;\n\n    for (const d of this.results) {\n      const outerRadius = this.outerRadius - i * radiusPerArc;\n      const innerRadius = outerRadius - arcWidth;\n      const backgroundArc = {\n        endAngle: this.angleSpan * Math.PI / 180,\n        innerRadius,\n        outerRadius,\n        data: {\n          value: this.max,\n          name: d.name\n        }\n      };\n      const valueArc = {\n        endAngle: Math.min(this.valueScale(d.value), this.angleSpan) * Math.PI / 180,\n        innerRadius,\n        outerRadius,\n        data: {\n          value: d.value,\n          name: d.name\n        }\n      };\n      const arc = {\n        backgroundArc,\n        valueArc\n      };\n      arcs.push(arc);\n      i++;\n    }\n\n    return arcs;\n  }\n\n  getDomain() {\n    return this.results.map(d => d.name);\n  }\n\n  getValueDomain() {\n    const values = this.results.map(d => d.value);\n    const dataMin = Math.min(...values);\n    const dataMax = Math.max(...values);\n\n    if (this.min !== undefined) {\n      this.min = Math.min(this.min, dataMin);\n    } else {\n      this.min = dataMin;\n    }\n\n    if (this.max !== undefined) {\n      this.max = Math.max(this.max, dataMax);\n    } else {\n      this.max = dataMax;\n    }\n\n    return [this.min, this.max];\n  }\n\n  getValueScale() {\n    return scaleLinear().range([0, this.angleSpan]).nice().domain(this.valueDomain);\n  }\n\n  getDisplayValue() {\n    const value = this.results.map(d => d.value).reduce((a, b) => a + b, 0);\n\n    if (this.textValue && 0 !== this.textValue.length) {\n      return this.textValue.toLocaleString();\n    }\n\n    if (this.valueFormatting) {\n      return this.valueFormatting(value);\n    }\n\n    return value.toLocaleString();\n  }\n\n  scaleText(repeat = true) {\n    if (!this.showText) {\n      return;\n    }\n\n    const {\n      width\n    } = this.textEl.nativeElement.getBoundingClientRect();\n    const oldScale = this.resizeScale;\n\n    if (width === 0) {\n      this.resizeScale = 1;\n    } else {\n      const availableSpace = this.textRadius;\n      this.resizeScale = Math.floor(availableSpace / (width / this.resizeScale) * 100) / 100;\n    }\n\n    if (this.resizeScale !== oldScale) {\n      this.textTransform = `scale(${this.resizeScale}, ${this.resizeScale})`;\n      this.cd.markForCheck();\n\n      if (repeat) {\n        setTimeout(() => this.scaleText(false), 50);\n      }\n    }\n  }\n\n  onClick(data) {\n    this.select.emit(data);\n  }\n\n  getLegendOptions() {\n    return {\n      scaleType: ScaleType.Ordinal,\n      colors: this.colors,\n      domain: this.domain,\n      title: this.legendTitle,\n      position: this.legendPosition\n    };\n  }\n\n  setColors() {\n    this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n  }\n\n  onActivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n\n    if (idx > -1) {\n      return;\n    }\n\n    this.activeEntries = [item, ...this.activeEntries];\n    this.activate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  onDeactivate(item) {\n    const idx = this.activeEntries.findIndex(d => {\n      return d.name === item.name && d.value === item.value;\n    });\n    this.activeEntries.splice(idx, 1);\n    this.activeEntries = [...this.activeEntries];\n    this.deactivate.emit({\n      value: item,\n      entries: this.activeEntries\n    });\n  }\n\n  isActive(entry) {\n    if (!this.activeEntries) return false;\n    const item = this.activeEntries.find(d => {\n      return entry.name === d.name && entry.series === d.series;\n    });\n    return item !== undefined;\n  }\n\n  trackBy(index, item) {\n    return item.valueArc.data.name;\n  }\n\n}\n\nGaugeComponent.ɵfac = /* @__PURE__ */function () {\n  let ɵGaugeComponent_BaseFactory;\n  return function GaugeComponent_Factory(t) {\n    return (ɵGaugeComponent_BaseFactory || (ɵGaugeComponent_BaseFactory = i0.ɵɵgetInheritedFactory(GaugeComponent)))(t || GaugeComponent);\n  };\n}();\n\nGaugeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: GaugeComponent,\n  selectors: [[\"ngx-charts-gauge\"]],\n  contentQueries: function GaugeComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, _c22, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipTemplate = _t.first);\n    }\n  },\n  viewQuery: function GaugeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c45, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.textEl = _t.first);\n    }\n  },\n  inputs: {\n    legend: \"legend\",\n    legendTitle: \"legendTitle\",\n    legendPosition: \"legendPosition\",\n    min: \"min\",\n    max: \"max\",\n    textValue: \"textValue\",\n    units: \"units\",\n    bigSegments: \"bigSegments\",\n    smallSegments: \"smallSegments\",\n    results: \"results\",\n    showAxis: \"showAxis\",\n    startAngle: \"startAngle\",\n    angleSpan: \"angleSpan\",\n    activeEntries: \"activeEntries\",\n    axisTickFormatting: \"axisTickFormatting\",\n    tooltipDisabled: \"tooltipDisabled\",\n    valueFormatting: \"valueFormatting\",\n    showText: \"showText\",\n    margin: \"margin\"\n  },\n  outputs: {\n    activate: \"activate\",\n    deactivate: \"deactivate\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 5,\n  vars: 13,\n  consts: [[3, \"view\", \"showLegend\", \"legendOptions\", \"activeEntries\", \"animations\", \"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"], [1, \"gauge\", \"chart\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"ngx-charts-gauge-axis\", \"\", 3, \"bigSegments\", \"smallSegments\", \"min\", \"max\", \"radius\", \"angleSpan\", \"valueScale\", \"startAngle\", \"tickFormatting\", 4, \"ngIf\"], [\"alignment-baseline\", \"central\", 3, \"textAnchor\", 4, \"ngIf\"], [\"ngx-charts-gauge-arc\", \"\", 3, \"backgroundArc\", \"valueArc\", \"cornerRadius\", \"colors\", \"isActive\", \"tooltipDisabled\", \"tooltipTemplate\", \"valueFormatting\", \"animations\", \"select\", \"activate\", \"deactivate\"], [\"ngx-charts-gauge-axis\", \"\", 3, \"bigSegments\", \"smallSegments\", \"min\", \"max\", \"radius\", \"angleSpan\", \"valueScale\", \"startAngle\", \"tickFormatting\"], [\"alignment-baseline\", \"central\"], [\"textEl\", \"\"], [\"x\", \"0\", \"dy\", \"0\"], [\"x\", \"0\", \"dy\", \"1.2em\"]],\n  template: function GaugeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ngx-charts-chart\", 0);\n      i0.ɵɵlistener(\"legendLabelClick\", function GaugeComponent_Template_ngx_charts_chart_legendLabelClick_0_listener($event) {\n        return ctx.onClick($event);\n      })(\"legendLabelActivate\", function GaugeComponent_Template_ngx_charts_chart_legendLabelActivate_0_listener($event) {\n        return ctx.onActivate($event);\n      })(\"legendLabelDeactivate\", function GaugeComponent_Template_ngx_charts_chart_legendLabelDeactivate_0_listener($event) {\n        return ctx.onDeactivate($event);\n      });\n      i0.ɵɵnamespaceSVG();\n      i0.ɵɵelementStart(1, \"g\", 1);\n      i0.ɵɵtemplate(2, GaugeComponent__svg_g_2_Template, 2, 10, \"g\", 2);\n      i0.ɵɵtemplate(3, GaugeComponent__svg_g_3_Template, 1, 9, \"g\", 3);\n      i0.ɵɵtemplate(4, GaugeComponent__svg_text_4_Template, 6, 5, \"text\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"view\", i0.ɵɵpureFunction2(10, _c24, ctx.width, ctx.height))(\"showLegend\", ctx.legend)(\"legendOptions\", ctx.legendOptions)(\"activeEntries\", ctx.activeEntries)(\"animations\", ctx.animations);\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"transform\", ctx.transform);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.arcs)(\"ngForTrackBy\", ctx.trackBy);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showAxis);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showText);\n    }\n  },\n  directives: [ChartComponent, i2.NgForOf, i2.NgIf, GaugeArcComponent, GaugeAxisComponent],\n  styles: [_c25, \".gauge .background-arc path{fill:#0000000d}.gauge .gauge-tick path{stroke:#666}.gauge .gauge-tick text{font-size:12px;fill:#666;font-weight:700}.gauge .gauge-tick-large path{stroke-width:2px}.gauge .gauge-tick-small path{stroke-width:1px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GaugeComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-charts-gauge',\n      template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"gauge chart\">\n        <svg:g *ngFor=\"let arc of arcs; trackBy: trackBy\" [attr.transform]=\"rotation\">\n          <svg:g\n            ngx-charts-gauge-arc\n            [backgroundArc]=\"arc.backgroundArc\"\n            [valueArc]=\"arc.valueArc\"\n            [cornerRadius]=\"cornerRadius\"\n            [colors]=\"colors\"\n            [isActive]=\"isActive(arc.valueArc.data)\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [valueFormatting]=\"valueFormatting\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          ></svg:g>\n        </svg:g>\n\n        <svg:g\n          ngx-charts-gauge-axis\n          *ngIf=\"showAxis\"\n          [bigSegments]=\"bigSegments\"\n          [smallSegments]=\"smallSegments\"\n          [min]=\"min\"\n          [max]=\"max\"\n          [radius]=\"outerRadius\"\n          [angleSpan]=\"angleSpan\"\n          [valueScale]=\"valueScale\"\n          [startAngle]=\"startAngle\"\n          [tickFormatting]=\"axisTickFormatting\"\n        ></svg:g>\n\n        <svg:text\n          #textEl\n          *ngIf=\"showText\"\n          [style.textAnchor]=\"'middle'\"\n          [attr.transform]=\"textTransform\"\n          alignment-baseline=\"central\"\n        >\n          <tspan x=\"0\" dy=\"0\">{{ displayValue }}</tspan>\n          <tspan x=\"0\" dy=\"1.2em\">{{ units }}</tspan>\n        </svg:text>\n      </svg:g>\n    </ngx-charts-chart>\n  `,\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".gauge .background-arc path{fill:#0000000d}.gauge .gauge-tick path{stroke:#666}.gauge .gauge-tick text{font-size:12px;fill:#666;font-weight:700}.gauge .gauge-tick-large path{stroke-width:2px}.gauge .gauge-tick-small path{stroke-width:1px}\\n\"]\n    }]\n  }], null, {\n    legend: [{\n      type: Input\n    }],\n    legendTitle: [{\n      type: Input\n    }],\n    legendPosition: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    textValue: [{\n      type: Input\n    }],\n    units: [{\n      type: Input\n    }],\n    bigSegments: [{\n      type: Input\n    }],\n    smallSegments: [{\n      type: Input\n    }],\n    results: [{\n      type: Input\n    }],\n    showAxis: [{\n      type: Input\n    }],\n    startAngle: [{\n      type: Input\n    }],\n    angleSpan: [{\n      type: Input\n    }],\n    activeEntries: [{\n      type: Input\n    }],\n    axisTickFormatting: [{\n      type: Input\n    }],\n    tooltipDisabled: [{\n      type: Input\n    }],\n    valueFormatting: [{\n      type: Input\n    }],\n    showText: [{\n      type: Input\n    }],\n    margin: [{\n      type: Input\n    }],\n    activate: [{\n      type: Output\n    }],\n    deactivate: [{\n      type: Output\n    }],\n    tooltipTemplate: [{\n      type: ContentChild,\n      args: ['tooltipTemplate']\n    }],\n    textEl: [{\n      type: ViewChild,\n      args: ['textEl']\n    }]\n  });\n})();\n\nclass GaugeModule {}\n\nGaugeModule.ɵfac = function GaugeModule_Factory(t) {\n  return new (t || GaugeModule)();\n};\n\nGaugeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: GaugeModule\n});\nGaugeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ChartCommonModule, PieChartModule, BarChartModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(GaugeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ChartCommonModule, PieChartModule, BarChartModule],\n      declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent],\n      exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent]\n    }]\n  }], null, null);\n})(); // The export is needed here to generate a valid polyfills.metadata.json file\n\n\nfunction ngxChartsPolyfills() {\n  // IE11 fix\n  // Ref: https://github.com/swimlane/ngx-charts/issues/386\n  if (typeof SVGElement !== 'undefined' && typeof SVGElement.prototype.contains === 'undefined') {\n    SVGElement.prototype.contains = HTMLDivElement.prototype.contains;\n  }\n}\n\nclass NgxChartsModule {\n  constructor() {\n    ngxChartsPolyfills();\n  }\n\n}\n\nNgxChartsModule.ɵfac = function NgxChartsModule_Factory(t) {\n  return new (t || NgxChartsModule)();\n};\n\nNgxChartsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxChartsModule\n});\nNgxChartsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [ChartCommonModule, AreaChartModule, BarChartModule, BoxChartModule, BubbleChartModule, HeatMapModule, LineChartModule, PolarChartModule, NumberCardModule, PieChartModule, TreeMapModule, GaugeModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxChartsModule, [{\n    type: NgModule,\n    args: [{\n      exports: [ChartCommonModule, AreaChartModule, BarChartModule, BoxChartModule, BubbleChartModule, HeatMapModule, LineChartModule, PolarChartModule, NumberCardModule, PieChartModule, TreeMapModule, GaugeModule]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nfunction tickFormat(fieldType, groupByType) {\n  return function (label) {\n    if (label === 'No Value' || label === 'Other') {\n      return label;\n    }\n\n    if (fieldType === 'date' && groupByType === 'groupBy') {\n      const formatter = timeFormat('MM/DD/YYYY');\n      return formatter(label);\n    }\n\n    return label.toString();\n  };\n}\n/*\n * Public API Surface of ngx-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AdvancedLegendComponent, AdvancedPieChartComponent, AreaChartComponent, AreaChartModule, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaComponent, AreaSeriesComponent, AxesModule, AxisLabelComponent, BarChartModule, BarChartType, BarComponent, BarHorizontal2DComponent, BarHorizontalComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarLabelComponent, BarOrientation, BarVertical2DComponent, BarVerticalComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BaseChartComponent, BoxChartComponent, BoxChartModule, BoxComponent, BoxSeriesComponent, BubbleChartComponent, BubbleChartModule, BubbleSeriesComponent, CardComponent, CardSeriesComponent, ChartCommonModule, ChartComponent, CircleComponent, CircleSeriesComponent, ColorHelper, CountUpDirective, D0Types, GaugeArcComponent, GaugeAxisComponent, GaugeComponent, GaugeModule, GridPanelComponent, GridPanelSeriesComponent, HeatCellSeriesComponent, HeatMapCellComponent, HeatMapComponent, HeatMapModule, LegendComponent, LegendEntryComponent, LegendPosition, LegendType, LineChartComponent, LineChartModule, LineComponent, LineSeriesComponent, LinearGaugeComponent, NgxChartsModule, NumberCardComponent, NumberCardModule, Orientation, PieArcComponent, PieChartComponent, PieChartModule, PieGridComponent, PieGridSeriesComponent, PieLabelComponent, PieSeriesComponent, PlacementTypes, PolarChartComponent, PolarChartModule, PolarSeriesComponent, ScaleLegendComponent, ScaleType, SeriesHorizontal, SeriesType, SeriesVerticalComponent, ShowTypes, StyleTypes, SvgLinearGradientComponent, SvgRadialGradientComponent, TextAnchor, Timeline, TooltipArea, TooltipContentComponent, TooltipDirective, TooltipModule, TooltipService, TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent, TreeMapModule, VisibilityObserver, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent, calculateViewDimensions, colorSets, count, decimalChecker, escapeLabel, formatLabel, getDomain, getScale, getScaleType, getUniqueXDomainValues, getXDomainArray, gridLayout, gridSize, hexToRgb, id, invertColor, reduceTicks, shadeRGBColor, sortByDomain, sortByTime, sortLinear, throttle, throttleable, tickFormat, trimLabel }; //# sourceMappingURL=swimlane-ngx-charts.mjs.map","map":{"version":3,"sources":["F:/statvalu/project/AR_DocuExpert_Test/node_modules/@swimlane/ngx-charts/fesm2020/swimlane-ngx-charts.mjs"],"names":["i0","PLATFORM_ID","Component","ViewEncapsulation","Inject","Input","ViewChild","HostBinding","HostListener","Injectable","ChangeDetectionStrategy","EventEmitter","Output","Directive","NgModule","ContentChild","i2","isPlatformBrowser","isPlatformServer","CommonModule","__decorate","DomPortalOutlet","ComponentPortal","fromEvent","debounceTime","trigger","transition","style","animate","select","brushX","scaleTime","scaleLinear","scalePoint","scaleOrdinal","scaleQuantile","scaleBand","area","curveLinear","line","arc","lineRadial","curveCardinalClosed","pie","range","min","max","quantile","interpolate","easeSinInOut","cloneDeep","format","d3_color","treemap","stratify","timeFormat","throttle","func","wait","options","context","args","result","timeout","previous","later","leading","Date","apply","now","remaining","arguments","clearTimeout","trailing","setTimeout","throttleable","duration","innerDecorator","target","key","descriptor","configurable","enumerable","get","getter","Object","defineProperty","value","PlacementTypes","caretOffset","verticalPosition","elDimensions","popoverDimensions","alignment","Top","top","Bottom","height","Center","undefined","horizontalPosition","Left","left","Right","width","PositionHelper","calculateVerticalAlignment","window","innerHeight","calculateVerticalCaret","caretDimensions","popoverPosition","calculateHorizontalAlignment","innerWidth","calculateHorizontalCaret","shouldFlip","placement","spacing","flip","positionCaret","elmDim","hostDim","positionContent","determinePlacement","TooltipContentComponent","constructor","element","renderer","platformId","cssClasses","clz","type","cssClass","ngAfterViewInit","position","bind","nativeElm","nativeElement","host","getBoundingClientRect","checkFlip","showCaret","addClass","setStyle","caretElm","onWindowResize","ɵfac","ElementRef","Renderer2","ɵcmp","NgIf","NgTemplateOutlet","prototype","selector","template","encapsulation","None","styles","decorators","title","InjectionRegisteryService","injectionService","defaults","components","Map","getByType","create","bindings","createByType","assignDefaults","component","injectComponent","register","destroy","instance","compsByType","componentType","length","idx","indexOf","splice","destroyAll","destroyByType","comps","i","appendComponent","inputs","outputs","has","set","types","push","isViewContainerRef","x","InjectionService","applicationRef","componentFactoryResolver","injector","setGlobalRootViewContainer","container","globalRootViewContainer","getRootViewContainer","_container","Error","setRootViewContainer","getComponentRootNode","hostView","rootNodes","location","getRootViewContainerNode","projectComponentBindings","bindingKeys","getOwnPropertyNames","bindingName","eventKeys","eventName","componentClass","appendLocation","portalHost","portal","componentRef","attach","ApplicationRef","ComponentFactoryResolver","Injector","ɵprov","TooltipService","LegendPosition","LegendType","ScaleType","ScaleLegendComponent","horizontal","ngOnChanges","changes","gradientValues","gradientString","colors","domain","direction","gradient","splits","pairs","reverse","forEach","c","Math","round","join","changeDetection","OnPush","valueRange","formatLabel","label","toLocaleDateString","toLocaleString","escapeLabel","replace","match","LegendEntryComponent","isActive","activate","deactivate","toggle","trimmedLabel","formattedLabel","onMouseEnter","emit","name","onMouseLeave","color","LegendComponent","cd","labelClick","labelActivate","labelDeactivate","legendEntries","update","markForCheck","getLegendEntries","items","data","findIndex","getColor","entry","activeEntries","item","find","d","trackBy","index","ChangeDetectorRef","NgForOf","ChartComponent","showLegend","animations","legendLabelClick","legendLabelActivate","legendLabelDeactivate","legendColumns","legendType","getLegendType","legendOptions","ScaleLegend","chartColumns","chartWidth","floor","view","legendWidth","scaleType","Linear","Legend","providers","VisibilityObserver","zone","visible","isVisible","runCheck","onVisibilityChange","run","check","offsetHeight","offsetWidth","runOutsideAngular","NgZone","ɵdir","isDate","toString","call","isNumber","BaseChartComponent","chartElement","scheme","schemeType","Ordinal","ngOnInit","bindWindowResizeEvent","visibilityObserver","subscribe","ngOnDestroy","unbindEvents","unsubscribe","results","cloneData","dims","getContainerDims","hostElem","parentNode","formatDates","g","series","j","resizeSubscription","source","subscription","pipe","e","copy","seriesItem","seriesItemCopy","assign","JSON","parse","stringify","customColors","Orientation","AxisLabelComponent","textHeight","margin","strokeWidth","textAnchor","transform","orient","y","offset","trimLabel","s","trim","slice","reduceTicks","ticks","maxTicks","reduced","modulus","TextAnchor","XAxisTicksComponent","tickArguments","tickStroke","trimTicks","maxTickLength","showGridLines","rotateTicks","dimensionsChanged","verticalSpacing","rotateLabels","innerTickSize","outerTickSize","tickPadding","Middle","maxTicksLength","maxAllowedLength","approxHeight","updateDims","parseInt","ticksElement","scale","getTicks","tickFormatting","tickFormat","angle","getRotationAngle","adjustedScale","bandwidth","textTransform","End","tick","tickLength","tickTrim","len","charWidth","wordWidth","baseWidth","maxBaseWidth","cos","PI","abs","sin","getMaxTicks","maxScaleTicks","tickValues","tickWidth","tickTransform","gridLineTransform","gridLineHeight","XAxisComponent","xOrient","xAxisOffset","xAxisClassName","labelOffset","fill","stroke","padding","orientation","xAxisTickCount","emitTicksHeight","newLabelOffset","xScale","showLabel","labelText","ticksComponent","roundedRect","w","h","r","tl","tr","bl","br","retval","YAxisTicksComponent","showRefLabels","showRefLines","referenceLineLength","getApproximateAxisWidth","sign","tickSpacing","referenceLines","setReferencelines","y2","y1","dy","x2","x1","Start","refMin","map","refMax","referenceAreaPath","gridLineWidth","tickHeight","maxChars","t","YAxisComponent","yOrient","yAxisOffset","yAxisClassName","yAxisTickCount","emitTicksWidth","yScale","AxesModule","ɵmod","ɵinj","imports","declarations","exports","StyleTypes","ShowTypes","TooltipDirective","tooltipService","viewContainerRef","tooltipCssClass","tooltipAppendToBody","tooltipSpacing","tooltipDisabled","tooltipShowCaret","tooltipPlacement","tooltipAlignment","tooltipType","popover","tooltipCloseOnClickOutside","tooltipCloseOnMouseLeave","tooltipHideTimeout","tooltipShowTimeout","tooltipShowEvent","all","tooltipImmediateExit","show","hide","listensForFocus","focus","listensForHover","mouseover","hideTooltip","onFocus","showTooltip","onBlur","contentDom","contains","onMouseClick","immediate","time","navigator","userAgent","createBoundOptions","addHideListeners","tooltip","mouseEnterContentEvent","listen","mouseLeaveContentEvent","documentClickEvent","event","destroyFn","tooltipTitle","tooltipTemplate","tooltipContext","ViewContainerRef","TooltipModule","entryComponents","cache","id","newId","random","pow","BarOrientation","SvgLinearGradientComponent","Vertical","Horizontal","stops","CircleComponent","onClick","classNames","Array","isArray","cx","cy","circleOpacity","pointerEvents","SeriesType","CircleSeriesComponent","Standard","barVisible","barOrientation","placementTypes","styleTypes","isSSR","gradientId","gradientFill","circle","getActiveCircle","indexActiveDataPoint","visibleValue","mapDataPointToCircle","seriesName","tooltipLabel","Time","Number","d1","radius","opacity","gradientStops","getGradientStops","getTooltipText","getTooltipMinMaxText","activateCircle","deactivateCircle","GridPanelComponent","ClassEnum","GridPanelSeriesComponent","gridPanels","getGridPanels","className","Odd","positionIndex","step","Even","paddingInner","class","SvgRadialGradientComponent","endOpacity","stopsInput","stopsDefault","startOpacity","AreaComponent","animationsLoaded","hasGradient","loadAnimation","getGradient","updatePathEl","areaPath","startingPath","node","attr","path","easeOutExpo","b","count","countFrom","countTo","countDecimals","countDuration","callback","startVal","endVal","countDown","decimals","dec","startTime","runCount","timestamp","frameVal","progress","finished","requestAnimationFrame","val","decimalChecker","CountUpDirective","countPrefix","countSuffix","countChange","countFinish","_countDecimals","_countTo","_countFrom","parseFloat","start","cancelAnimationFrame","animationReq","valueFormatting","root","global","MouseEvent","createMouseEvent","bubbles","cancelable","document","createEvent","initEvent","TooltipArea","anchorOpacity","anchorPos","anchorValues","showPercentage","hover","getValues","xVal","group","groupName","d0","toFixed","v","mouseMove","xPos","pageX","closestIndex","findClosestPointIndex","closestPoint","xSet","lastAnchorPos","ev","tooltipAnchor","dispatchEvent","minIndex","maxIndex","minDiff","MAX_VALUE","currentIndex","currentElement","curDiff","getToolTipText","tooltipItem","static","Timeline","onDomainChange","initialized","addBrush","getDims","offsetY","xDomain","getXDomain","getXScale","brush","updateBrush","filterId","filter","values","includes","extent","on","selection","newSelection","newDomain","invert","legend","autoScale","AdvancedLegendComponent","legendItems","labelFormatting","percentageFormatting","percentage","defaultValueFormatting","getTotal","reduce","sum","total","roundedTotal","getLegendItems","_value","displayLabel","origialLabel","COMPONENTS","ChartCommonModule","calculateViewDimensions","margins","showXAxis","showYAxis","xAxisHeight","yAxisWidth","showXLabel","showYLabel","legendPosition","columns","xOffset","chartHeight","colorSets","selectable","ColorHelper","cs","colorDomain","generateColorScheme","colorScale","Quantile","points","valueScale","formattedValue","found","mapping","toLowerCase","getLinearGradientStops","colorValueScale","endColor","startColor","currentVal","originalOffset","getUniqueXDomainValues","valueSet","Set","add","from","getScaleType","checkDateType","allDates","every","allNumbers","getXDomainArray","xScaleMin","xScaleMax","mappedValues","sort","a","aDate","getTime","bDate","sortLinear","property","sortByDomain","aVal","bVal","aIdx","bIdx","sortByTime","AreaSeriesComponent","baseValue","stacked","normalized","updateGradient","currentArea","startingArea","xProperty","y0","curve","d0values","d1values","isInactive","AreaChartComponent","legendTitle","xAxis","yAxis","timeline","trimXAxisTicks","trimYAxisTicks","rotateXAxisTicks","maxXAxisTickLength","maxYAxisTickLength","roundDomains","timelineHeight","timelinePadding","showXAxisLabel","showYAxisLabel","filteredDomain","yDomain","getYDomain","seriesDomain","getSeriesDomain","getYScale","updateTimeline","setColors","getLegendOptions","clipPathId","clipPath","timelineWidth","timelineXDomain","timelineXScale","timelineYScale","timelineTransform","yScaleMin","yScaleMax","nice","date","num","updateDomain","updateHoveredVertical","hoveredVertical","deactivateAll","hideCircles","opts","updateYAxisWidth","updateXAxisHeight","onActivate","entries","onDeactivate","xAxisLabel","yAxisLabel","xAxisTickFormatting","yAxisTickFormatting","xAxisTicks","yAxisTicks","seriesTooltipTemplate","AreaChartNormalizedComponent","seriesType","valueOf","AreaChartStackedComponent","AreaChartModule","BarComponent","roundEdges","noBarWhenZero","hideBar","checkToHideBar","getStartingPath","getPath","getStartOpacity","getRadius","edges","ariaLabel","BarChartType","D0Types","BarLabelComponent","horizontalPadding","verticalPadding","getSize","negative","formatedValue","barX","barWidth","barY","barHeight","SeriesHorizontal","showDataLabel","dataLabelWidthChanged","barsForDataLabels","updateTooltipSettings","positive","d0Type","Normalized","bars","getLabel","bar","Stacked","offset0","offset1","tooltipText","dataLabelFormatting","updateDataLabels","section","totalPositive","totalNegative","active","dataItem","trackDataLabelBy","barLabel","click","BarHorizontalComponent","barPadding","dataLabelMaxWidth","rangeRound","onDataLabelMaxWidthChanged","size","fromLegend","BarHorizontal2DComponent","groupPadding","groupDomain","getGroupDomain","innerDomain","getInnerDomain","valueDomain","getValueDomain","groupScale","getGroupScale","innerScale","getInnerScale","getValueScale","paddingOuter","groupTransform","groupIndex","flat","BarHorizontalNormalizedComponent","barChartType","BarHorizontalStackedComponent","smallest","biggest","smallestSum","biggestSum","SeriesVerticalComponent","dataLabelHeightChanged","BarVerticalComponent","dataLabelMaxHeight","some","isNaN","onDataLabelMaxHeightChanged","BarVertical2DComponent","BarVerticalNormalizedComponent","BarVerticalStackedComponent","BarChartModule","BoxComponent","boxStrokeWidth","whiskerStrokeWidth","medianLineWidth","updateLineEl","maskLineId","maskLine","boxPath","oldPath","oldLineCoordinates","getStartingLineCoordinates","nodeBar","selectAll","ease","attrTween","pathTween","lineEl","lineCoordinates","_","v1","v2","lineTween","nodeLineEl","baseVal","precision","path0","path1","cloneNode","setAttribute","n0","getTotalLength","n1","distances","dt","p0","getPointAtLength","p1","p","strokeColor","BoxSeriesComponent","counts","mappedCounts","serie","whiskers","groupCounts","quartiles","getBoxQuantiles","getLinesCoordinates","box","formattedTooltipLabel","inputData","commonX","offsetX","whiskerLineWidth","whiskerZero","whiskerOne","median","topLine","medianLine","bottomLine","verticalLine","BoxChartComponent","setScales","getUniqueBoxChartXDomainValues","legendOpts","legendOptionsConfig","BoxChartModule","getDomain","minVal","maxVal","getScale","BubbleSeriesComponent","circles","getCircles","rScale","xScaleType","yScaleType","hasRadius","hasTooltipLabel","hasSeriesName","radiusValue","BubbleChartComponent","maxRadius","minRadius","bubblePadding","rDomain","getRDomain","getRScale","getBubblePadding","yMin","xMin","yMax","xMax","Infinity","BubbleChartModule","HeatMapCellComponent","gradientUrl","animateToCurrentForm","HeatCellSeriesComponent","cells","getCells","row","cell","HeatMapComponent","innerPadding","rects","getRects","getDimension","N","L","split","f","yVal","rx","HeatMapModule","LineComponent","initialPath","strokeDasharray","strokeDashoffset","LineSeriesComponent","updateGradients","sortData","lineGen","getLineGenerator","areaGen","getAreaGenerator","hasRange","getRangeGenerator","outerPath","areaGradientStops","rangeFillOpacity","LineChartComponent","LineChartModule","PieLabelComponent","labelTrim","labelTrimSize","setTransforms","styleTransform","textX","textY","attrTransform","textTransition","isIE","test","startRadius","explodeSlices","innerArc","innerRadius","outerRadius","innerPos","centroid","pos","outerPos","midAngle","startAngle","endAngle","PolarSeriesComponent","circleRadius","linearScaleType","seriesColor","getAngle","cData","inactive","defaultTooltipText","twoPI","PolarChartComponent","showSeriesOnHover","yAxisMinScale","setDims","setTicks","halfWidth","halfHeight","yOffset","yAxisDims","transformYAxis","transformPlot","xValues","getXValues","yAxisScale","thetaTicks","dd","startPos","minDistance","o","radiusTicks","getYValues","PieArcComponent","cornerRadius","dblclick","getPointerEvents","calc","calculateArc","radialGradientId","updateAnimation","_current","copyOfD","interpolater","_timeout","onDblClick","preventDefault","stopPropagation","nativeEvent","PieSeriesComponent","trimLabels","maxLabelLength","pieGenerator","arcData","calculateLabelPositions","outerArc","factor","pieData","labelPositions","labelVisible","myArc","showLabels","getTooltipTitle","AdvancedPieChartComponent","nameFormatting","PieChartComponent","labels","doughnut","arcWidth","hasNoOptionalMarginsSet","translation","gridSize","minWidth","rows","cols","ceil","gridLayout","designatedTotal","res","cardWidth","cardHeight","extra","percent","PieGridSeriesComponent","layout","arcs","getArcs","other","PieGridComponent","getSeries","baselineLabelHeight","yPos","PieChartModule","PolarChartModule","calculateTextWidth","fontFamilyKey","text","defaultWidth","acc","curr","VERDANA_FONT_WIDTHS_16_PX","A","B","C","D","E","F","G","H","I","J","K","M","O","P","Q","R","S","T","U","V","W","X","Y","Z","k","l","m","n","q","u","z","$","CardComponent","textFontSize","bandHeight","textPadding","labelFontSize","scaleTextSSR","hasValue","card","textWidth","cardData","transformBand","paddedValue","setPadding","bandPath","scaleText","startCount","medianSize","repeat","decs","textEl","availableWidth","availableHeight","resizeScale","bandColor","textColor","hexToRgb","rgb","invertColor","yiq","depth","shadeRGBColor","CardSeriesComponent","emptyColor","sortedLengths","cards","getCards","emptySlots","yPadding","xPadding","valueColor","cardColor","NumberCardComponent","clickable","observers","NumberCardModule","TreeMapCellComponent","cellData","getTextColor","TreeMapCellSeriesComponent","children","x0","TreeMapComponent","rootNode","isRoot","parentId","TreeMapModule","ElementType","LinearGaugeComponent","valueResizeScale","unitsResizeScale","valueTextTransform","valueTranslate","unitsTextTransform","unitsTranslate","Value","Units","hasPreviousValue","previousValue","displayValue","getDisplayValue","transformLine","el","valueTextEl","unitsTextEl","oldScale","resizeScaleWidth","resizeScaleHeight","units","GaugeArcComponent","backgroundArc","valueArc","GaugeAxisComponent","rotate","rotationAngle","bigTickSegment","angleSpan","bigSegments","smallTickSegment","smallSegments","big","small","startDistance","textDist","angleDeg","getTextAnchor","skip","getTickPath","smallAngleDeg","smallAngle","lineGenerator","GaugeComponent","showAxis","showText","rotation","availableRadius","radiusPerArc","textRadius","dataMin","dataMax","textValue","availableSpace","axisTickFormatting","GaugeModule","ngxChartsPolyfills","SVGElement","HTMLDivElement","NgxChartsModule","fieldType","groupByType","formatter"],"mappings":"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MAAAA,EA+8L3F,aAlDf;AA75L0GA,MAAAA,EA+8L3F,uCAlDf;AA75L0GA,MAAAA,EAg9LtE,aAnDpC;AA75L0GA,MAAAA,EAg9LtE,gEAnDpC;AA75L0GA,MAAAA,EAg+LxF,aAnElB;AA75L0GA,MAAAA,EAg+LxF,yCAnElB;AA75L0GA,MAAAA,EAqgMjG,aAxGT;AA75L0GA,MAAAA,EAqgMjG,+DAxGT;AAAA;AAAA;AAAA,eAmI+yDoS,cAnI/yD,EAmI6/GpR,EAAE,CAACsI,IAnIhgH,EAmI8kHtI,EAAE,CAACmR,OAnIjlH,EAmIohE8I,cAnIphE,EAmI2yEgD,cAnI3yE,EAmIsmF8T,mBAnItmF,EAmIw1FrI,WAnIx1F,EAmIsiGnG,qBAnItiG,EAmI2yGqI,QAnI3yG;AAAA;AAAA;AAAA;AAAA;;AAoIA;AAAA,qDAjiM0G5rB,EAiiM1G,mBAA2Fq2B,yBAA3F,EAAkI,CAAC;AACvHluB,IAAAA,IAAI,EAAEjI,SADiH;AAEvH2D,IAAAA,IAAI,EAAE,CAAC;AAAE4F,MAAAA,QAAQ,EAAE,+BAAZ;AAA6CC,MAAAA,QAAQ,EAAG;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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O,EAAE,CAAX;AAAczN,MAAAA,SAAS,EAAE;AAAzB,KAAD,CAAX,CALU,CAAX,CADY,CAAnB,CADuyG;AA/GtzG;AAAA;AAAA;;AA0HA;AAAA,qDAxmP0GlX,EAwmP1G,mBAA2F85B,wBAA3F,EAAiI,CAAC;AACtH3xB,IAAAA,IAAI,EAAEjI,SADgH;AAEtH2D,IAAAA,IAAI,EAAE,CAAC;AAAE4F,MAAAA,QAAQ,EAAE,8BAAZ;AAA4CC,MAAAA,QAAQ,EAAG;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GA/GmB;AA+Gd8F,MAAAA,eAAe,EAAE9O,uBAAuB,CAAC+O,MA/G3B;AA+GmC9F,MAAAA,aAAa,EAAExJ,iBAAiB,CAACyJ,IA/GpE;AA+G0E0I,MAAAA,UAAU,EAAE,CACjF7Q,OAAO,CAAC,gBAAD,EAAmB,CACtBC,UAAU,CAAC,QAAD,EAAW,CACjBC,KAAK,CAAC;AACFgjB,QAAAA,OAAO,EAAE,CADP;AAEFzN,QAAAA,SAAS,EAAE;AAFT,OAAD,CADY,EAKjBtV,OAAO,CAAC,GAAD,EAAMD,KAAK,CAAC;AAAEgjB,QAAAA,OAAO,EAAE,CAAX;AAAczN,QAAAA,SAAS,EAAE;AAAzB,OAAD,CAAX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","sourcesContent":["import * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, ViewEncapsulation, Inject, Input, ViewChild, HostBinding, HostListener, Injectable, ChangeDetectionStrategy, EventEmitter, Output, Directive, NgModule, ContentChild } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { isPlatformBrowser, isPlatformServer, CommonModule } from '@angular/common';\nimport { __decorate } from 'tslib';\nimport { DomPortalOutlet, ComponentPortal } from '@angular/cdk/portal';\nimport { fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport { select } from 'd3-selection';\nimport { brushX } from 'd3-brush';\nimport { scaleTime, scaleLinear, scalePoint, scaleOrdinal, scaleQuantile, scaleBand } from 'd3-scale';\nimport { area, curveLinear, line, arc, lineRadial, curveCardinalClosed, pie } from 'd3-shape';\nimport { range, min, max, quantile } from 'd3-array';\nimport { interpolate } from 'd3-interpolate';\nimport { easeSinInOut } from 'd3-ease';\nimport cloneDeep from 'clone-deep';\nimport { format } from 'd3-format';\nimport * as d3_color from 'd3-color';\nimport { treemap, stratify } from 'd3-hierarchy';\nimport { timeFormat } from 'd3-time-format';\n\n/**\n * Throttle a function\n *\n */\nfunction throttle(func, wait, options) {\n    options = options || {};\n    let context;\n    let args;\n    let result;\n    let timeout = null;\n    let previous = 0;\n    function later() {\n        previous = options.leading === false ? 0 : +new Date();\n        timeout = null;\n        result = func.apply(context, args);\n    }\n    return function () {\n        const now = +new Date();\n        if (!previous && options.leading === false) {\n            previous = now;\n        }\n        const remaining = wait - (now - previous);\n        context = this;\n        args = arguments;\n        if (remaining <= 0) {\n            clearTimeout(timeout);\n            timeout = null;\n            previous = now;\n            result = func.apply(context, args);\n        }\n        else if (!timeout && options.trailing !== false) {\n            timeout = setTimeout(later, remaining);\n        }\n        return result;\n    };\n}\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n */\nfunction throttleable(duration, options) {\n    return function innerDecorator(target, key, descriptor) {\n        return {\n            configurable: true,\n            enumerable: descriptor.enumerable,\n            get: function getter() {\n                Object.defineProperty(this, key, {\n                    configurable: true,\n                    enumerable: descriptor.enumerable,\n                    value: throttle(descriptor.value, duration, options)\n                });\n                return this[key];\n            }\n        };\n    };\n}\n\nvar PlacementTypes;\n(function (PlacementTypes) {\n    PlacementTypes[\"Top\"] = \"top\";\n    PlacementTypes[\"Bottom\"] = \"bottom\";\n    PlacementTypes[\"Left\"] = \"left\";\n    PlacementTypes[\"Right\"] = \"right\";\n    PlacementTypes[\"Center\"] = \"center\";\n})(PlacementTypes || (PlacementTypes = {}));\n\nconst caretOffset = 7;\nfunction verticalPosition(elDimensions, popoverDimensions, alignment) {\n    if (alignment === PlacementTypes.Top) {\n        return elDimensions.top - caretOffset;\n    }\n    if (alignment === PlacementTypes.Bottom) {\n        return elDimensions.top + elDimensions.height - popoverDimensions.height + caretOffset;\n    }\n    if (alignment === PlacementTypes.Center) {\n        return elDimensions.top + elDimensions.height / 2 - popoverDimensions.height / 2;\n    }\n    return undefined;\n}\nfunction horizontalPosition(elDimensions, popoverDimensions, alignment) {\n    if (alignment === PlacementTypes.Left) {\n        return elDimensions.left - caretOffset;\n    }\n    if (alignment === PlacementTypes.Right) {\n        return elDimensions.left + elDimensions.width - popoverDimensions.width + caretOffset;\n    }\n    if (alignment === PlacementTypes.Center) {\n        return elDimensions.left + elDimensions.width / 2 - popoverDimensions.width / 2;\n    }\n    return undefined;\n}\n/**\n * Position helper for the popover directive.\n *\n * @export\n */\nclass PositionHelper {\n    /**\n     * Calculate vertical alignment position\n     *\n     * @memberOf PositionHelper\n     */\n    static calculateVerticalAlignment(elDimensions, popoverDimensions, alignment) {\n        let result = verticalPosition(elDimensions, popoverDimensions, alignment);\n        if (result + popoverDimensions.height > window.innerHeight) {\n            result = window.innerHeight - popoverDimensions.height;\n        }\n        return result;\n    }\n    /**\n     * Calculate vertical caret position\n     *\n     * @memberOf PositionHelper\n     */\n    static calculateVerticalCaret(elDimensions, popoverDimensions, caretDimensions, alignment) {\n        let result;\n        if (alignment === PlacementTypes.Top) {\n            result = elDimensions.height / 2 - caretDimensions.height / 2 + caretOffset;\n        }\n        if (alignment === PlacementTypes.Bottom) {\n            result = popoverDimensions.height - elDimensions.height / 2 - caretDimensions.height / 2 - caretOffset;\n        }\n        if (alignment === PlacementTypes.Center) {\n            result = popoverDimensions.height / 2 - caretDimensions.height / 2;\n        }\n        const popoverPosition = verticalPosition(elDimensions, popoverDimensions, alignment);\n        if (popoverPosition + popoverDimensions.height > window.innerHeight) {\n            result += popoverPosition + popoverDimensions.height - window.innerHeight;\n        }\n        return result;\n    }\n    /**\n     * Calculate horz alignment position\n     *\n     * @memberOf PositionHelper\n     */\n    static calculateHorizontalAlignment(elDimensions, popoverDimensions, alignment) {\n        let result = horizontalPosition(elDimensions, popoverDimensions, alignment);\n        if (result + popoverDimensions.width > window.innerWidth) {\n            result = window.innerWidth - popoverDimensions.width;\n        }\n        return result;\n    }\n    /**\n     * Calculate horz caret position\n     *\n     * @memberOf PositionHelper\n     */\n    static calculateHorizontalCaret(elDimensions, popoverDimensions, caretDimensions, alignment) {\n        let result;\n        if (alignment === PlacementTypes.Left) {\n            result = elDimensions.width / 2 - caretDimensions.width / 2 + caretOffset;\n        }\n        if (alignment === PlacementTypes.Right) {\n            result = popoverDimensions.width - elDimensions.width / 2 - caretDimensions.width / 2 - caretOffset;\n        }\n        if (alignment === PlacementTypes.Center) {\n            result = popoverDimensions.width / 2 - caretDimensions.width / 2;\n        }\n        const popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);\n        if (popoverPosition + popoverDimensions.width > window.innerWidth) {\n            result += popoverPosition + popoverDimensions.width - window.innerWidth;\n        }\n        return result;\n    }\n    /**\n     * Checks if the element's position should be flipped\n     *\n     * @memberOf PositionHelper\n     */\n    static shouldFlip(elDimensions, popoverDimensions, placement, spacing) {\n        let flip = false;\n        if (placement === PlacementTypes.Right) {\n            if (elDimensions.left + elDimensions.width + popoverDimensions.width + spacing > window.innerWidth) {\n                flip = true;\n            }\n        }\n        if (placement === PlacementTypes.Left) {\n            if (elDimensions.left - popoverDimensions.width - spacing < 0) {\n                flip = true;\n            }\n        }\n        if (placement === PlacementTypes.Top) {\n            if (elDimensions.top - popoverDimensions.height - spacing < 0) {\n                flip = true;\n            }\n        }\n        if (placement === PlacementTypes.Bottom) {\n            if (elDimensions.top + elDimensions.height + popoverDimensions.height + spacing > window.innerHeight) {\n                flip = true;\n            }\n        }\n        return flip;\n    }\n    /**\n     * Position caret\n     *\n     * @memberOf PositionHelper\n     */\n    static positionCaret(placement, elmDim, hostDim, caretDimensions, alignment) {\n        let top = 0;\n        let left = 0;\n        if (placement === PlacementTypes.Right) {\n            left = -7;\n            top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        else if (placement === PlacementTypes.Left) {\n            left = elmDim.width;\n            top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        else if (placement === PlacementTypes.Top) {\n            top = elmDim.height;\n            left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        else if (placement === PlacementTypes.Bottom) {\n            top = -7;\n            left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        return { top, left };\n    }\n    /**\n     * Position content\n     *\n     * @memberOf PositionHelper\n     */\n    static positionContent(placement, elmDim, hostDim, spacing, alignment) {\n        let top = 0;\n        let left = 0;\n        if (placement === PlacementTypes.Right) {\n            left = hostDim.left + hostDim.width + spacing;\n            top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n        }\n        else if (placement === PlacementTypes.Left) {\n            left = hostDim.left - elmDim.width - spacing;\n            top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n        }\n        else if (placement === PlacementTypes.Top) {\n            top = hostDim.top - elmDim.height - spacing;\n            left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n        }\n        else if (placement === PlacementTypes.Bottom) {\n            top = hostDim.top + hostDim.height + spacing;\n            left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n        }\n        return { top, left };\n    }\n    /**\n     * Determine placement based on flip\n     *\n     * @memberOf PositionHelper\n     */\n    static determinePlacement(placement, elmDim, hostDim, spacing) {\n        const shouldFlip = PositionHelper.shouldFlip(hostDim, elmDim, placement, spacing);\n        if (shouldFlip) {\n            if (placement === PlacementTypes.Right) {\n                return PlacementTypes.Left;\n            }\n            else if (placement === PlacementTypes.Left) {\n                return PlacementTypes.Right;\n            }\n            else if (placement === PlacementTypes.Top) {\n                return PlacementTypes.Bottom;\n            }\n            else if (placement === PlacementTypes.Bottom) {\n                return PlacementTypes.Top;\n            }\n        }\n        return placement;\n    }\n}\n\nclass TooltipContentComponent {\n    constructor(element, renderer, platformId) {\n        this.element = element;\n        this.renderer = renderer;\n        this.platformId = platformId;\n    }\n    get cssClasses() {\n        let clz = 'ngx-charts-tooltip-content';\n        clz += ` position-${this.placement}`;\n        clz += ` type-${this.type}`;\n        clz += ` ${this.cssClass}`;\n        return clz;\n    }\n    ngAfterViewInit() {\n        setTimeout(this.position.bind(this));\n    }\n    position() {\n        if (!isPlatformBrowser(this.platformId)) {\n            return;\n        }\n        const nativeElm = this.element.nativeElement;\n        const hostDim = this.host.nativeElement.getBoundingClientRect();\n        // if no dims were found, never show\n        if (!hostDim.height && !hostDim.width)\n            return;\n        const elmDim = nativeElm.getBoundingClientRect();\n        this.checkFlip(hostDim, elmDim);\n        this.positionContent(nativeElm, hostDim, elmDim);\n        if (this.showCaret) {\n            this.positionCaret(hostDim, elmDim);\n        }\n        // animate its entry\n        setTimeout(() => this.renderer.addClass(nativeElm, 'animate'), 1);\n    }\n    positionContent(nativeElm, hostDim, elmDim) {\n        const { top, left } = PositionHelper.positionContent(this.placement, elmDim, hostDim, this.spacing, this.alignment);\n        this.renderer.setStyle(nativeElm, 'top', `${top}px`);\n        this.renderer.setStyle(nativeElm, 'left', `${left}px`);\n    }\n    positionCaret(hostDim, elmDim) {\n        const caretElm = this.caretElm.nativeElement;\n        const caretDimensions = caretElm.getBoundingClientRect();\n        const { top, left } = PositionHelper.positionCaret(this.placement, elmDim, hostDim, caretDimensions, this.alignment);\n        this.renderer.setStyle(caretElm, 'top', `${top}px`);\n        this.renderer.setStyle(caretElm, 'left', `${left}px`);\n    }\n    checkFlip(hostDim, elmDim) {\n        this.placement = PositionHelper.determinePlacement(this.placement, elmDim, hostDim, this.spacing);\n    }\n    onWindowResize() {\n        this.position();\n    }\n}\nTooltipContentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipContentComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nTooltipContentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TooltipContentComponent, selector: \"ngx-tooltip-content\", inputs: { host: \"host\", showCaret: \"showCaret\", type: \"type\", placement: \"placement\", alignment: \"alignment\", spacing: \"spacing\", cssClass: \"cssClass\", title: \"title\", template: \"template\", context: \"context\" }, host: { listeners: { \"window:resize\": \"onWindowResize()\" }, properties: { \"class\": \"this.cssClasses\" } }, viewQueries: [{ propertyName: \"caretElm\", first: true, predicate: [\"caretElm\"], descendants: true }], ngImport: i0, template: `\n    <div>\n      <span #caretElm [hidden]=\"!showCaret\" class=\"tooltip-caret position-{{ this.placement }}\"> </span>\n      <div class=\"tooltip-content\">\n        <span *ngIf=\"!title\">\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\n        </span>\n        <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".ngx-charts-tooltip-content{position:fixed;border-radius:3px;z-index:5000;display:block;font-weight:400;opacity:0;pointer-events:none!important}.ngx-charts-tooltip-content.type-popover{background:#fff;color:#060709;border:1px solid #72809b;box-shadow:0 1px 3px #0003,0 1px 1px #00000024,0 2px 1px -1px #0000001f;font-size:13px;padding:4px}.ngx-charts-tooltip-content.type-popover .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #fff}.ngx-charts-tooltip-content.type-tooltip{color:#fff;background:rgba(0,0,0,.75);font-size:12px;padding:0 10px;text-align:center;pointer-events:auto}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content .tooltip-label{display:block;line-height:1em;padding:8px 5px 5px;font-size:1em}.ngx-charts-tooltip-content .tooltip-val{display:block;font-size:1.3em;line-height:1em;padding:0 5px 8px}.ngx-charts-tooltip-content .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.position-right{transform:translate(10px)}.ngx-charts-tooltip-content.position-left{transform:translate(-10px)}.ngx-charts-tooltip-content.position-top{transform:translateY(-10px)}.ngx-charts-tooltip-content.position-bottom{transform:translateY(10px)}.ngx-charts-tooltip-content.animate{opacity:1;transition:opacity .3s,transform .3s;transform:translate(0);pointer-events:auto}.area-tooltip-container{padding:5px 0;pointer-events:none}.tooltip-item{text-align:left;line-height:1.2em;padding:5px 0}.tooltip-item .tooltip-item-color{display:inline-block;height:12px;width:12px;margin-right:5px;color:#5b646b;border-radius:3px}\\n\"], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }], encapsulation: i0.ViewEncapsulation.None });\n__decorate([\n    throttleable(100)\n], TooltipContentComponent.prototype, \"onWindowResize\", null);\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipContentComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-tooltip-content', template: `\n    <div>\n      <span #caretElm [hidden]=\"!showCaret\" class=\"tooltip-caret position-{{ this.placement }}\"> </span>\n      <div class=\"tooltip-content\">\n        <span *ngIf=\"!title\">\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\n        </span>\n        <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-tooltip-content{position:fixed;border-radius:3px;z-index:5000;display:block;font-weight:400;opacity:0;pointer-events:none!important}.ngx-charts-tooltip-content.type-popover{background:#fff;color:#060709;border:1px solid #72809b;box-shadow:0 1px 3px #0003,0 1px 1px #00000024,0 2px 1px -1px #0000001f;font-size:13px;padding:4px}.ngx-charts-tooltip-content.type-popover .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #fff}.ngx-charts-tooltip-content.type-tooltip{color:#fff;background:rgba(0,0,0,.75);font-size:12px;padding:0 10px;text-align:center;pointer-events:auto}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content .tooltip-label{display:block;line-height:1em;padding:8px 5px 5px;font-size:1em}.ngx-charts-tooltip-content .tooltip-val{display:block;font-size:1.3em;line-height:1em;padding:0 5px 8px}.ngx-charts-tooltip-content .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.position-right{transform:translate(10px)}.ngx-charts-tooltip-content.position-left{transform:translate(-10px)}.ngx-charts-tooltip-content.position-top{transform:translateY(-10px)}.ngx-charts-tooltip-content.position-bottom{transform:translateY(10px)}.ngx-charts-tooltip-content.animate{opacity:1;transition:opacity .3s,transform .3s;transform:translate(0);pointer-events:auto}.area-tooltip-container{padding:5px 0;pointer-events:none}.tooltip-item{text-align:left;line-height:1.2em;padding:5px 0}.tooltip-item .tooltip-item-color{display:inline-block;height:12px;width:12px;margin-right:5px;color:#5b646b;border-radius:3px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { host: [{\n                type: Input\n            }], showCaret: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], placement: [{\n                type: Input\n            }], alignment: [{\n                type: Input\n            }], spacing: [{\n                type: Input\n            }], cssClass: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], template: [{\n                type: Input\n            }], context: [{\n                type: Input\n            }], caretElm: [{\n                type: ViewChild,\n                args: ['caretElm']\n            }], cssClasses: [{\n                type: HostBinding,\n                args: ['class']\n            }], onWindowResize: [{\n                type: HostListener,\n                args: ['window:resize']\n            }] } });\n\nclass InjectionRegisteryService {\n    constructor(injectionService) {\n        this.injectionService = injectionService;\n        this.defaults = {};\n        this.components = new Map();\n    }\n    getByType(type = this.type) {\n        return this.components.get(type);\n    }\n    create(bindings) {\n        return this.createByType(this.type, bindings);\n    }\n    createByType(type, bindings) {\n        bindings = this.assignDefaults(bindings);\n        const component = this.injectComponent(type, bindings);\n        this.register(type, component);\n        return component;\n    }\n    destroy(instance) {\n        const compsByType = this.components.get(instance.componentType);\n        if (compsByType && compsByType.length) {\n            const idx = compsByType.indexOf(instance);\n            if (idx > -1) {\n                const component = compsByType[idx];\n                component.destroy();\n                compsByType.splice(idx, 1);\n            }\n        }\n    }\n    destroyAll() {\n        this.destroyByType(this.type);\n    }\n    destroyByType(type) {\n        const comps = this.components.get(type);\n        if (comps && comps.length) {\n            let i = comps.length - 1;\n            while (i >= 0) {\n                this.destroy(comps[i--]);\n            }\n        }\n    }\n    injectComponent(type, bindings) {\n        return this.injectionService.appendComponent(type, bindings);\n    }\n    assignDefaults(bindings) {\n        const inputs = { ...this.defaults.inputs };\n        const outputs = { ...this.defaults.outputs };\n        if (!bindings.inputs && !bindings.outputs) {\n            bindings = { inputs: bindings };\n        }\n        if (inputs) {\n            bindings.inputs = { ...inputs, ...bindings.inputs };\n        }\n        if (outputs) {\n            bindings.outputs = { ...outputs, ...bindings.outputs };\n        }\n        return bindings;\n    }\n    register(type, component) {\n        if (!this.components.has(type)) {\n            this.components.set(type, []);\n        }\n        const types = this.components.get(type);\n        types.push(component);\n    }\n}\n\nfunction isViewContainerRef(x) {\n    return x.element;\n}\n/**\n * Injection service is a helper to append components\n * dynamically to a known location in the DOM, most\n * noteably for dialogs/tooltips appending to body.\n *\n * @export\n */\nclass InjectionService {\n    constructor(applicationRef, componentFactoryResolver, injector) {\n        this.applicationRef = applicationRef;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.injector = injector;\n    }\n    /**\n     * Sets a default global root view container. This is useful for\n     * things like ngUpgrade that doesn't have a ApplicationRef root.\n     *\n     * @param container\n     */\n    static setGlobalRootViewContainer(container) {\n        InjectionService.globalRootViewContainer = container;\n    }\n    /**\n     * Gets the root view container to inject the component to.\n     *\n     * @memberOf InjectionService\n     */\n    getRootViewContainer() {\n        if (this._container)\n            return this._container;\n        if (InjectionService.globalRootViewContainer)\n            return InjectionService.globalRootViewContainer;\n        if (this.applicationRef.components.length)\n            return this.applicationRef.components[0];\n        throw new Error('View Container not found! ngUpgrade needs to manually set this via setRootViewContainer or setGlobalRootViewContainer.');\n    }\n    /**\n     * Overrides the default root view container. This is useful for\n     * things like ngUpgrade that doesn't have a ApplicationRef root.\n     *\n     * @param container\n     *\n     * @memberOf InjectionService\n     */\n    setRootViewContainer(container) {\n        this._container = container;\n    }\n    /**\n     * Gets the html element for a component ref.\n     *\n     * @param componentRef\n     *\n     * @memberOf InjectionService\n     */\n    getComponentRootNode(component) {\n        if (isViewContainerRef(component)) {\n            return component.element.nativeElement;\n        }\n        if (component.hostView && component.hostView.rootNodes.length > 0) {\n            return component.hostView.rootNodes[0];\n        }\n        // the top most component root node has no `hostView`\n        return component.location.nativeElement;\n    }\n    /**\n     * Gets the root component container html element.\n     *\n     * @memberOf InjectionService\n     */\n    getRootViewContainerNode(component) {\n        return this.getComponentRootNode(component);\n    }\n    /**\n     * Projects the bindings onto the component\n     *\n     * @param component\n     * @param options\n     *\n     * @memberOf InjectionService\n     */\n    projectComponentBindings(component, bindings) {\n        if (bindings) {\n            if (bindings.inputs !== undefined) {\n                const bindingKeys = Object.getOwnPropertyNames(bindings.inputs);\n                for (const bindingName of bindingKeys) {\n                    component.instance[bindingName] = bindings.inputs[bindingName];\n                }\n            }\n            if (bindings.outputs !== undefined) {\n                const eventKeys = Object.getOwnPropertyNames(bindings.outputs);\n                for (const eventName of eventKeys) {\n                    component.instance[eventName] = bindings.outputs[eventName];\n                }\n            }\n        }\n        return component;\n    }\n    /**\n     * Appends a component to a adjacent location\n     *\n     * @param componentClass\n     * @param [options={}]\n     * @param [location]\n     *\n     * @memberOf InjectionService\n     */\n    appendComponent(componentClass, bindings = {}, location) {\n        if (!location)\n            location = this.getRootViewContainer();\n        const appendLocation = this.getComponentRootNode(location);\n        const portalHost = new DomPortalOutlet(appendLocation, this.componentFactoryResolver, this.applicationRef, this.injector);\n        const portal = new ComponentPortal(componentClass);\n        const componentRef = portalHost.attach(portal);\n        this.projectComponentBindings(componentRef, bindings);\n        return componentRef;\n    }\n}\nInjectionService.globalRootViewContainer = null;\nInjectionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: InjectionService, deps: [{ token: i0.ApplicationRef }, { token: i0.ComponentFactoryResolver }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });\nInjectionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: InjectionService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: InjectionService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.ApplicationRef }, { type: i0.ComponentFactoryResolver }, { type: i0.Injector }]; } });\n\nclass TooltipService extends InjectionRegisteryService {\n    constructor(injectionService) {\n        super(injectionService);\n        this.type = TooltipContentComponent;\n    }\n}\nTooltipService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipService, deps: [{ token: InjectionService }], target: i0.ɵɵFactoryTarget.Injectable });\nTooltipService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: InjectionService }]; } });\n\nvar LegendPosition;\n(function (LegendPosition) {\n    LegendPosition[\"Right\"] = \"right\";\n    LegendPosition[\"Below\"] = \"below\";\n})(LegendPosition || (LegendPosition = {}));\nvar LegendType;\n(function (LegendType) {\n    LegendType[\"ScaleLegend\"] = \"scaleLegend\";\n    LegendType[\"Legend\"] = \"legend\";\n})(LegendType || (LegendType = {}));\n\nvar ScaleType;\n(function (ScaleType) {\n    ScaleType[\"Time\"] = \"time\";\n    ScaleType[\"Linear\"] = \"linear\";\n    ScaleType[\"Ordinal\"] = \"ordinal\";\n    ScaleType[\"Quantile\"] = \"quantile\";\n})(ScaleType || (ScaleType = {}));\n\nclass ScaleLegendComponent {\n    constructor() {\n        this.horizontal = false;\n    }\n    ngOnChanges(changes) {\n        const gradientValues = this.gradientString(this.colors.range(), this.colors.domain());\n        const direction = this.horizontal ? 'right' : 'bottom';\n        this.gradient = `linear-gradient(to ${direction}, ${gradientValues})`;\n    }\n    /**\n     * Generates the string used in the gradient stylesheet properties\n     * @param colors array of colors\n     * @param splits array of splits on a scale of (0, 1)\n     */\n    gradientString(colors, splits) {\n        // add the 100%\n        splits.push(1);\n        const pairs = [];\n        colors.reverse().forEach((c, i) => {\n            pairs.push(`${c} ${Math.round(splits[i] * 100)}%`);\n        });\n        return pairs.join(', ');\n    }\n}\nScaleLegendComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ScaleLegendComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nScaleLegendComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: ScaleLegendComponent, selector: \"ngx-charts-scale-legend\", inputs: { valueRange: \"valueRange\", colors: \"colors\", height: \"height\", width: \"width\", horizontal: \"horizontal\" }, usesOnChanges: true, ngImport: i0, template: `\n    <div\n      class=\"scale-legend\"\n      [class.horizontal-legend]=\"horizontal\"\n      [style.height.px]=\"horizontal ? undefined : height\"\n      [style.width.px]=\"width\"\n    >\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[1].toLocaleString() }}</span>\n      </div>\n      <div class=\"scale-legend-wrap\" [style.background]=\"gradient\"></div>\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[0].toLocaleString() }}</span>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .scale-legend{text-align:center;display:flex;flex-direction:column}.chart-legend .scale-legend-wrap{display:inline-block;flex:1;width:30px;border-radius:5px;margin:0 auto}.chart-legend .scale-legend-label{font-size:12px}.chart-legend .horizontal-legend.scale-legend{flex-direction:row}.chart-legend .horizontal-legend .scale-legend-wrap{width:auto;height:30px;margin:0 16px}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ScaleLegendComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-scale-legend', template: `\n    <div\n      class=\"scale-legend\"\n      [class.horizontal-legend]=\"horizontal\"\n      [style.height.px]=\"horizontal ? undefined : height\"\n      [style.width.px]=\"width\"\n    >\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[1].toLocaleString() }}</span>\n      </div>\n      <div class=\"scale-legend-wrap\" [style.background]=\"gradient\"></div>\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[0].toLocaleString() }}</span>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .scale-legend{text-align:center;display:flex;flex-direction:column}.chart-legend .scale-legend-wrap{display:inline-block;flex:1;width:30px;border-radius:5px;margin:0 auto}.chart-legend .scale-legend-label{font-size:12px}.chart-legend .horizontal-legend.scale-legend{flex-direction:row}.chart-legend .horizontal-legend .scale-legend-wrap{width:auto;height:30px;margin:0 16px}\\n\"] }]\n        }], propDecorators: { valueRange: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], horizontal: [{\n                type: Input\n            }] } });\n\n/**\n * Formats a label given a date, number or string.\n *\n * @export\n */\nfunction formatLabel(label) {\n    if (label instanceof Date) {\n        label = label.toLocaleDateString();\n    }\n    else {\n        label = label.toLocaleString();\n    }\n    return label;\n}\n/**\n * Escapes a label.\n *\n * @export\n */\nfunction escapeLabel(label) {\n    return label.toLocaleString().replace(/[&'`\"<>]/g, match => {\n        return {\n            '&': '&amp;',\n            // tslint:disable-next-line: quotemark\n            \"'\": '&#x27;',\n            '`': '&#x60;',\n            '\"': '&quot;',\n            '<': '&lt;',\n            '>': '&gt;'\n        }[match];\n    });\n}\n\nclass LegendEntryComponent {\n    constructor() {\n        this.isActive = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.toggle = new EventEmitter();\n    }\n    get trimmedLabel() {\n        return this.formattedLabel || '(empty)';\n    }\n    onMouseEnter() {\n        this.activate.emit({ name: this.label });\n    }\n    onMouseLeave() {\n        this.deactivate.emit({ name: this.label });\n    }\n}\nLegendEntryComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LegendEntryComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nLegendEntryComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LegendEntryComponent, selector: \"ngx-charts-legend-entry\", inputs: { color: \"color\", label: \"label\", formattedLabel: \"formattedLabel\", isActive: \"isActive\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", toggle: \"toggle\" }, host: { listeners: { \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, ngImport: i0, template: `\n    <span [title]=\"formattedLabel\" tabindex=\"-1\" [class.active]=\"isActive\" (click)=\"select.emit(formattedLabel)\">\n      <span class=\"legend-label-color\" [style.background-color]=\"color\" (click)=\"toggle.emit(formattedLabel)\"> </span>\n      <span class=\"legend-label-text\">\n        {{ trimmedLabel }}\n      </span>\n    </span>\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LegendEntryComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'ngx-charts-legend-entry',\n                    template: `\n    <span [title]=\"formattedLabel\" tabindex=\"-1\" [class.active]=\"isActive\" (click)=\"select.emit(formattedLabel)\">\n      <span class=\"legend-label-color\" [style.background-color]=\"color\" (click)=\"toggle.emit(formattedLabel)\"> </span>\n      <span class=\"legend-label-text\">\n        {{ trimmedLabel }}\n      </span>\n    </span>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { color: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], formattedLabel: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], toggle: [{\n                type: Output\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass LegendComponent {\n    constructor(cd) {\n        this.cd = cd;\n        this.horizontal = false;\n        this.labelClick = new EventEmitter();\n        this.labelActivate = new EventEmitter();\n        this.labelDeactivate = new EventEmitter();\n        this.legendEntries = [];\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.cd.markForCheck();\n        this.legendEntries = this.getLegendEntries();\n    }\n    getLegendEntries() {\n        const items = [];\n        for (const label of this.data) {\n            const formattedLabel = formatLabel(label);\n            const idx = items.findIndex(i => {\n                return i.label === formattedLabel;\n            });\n            if (idx === -1) {\n                items.push({\n                    label,\n                    formattedLabel,\n                    color: this.colors.getColor(label)\n                });\n            }\n        }\n        return items;\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.label === d.name;\n        });\n        return item !== undefined;\n    }\n    activate(item) {\n        this.labelActivate.emit(item);\n    }\n    deactivate(item) {\n        this.labelDeactivate.emit(item);\n    }\n    trackBy(index, item) {\n        return item.label;\n    }\n}\nLegendComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LegendComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nLegendComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LegendComponent, selector: \"ngx-charts-legend\", inputs: { data: \"data\", title: \"title\", colors: \"colors\", height: \"height\", width: \"width\", activeEntries: \"activeEntries\", horizontal: \"horizontal\" }, outputs: { labelClick: \"labelClick\", labelActivate: \"labelActivate\", labelDeactivate: \"labelDeactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <div [style.width.px]=\"width\">\n      <header class=\"legend-title\" *ngIf=\"title?.length > 0\">\n        <span class=\"legend-title-text\">{{ title }}</span>\n      </header>\n      <div class=\"legend-wrap\">\n        <ul class=\"legend-labels\" [class.horizontal-legend]=\"horizontal\" [style.max-height.px]=\"height - 45\">\n          <li *ngFor=\"let entry of legendEntries; trackBy: trackBy\" class=\"legend-label\">\n            <ngx-charts-legend-entry\n              [label]=\"entry.label\"\n              [formattedLabel]=\"entry.formattedLabel\"\n              [color]=\"entry.color\"\n              [isActive]=\"isActive(entry)\"\n              (select)=\"labelClick.emit($event)\"\n              (activate)=\"activate($event)\"\n              (deactivate)=\"deactivate($event)\"\n            >\n            </ngx-charts-legend-entry>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .legend-title{white-space:nowrap;overflow:hidden;margin-left:10px;margin-bottom:5px;font-size:14px;font-weight:700}.chart-legend ul,.chart-legend li{padding:0;margin:0;list-style:none}.chart-legend .horizontal-legend li{display:inline-block}.chart-legend .legend-wrap{width:calc(100% - 10px)}.chart-legend .legend-labels{line-height:85%;list-style:none;text-align:left;float:left;width:100%;border-radius:3px;overflow-y:auto;overflow-x:hidden;white-space:nowrap;background:rgba(0,0,0,.05)}.chart-legend .legend-label{cursor:pointer;font-size:90%;margin:8px;color:#afb7c8}.chart-legend .legend-label:hover{color:#000;transition:.2s}.chart-legend .legend-label .active .legend-label-text{color:#000}.chart-legend .legend-label-color{display:inline-block;height:15px;width:15px;margin-right:5px;color:#5b646b;border-radius:3px}.chart-legend .legend-label-text{display:inline-block;vertical-align:top;line-height:15px;font-size:12px;width:calc(100% - 20px);text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.chart-legend .legend-title-text{vertical-align:bottom;display:inline-block;line-height:16px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}\\n\"], components: [{ type: LegendEntryComponent, selector: \"ngx-charts-legend-entry\", inputs: [\"color\", \"label\", \"formattedLabel\", \"isActive\"], outputs: [\"select\", \"activate\", \"deactivate\", \"toggle\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LegendComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-legend', template: `\n    <div [style.width.px]=\"width\">\n      <header class=\"legend-title\" *ngIf=\"title?.length > 0\">\n        <span class=\"legend-title-text\">{{ title }}</span>\n      </header>\n      <div class=\"legend-wrap\">\n        <ul class=\"legend-labels\" [class.horizontal-legend]=\"horizontal\" [style.max-height.px]=\"height - 45\">\n          <li *ngFor=\"let entry of legendEntries; trackBy: trackBy\" class=\"legend-label\">\n            <ngx-charts-legend-entry\n              [label]=\"entry.label\"\n              [formattedLabel]=\"entry.formattedLabel\"\n              [color]=\"entry.color\"\n              [isActive]=\"isActive(entry)\"\n              (select)=\"labelClick.emit($event)\"\n              (activate)=\"activate($event)\"\n              (deactivate)=\"deactivate($event)\"\n            >\n            </ngx-charts-legend-entry>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .legend-title{white-space:nowrap;overflow:hidden;margin-left:10px;margin-bottom:5px;font-size:14px;font-weight:700}.chart-legend ul,.chart-legend li{padding:0;margin:0;list-style:none}.chart-legend .horizontal-legend li{display:inline-block}.chart-legend .legend-wrap{width:calc(100% - 10px)}.chart-legend .legend-labels{line-height:85%;list-style:none;text-align:left;float:left;width:100%;border-radius:3px;overflow-y:auto;overflow-x:hidden;white-space:nowrap;background:rgba(0,0,0,.05)}.chart-legend .legend-label{cursor:pointer;font-size:90%;margin:8px;color:#afb7c8}.chart-legend .legend-label:hover{color:#000;transition:.2s}.chart-legend .legend-label .active .legend-label-text{color:#000}.chart-legend .legend-label-color{display:inline-block;height:15px;width:15px;margin-right:5px;color:#5b646b;border-radius:3px}.chart-legend .legend-label-text{display:inline-block;vertical-align:top;line-height:15px;font-size:12px;width:calc(100% - 20px);text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.chart-legend .legend-title-text{vertical-align:bottom;display:inline-block;line-height:16px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], horizontal: [{\n                type: Input\n            }], labelClick: [{\n                type: Output\n            }], labelActivate: [{\n                type: Output\n            }], labelDeactivate: [{\n                type: Output\n            }] } });\n\nclass ChartComponent {\n    constructor() {\n        this.showLegend = false;\n        this.animations = true;\n        this.legendLabelClick = new EventEmitter();\n        this.legendLabelActivate = new EventEmitter();\n        this.legendLabelDeactivate = new EventEmitter();\n        this.LegendPosition = LegendPosition;\n        this.LegendType = LegendType;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        let legendColumns = 0;\n        if (this.showLegend) {\n            this.legendType = this.getLegendType();\n            if (!this.legendOptions || this.legendOptions.position === LegendPosition.Right) {\n                if (this.legendType === LegendType.ScaleLegend) {\n                    legendColumns = 1;\n                }\n                else {\n                    legendColumns = 2;\n                }\n            }\n        }\n        const chartColumns = 12 - legendColumns;\n        this.chartWidth = Math.floor((this.view[0] * chartColumns) / 12.0);\n        this.legendWidth =\n            !this.legendOptions || this.legendOptions.position === LegendPosition.Right\n                ? Math.floor((this.view[0] * legendColumns) / 12.0)\n                : this.chartWidth;\n    }\n    getLegendType() {\n        return this.legendOptions.scaleType === ScaleType.Linear ? LegendType.ScaleLegend : LegendType.Legend;\n    }\n}\nChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: ChartComponent, selector: \"ngx-charts-chart\", inputs: { view: \"view\", showLegend: \"showLegend\", legendOptions: \"legendOptions\", legendType: \"legendType\", activeEntries: \"activeEntries\", animations: \"animations\" }, outputs: { legendLabelClick: \"legendLabelClick\", legendLabelActivate: \"legendLabelActivate\", legendLabelDeactivate: \"legendLabelDeactivate\" }, providers: [TooltipService], usesOnChanges: true, ngImport: i0, template: `\n    <div class=\"ngx-charts-outer\" [style.width.px]=\"view[0]\">\n      <svg class=\"ngx-charts\" [attr.width]=\"chartWidth\" [attr.height]=\"view[1]\">\n        <ng-content></ng-content>\n      </svg>\n      <ngx-charts-scale-legend\n        *ngIf=\"showLegend && legendType === LegendType.ScaleLegend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [valueRange]=\"legendOptions.domain\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n      >\n      </ngx-charts-scale-legend>\n      <ngx-charts-legend\n        *ngIf=\"showLegend && legendType === LegendType.Legend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [data]=\"legendOptions.domain\"\n        [title]=\"legendOptions.title\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n        [activeEntries]=\"activeEntries\"\n        (labelClick)=\"legendLabelClick.emit($event)\"\n        (labelActivate)=\"legendLabelActivate.emit($event)\"\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\n      >\n      </ngx-charts-legend>\n    </div>\n  `, isInline: true, components: [{ type: ScaleLegendComponent, selector: \"ngx-charts-scale-legend\", inputs: [\"valueRange\", \"colors\", \"height\", \"width\", \"horizontal\"] }, { type: LegendComponent, selector: \"ngx-charts-legend\", inputs: [\"data\", \"title\", \"colors\", \"height\", \"width\", \"activeEntries\", \"horizontal\"], outputs: [\"labelClick\", \"labelActivate\", \"labelDeactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartComponent, decorators: [{\n            type: Component,\n            args: [{\n                    providers: [TooltipService],\n                    selector: 'ngx-charts-chart',\n                    template: `\n    <div class=\"ngx-charts-outer\" [style.width.px]=\"view[0]\">\n      <svg class=\"ngx-charts\" [attr.width]=\"chartWidth\" [attr.height]=\"view[1]\">\n        <ng-content></ng-content>\n      </svg>\n      <ngx-charts-scale-legend\n        *ngIf=\"showLegend && legendType === LegendType.ScaleLegend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [valueRange]=\"legendOptions.domain\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n      >\n      </ngx-charts-scale-legend>\n      <ngx-charts-legend\n        *ngIf=\"showLegend && legendType === LegendType.Legend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [data]=\"legendOptions.domain\"\n        [title]=\"legendOptions.title\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n        [activeEntries]=\"activeEntries\"\n        (labelClick)=\"legendLabelClick.emit($event)\"\n        (labelActivate)=\"legendLabelActivate.emit($event)\"\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\n      >\n      </ngx-charts-legend>\n    </div>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { view: [{\n                type: Input\n            }], showLegend: [{\n                type: Input\n            }], legendOptions: [{\n                type: Input\n            }], legendType: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], legendLabelClick: [{\n                type: Output\n            }], legendLabelActivate: [{\n                type: Output\n            }], legendLabelDeactivate: [{\n                type: Output\n            }] } });\n\n/**\n * Visibility Observer\n */\nclass VisibilityObserver {\n    constructor(element, zone) {\n        this.element = element;\n        this.zone = zone;\n        this.visible = new EventEmitter();\n        this.isVisible = false;\n        this.runCheck();\n    }\n    destroy() {\n        clearTimeout(this.timeout);\n    }\n    onVisibilityChange() {\n        // trigger zone recalc for columns\n        this.zone.run(() => {\n            this.isVisible = true;\n            this.visible.emit(true);\n        });\n    }\n    runCheck() {\n        const check = () => {\n            if (!this.element) {\n                return;\n            }\n            // https://davidwalsh.name/offsetheight-visibility\n            const { offsetHeight, offsetWidth } = this.element.nativeElement;\n            if (offsetHeight && offsetWidth) {\n                clearTimeout(this.timeout);\n                this.onVisibilityChange();\n            }\n            else {\n                clearTimeout(this.timeout);\n                this.zone.runOutsideAngular(() => {\n                    this.timeout = setTimeout(() => check(), 100);\n                });\n            }\n        };\n        this.zone.runOutsideAngular(() => {\n            this.timeout = setTimeout(() => check());\n        });\n    }\n}\nVisibilityObserver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: VisibilityObserver, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nVisibilityObserver.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: VisibilityObserver, selector: \"visibility-observer\", outputs: { visible: \"visible\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: VisibilityObserver, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'visibility-observer'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { visible: [{\n                type: Output\n            }] } });\n\nfunction isDate(value) {\n    return toString.call(value) === '[object Date]';\n}\nfunction isNumber(value) {\n    return typeof value === 'number';\n}\n\nclass BaseChartComponent {\n    constructor(chartElement, zone, cd, platformId) {\n        this.chartElement = chartElement;\n        this.zone = zone;\n        this.cd = cd;\n        this.platformId = platformId;\n        this.scheme = 'cool';\n        this.schemeType = ScaleType.Ordinal;\n        this.animations = true;\n        this.select = new EventEmitter();\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.animations = false;\n        }\n    }\n    ngAfterViewInit() {\n        this.bindWindowResizeEvent();\n        // listen for visibility of the element for hidden by default scenario\n        this.visibilityObserver = new VisibilityObserver(this.chartElement, this.zone);\n        this.visibilityObserver.visible.subscribe(this.update.bind(this));\n    }\n    ngOnDestroy() {\n        this.unbindEvents();\n        if (this.visibilityObserver) {\n            this.visibilityObserver.visible.unsubscribe();\n            this.visibilityObserver.destroy();\n        }\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        if (this.results) {\n            this.results = this.cloneData(this.results);\n        }\n        else {\n            this.results = [];\n        }\n        if (this.view) {\n            this.width = this.view[0];\n            this.height = this.view[1];\n        }\n        else {\n            const dims = this.getContainerDims();\n            if (dims) {\n                this.width = dims.width;\n                this.height = dims.height;\n            }\n        }\n        // default values if width or height are 0 or undefined\n        if (!this.width) {\n            this.width = 600;\n        }\n        if (!this.height) {\n            this.height = 400;\n        }\n        this.width = Math.floor(this.width);\n        this.height = Math.floor(this.height);\n        if (this.cd) {\n            this.cd.markForCheck();\n        }\n    }\n    getContainerDims() {\n        let width;\n        let height;\n        const hostElem = this.chartElement.nativeElement;\n        if (isPlatformBrowser(this.platformId) && hostElem.parentNode !== null) {\n            // Get the container dimensions\n            const dims = hostElem.parentNode.getBoundingClientRect();\n            width = dims.width;\n            height = dims.height;\n        }\n        if (width && height) {\n            return { width, height };\n        }\n        return null;\n    }\n    /**\n     * Converts all date objects that appear as name\n     * into formatted date strings\n     */\n    formatDates() {\n        for (let i = 0; i < this.results.length; i++) {\n            const g = this.results[i];\n            g.label = g.name;\n            if (isDate(g.label)) {\n                g.label = g.label.toLocaleDateString();\n            }\n            if (g.series) {\n                for (let j = 0; j < g.series.length; j++) {\n                    const d = g.series[j];\n                    d.label = d.name;\n                    if (isDate(d.label)) {\n                        d.label = d.label.toLocaleDateString();\n                    }\n                }\n            }\n        }\n    }\n    unbindEvents() {\n        if (this.resizeSubscription) {\n            this.resizeSubscription.unsubscribe();\n        }\n    }\n    bindWindowResizeEvent() {\n        if (!isPlatformBrowser(this.platformId)) {\n            return;\n        }\n        const source = fromEvent(window, 'resize');\n        const subscription = source.pipe(debounceTime(200)).subscribe(e => {\n            this.update();\n            if (this.cd) {\n                this.cd.markForCheck();\n            }\n        });\n        this.resizeSubscription = subscription;\n    }\n    /**\n     * Clones the data into a new object\n     *\n     * @memberOf BaseChart\n     */\n    cloneData(data) {\n        const results = [];\n        for (const item of data) {\n            const copy = {\n                name: item['name']\n            };\n            if (item['value'] !== undefined) {\n                copy['value'] = item['value'];\n            }\n            if (item['series'] !== undefined) {\n                copy['series'] = [];\n                for (const seriesItem of item['series']) {\n                    const seriesItemCopy = Object.assign({}, seriesItem);\n                    copy['series'].push(seriesItemCopy);\n                }\n            }\n            if (item['extra'] !== undefined) {\n                copy['extra'] = JSON.parse(JSON.stringify(item['extra']));\n            }\n            results.push(copy);\n        }\n        return results;\n    }\n}\nBaseChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BaseChartComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nBaseChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BaseChartComponent, selector: \"base-chart\", inputs: { results: \"results\", view: \"view\", scheme: \"scheme\", schemeType: \"schemeType\", customColors: \"customColors\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: ` <div></div> `, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BaseChartComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'base-chart',\n                    template: ` <div></div> `\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { results: [{\n                type: Input\n            }], view: [{\n                type: Input\n            }], scheme: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], customColors: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nvar Orientation;\n(function (Orientation) {\n    Orientation[\"Top\"] = \"top\";\n    Orientation[\"Bottom\"] = \"bottom\";\n    Orientation[\"Left\"] = \"left\";\n    Orientation[\"Right\"] = \"right\";\n})(Orientation || (Orientation = {}));\n\nclass AxisLabelComponent {\n    constructor(element) {\n        this.textHeight = 25;\n        this.margin = 5;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.strokeWidth = '0.01';\n        this.textAnchor = 'middle';\n        this.transform = '';\n        switch (this.orient) {\n            case Orientation.Top:\n                this.y = this.offset;\n                this.x = this.width / 2;\n                break;\n            case Orientation.Bottom:\n                this.y = this.offset;\n                this.x = this.width / 2;\n                break;\n            case Orientation.Left:\n                this.y = -(this.offset + this.textHeight + this.margin);\n                this.x = -this.height / 2;\n                this.transform = 'rotate(270)';\n                break;\n            case Orientation.Right:\n                this.y = this.offset + this.margin;\n                this.x = -this.height / 2;\n                this.transform = 'rotate(270)';\n                break;\n            default:\n        }\n    }\n}\nAxisLabelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxisLabelComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nAxisLabelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AxisLabelComponent, selector: \"g[ngx-charts-axis-label]\", inputs: { orient: \"orient\", label: \"label\", offset: \"offset\", width: \"width\", height: \"height\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:text\n      [attr.stroke-width]=\"strokeWidth\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n    >\n      {{ label }}\n    </svg:text>\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxisLabelComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-axis-label]',\n                    template: `\n    <svg:text\n      [attr.stroke-width]=\"strokeWidth\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n    >\n      {{ label }}\n    </svg:text>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { orient: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], offset: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }] } });\n\nfunction trimLabel(s, max = 16) {\n    if (typeof s !== 'string') {\n        if (typeof s === 'number') {\n            return s + '';\n        }\n        else {\n            return '';\n        }\n    }\n    s = s.trim();\n    if (s.length <= max) {\n        return s;\n    }\n    else {\n        return `${s.slice(0, max)}...`;\n    }\n}\n\nfunction reduceTicks(ticks, maxTicks) {\n    if (ticks.length > maxTicks) {\n        const reduced = [];\n        const modulus = Math.floor(ticks.length / maxTicks);\n        for (let i = 0; i < ticks.length; i++) {\n            if (i % modulus === 0) {\n                reduced.push(ticks[i]);\n            }\n        }\n        ticks = reduced;\n    }\n    return ticks;\n}\n\nvar TextAnchor;\n(function (TextAnchor) {\n    TextAnchor[\"Start\"] = \"start\";\n    TextAnchor[\"Middle\"] = \"middle\";\n    TextAnchor[\"End\"] = \"end\";\n})(TextAnchor || (TextAnchor = {}));\n\nclass XAxisTicksComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.tickArguments = [5];\n        this.tickStroke = '#ccc';\n        this.trimTicks = true;\n        this.maxTickLength = 16;\n        this.showGridLines = false;\n        this.rotateTicks = true;\n        this.dimensionsChanged = new EventEmitter();\n        this.verticalSpacing = 20;\n        this.rotateLabels = false;\n        this.innerTickSize = 6;\n        this.outerTickSize = 6;\n        this.tickPadding = 3;\n        this.textAnchor = TextAnchor.Middle;\n        this.maxTicksLength = 0;\n        this.maxAllowedLength = 16;\n        this.height = 0;\n        this.approxHeight = 10;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    ngAfterViewInit() {\n        setTimeout(() => this.updateDims());\n    }\n    updateDims() {\n        if (!isPlatformBrowser(this.platformId)) {\n            // for SSR, use approximate value instead of measured\n            this.dimensionsChanged.emit({ height: this.approxHeight });\n            return;\n        }\n        const height = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().height, 10);\n        if (height !== this.height) {\n            this.height = height;\n            this.dimensionsChanged.emit({ height: this.height });\n            setTimeout(() => this.updateDims());\n        }\n    }\n    update() {\n        const scale = this.scale;\n        this.ticks = this.getTicks();\n        if (this.tickFormatting) {\n            this.tickFormat = this.tickFormatting;\n        }\n        else if (scale.tickFormat) {\n            this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n        }\n        else {\n            this.tickFormat = function (d) {\n                if (d.constructor.name === 'Date') {\n                    return d.toLocaleDateString();\n                }\n                return d.toLocaleString();\n            };\n        }\n        const angle = this.rotateTicks ? this.getRotationAngle(this.ticks) : null;\n        this.adjustedScale = this.scale.bandwidth\n            ? function (d) {\n                return this.scale(d) + this.scale.bandwidth() * 0.5;\n            }\n            : this.scale;\n        this.textTransform = '';\n        if (angle && angle !== 0) {\n            this.textTransform = `rotate(${angle})`;\n            this.textAnchor = TextAnchor.End;\n            this.verticalSpacing = 10;\n        }\n        else {\n            this.textAnchor = TextAnchor.Middle;\n        }\n        setTimeout(() => this.updateDims());\n    }\n    getRotationAngle(ticks) {\n        let angle = 0;\n        this.maxTicksLength = 0;\n        for (let i = 0; i < ticks.length; i++) {\n            const tick = this.tickFormat(ticks[i]).toString();\n            let tickLength = tick.length;\n            if (this.trimTicks) {\n                tickLength = this.tickTrim(tick).length;\n            }\n            if (tickLength > this.maxTicksLength) {\n                this.maxTicksLength = tickLength;\n            }\n        }\n        const len = Math.min(this.maxTicksLength, this.maxAllowedLength);\n        const charWidth = 7; // need to measure this\n        const wordWidth = len * charWidth;\n        let baseWidth = wordWidth;\n        const maxBaseWidth = Math.floor(this.width / ticks.length);\n        // calculate optimal angle\n        while (baseWidth > maxBaseWidth && angle > -90) {\n            angle -= 30;\n            baseWidth = Math.cos(angle * (Math.PI / 180)) * wordWidth;\n        }\n        this.approxHeight = Math.max(Math.abs(Math.sin(angle * (Math.PI / 180)) * wordWidth), 10);\n        return angle;\n    }\n    getTicks() {\n        let ticks;\n        const maxTicks = this.getMaxTicks(20);\n        const maxScaleTicks = this.getMaxTicks(100);\n        if (this.tickValues) {\n            ticks = this.tickValues;\n        }\n        else if (this.scale.ticks) {\n            ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n        }\n        else {\n            ticks = this.scale.domain();\n            ticks = reduceTicks(ticks, maxTicks);\n        }\n        return ticks;\n    }\n    getMaxTicks(tickWidth) {\n        return Math.floor(this.width / tickWidth);\n    }\n    tickTransform(tick) {\n        return 'translate(' + this.adjustedScale(tick) + ',' + this.verticalSpacing + ')';\n    }\n    gridLineTransform() {\n        return `translate(0,${-this.verticalSpacing - 5})`;\n    }\n    tickTrim(label) {\n        return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n    }\n}\nXAxisTicksComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: XAxisTicksComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nXAxisTicksComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: XAxisTicksComponent, selector: \"g[ngx-charts-x-axis-ticks]\", inputs: { scale: \"scale\", orient: \"orient\", tickArguments: \"tickArguments\", tickValues: \"tickValues\", tickStroke: \"tickStroke\", trimTicks: \"trimTicks\", maxTickLength: \"maxTickLength\", tickFormatting: \"tickFormatting\", showGridLines: \"showGridLines\", gridLineHeight: \"gridLineHeight\", width: \"width\", rotateTicks: \"rotateTicks\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, viewQueries: [{ propertyName: \"ticksElement\", first: true, predicate: [\"ticksel\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"tickTransform(tick)\">\n        <title>{{ tickFormat(tick) }}</title>\n        <svg:text\n          stroke-width=\"0.01\"\n          [attr.text-anchor]=\"textAnchor\"\n          [attr.transform]=\"textTransform\"\n          [style.font-size]=\"'12px'\"\n        >\n          {{ tickTrim(tickFormat(tick)) }}\n        </svg:text>\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"tickTransform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line class=\"gridline-path gridline-path-vertical\" [attr.y1]=\"-gridLineHeight\" y2=\"0\" />\n      </svg:g>\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: XAxisTicksComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-x-axis-ticks]',\n                    template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"tickTransform(tick)\">\n        <title>{{ tickFormat(tick) }}</title>\n        <svg:text\n          stroke-width=\"0.01\"\n          [attr.text-anchor]=\"textAnchor\"\n          [attr.transform]=\"textTransform\"\n          [style.font-size]=\"'12px'\"\n        >\n          {{ tickTrim(tickFormat(tick)) }}\n        </svg:text>\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"tickTransform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line class=\"gridline-path gridline-path-vertical\" [attr.y1]=\"-gridLineHeight\" y2=\"0\" />\n      </svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { scale: [{\n                type: Input\n            }], orient: [{\n                type: Input\n            }], tickArguments: [{\n                type: Input\n            }], tickValues: [{\n                type: Input\n            }], tickStroke: [{\n                type: Input\n            }], trimTicks: [{\n                type: Input\n            }], maxTickLength: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], gridLineHeight: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], rotateTicks: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }], ticksElement: [{\n                type: ViewChild,\n                args: ['ticksel']\n            }] } });\n\nclass XAxisComponent {\n    constructor() {\n        this.rotateTicks = true;\n        this.showGridLines = false;\n        this.xOrient = Orientation.Bottom;\n        this.xAxisOffset = 0;\n        this.dimensionsChanged = new EventEmitter();\n        this.xAxisClassName = 'x axis';\n        this.labelOffset = 0;\n        this.fill = 'none';\n        this.stroke = 'stroke';\n        this.tickStroke = '#ccc';\n        this.strokeWidth = 'none';\n        this.padding = 5;\n        this.orientation = Orientation;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.transform = `translate(0,${this.xAxisOffset + this.padding + this.dims.height})`;\n        if (typeof this.xAxisTickCount !== 'undefined') {\n            this.tickArguments = [this.xAxisTickCount];\n        }\n    }\n    emitTicksHeight({ height }) {\n        const newLabelOffset = height + 25 + 5;\n        if (newLabelOffset !== this.labelOffset) {\n            this.labelOffset = newLabelOffset;\n            setTimeout(() => {\n                this.dimensionsChanged.emit({ height });\n            }, 0);\n        }\n    }\n}\nXAxisComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: XAxisComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nXAxisComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: { xScale: \"xScale\", dims: \"dims\", trimTicks: \"trimTicks\", rotateTicks: \"rotateTicks\", maxTickLength: \"maxTickLength\", tickFormatting: \"tickFormatting\", showGridLines: \"showGridLines\", showLabel: \"showLabel\", labelText: \"labelText\", ticks: \"ticks\", xAxisTickCount: \"xAxisTickCount\", xOrient: \"xOrient\", xAxisOffset: \"xAxisOffset\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, viewQueries: [{ propertyName: \"ticksComponent\", first: true, predicate: XAxisTicksComponent, descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.class]=\"xAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-x-axis-ticks\n        *ngIf=\"xScale\"\n        [trimTicks]=\"trimTicks\"\n        [rotateTicks]=\"rotateTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"xScale\"\n        [orient]=\"xOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineHeight]=\"dims.height\"\n        [width]=\"dims.width\"\n        [tickValues]=\"ticks\"\n        (dimensionsChanged)=\"emitTicksHeight($event)\"\n      />\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"orientation.Bottom\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: XAxisTicksComponent, selector: \"g[ngx-charts-x-axis-ticks]\", inputs: [\"scale\", \"orient\", \"tickArguments\", \"tickValues\", \"tickStroke\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"gridLineHeight\", \"width\", \"rotateTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AxisLabelComponent, selector: \"g[ngx-charts-axis-label]\", inputs: [\"orient\", \"label\", \"offset\", \"width\", \"height\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: XAxisComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-x-axis]',\n                    template: `\n    <svg:g [attr.class]=\"xAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-x-axis-ticks\n        *ngIf=\"xScale\"\n        [trimTicks]=\"trimTicks\"\n        [rotateTicks]=\"rotateTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"xScale\"\n        [orient]=\"xOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineHeight]=\"dims.height\"\n        [width]=\"dims.width\"\n        [tickValues]=\"ticks\"\n        (dimensionsChanged)=\"emitTicksHeight($event)\"\n      />\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"orientation.Bottom\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { xScale: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], trimTicks: [{\n                type: Input\n            }], rotateTicks: [{\n                type: Input\n            }], maxTickLength: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], showLabel: [{\n                type: Input\n            }], labelText: [{\n                type: Input\n            }], ticks: [{\n                type: Input\n            }], xAxisTickCount: [{\n                type: Input\n            }], xOrient: [{\n                type: Input\n            }], xAxisOffset: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }], ticksComponent: [{\n                type: ViewChild,\n                args: [XAxisTicksComponent]\n            }] } });\n\n/**\n * Generates a rounded rectanglar path\n *\n * @export\n * @param x, y, w, h, r, tl, tr, bl, br\n */\nfunction roundedRect(x, y, w, h, r, [tl, tr, bl, br]) {\n    let retval = '';\n    w = Math.floor(w);\n    h = Math.floor(h);\n    w = w === 0 ? 1 : w;\n    h = h === 0 ? 1 : h;\n    retval = `M${[x + r, y]}`;\n    retval += `h${w - 2 * r}`;\n    if (tr) {\n        retval += `a${[r, r]} 0 0 1 ${[r, r]}`;\n    }\n    else {\n        retval += `h${r}v${r}`;\n    }\n    retval += `v${h - 2 * r}`;\n    if (br) {\n        retval += `a${[r, r]} 0 0 1 ${[-r, r]}`;\n    }\n    else {\n        retval += `v${r}h${-r}`;\n    }\n    retval += `h${2 * r - w}`;\n    if (bl) {\n        retval += `a${[r, r]} 0 0 1 ${[-r, -r]}`;\n    }\n    else {\n        retval += `h${-r}v${-r}`;\n    }\n    retval += `v${2 * r - h}`;\n    if (tl) {\n        retval += `a${[r, r]} 0 0 1 ${[r, -r]}`;\n    }\n    else {\n        retval += `v${-r}h${r}`;\n    }\n    retval += `z`;\n    return retval;\n}\n\nclass YAxisTicksComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.tickArguments = [5];\n        this.tickStroke = '#ccc';\n        this.trimTicks = true;\n        this.maxTickLength = 16;\n        this.showGridLines = false;\n        this.showRefLabels = false;\n        this.showRefLines = false;\n        this.dimensionsChanged = new EventEmitter();\n        this.innerTickSize = 6;\n        this.tickPadding = 3;\n        this.verticalSpacing = 20;\n        this.textAnchor = TextAnchor.Middle;\n        this.width = 0;\n        this.outerTickSize = 6;\n        this.rotateLabels = false;\n        this.referenceLineLength = 0;\n        this.Orientation = Orientation;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    ngAfterViewInit() {\n        setTimeout(() => this.updateDims());\n    }\n    updateDims() {\n        if (!isPlatformBrowser(this.platformId)) {\n            // for SSR, use approximate value instead of measured\n            this.width = this.getApproximateAxisWidth();\n            this.dimensionsChanged.emit({ width: this.width });\n            return;\n        }\n        const width = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().width, 10);\n        if (width !== this.width) {\n            this.width = width;\n            this.dimensionsChanged.emit({ width });\n            setTimeout(() => this.updateDims());\n        }\n    }\n    update() {\n        let scale;\n        const sign = this.orient === Orientation.Top || this.orient === Orientation.Right ? -1 : 1;\n        this.tickSpacing = Math.max(this.innerTickSize, 0) + this.tickPadding;\n        scale = this.scale;\n        this.ticks = this.getTicks();\n        if (this.tickFormatting) {\n            this.tickFormat = this.tickFormatting;\n        }\n        else if (scale.tickFormat) {\n            this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n        }\n        else {\n            this.tickFormat = function (d) {\n                if (d.constructor.name === 'Date') {\n                    return d.toLocaleDateString();\n                }\n                return d.toLocaleString();\n            };\n        }\n        this.adjustedScale = scale.bandwidth\n            ? function (d) {\n                return scale(d) + scale.bandwidth() * 0.5;\n            }\n            : scale;\n        if (this.showRefLines && this.referenceLines) {\n            this.setReferencelines();\n        }\n        switch (this.orient) {\n            case Orientation.Top:\n                this.transform = function (tick) {\n                    return 'translate(' + this.adjustedScale(tick) + ',0)';\n                };\n                this.textAnchor = TextAnchor.Middle;\n                this.y2 = this.innerTickSize * sign;\n                this.y1 = this.tickSpacing * sign;\n                this.dy = sign < 0 ? '0em' : '.71em';\n                break;\n            case Orientation.Bottom:\n                this.transform = function (tick) {\n                    return 'translate(' + this.adjustedScale(tick) + ',0)';\n                };\n                this.textAnchor = TextAnchor.Middle;\n                this.y2 = this.innerTickSize * sign;\n                this.y1 = this.tickSpacing * sign;\n                this.dy = sign < 0 ? '0em' : '.71em';\n                break;\n            case Orientation.Left:\n                this.transform = function (tick) {\n                    return 'translate(0,' + this.adjustedScale(tick) + ')';\n                };\n                this.textAnchor = TextAnchor.End;\n                this.x2 = this.innerTickSize * -sign;\n                this.x1 = this.tickSpacing * -sign;\n                this.dy = '.32em';\n                break;\n            case Orientation.Right:\n                this.transform = function (tick) {\n                    return 'translate(0,' + this.adjustedScale(tick) + ')';\n                };\n                this.textAnchor = TextAnchor.Start;\n                this.x2 = this.innerTickSize * -sign;\n                this.x1 = this.tickSpacing * -sign;\n                this.dy = '.32em';\n                break;\n            default:\n        }\n        setTimeout(() => this.updateDims());\n    }\n    setReferencelines() {\n        this.refMin = this.adjustedScale(Math.min.apply(null, this.referenceLines.map(item => item.value)));\n        this.refMax = this.adjustedScale(Math.max.apply(null, this.referenceLines.map(item => item.value)));\n        this.referenceLineLength = this.referenceLines.length;\n        this.referenceAreaPath = roundedRect(0, this.refMax, this.gridLineWidth, this.refMin - this.refMax, 0, [\n            false,\n            false,\n            false,\n            false\n        ]);\n    }\n    getTicks() {\n        let ticks;\n        const maxTicks = this.getMaxTicks(20);\n        const maxScaleTicks = this.getMaxTicks(50);\n        if (this.tickValues) {\n            ticks = this.tickValues;\n        }\n        else if (this.scale.ticks) {\n            ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n        }\n        else {\n            ticks = this.scale.domain();\n            ticks = reduceTicks(ticks, maxTicks);\n        }\n        return ticks;\n    }\n    getMaxTicks(tickHeight) {\n        return Math.floor(this.height / tickHeight);\n    }\n    tickTransform(tick) {\n        return `translate(${this.adjustedScale(tick)},${this.verticalSpacing})`;\n    }\n    gridLineTransform() {\n        return `translate(5,0)`;\n    }\n    tickTrim(label) {\n        return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n    }\n    getApproximateAxisWidth() {\n        const maxChars = Math.max(...this.ticks.map(t => this.tickTrim(this.tickFormat(t)).length));\n        const charWidth = 7;\n        return maxChars * charWidth;\n    }\n}\nYAxisTicksComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: YAxisTicksComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nYAxisTicksComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: YAxisTicksComponent, selector: \"g[ngx-charts-y-axis-ticks]\", inputs: { scale: \"scale\", orient: \"orient\", tickArguments: \"tickArguments\", tickValues: \"tickValues\", tickStroke: \"tickStroke\", trimTicks: \"trimTicks\", maxTickLength: \"maxTickLength\", tickFormatting: \"tickFormatting\", showGridLines: \"showGridLines\", gridLineWidth: \"gridLineWidth\", height: \"height\", referenceLines: \"referenceLines\", showRefLabels: \"showRefLabels\", showRefLines: \"showRefLines\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, viewQueries: [{ propertyName: \"ticksElement\", first: true, predicate: [\"ticksel\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"transform(tick)\">\n        <title>{{ tickFormat(tick) }}</title>\n        <svg:text\n          stroke-width=\"0.01\"\n          [attr.dy]=\"dy\"\n          [attr.x]=\"x1\"\n          [attr.y]=\"y1\"\n          [attr.text-anchor]=\"textAnchor\"\n          [style.font-size]=\"'12px'\"\n        >\n          {{ tickTrim(tickFormat(tick)) }}\n        </svg:text>\n      </svg:g>\n    </svg:g>\n\n    <svg:path\n      *ngIf=\"referenceLineLength > 1 && refMax && refMin && showRefLines\"\n      class=\"reference-area\"\n      [attr.d]=\"referenceAreaPath\"\n      [attr.transform]=\"gridLineTransform()\"\n    />\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"transform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line\n          *ngIf=\"orient === Orientation.Left\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n        />\n        <svg:line\n          *ngIf=\"orient === Orientation.Right\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"-gridLineWidth\"\n        />\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let refLine of referenceLines\">\n      <svg:g *ngIf=\"showRefLines\" [attr.transform]=\"transform(refLine.value)\">\n        <svg:line\n          class=\"refline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n          [attr.transform]=\"gridLineTransform()\"\n        />\n        <svg:g *ngIf=\"showRefLabels\">\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\n          <svg:text\n            class=\"refline-label\"\n            [attr.dy]=\"dy\"\n            [attr.y]=\"-6\"\n            [attr.x]=\"gridLineWidth\"\n            [attr.text-anchor]=\"textAnchor\"\n          >\n            {{ refLine.name }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: YAxisTicksComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-y-axis-ticks]',\n                    template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"transform(tick)\">\n        <title>{{ tickFormat(tick) }}</title>\n        <svg:text\n          stroke-width=\"0.01\"\n          [attr.dy]=\"dy\"\n          [attr.x]=\"x1\"\n          [attr.y]=\"y1\"\n          [attr.text-anchor]=\"textAnchor\"\n          [style.font-size]=\"'12px'\"\n        >\n          {{ tickTrim(tickFormat(tick)) }}\n        </svg:text>\n      </svg:g>\n    </svg:g>\n\n    <svg:path\n      *ngIf=\"referenceLineLength > 1 && refMax && refMin && showRefLines\"\n      class=\"reference-area\"\n      [attr.d]=\"referenceAreaPath\"\n      [attr.transform]=\"gridLineTransform()\"\n    />\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"transform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line\n          *ngIf=\"orient === Orientation.Left\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n        />\n        <svg:line\n          *ngIf=\"orient === Orientation.Right\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"-gridLineWidth\"\n        />\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let refLine of referenceLines\">\n      <svg:g *ngIf=\"showRefLines\" [attr.transform]=\"transform(refLine.value)\">\n        <svg:line\n          class=\"refline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n          [attr.transform]=\"gridLineTransform()\"\n        />\n        <svg:g *ngIf=\"showRefLabels\">\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\n          <svg:text\n            class=\"refline-label\"\n            [attr.dy]=\"dy\"\n            [attr.y]=\"-6\"\n            [attr.x]=\"gridLineWidth\"\n            [attr.text-anchor]=\"textAnchor\"\n          >\n            {{ refLine.name }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { scale: [{\n                type: Input\n            }], orient: [{\n                type: Input\n            }], tickArguments: [{\n                type: Input\n            }], tickValues: [{\n                type: Input\n            }], tickStroke: [{\n                type: Input\n            }], trimTicks: [{\n                type: Input\n            }], maxTickLength: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], gridLineWidth: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], referenceLines: [{\n                type: Input\n            }], showRefLabels: [{\n                type: Input\n            }], showRefLines: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }], ticksElement: [{\n                type: ViewChild,\n                args: ['ticksel']\n            }] } });\n\nclass YAxisComponent {\n    constructor() {\n        this.showGridLines = false;\n        this.yOrient = Orientation.Left;\n        this.yAxisOffset = 0;\n        this.dimensionsChanged = new EventEmitter();\n        this.yAxisClassName = 'y axis';\n        this.labelOffset = 15;\n        this.fill = 'none';\n        this.stroke = '#CCC';\n        this.tickStroke = '#CCC';\n        this.strokeWidth = 1;\n        this.padding = 5;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.offset = -(this.yAxisOffset + this.padding);\n        if (this.yOrient === Orientation.Right) {\n            this.labelOffset = 65;\n            this.transform = `translate(${this.offset + this.dims.width} , 0)`;\n        }\n        else {\n            this.offset = this.offset;\n            this.transform = `translate(${this.offset} , 0)`;\n        }\n        if (this.yAxisTickCount !== undefined) {\n            this.tickArguments = [this.yAxisTickCount];\n        }\n    }\n    emitTicksWidth({ width }) {\n        if (width !== this.labelOffset && this.yOrient === Orientation.Right) {\n            this.labelOffset = width + this.labelOffset;\n            setTimeout(() => {\n                this.dimensionsChanged.emit({ width });\n            }, 0);\n        }\n        else if (width !== this.labelOffset) {\n            this.labelOffset = width;\n            setTimeout(() => {\n                this.dimensionsChanged.emit({ width });\n            }, 0);\n        }\n    }\n}\nYAxisComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: YAxisComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nYAxisComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: { yScale: \"yScale\", dims: \"dims\", trimTicks: \"trimTicks\", maxTickLength: \"maxTickLength\", tickFormatting: \"tickFormatting\", ticks: \"ticks\", showGridLines: \"showGridLines\", showLabel: \"showLabel\", labelText: \"labelText\", yAxisTickCount: \"yAxisTickCount\", yOrient: \"yOrient\", referenceLines: \"referenceLines\", showRefLines: \"showRefLines\", showRefLabels: \"showRefLabels\", yAxisOffset: \"yAxisOffset\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, viewQueries: [{ propertyName: \"ticksComponent\", first: true, predicate: YAxisTicksComponent, descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.class]=\"yAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-y-axis-ticks\n        *ngIf=\"yScale\"\n        [trimTicks]=\"trimTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickValues]=\"ticks\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"yScale\"\n        [orient]=\"yOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineWidth]=\"dims.width\"\n        [referenceLines]=\"referenceLines\"\n        [showRefLines]=\"showRefLines\"\n        [showRefLabels]=\"showRefLabels\"\n        [height]=\"dims.height\"\n        (dimensionsChanged)=\"emitTicksWidth($event)\"\n      />\n\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"yOrient\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: YAxisTicksComponent, selector: \"g[ngx-charts-y-axis-ticks]\", inputs: [\"scale\", \"orient\", \"tickArguments\", \"tickValues\", \"tickStroke\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"gridLineWidth\", \"height\", \"referenceLines\", \"showRefLabels\", \"showRefLines\"], outputs: [\"dimensionsChanged\"] }, { type: AxisLabelComponent, selector: \"g[ngx-charts-axis-label]\", inputs: [\"orient\", \"label\", \"offset\", \"width\", \"height\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: YAxisComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-y-axis]',\n                    template: `\n    <svg:g [attr.class]=\"yAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-y-axis-ticks\n        *ngIf=\"yScale\"\n        [trimTicks]=\"trimTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickValues]=\"ticks\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"yScale\"\n        [orient]=\"yOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineWidth]=\"dims.width\"\n        [referenceLines]=\"referenceLines\"\n        [showRefLines]=\"showRefLines\"\n        [showRefLabels]=\"showRefLabels\"\n        [height]=\"dims.height\"\n        (dimensionsChanged)=\"emitTicksWidth($event)\"\n      />\n\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"yOrient\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { yScale: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], trimTicks: [{\n                type: Input\n            }], maxTickLength: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }], ticks: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], showLabel: [{\n                type: Input\n            }], labelText: [{\n                type: Input\n            }], yAxisTickCount: [{\n                type: Input\n            }], yOrient: [{\n                type: Input\n            }], referenceLines: [{\n                type: Input\n            }], showRefLines: [{\n                type: Input\n            }], showRefLabels: [{\n                type: Input\n            }], yAxisOffset: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }], ticksComponent: [{\n                type: ViewChild,\n                args: [YAxisTicksComponent]\n            }] } });\n\nclass AxesModule {\n}\nAxesModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAxesModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxesModule, declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent], imports: [CommonModule], exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent] });\nAxesModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxesModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxesModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent],\n                    exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent]\n                }]\n        }] });\n\nvar StyleTypes;\n(function (StyleTypes) {\n    StyleTypes[\"popover\"] = \"popover\";\n    StyleTypes[\"tooltip\"] = \"tooltip\";\n})(StyleTypes || (StyleTypes = {}));\n\nvar ShowTypes;\n(function (ShowTypes) {\n    ShowTypes[ShowTypes[\"all\"] = 'all'] = \"all\";\n    ShowTypes[ShowTypes[\"focus\"] = 'focus'] = \"focus\";\n    ShowTypes[ShowTypes[\"mouseover\"] = 'mouseover'] = \"mouseover\";\n})(ShowTypes || (ShowTypes = {}));\n\nclass TooltipDirective {\n    constructor(tooltipService, viewContainerRef, renderer) {\n        this.tooltipService = tooltipService;\n        this.viewContainerRef = viewContainerRef;\n        this.renderer = renderer;\n        this.tooltipCssClass = '';\n        this.tooltipAppendToBody = true;\n        this.tooltipSpacing = 10;\n        this.tooltipDisabled = false;\n        this.tooltipShowCaret = true;\n        this.tooltipPlacement = PlacementTypes.Top;\n        this.tooltipAlignment = PlacementTypes.Center;\n        this.tooltipType = StyleTypes.popover;\n        this.tooltipCloseOnClickOutside = true;\n        this.tooltipCloseOnMouseLeave = true;\n        this.tooltipHideTimeout = 300;\n        this.tooltipShowTimeout = 100;\n        this.tooltipShowEvent = ShowTypes.all;\n        this.tooltipImmediateExit = false;\n        this.show = new EventEmitter();\n        this.hide = new EventEmitter();\n    }\n    get listensForFocus() {\n        return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.focus;\n    }\n    get listensForHover() {\n        return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.mouseover;\n    }\n    ngOnDestroy() {\n        this.hideTooltip(true);\n    }\n    onFocus() {\n        if (this.listensForFocus) {\n            this.showTooltip();\n        }\n    }\n    onBlur() {\n        if (this.listensForFocus) {\n            this.hideTooltip(true);\n        }\n    }\n    onMouseEnter() {\n        if (this.listensForHover) {\n            this.showTooltip();\n        }\n    }\n    onMouseLeave(target) {\n        if (this.listensForHover && this.tooltipCloseOnMouseLeave) {\n            clearTimeout(this.timeout);\n            if (this.component) {\n                const contentDom = this.component.instance.element.nativeElement;\n                const contains = contentDom.contains(target);\n                if (contains)\n                    return;\n            }\n            this.hideTooltip(this.tooltipImmediateExit);\n        }\n    }\n    onMouseClick() {\n        if (this.listensForHover) {\n            this.hideTooltip(true);\n        }\n    }\n    showTooltip(immediate) {\n        if (this.component || this.tooltipDisabled)\n            return;\n        const time = immediate\n            ? 0\n            : this.tooltipShowTimeout + (navigator.userAgent.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/) ? 300 : 0);\n        clearTimeout(this.timeout);\n        this.timeout = setTimeout(() => {\n            this.tooltipService.destroyAll();\n            const options = this.createBoundOptions();\n            this.component = this.tooltipService.create(options);\n            // add a tiny timeout to avoid event re-triggers\n            setTimeout(() => {\n                if (this.component) {\n                    this.addHideListeners(this.component.instance.element.nativeElement);\n                }\n            }, 10);\n            this.show.emit(true);\n        }, time);\n    }\n    addHideListeners(tooltip) {\n        // on mouse enter, cancel the hide triggered by the leave\n        this.mouseEnterContentEvent = this.renderer.listen(tooltip, 'mouseenter', () => {\n            clearTimeout(this.timeout);\n        });\n        // content mouse leave listener\n        if (this.tooltipCloseOnMouseLeave) {\n            this.mouseLeaveContentEvent = this.renderer.listen(tooltip, 'mouseleave', () => {\n                this.hideTooltip(this.tooltipImmediateExit);\n            });\n        }\n        // content close on click outside\n        if (this.tooltipCloseOnClickOutside) {\n            this.documentClickEvent = this.renderer.listen('window', 'click', event => {\n                const contains = tooltip.contains(event.target);\n                if (!contains)\n                    this.hideTooltip();\n            });\n        }\n    }\n    hideTooltip(immediate = false) {\n        if (!this.component)\n            return;\n        const destroyFn = () => {\n            // remove events\n            if (this.mouseLeaveContentEvent)\n                this.mouseLeaveContentEvent();\n            if (this.mouseEnterContentEvent)\n                this.mouseEnterContentEvent();\n            if (this.documentClickEvent)\n                this.documentClickEvent();\n            // emit events\n            this.hide.emit(true);\n            // destroy component\n            this.tooltipService.destroy(this.component);\n            this.component = undefined;\n        };\n        clearTimeout(this.timeout);\n        if (!immediate) {\n            this.timeout = setTimeout(destroyFn, this.tooltipHideTimeout);\n        }\n        else {\n            destroyFn();\n        }\n    }\n    createBoundOptions() {\n        return {\n            title: this.tooltipTitle,\n            template: this.tooltipTemplate,\n            host: this.viewContainerRef.element,\n            placement: this.tooltipPlacement,\n            alignment: this.tooltipAlignment,\n            type: this.tooltipType,\n            showCaret: this.tooltipShowCaret,\n            cssClass: this.tooltipCssClass,\n            spacing: this.tooltipSpacing,\n            context: this.tooltipContext\n        };\n    }\n}\nTooltipDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipDirective, deps: [{ token: TooltipService }, { token: i0.ViewContainerRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });\nTooltipDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: { tooltipCssClass: \"tooltipCssClass\", tooltipTitle: \"tooltipTitle\", tooltipAppendToBody: \"tooltipAppendToBody\", tooltipSpacing: \"tooltipSpacing\", tooltipDisabled: \"tooltipDisabled\", tooltipShowCaret: \"tooltipShowCaret\", tooltipPlacement: \"tooltipPlacement\", tooltipAlignment: \"tooltipAlignment\", tooltipType: \"tooltipType\", tooltipCloseOnClickOutside: \"tooltipCloseOnClickOutside\", tooltipCloseOnMouseLeave: \"tooltipCloseOnMouseLeave\", tooltipHideTimeout: \"tooltipHideTimeout\", tooltipShowTimeout: \"tooltipShowTimeout\", tooltipTemplate: \"tooltipTemplate\", tooltipShowEvent: \"tooltipShowEvent\", tooltipContext: \"tooltipContext\", tooltipImmediateExit: \"tooltipImmediateExit\" }, outputs: { show: \"show\", hide: \"hide\" }, host: { listeners: { \"focusin\": \"onFocus()\", \"blur\": \"onBlur()\", \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave($event.target)\", \"click\": \"onMouseClick()\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[ngx-tooltip]' }]\n        }], ctorParameters: function () { return [{ type: TooltipService }, { type: i0.ViewContainerRef }, { type: i0.Renderer2 }]; }, propDecorators: { tooltipCssClass: [{\n                type: Input\n            }], tooltipTitle: [{\n                type: Input\n            }], tooltipAppendToBody: [{\n                type: Input\n            }], tooltipSpacing: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipShowCaret: [{\n                type: Input\n            }], tooltipPlacement: [{\n                type: Input\n            }], tooltipAlignment: [{\n                type: Input\n            }], tooltipType: [{\n                type: Input\n            }], tooltipCloseOnClickOutside: [{\n                type: Input\n            }], tooltipCloseOnMouseLeave: [{\n                type: Input\n            }], tooltipHideTimeout: [{\n                type: Input\n            }], tooltipShowTimeout: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], tooltipShowEvent: [{\n                type: Input\n            }], tooltipContext: [{\n                type: Input\n            }], tooltipImmediateExit: [{\n                type: Input\n            }], show: [{\n                type: Output\n            }], hide: [{\n                type: Output\n            }], onFocus: [{\n                type: HostListener,\n                args: ['focusin']\n            }], onBlur: [{\n                type: HostListener,\n                args: ['blur']\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave', ['$event.target']]\n            }], onMouseClick: [{\n                type: HostListener,\n                args: ['click']\n            }] } });\n\nclass TooltipModule {\n}\nTooltipModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTooltipModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipModule, declarations: [TooltipContentComponent, TooltipDirective], imports: [CommonModule], exports: [TooltipContentComponent, TooltipDirective] });\nTooltipModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipModule, providers: [InjectionService, TooltipService], imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [TooltipContentComponent, TooltipDirective],\n                    providers: [InjectionService, TooltipService],\n                    exports: [TooltipContentComponent, TooltipDirective],\n                    imports: [CommonModule],\n                    entryComponents: [TooltipContentComponent]\n                }]\n        }] });\n\nconst cache = {};\n/**\n * Generates a short id.\n *\n * Description:\n *   A 4-character alphanumeric sequence (364 = 1.6 million)\n *   This should only be used for JavaScript specific models.\n *   http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\n *\n *   Example: `ebgf`\n */\nfunction id() {\n    let newId = ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\n    // append a 'a' because neo gets mad\n    newId = `a${newId}`;\n    // ensure not already used\n    if (!cache[newId]) {\n        cache[newId] = true;\n        return newId;\n    }\n    return id();\n}\n\nvar BarOrientation;\n(function (BarOrientation) {\n    BarOrientation[\"Vertical\"] = \"vertical\";\n    BarOrientation[\"Horizontal\"] = \"horizontal\";\n})(BarOrientation || (BarOrientation = {}));\n\nclass SvgLinearGradientComponent {\n    constructor() {\n        this.orientation = BarOrientation.Vertical;\n    }\n    ngOnChanges(changes) {\n        this.x1 = '0%';\n        this.x2 = '0%';\n        this.y1 = '0%';\n        this.y2 = '0%';\n        if (this.orientation === BarOrientation.Horizontal) {\n            this.x2 = '100%';\n        }\n        else if (this.orientation === BarOrientation.Vertical) {\n            this.y1 = '100%';\n        }\n    }\n}\nSvgLinearGradientComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SvgLinearGradientComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nSvgLinearGradientComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: { orientation: \"orientation\", name: \"name\", stops: \"stops\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:linearGradient [id]=\"name\" [attr.x1]=\"x1\" [attr.y1]=\"y1\" [attr.x2]=\"x2\" [attr.y2]=\"y2\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:linearGradient>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SvgLinearGradientComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-svg-linear-gradient]',\n                    template: `\n    <svg:linearGradient [id]=\"name\" [attr.x1]=\"x1\" [attr.y1]=\"y1\" [attr.x2]=\"x2\" [attr.y2]=\"y2\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:linearGradient>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { orientation: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], stops: [{\n                type: Input\n            }] } });\n\nclass CircleComponent {\n    constructor() {\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n    }\n    onClick() {\n        this.select.emit(this.data);\n    }\n    onMouseEnter() {\n        this.activate.emit(this.data);\n    }\n    onMouseLeave() {\n        this.deactivate.emit(this.data);\n    }\n    ngOnChanges(changes) {\n        this.classNames = Array.isArray(this.classNames) ? this.classNames.join(' ') : '';\n        this.classNames += 'circle';\n    }\n}\nCircleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CircleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCircleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CircleComponent, selector: \"g[ngx-charts-circle]\", inputs: { cx: \"cx\", cy: \"cy\", r: \"r\", fill: \"fill\", stroke: \"stroke\", data: \"data\", classNames: \"classNames\", circleOpacity: \"circleOpacity\", pointerEvents: \"pointerEvents\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"click\": \"onClick()\", \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:circle\n      [attr.cx]=\"cx\"\n      [attr.cy]=\"cy\"\n      [attr.r]=\"r\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      [attr.opacity]=\"circleOpacity\"\n      [attr.class]=\"classNames\"\n      [attr.pointer-events]=\"pointerEvents\"\n    />\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CircleComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-circle]',\n                    template: `\n    <svg:circle\n      [attr.cx]=\"cx\"\n      [attr.cy]=\"cy\"\n      [attr.r]=\"r\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      [attr.opacity]=\"circleOpacity\"\n      [attr.class]=\"classNames\"\n      [attr.pointer-events]=\"pointerEvents\"\n    />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { cx: [{\n                type: Input\n            }], cy: [{\n                type: Input\n            }], r: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], stroke: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], classNames: [{\n                type: Input\n            }], circleOpacity: [{\n                type: Input\n            }], pointerEvents: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], onClick: [{\n                type: HostListener,\n                args: ['click']\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nvar SeriesType;\n(function (SeriesType) {\n    SeriesType[\"Standard\"] = \"standard\";\n    SeriesType[\"Stacked\"] = \"stacked\";\n})(SeriesType || (SeriesType = {}));\nclass CircleSeriesComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.type = SeriesType.Standard;\n        this.tooltipDisabled = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.barVisible = false;\n        this.barOrientation = BarOrientation;\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = `url(#${this.gradientId})`;\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    ngOnChanges() {\n        this.update();\n    }\n    update() {\n        this.circle = this.getActiveCircle();\n    }\n    getActiveCircle() {\n        const indexActiveDataPoint = this.data.series.findIndex(d => {\n            const label = d.name;\n            return label && this.visibleValue && label.toString() === this.visibleValue.toString() && d.value !== undefined;\n        });\n        if (indexActiveDataPoint === -1) {\n            // No valid point is 'active/hovered over' at this moment.\n            return undefined;\n        }\n        return this.mapDataPointToCircle(this.data.series[indexActiveDataPoint], indexActiveDataPoint);\n    }\n    mapDataPointToCircle(d, i) {\n        const seriesName = this.data.name;\n        const value = d.value;\n        const label = d.name;\n        const tooltipLabel = formatLabel(label);\n        let cx;\n        if (this.scaleType === ScaleType.Time) {\n            cx = this.xScale(label);\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            cx = this.xScale(Number(label));\n        }\n        else {\n            cx = this.xScale(label);\n        }\n        const cy = this.yScale(this.type === SeriesType.Standard ? value : d.d1);\n        const radius = 5;\n        const height = this.yScale.range()[0] - cy;\n        const opacity = 1;\n        let color;\n        if (this.colors.scaleType === ScaleType.Linear) {\n            if (this.type === SeriesType.Standard) {\n                color = this.colors.getColor(value);\n            }\n            else {\n                color = this.colors.getColor(d.d1);\n            }\n        }\n        else {\n            color = this.colors.getColor(seriesName);\n        }\n        const data = Object.assign({}, d, {\n            series: seriesName,\n            value,\n            name: label\n        });\n        return {\n            classNames: [`circle-data-${i}`],\n            value,\n            label,\n            data,\n            cx,\n            cy,\n            radius,\n            height,\n            tooltipLabel,\n            color,\n            opacity,\n            seriesName,\n            gradientStops: this.getGradientStops(color),\n            min: d.min,\n            max: d.max\n        };\n    }\n    getTooltipText({ tooltipLabel, value, seriesName, min, max }) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(seriesName)} • ${escapeLabel(tooltipLabel)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}${this.getTooltipMinMaxText(min, max)}</span>\n    `;\n    }\n    getTooltipMinMaxText(min, max) {\n        if (min !== undefined || max !== undefined) {\n            let result = ' (';\n            if (min !== undefined) {\n                if (max === undefined) {\n                    result += '≥';\n                }\n                result += min.toLocaleString();\n                if (max !== undefined) {\n                    result += ' - ';\n                }\n            }\n            else if (max !== undefined) {\n                result += '≤';\n            }\n            if (max !== undefined) {\n                result += max.toLocaleString();\n            }\n            result += ')';\n            return result;\n        }\n        else {\n            return '';\n        }\n    }\n    getGradientStops(color) {\n        return [\n            {\n                offset: 0,\n                color,\n                opacity: 0.2\n            },\n            {\n                offset: 100,\n                color,\n                opacity: 1\n            }\n        ];\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    activateCircle() {\n        this.barVisible = true;\n        this.activate.emit({ name: this.data.name });\n    }\n    deactivateCircle() {\n        this.barVisible = false;\n        this.circle.opacity = 0;\n        this.deactivate.emit({ name: this.data.name });\n    }\n}\nCircleSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CircleSeriesComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nCircleSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: { data: \"data\", type: \"type\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", scaleType: \"scaleType\", visibleValue: \"visibleValue\", activeEntries: \"activeEntries\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngIf=\"circle\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"circle.gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        *ngIf=\"!isSSR && barVisible && type === 'standard'\"\n        [@animationState]=\"'active'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:rect\n        *ngIf=\"isSSR && barVisible && type === 'standard'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:g\n        ngx-charts-circle\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circle.radius\"\n        [fill]=\"circle.color\"\n        [class.active]=\"isActive({ name: circle.seriesName })\"\n        [pointerEvents]=\"circle.value === 0 ? 'none' : 'all'\"\n        [data]=\"circle.value\"\n        [classNames]=\"circle.classNames\"\n        (select)=\"onClick(circle.data)\"\n        (activate)=\"activateCircle()\"\n        (deactivate)=\"deactivateCircle()\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }, { type: CircleComponent, selector: \"g[ngx-charts-circle]\", inputs: [\"cx\", \"cy\", \"r\", \"fill\", \"stroke\", \"data\", \"classNames\", \"circleOpacity\", \"pointerEvents\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition(':enter', [\n                style({\n                    opacity: 0\n                }),\n                animate(250, style({ opacity: 1 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CircleSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-circle-series]',\n                    template: `\n    <svg:g *ngIf=\"circle\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"circle.gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        *ngIf=\"!isSSR && barVisible && type === 'standard'\"\n        [@animationState]=\"'active'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:rect\n        *ngIf=\"isSSR && barVisible && type === 'standard'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:g\n        ngx-charts-circle\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circle.radius\"\n        [fill]=\"circle.color\"\n        [class.active]=\"isActive({ name: circle.seriesName })\"\n        [pointerEvents]=\"circle.value === 0 ? 'none' : 'all'\"\n        [data]=\"circle.value\"\n        [classNames]=\"circle.classNames\"\n        (select)=\"onClick(circle.data)\"\n        (activate)=\"activateCircle()\"\n        (deactivate)=\"deactivateCircle()\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':enter', [\n                                style({\n                                    opacity: 0\n                                }),\n                                animate(250, style({ opacity: 1 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { data: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], visibleValue: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass GridPanelComponent {\n}\nGridPanelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GridPanelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nGridPanelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GridPanelComponent, selector: \"g[ngx-charts-grid-panel]\", inputs: { width: \"width\", height: \"height\", x: \"x\", y: \"y\" }, ngImport: i0, template: `\n    <svg:rect [attr.height]=\"height\" [attr.width]=\"width\" [attr.x]=\"x\" [attr.y]=\"y\" stroke=\"none\" class=\"gridpanel\" />\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GridPanelComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-grid-panel]',\n                    template: `\n    <svg:rect [attr.height]=\"height\" [attr.width]=\"width\" [attr.x]=\"x\" [attr.y]=\"y\" stroke=\"none\" class=\"gridpanel\" />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }] } });\n\nvar ClassEnum;\n(function (ClassEnum) {\n    ClassEnum[\"Odd\"] = \"odd\";\n    ClassEnum[\"Even\"] = \"even\";\n})(ClassEnum || (ClassEnum = {}));\nclass GridPanelSeriesComponent {\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.gridPanels = this.getGridPanels();\n    }\n    getGridPanels() {\n        return this.data.map(d => {\n            let offset;\n            let width;\n            let height;\n            let x;\n            let y;\n            let className = ClassEnum.Odd;\n            if (this.orient === BarOrientation.Vertical) {\n                const position = this.xScale(d.name);\n                const positionIndex = Number.parseInt((position / this.xScale.step()).toString(), 10);\n                if (positionIndex % 2 === 1) {\n                    className = ClassEnum.Even;\n                }\n                offset = this.xScale.bandwidth() * this.xScale.paddingInner();\n                width = this.xScale.bandwidth() + offset;\n                height = this.dims.height;\n                x = this.xScale(d.name) - offset / 2;\n                y = 0;\n            }\n            else if (this.orient === BarOrientation.Horizontal) {\n                const position = this.yScale(d.name);\n                const positionIndex = Number.parseInt((position / this.yScale.step()).toString(), 10);\n                if (positionIndex % 2 === 1) {\n                    className = ClassEnum.Even;\n                }\n                offset = this.yScale.bandwidth() * this.yScale.paddingInner();\n                width = this.dims.width;\n                height = this.yScale.bandwidth() + offset;\n                x = 0;\n                y = this.yScale(d.name) - offset / 2;\n            }\n            return {\n                name: d.name,\n                class: className,\n                height,\n                width,\n                x,\n                y\n            };\n        });\n    }\n}\nGridPanelSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GridPanelSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nGridPanelSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GridPanelSeriesComponent, selector: \"g[ngx-charts-grid-panel-series]\", inputs: { data: \"data\", dims: \"dims\", xScale: \"xScale\", yScale: \"yScale\", orient: \"orient\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-grid-panel\n      *ngFor=\"let gridPanel of gridPanels\"\n      [height]=\"gridPanel.height\"\n      [width]=\"gridPanel.width\"\n      [x]=\"gridPanel.x\"\n      [y]=\"gridPanel.y\"\n      [class.grid-panel]=\"true\"\n      [class.odd]=\"gridPanel.class === 'odd'\"\n      [class.even]=\"gridPanel.class === 'even'\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: GridPanelComponent, selector: \"g[ngx-charts-grid-panel]\", inputs: [\"width\", \"height\", \"x\", \"y\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GridPanelSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-grid-panel-series]',\n                    template: `\n    <svg:g\n      ngx-charts-grid-panel\n      *ngFor=\"let gridPanel of gridPanels\"\n      [height]=\"gridPanel.height\"\n      [width]=\"gridPanel.width\"\n      [x]=\"gridPanel.x\"\n      [y]=\"gridPanel.y\"\n      [class.grid-panel]=\"true\"\n      [class.odd]=\"gridPanel.class === 'odd'\"\n      [class.even]=\"gridPanel.class === 'even'\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], orient: [{\n                type: Input\n            }] } });\n\nclass SvgRadialGradientComponent {\n    constructor() {\n        this.endOpacity = 1;\n        this.cx = 0;\n        this.cy = 0;\n    }\n    get stops() {\n        return this.stopsInput || this.stopsDefault;\n    }\n    set stops(value) {\n        this.stopsInput = value;\n    }\n    ngOnChanges(changes) {\n        this.r = '30%';\n        if ('color' in changes || 'startOpacity' in changes || 'endOpacity' in changes) {\n            this.stopsDefault = [\n                {\n                    offset: 0,\n                    color: this.color,\n                    opacity: this.startOpacity\n                },\n                {\n                    offset: 100,\n                    color: this.color,\n                    opacity: this.endOpacity\n                }\n            ];\n        }\n    }\n}\nSvgRadialGradientComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SvgRadialGradientComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nSvgRadialGradientComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SvgRadialGradientComponent, selector: \"g[ngx-charts-svg-radial-gradient]\", inputs: { color: \"color\", name: \"name\", startOpacity: \"startOpacity\", endOpacity: \"endOpacity\", cx: \"cx\", cy: \"cy\", stops: \"stops\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:radialGradient [id]=\"name\" [attr.cx]=\"cx\" [attr.cy]=\"cy\" [attr.r]=\"r\" gradientUnits=\"userSpaceOnUse\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:radialGradient>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SvgRadialGradientComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-svg-radial-gradient]',\n                    template: `\n    <svg:radialGradient [id]=\"name\" [attr.cx]=\"cx\" [attr.cy]=\"cy\" [attr.r]=\"r\" gradientUnits=\"userSpaceOnUse\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:radialGradient>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { color: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], startOpacity: [{\n                type: Input\n            }], endOpacity: [{\n                type: Input\n            }], cx: [{\n                type: Input\n            }], cy: [{\n                type: Input\n            }], stops: [{\n                type: Input\n            }] } });\n\nclass AreaComponent {\n    constructor(element) {\n        this.opacity = 1;\n        this.startOpacity = 0.5;\n        this.endOpacity = 1;\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.animationsLoaded = false;\n        this.hasGradient = false;\n        this.barOrientation = BarOrientation;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges() {\n        this.update();\n        if (!this.animationsLoaded) {\n            this.loadAnimation();\n            this.animationsLoaded = true;\n        }\n    }\n    update() {\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = `url(#${this.gradientId})`;\n        if (this.gradient || this.stops) {\n            this.gradientStops = this.getGradient();\n            this.hasGradient = true;\n        }\n        else {\n            this.hasGradient = false;\n        }\n        this.updatePathEl();\n    }\n    loadAnimation() {\n        this.areaPath = this.startingPath;\n        setTimeout(this.updatePathEl.bind(this), 100);\n    }\n    updatePathEl() {\n        const node = select(this.element).select('.area');\n        if (this.animations) {\n            node.transition().duration(750).attr('d', this.path);\n        }\n        else {\n            node.attr('d', this.path);\n        }\n    }\n    getGradient() {\n        if (this.stops) {\n            return this.stops;\n        }\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: this.startOpacity\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: this.endOpacity\n            }\n        ];\n    }\n}\nAreaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nAreaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaComponent, selector: \"g[ngx-charts-area]\", inputs: { data: \"data\", path: \"path\", startingPath: \"startingPath\", fill: \"fill\", opacity: \"opacity\", startOpacity: \"startOpacity\", endOpacity: \"endOpacity\", gradient: \"gradient\", stops: \"stops\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:defs *ngIf=\"gradient\">\n      <svg:g\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"barOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n    </svg:defs>\n    <svg:path class=\"area\" [attr.d]=\"areaPath\" [attr.fill]=\"gradient ? gradientFill : fill\" [style.opacity]=\"opacity\" />\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-area]',\n                    template: `\n    <svg:defs *ngIf=\"gradient\">\n      <svg:g\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"barOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n    </svg:defs>\n    <svg:path class=\"area\" [attr.d]=\"areaPath\" [attr.fill]=\"gradient ? gradientFill : fill\" [style.opacity]=\"opacity\" />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], path: [{\n                type: Input\n            }], startingPath: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], opacity: [{\n                type: Input\n            }], startOpacity: [{\n                type: Input\n            }], endOpacity: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], stops: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\n// Robert Penner's easeOutExpo\nfunction easeOutExpo(t, b, c, d) {\n    return (c * (-Math.pow(2, (-10 * t) / d) + 1) * 1024) / 1023 + b;\n}\n/**\n * Counts from a number to the end incrementally.\n */\nfunction count(countFrom, countTo, countDecimals, countDuration, callback) {\n    const startVal = Number(countFrom);\n    const endVal = Number(countTo);\n    const countDown = startVal > endVal;\n    const decimals = Math.max(0, countDecimals);\n    const dec = Math.pow(10, decimals);\n    const duration = Number(countDuration) * 1000;\n    let startTime;\n    function runCount(timestamp) {\n        let frameVal;\n        const progress = timestamp - startTime;\n        if (countDown) {\n            frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);\n        }\n        else {\n            frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);\n        }\n        if (countDown) {\n            frameVal = frameVal < endVal ? endVal : frameVal;\n        }\n        else {\n            frameVal = frameVal > endVal ? endVal : frameVal;\n        }\n        frameVal = Math.round(frameVal * dec) / dec;\n        const tick = progress < duration;\n        callback({\n            value: frameVal,\n            progress,\n            timestamp,\n            finished: !tick\n        });\n        if (tick) {\n            return requestAnimationFrame(val => runCount(val));\n        }\n    }\n    return requestAnimationFrame(timestamp => {\n        startTime = timestamp;\n        return runCount(timestamp);\n    });\n}\n/**\n * Determine decimals places\n *\n * @export\n */\nfunction decimalChecker(countTo) {\n    const endVal = Number(countTo);\n    if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {\n        return 2;\n    }\n    return 0;\n}\n\n/**\n * Count up component\n *\n * Loosely inspired by:\n *  - https://github.com/izupet/angular2-counto\n *  - https://inorganik.github.io/countUp.js/\n *\n * @export\n */\nclass CountUpDirective {\n    constructor(cd, element) {\n        this.cd = cd;\n        this.countDuration = 1;\n        this.countPrefix = '';\n        this.countSuffix = '';\n        this.countChange = new EventEmitter();\n        this.countFinish = new EventEmitter();\n        this.value = '';\n        this._countDecimals = 0;\n        this._countTo = 0;\n        this._countFrom = 0;\n        this.nativeElement = element.nativeElement;\n    }\n    set countDecimals(val) {\n        this._countDecimals = val;\n    }\n    get countDecimals() {\n        if (this._countDecimals)\n            return this._countDecimals;\n        return decimalChecker(this.countTo);\n    }\n    set countTo(val) {\n        this._countTo = parseFloat(val);\n        this.start();\n    }\n    get countTo() {\n        return this._countTo;\n    }\n    set countFrom(val) {\n        this._countFrom = parseFloat(val);\n        this.start();\n    }\n    get countFrom() {\n        return this._countFrom;\n    }\n    ngOnDestroy() {\n        cancelAnimationFrame(this.animationReq);\n    }\n    start() {\n        cancelAnimationFrame(this.animationReq);\n        const valueFormatting = this.valueFormatting || (value => `${this.countPrefix}${value.toLocaleString()}${this.countSuffix}`);\n        const callback = ({ value, progress, finished }) => {\n            this.value = valueFormatting(value);\n            this.cd.markForCheck();\n            if (!finished)\n                this.countChange.emit({ value: this.value, progress });\n            if (finished)\n                this.countFinish.emit({ value: this.value, progress });\n        };\n        this.animationReq = count(this.countFrom, this.countTo, this.countDecimals, this.countDuration, callback);\n    }\n}\nCountUpDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CountUpDirective, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nCountUpDirective.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CountUpDirective, selector: \"[ngx-charts-count-up]\", inputs: { countDuration: \"countDuration\", countPrefix: \"countPrefix\", countSuffix: \"countSuffix\", valueFormatting: \"valueFormatting\", countDecimals: \"countDecimals\", countTo: \"countTo\", countFrom: \"countFrom\" }, outputs: { countChange: \"countChange\", countFinish: \"countFinish\" }, ngImport: i0, template: ` {{ value }} `, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CountUpDirective, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[ngx-charts-count-up]',\n                    template: ` {{ value }} `\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }]; }, propDecorators: { countDuration: [{\n                type: Input\n            }], countPrefix: [{\n                type: Input\n            }], countSuffix: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], countDecimals: [{\n                type: Input\n            }], countTo: [{\n                type: Input\n            }], countFrom: [{\n                type: Input\n            }], countChange: [{\n                type: Output\n            }], countFinish: [{\n                type: Output\n            }] } });\n\n// If we don't check whether 'window' and 'global' variables are defined,\n// code will fail in browser/node with 'variable is undefined' error.\nlet root;\nif (typeof window !== 'undefined') {\n    root = window;\n}\nelse if (typeof global !== 'undefined') {\n    root = global;\n}\n// tslint:disable-next-line:variable-name\nconst MouseEvent = root.MouseEvent;\nfunction createMouseEvent(name, bubbles = false, cancelable = true) {\n    // Calling new of an event does not work correctly on IE. The following is a tested workaround\n    // See https://stackoverflow.com/questions/27176983/dispatchevent-not-working-in-ie11\n    if (typeof MouseEvent === 'function') {\n        // Sane browsers\n        return new MouseEvent(name, { bubbles, cancelable });\n    }\n    else {\n        // IE\n        const event = document.createEvent('MouseEvent');\n        event.initEvent(name, bubbles, cancelable);\n        return event;\n    }\n}\n\nclass TooltipArea {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.anchorOpacity = 0;\n        this.anchorPos = -1;\n        this.anchorValues = [];\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n        this.showPercentage = false;\n        this.tooltipDisabled = false;\n        this.hover = new EventEmitter();\n    }\n    getValues(xVal) {\n        const results = [];\n        for (const group of this.results) {\n            const item = group.series.find(d => d.name.toString() === xVal.toString());\n            let groupName = group.name;\n            if (groupName instanceof Date) {\n                groupName = groupName.toLocaleDateString();\n            }\n            if (item) {\n                const label = item.name;\n                let val = item.value;\n                if (this.showPercentage) {\n                    val = (item.d1 - item.d0).toFixed(2) + '%';\n                }\n                let color;\n                if (this.colors.scaleType === ScaleType.Linear) {\n                    let v = val;\n                    if (item.d1) {\n                        v = item.d1;\n                    }\n                    color = this.colors.getColor(v);\n                }\n                else {\n                    color = this.colors.getColor(group.name);\n                }\n                const data = Object.assign({}, item, {\n                    value: val,\n                    name: label,\n                    series: groupName,\n                    min: item.min,\n                    max: item.max,\n                    color\n                });\n                results.push(data);\n            }\n        }\n        return results;\n    }\n    mouseMove(event) {\n        if (!isPlatformBrowser(this.platformId)) {\n            return;\n        }\n        const xPos = event.pageX - event.target.getBoundingClientRect().left;\n        const closestIndex = this.findClosestPointIndex(xPos);\n        const closestPoint = this.xSet[closestIndex];\n        this.anchorPos = this.xScale(closestPoint);\n        this.anchorPos = Math.max(0, this.anchorPos);\n        this.anchorPos = Math.min(this.dims.width, this.anchorPos);\n        this.anchorValues = this.getValues(closestPoint);\n        if (this.anchorPos !== this.lastAnchorPos) {\n            const ev = createMouseEvent('mouseleave');\n            this.tooltipAnchor.nativeElement.dispatchEvent(ev);\n            this.anchorOpacity = 0.7;\n            this.hover.emit({\n                value: closestPoint\n            });\n            this.showTooltip();\n            this.lastAnchorPos = this.anchorPos;\n        }\n    }\n    findClosestPointIndex(xPos) {\n        let minIndex = 0;\n        let maxIndex = this.xSet.length - 1;\n        let minDiff = Number.MAX_VALUE;\n        let closestIndex = 0;\n        while (minIndex <= maxIndex) {\n            const currentIndex = ((minIndex + maxIndex) / 2) | 0;\n            const currentElement = this.xScale(this.xSet[currentIndex]);\n            const curDiff = Math.abs(currentElement - xPos);\n            if (curDiff < minDiff) {\n                minDiff = curDiff;\n                closestIndex = currentIndex;\n            }\n            if (currentElement < xPos) {\n                minIndex = currentIndex + 1;\n            }\n            else if (currentElement > xPos) {\n                maxIndex = currentIndex - 1;\n            }\n            else {\n                minDiff = 0;\n                closestIndex = currentIndex;\n                break;\n            }\n        }\n        return closestIndex;\n    }\n    showTooltip() {\n        const event = createMouseEvent('mouseenter');\n        this.tooltipAnchor.nativeElement.dispatchEvent(event);\n    }\n    hideTooltip() {\n        const event = createMouseEvent('mouseleave');\n        this.tooltipAnchor.nativeElement.dispatchEvent(event);\n        this.anchorOpacity = 0;\n        this.lastAnchorPos = -1;\n    }\n    getToolTipText(tooltipItem) {\n        let result = '';\n        if (tooltipItem.series !== undefined) {\n            result += tooltipItem.series;\n        }\n        else {\n            result += '???';\n        }\n        result += ': ';\n        if (tooltipItem.value !== undefined) {\n            result += tooltipItem.value.toLocaleString();\n        }\n        if (tooltipItem.min !== undefined || tooltipItem.max !== undefined) {\n            result += ' (';\n            if (tooltipItem.min !== undefined) {\n                if (tooltipItem.max === undefined) {\n                    result += '≥';\n                }\n                result += tooltipItem.min.toLocaleString();\n                if (tooltipItem.max !== undefined) {\n                    result += ' - ';\n                }\n            }\n            else if (tooltipItem.max !== undefined) {\n                result += '≤';\n            }\n            if (tooltipItem.max !== undefined) {\n                result += tooltipItem.max.toLocaleString();\n            }\n            result += ')';\n        }\n        return result;\n    }\n}\nTooltipArea.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipArea, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nTooltipArea.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: { dims: \"dims\", xSet: \"xSet\", xScale: \"xScale\", yScale: \"yScale\", results: \"results\", colors: \"colors\", showPercentage: \"showPercentage\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\" }, outputs: { hover: \"hover\" }, viewQueries: [{ propertyName: \"tooltipAnchor\", first: true, predicate: [\"tooltipAnchor\"], descendants: true }], ngImport: i0, template: `\n    <svg:g>\n      <svg:rect\n        class=\"tooltip-area\"\n        [attr.x]=\"0\"\n        y=\"0\"\n        [attr.width]=\"dims.width\"\n        [attr.height]=\"dims.height\"\n        style=\"opacity: 0; cursor: 'auto';\"\n        (mousemove)=\"mouseMove($event)\"\n        (mouseleave)=\"hideTooltip()\"\n      />\n      <ng-template #defaultTooltipTemplate let-model=\"model\">\n        <xhtml:div class=\"area-tooltip-container\">\n          <xhtml:div *ngFor=\"let tooltipItem of model\" class=\"tooltip-item\">\n            <xhtml:span class=\"tooltip-item-color\" [style.background-color]=\"tooltipItem.color\"></xhtml:span>\n            {{ getToolTipText(tooltipItem) }}\n          </xhtml:div>\n        </xhtml:div>\n      </ng-template>\n      <svg:rect\n        #tooltipAnchor\n        [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\n        class=\"tooltip-anchor\"\n        [attr.x]=\"anchorPos\"\n        y=\"0\"\n        [attr.width]=\"1\"\n        [attr.height]=\"dims.height\"\n        [style.opacity]=\"anchorOpacity\"\n        [style.pointer-events]=\"'none'\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Right\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipSpacing]=\"15\"\n        [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\"\n        [tooltipContext]=\"anchorValues\"\n        [tooltipImmediateExit]=\"true\"\n      />\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition('inactive => active', [\n                style({\n                    opacity: 0\n                }),\n                animate(250, style({ opacity: 0.7 }))\n            ]),\n            transition('active => inactive', [\n                style({\n                    opacity: 0.7\n                }),\n                animate(250, style({ opacity: 0 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipArea, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-tooltip-area]',\n                    template: `\n    <svg:g>\n      <svg:rect\n        class=\"tooltip-area\"\n        [attr.x]=\"0\"\n        y=\"0\"\n        [attr.width]=\"dims.width\"\n        [attr.height]=\"dims.height\"\n        style=\"opacity: 0; cursor: 'auto';\"\n        (mousemove)=\"mouseMove($event)\"\n        (mouseleave)=\"hideTooltip()\"\n      />\n      <ng-template #defaultTooltipTemplate let-model=\"model\">\n        <xhtml:div class=\"area-tooltip-container\">\n          <xhtml:div *ngFor=\"let tooltipItem of model\" class=\"tooltip-item\">\n            <xhtml:span class=\"tooltip-item-color\" [style.background-color]=\"tooltipItem.color\"></xhtml:span>\n            {{ getToolTipText(tooltipItem) }}\n          </xhtml:div>\n        </xhtml:div>\n      </ng-template>\n      <svg:rect\n        #tooltipAnchor\n        [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\n        class=\"tooltip-anchor\"\n        [attr.x]=\"anchorPos\"\n        y=\"0\"\n        [attr.width]=\"1\"\n        [attr.height]=\"dims.height\"\n        [style.opacity]=\"anchorOpacity\"\n        [style.pointer-events]=\"'none'\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Right\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipSpacing]=\"15\"\n        [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\"\n        [tooltipContext]=\"anchorValues\"\n        [tooltipImmediateExit]=\"true\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition('inactive => active', [\n                                style({\n                                    opacity: 0\n                                }),\n                                animate(250, style({ opacity: 0.7 }))\n                            ]),\n                            transition('active => inactive', [\n                                style({\n                                    opacity: 0.7\n                                }),\n                                animate(250, style({ opacity: 0 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { dims: [{\n                type: Input\n            }], xSet: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], results: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], showPercentage: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], hover: [{\n                type: Output\n            }], tooltipAnchor: [{\n                type: ViewChild,\n                args: ['tooltipAnchor', { static: false }]\n            }] } });\n\nclass Timeline {\n    constructor(element, cd) {\n        this.cd = cd;\n        this.height = 50;\n        this.select = new EventEmitter();\n        this.onDomainChange = new EventEmitter();\n        this.initialized = false;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n        if (!this.initialized) {\n            this.addBrush();\n            this.initialized = true;\n        }\n    }\n    update() {\n        this.dims = this.getDims();\n        this.height = this.dims.height;\n        const offsetY = this.view[1] - this.height;\n        this.xDomain = this.getXDomain();\n        this.xScale = this.getXScale();\n        if (this.brush) {\n            this.updateBrush();\n        }\n        this.transform = `translate(0 , ${offsetY})`;\n        this.filterId = 'filter' + id().toString();\n        this.filter = `url(#${this.filterId})`;\n        this.cd.markForCheck();\n    }\n    getXDomain() {\n        let values = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!values.includes(d.name)) {\n                    values.push(d.name);\n                }\n            }\n        }\n        let domain = [];\n        if (this.scaleType === ScaleType.Time) {\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            domain = [min, max];\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            domain = [min, max];\n        }\n        else {\n            domain = values;\n        }\n        return domain;\n    }\n    getXScale() {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime().range([0, this.dims.width]).domain(this.xDomain);\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().range([0, this.dims.width]).padding(0.1).domain(this.xDomain);\n        }\n        return scale;\n    }\n    addBrush() {\n        if (this.brush)\n            return;\n        const height = this.height;\n        const width = this.view[0];\n        this.brush = brushX()\n            .extent([\n            [0, 0],\n            [width, height]\n        ])\n            .on('brush end', ({ selection }) => {\n            const newSelection = selection || this.xScale.range();\n            const newDomain = newSelection.map(this.xScale.invert);\n            this.onDomainChange.emit(newDomain);\n            this.cd.markForCheck();\n        });\n        select(this.element).select('.brush').call(this.brush);\n    }\n    updateBrush() {\n        if (!this.brush)\n            return;\n        const height = this.height;\n        const width = this.view[0];\n        this.brush.extent([\n            [0, 0],\n            [width, height]\n        ]);\n        select(this.element).select('.brush').call(this.brush);\n        // clear hardcoded properties so they can be defined by CSS\n        select(this.element)\n            .select('.selection')\n            .attr('fill', undefined)\n            .attr('stroke', undefined)\n            .attr('fill-opacity', undefined);\n        this.cd.markForCheck();\n    }\n    getDims() {\n        const width = this.view[0];\n        const dims = {\n            width,\n            height: this.height\n        };\n        return dims;\n    }\n}\nTimeline.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: Timeline, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nTimeline.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: { view: \"view\", results: \"results\", scheme: \"scheme\", customColors: \"customColors\", legend: \"legend\", autoScale: \"autoScale\", scaleType: \"scaleType\", height: \"height\" }, outputs: { select: \"select\", onDomainChange: \"onDomainChange\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g class=\"timeline\" [attr.transform]=\"transform\">\n      <svg:filter [attr.id]=\"filterId\">\n        <svg:feColorMatrix\n          in=\"SourceGraphic\"\n          type=\"matrix\"\n          values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"\n        />\n      </svg:filter>\n      <svg:g class=\"embedded-chart\">\n        <ng-content></ng-content>\n      </svg:g>\n      <svg:rect x=\"0\" [attr.width]=\"view[0]\" y=\"0\" [attr.height]=\"height\" class=\"brush-background\" />\n      <svg:g class=\"brush\"></svg:g>\n    </svg:g>\n  `, isInline: true, styles: [\".timeline .brush-background{fill:#0000000d}.timeline .brush .selection{fill:#0000001a;stroke-width:1px;stroke:#888}.timeline .brush .handle{fill-opacity:0}.timeline .embedded-chart{opacity:.6}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: Timeline, decorators: [{\n            type: Component,\n            args: [{ selector: 'g[ngx-charts-timeline]', template: `\n    <svg:g class=\"timeline\" [attr.transform]=\"transform\">\n      <svg:filter [attr.id]=\"filterId\">\n        <svg:feColorMatrix\n          in=\"SourceGraphic\"\n          type=\"matrix\"\n          values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"\n        />\n      </svg:filter>\n      <svg:g class=\"embedded-chart\">\n        <ng-content></ng-content>\n      </svg:g>\n      <svg:rect x=\"0\" [attr.width]=\"view[0]\" y=\"0\" [attr.height]=\"height\" class=\"brush-background\" />\n      <svg:g class=\"brush\"></svg:g>\n    </svg:g>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".timeline .brush-background{fill:#0000000d}.timeline .brush .selection{fill:#0000001a;stroke-width:1px;stroke:#888}.timeline .brush .handle{fill-opacity:0}.timeline .embedded-chart{opacity:.6}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { view: [{\n                type: Input\n            }], results: [{\n                type: Input\n            }], scheme: [{\n                type: Input\n            }], customColors: [{\n                type: Input\n            }], legend: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], onDomainChange: [{\n                type: Output\n            }] } });\n\nclass AdvancedLegendComponent {\n    constructor() {\n        this.label = 'Total';\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.legendItems = [];\n        this.labelFormatting = label => label;\n        this.percentageFormatting = percentage => percentage;\n        this.defaultValueFormatting = value => value.toLocaleString();\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    getTotal() {\n        return this.data.map(d => Number(d.value)).reduce((sum, d) => sum + d, 0);\n    }\n    update() {\n        this.total = this.getTotal();\n        this.roundedTotal = this.total;\n        this.legendItems = this.getLegendItems();\n    }\n    getLegendItems() {\n        return this.data.map(d => {\n            const label = formatLabel(d.name);\n            const value = d.value;\n            const color = this.colors.getColor(label);\n            const percentage = this.total > 0 ? (value / this.total) * 100 : 0;\n            const formattedLabel = typeof this.labelFormatting === 'function' ? this.labelFormatting(label) : label;\n            return {\n                _value: value,\n                data: d,\n                value,\n                color,\n                label: formattedLabel,\n                displayLabel: trimLabel(formattedLabel, 20),\n                origialLabel: d.name,\n                percentage: this.percentageFormatting ? this.percentageFormatting(percentage) : percentage.toLocaleString()\n            };\n        });\n    }\n    trackBy(index, item) {\n        return item.label;\n    }\n}\nAdvancedLegendComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AdvancedLegendComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nAdvancedLegendComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AdvancedLegendComponent, selector: \"ngx-charts-advanced-legend\", inputs: { width: \"width\", data: \"data\", colors: \"colors\", label: \"label\", animations: \"animations\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", percentageFormatting: \"percentageFormatting\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <div class=\"advanced-pie-legend\" [style.width.px]=\"width\">\n      <div\n        *ngIf=\"animations\"\n        class=\"total-value\"\n        ngx-charts-count-up\n        [countTo]=\"roundedTotal\"\n        [valueFormatting]=\"valueFormatting\"\n      ></div>\n      <div class=\"total-value\" *ngIf=\"!animations\">\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\n      </div>\n      <div class=\"total-label\">\n        {{ label }}\n      </div>\n      <div class=\"legend-items-container\">\n        <div class=\"legend-items\">\n          <div\n            *ngFor=\"let legendItem of legendItems; trackBy: trackBy\"\n            tabindex=\"-1\"\n            class=\"legend-item\"\n            (mouseenter)=\"activate.emit(legendItem.data)\"\n            (mouseleave)=\"deactivate.emit(legendItem.data)\"\n            (click)=\"select.emit(legendItem.data)\"\n          >\n            <div class=\"item-color\" [style.border-left-color]=\"legendItem.color\"></div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-value\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem._value\"\n              [valueFormatting]=\"valueFormatting\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-value\">\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\n            </div>\n            <div class=\"item-label\">{{ legendItem.displayLabel }}</div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-percent\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem.percentage\"\n              [countSuffix]=\"'%'\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-percent\">{{ legendItem.percentage.toLocaleString() }}%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".advanced-pie-legend{float:left;position:relative;top:50%;transform:translateY(-50%)}.advanced-pie-legend .total-value{font-size:36px}.advanced-pie-legend .total-label{font-size:24px;margin-bottom:19px}.advanced-pie-legend .legend-items-container{width:100%}.advanced-pie-legend .legend-items-container .legend-items{white-space:nowrap;overflow:auto}.advanced-pie-legend .legend-items-container .legend-items .legend-item{margin-right:20px;display:inline-block;cursor:pointer}.advanced-pie-legend .legend-items-container .legend-items .legend-item:focus{outline:none}.advanced-pie-legend .legend-items-container .legend-items .legend-item:hover{color:#000;transition:.2s}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value{font-size:24px;margin-top:-6px;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-label{font-size:14px;opacity:.7;margin-left:11px;margin-top:-6px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent{font-size:24px;opacity:.7;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-color{border-left:4px solid;width:4px;height:42px;float:left;margin-right:7px}\\n\"], components: [{ type: CountUpDirective, selector: \"[ngx-charts-count-up]\", inputs: [\"countDuration\", \"countPrefix\", \"countSuffix\", \"valueFormatting\", \"countDecimals\", \"countTo\", \"countFrom\"], outputs: [\"countChange\", \"countFinish\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AdvancedLegendComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-advanced-legend', template: `\n    <div class=\"advanced-pie-legend\" [style.width.px]=\"width\">\n      <div\n        *ngIf=\"animations\"\n        class=\"total-value\"\n        ngx-charts-count-up\n        [countTo]=\"roundedTotal\"\n        [valueFormatting]=\"valueFormatting\"\n      ></div>\n      <div class=\"total-value\" *ngIf=\"!animations\">\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\n      </div>\n      <div class=\"total-label\">\n        {{ label }}\n      </div>\n      <div class=\"legend-items-container\">\n        <div class=\"legend-items\">\n          <div\n            *ngFor=\"let legendItem of legendItems; trackBy: trackBy\"\n            tabindex=\"-1\"\n            class=\"legend-item\"\n            (mouseenter)=\"activate.emit(legendItem.data)\"\n            (mouseleave)=\"deactivate.emit(legendItem.data)\"\n            (click)=\"select.emit(legendItem.data)\"\n          >\n            <div class=\"item-color\" [style.border-left-color]=\"legendItem.color\"></div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-value\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem._value\"\n              [valueFormatting]=\"valueFormatting\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-value\">\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\n            </div>\n            <div class=\"item-label\">{{ legendItem.displayLabel }}</div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-percent\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem.percentage\"\n              [countSuffix]=\"'%'\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-percent\">{{ legendItem.percentage.toLocaleString() }}%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".advanced-pie-legend{float:left;position:relative;top:50%;transform:translateY(-50%)}.advanced-pie-legend .total-value{font-size:36px}.advanced-pie-legend .total-label{font-size:24px;margin-bottom:19px}.advanced-pie-legend .legend-items-container{width:100%}.advanced-pie-legend .legend-items-container .legend-items{white-space:nowrap;overflow:auto}.advanced-pie-legend .legend-items-container .legend-items .legend-item{margin-right:20px;display:inline-block;cursor:pointer}.advanced-pie-legend .legend-items-container .legend-items .legend-item:focus{outline:none}.advanced-pie-legend .legend-items-container .legend-items .legend-item:hover{color:#000;transition:.2s}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value{font-size:24px;margin-top:-6px;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-label{font-size:14px;opacity:.7;margin-left:11px;margin-top:-6px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent{font-size:24px;opacity:.7;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-color{border-left:4px solid;width:4px;height:42px;float:left;margin-right:7px}\\n\"] }]\n        }], propDecorators: { width: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], percentageFormatting: [{\n                type: Input\n            }] } });\n\nconst COMPONENTS = [\n    AreaComponent,\n    BaseChartComponent,\n    CountUpDirective,\n    TooltipArea,\n    ChartComponent,\n    LegendComponent,\n    LegendEntryComponent,\n    ScaleLegendComponent,\n    CircleComponent,\n    CircleSeriesComponent,\n    GridPanelComponent,\n    GridPanelSeriesComponent,\n    SvgLinearGradientComponent,\n    SvgRadialGradientComponent,\n    Timeline,\n    AdvancedLegendComponent\n];\nclass ChartCommonModule {\n}\nChartCommonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartCommonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nChartCommonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartCommonModule, declarations: [AreaComponent,\n        BaseChartComponent,\n        CountUpDirective,\n        TooltipArea,\n        ChartComponent,\n        LegendComponent,\n        LegendEntryComponent,\n        ScaleLegendComponent,\n        CircleComponent,\n        CircleSeriesComponent,\n        GridPanelComponent,\n        GridPanelSeriesComponent,\n        SvgLinearGradientComponent,\n        SvgRadialGradientComponent,\n        Timeline,\n        AdvancedLegendComponent, VisibilityObserver], imports: [CommonModule, AxesModule, TooltipModule], exports: [CommonModule, AxesModule, TooltipModule, AreaComponent,\n        BaseChartComponent,\n        CountUpDirective,\n        TooltipArea,\n        ChartComponent,\n        LegendComponent,\n        LegendEntryComponent,\n        ScaleLegendComponent,\n        CircleComponent,\n        CircleSeriesComponent,\n        GridPanelComponent,\n        GridPanelSeriesComponent,\n        SvgLinearGradientComponent,\n        SvgRadialGradientComponent,\n        Timeline,\n        AdvancedLegendComponent, VisibilityObserver] });\nChartCommonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartCommonModule, imports: [[CommonModule, AxesModule, TooltipModule], CommonModule, AxesModule, TooltipModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartCommonModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, AxesModule, TooltipModule],\n                    declarations: [...COMPONENTS, VisibilityObserver],\n                    exports: [CommonModule, AxesModule, TooltipModule, ...COMPONENTS, VisibilityObserver]\n                }]\n        }] });\n\nfunction calculateViewDimensions({ width, height, margins, showXAxis = false, showYAxis = false, xAxisHeight = 0, yAxisWidth = 0, showXLabel = false, showYLabel = false, showLegend = false, legendType = ScaleType.Ordinal, legendPosition = LegendPosition.Right, columns = 12 }) {\n    let xOffset = margins[3];\n    let chartWidth = width;\n    let chartHeight = height - margins[0] - margins[2];\n    if (showLegend && legendPosition === LegendPosition.Right) {\n        if (legendType === ScaleType.Ordinal) {\n            columns -= 2;\n        }\n        else {\n            columns -= 1;\n        }\n    }\n    chartWidth = (chartWidth * columns) / 12;\n    chartWidth = chartWidth - margins[1] - margins[3];\n    if (showXAxis) {\n        chartHeight -= 5;\n        chartHeight -= xAxisHeight;\n        if (showXLabel) {\n            // text height + spacing between axis label and tick labels\n            const offset = 25 + 5;\n            chartHeight -= offset;\n        }\n    }\n    if (showYAxis) {\n        chartWidth -= 5;\n        chartWidth -= yAxisWidth;\n        xOffset += yAxisWidth;\n        xOffset += 10;\n        if (showYLabel) {\n            // text height + spacing between axis label and tick labels\n            const offset = 25 + 5;\n            chartWidth -= offset;\n            xOffset += offset;\n        }\n    }\n    chartWidth = Math.max(0, chartWidth);\n    chartHeight = Math.max(0, chartHeight);\n    return {\n        width: Math.floor(chartWidth),\n        height: Math.floor(chartHeight),\n        xOffset: Math.floor(xOffset)\n    };\n}\n\nlet colorSets = [\n    {\n        name: 'vivid',\n        selectable: true,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#647c8a',\n            '#3f51b5',\n            '#2196f3',\n            '#00b862',\n            '#afdf0a',\n            '#a7b61a',\n            '#f3e562',\n            '#ff9800',\n            '#ff5722',\n            '#ff4514'\n        ]\n    },\n    {\n        name: 'natural',\n        selectable: true,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#bf9d76',\n            '#e99450',\n            '#d89f59',\n            '#f2dfa7',\n            '#a5d7c6',\n            '#7794b1',\n            '#afafaf',\n            '#707160',\n            '#ba9383',\n            '#d9d5c3'\n        ]\n    },\n    {\n        name: 'cool',\n        selectable: true,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#a8385d',\n            '#7aa3e5',\n            '#a27ea8',\n            '#aae3f5',\n            '#adcded',\n            '#a95963',\n            '#8796c0',\n            '#7ed3ed',\n            '#50abcc',\n            '#ad6886'\n        ]\n    },\n    {\n        name: 'fire',\n        selectable: true,\n        group: ScaleType.Ordinal,\n        domain: ['#ff3d00', '#bf360c', '#ff8f00', '#ff6f00', '#ff5722', '#e65100', '#ffca28', '#ffab00']\n    },\n    {\n        name: 'solar',\n        selectable: true,\n        group: ScaleType.Linear,\n        domain: [\n            '#fff8e1',\n            '#ffecb3',\n            '#ffe082',\n            '#ffd54f',\n            '#ffca28',\n            '#ffc107',\n            '#ffb300',\n            '#ffa000',\n            '#ff8f00',\n            '#ff6f00'\n        ]\n    },\n    {\n        name: 'air',\n        selectable: true,\n        group: ScaleType.Linear,\n        domain: [\n            '#e1f5fe',\n            '#b3e5fc',\n            '#81d4fa',\n            '#4fc3f7',\n            '#29b6f6',\n            '#03a9f4',\n            '#039be5',\n            '#0288d1',\n            '#0277bd',\n            '#01579b'\n        ]\n    },\n    {\n        name: 'aqua',\n        selectable: true,\n        group: ScaleType.Linear,\n        domain: [\n            '#e0f7fa',\n            '#b2ebf2',\n            '#80deea',\n            '#4dd0e1',\n            '#26c6da',\n            '#00bcd4',\n            '#00acc1',\n            '#0097a7',\n            '#00838f',\n            '#006064'\n        ]\n    },\n    {\n        name: 'flame',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#A10A28',\n            '#D3342D',\n            '#EF6D49',\n            '#FAAD67',\n            '#FDDE90',\n            '#DBED91',\n            '#A9D770',\n            '#6CBA67',\n            '#2C9653',\n            '#146738'\n        ]\n    },\n    {\n        name: 'ocean',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#1D68FB',\n            '#33C0FC',\n            '#4AFFFE',\n            '#AFFFFF',\n            '#FFFC63',\n            '#FDBD2D',\n            '#FC8A25',\n            '#FA4F1E',\n            '#FA141B',\n            '#BA38D1'\n        ]\n    },\n    {\n        name: 'forest',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#55C22D',\n            '#C1F33D',\n            '#3CC099',\n            '#AFFFFF',\n            '#8CFC9D',\n            '#76CFFA',\n            '#BA60FB',\n            '#EE6490',\n            '#C42A1C',\n            '#FC9F32'\n        ]\n    },\n    {\n        name: 'horizon',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#2597FB',\n            '#65EBFD',\n            '#99FDD0',\n            '#FCEE4B',\n            '#FEFCFA',\n            '#FDD6E3',\n            '#FCB1A8',\n            '#EF6F7B',\n            '#CB96E8',\n            '#EFDEE0'\n        ]\n    },\n    {\n        name: 'neons',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#FF3333',\n            '#FF33FF',\n            '#CC33FF',\n            '#0000FF',\n            '#33CCFF',\n            '#33FFFF',\n            '#33FF66',\n            '#CCFF33',\n            '#FFCC00',\n            '#FF6600'\n        ]\n    },\n    {\n        name: 'picnic',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#FAC51D',\n            '#66BD6D',\n            '#FAA026',\n            '#29BB9C',\n            '#E96B56',\n            '#55ACD2',\n            '#B7332F',\n            '#2C83C9',\n            '#9166B8',\n            '#92E7E8'\n        ]\n    },\n    {\n        name: 'night',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#2B1B5A',\n            '#501356',\n            '#183356',\n            '#28203F',\n            '#391B3C',\n            '#1E2B3C',\n            '#120634',\n            '#2D0432',\n            '#051932',\n            '#453080',\n            '#75267D',\n            '#2C507D',\n            '#4B3880',\n            '#752F7D',\n            '#35547D'\n        ]\n    },\n    {\n        name: 'nightLights',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#4e31a5',\n            '#9c25a7',\n            '#3065ab',\n            '#57468b',\n            '#904497',\n            '#46648b',\n            '#32118d',\n            '#a00fb3',\n            '#1052a2',\n            '#6e51bd',\n            '#b63cc3',\n            '#6c97cb',\n            '#8671c1',\n            '#b455be',\n            '#7496c3'\n        ]\n    }\n];\n\nclass ColorHelper {\n    constructor(scheme, type, domain, customColors) {\n        if (typeof scheme === 'string') {\n            scheme = colorSets.find(cs => {\n                return cs.name === scheme;\n            });\n        }\n        this.colorDomain = scheme.domain;\n        this.scaleType = type;\n        this.domain = domain;\n        this.customColors = customColors;\n        this.scale = this.generateColorScheme(scheme, type, this.domain);\n    }\n    generateColorScheme(scheme, type, domain) {\n        if (typeof scheme === 'string') {\n            scheme = colorSets.find(cs => {\n                return cs.name === scheme;\n            });\n        }\n        let colorScale;\n        switch (type) {\n            case ScaleType.Quantile:\n                colorScale = scaleQuantile()\n                    .range(scheme.domain)\n                    .domain(domain);\n                break;\n            case ScaleType.Ordinal:\n                colorScale = scaleOrdinal()\n                    .range(scheme.domain)\n                    .domain(domain);\n                break;\n            case ScaleType.Linear:\n                {\n                    const colorDomain = [...scheme.domain];\n                    if (colorDomain.length === 1) {\n                        colorDomain.push(colorDomain[0]);\n                        this.colorDomain = colorDomain;\n                    }\n                    const points = range(0, 1, 1.0 / colorDomain.length);\n                    colorScale = scaleLinear()\n                        .range(colorDomain)\n                        .domain(points);\n                }\n                break;\n            default:\n                break;\n        }\n        return colorScale;\n    }\n    getColor(value) {\n        if (value === undefined || value === null) {\n            throw new Error('Value can not be null');\n        }\n        if (this.scaleType === ScaleType.Linear) {\n            const valueScale = scaleLinear()\n                .domain(this.domain)\n                .range([0, 1]);\n            return this.scale(valueScale(value));\n        }\n        else {\n            if (typeof this.customColors === 'function') {\n                return this.customColors(value);\n            }\n            const formattedValue = value.toString();\n            let found; // todo type customColors\n            if (this.customColors && this.customColors.length > 0) {\n                found = this.customColors.find(mapping => {\n                    return mapping.name.toLowerCase() === formattedValue.toLowerCase();\n                });\n            }\n            if (found) {\n                return found.value;\n            }\n            else {\n                return this.scale(value);\n            }\n        }\n    }\n    getLinearGradientStops(value, start) {\n        if (start === undefined) {\n            start = this.domain[0];\n        }\n        const valueScale = scaleLinear()\n            .domain(this.domain)\n            .range([0, 1]);\n        const colorValueScale = scaleBand().domain(this.colorDomain).range([0, 1]);\n        const endColor = this.getColor(value);\n        // generate the stops\n        const startVal = valueScale(start);\n        const startColor = this.getColor(start);\n        const endVal = valueScale(value);\n        let i = 1;\n        let currentVal = startVal;\n        const stops = [];\n        stops.push({\n            color: startColor,\n            offset: startVal,\n            originalOffset: startVal,\n            opacity: 1\n        });\n        while (currentVal < endVal && i < this.colorDomain.length) {\n            const color = this.colorDomain[i];\n            const offset = colorValueScale(color);\n            if (offset <= startVal) {\n                i++;\n                continue;\n            }\n            if (offset.toFixed(4) >= (endVal - colorValueScale.bandwidth()).toFixed(4)) {\n                break;\n            }\n            stops.push({\n                color,\n                offset,\n                opacity: 1\n            });\n            currentVal = offset;\n            i++;\n        }\n        if (stops[stops.length - 1].offset < 100) {\n            stops.push({\n                color: endColor,\n                offset: endVal,\n                opacity: 1\n            });\n        }\n        if (endVal === startVal) {\n            stops[0].offset = 0;\n            stops[1].offset = 100;\n        }\n        else {\n            // normalize the offsets into percentages\n            if (stops[stops.length - 1].offset !== 100) {\n                for (const s of stops) {\n                    s.offset = ((s.offset - startVal) / (endVal - startVal)) * 100;\n                }\n            }\n        }\n        return stops;\n    }\n}\n\n/**\n * Based on the data, return an array with unique values.\n *\n * @export\n * @returns array\n */\nfunction getUniqueXDomainValues(results) {\n    const valueSet = new Set();\n    for (const result of results) {\n        for (const d of result.series) {\n            valueSet.add(d.name);\n        }\n    }\n    return Array.from(valueSet);\n}\n/**\n * Get the scaleType of enumerable of values.\n * @returns  'time', 'linear' or 'ordinal'\n */\nfunction getScaleType(values, checkDateType = true) {\n    if (checkDateType) {\n        const allDates = values.every(value => value instanceof Date);\n        if (allDates) {\n            return ScaleType.Time;\n        }\n    }\n    const allNumbers = values.every(value => typeof value === 'number');\n    if (allNumbers) {\n        return ScaleType.Linear;\n    }\n    return ScaleType.Ordinal;\n}\nfunction getXDomainArray(values, xScaleMin, xScaleMax) {\n    const scaleType = getScaleType(values);\n    let xSet = [];\n    let domain = [];\n    if (scaleType === ScaleType.Linear) {\n        values = values.map(v => Number(v));\n    }\n    let min;\n    let max;\n    if (scaleType === ScaleType.Time || scaleType === ScaleType.Linear) {\n        const mappedValues = values.map(v => Number(v));\n        min = xScaleMin ? xScaleMin : Math.min(...mappedValues);\n        max = xScaleMax ? xScaleMax : Math.max(...mappedValues);\n    }\n    if (scaleType === ScaleType.Time) {\n        domain = [new Date(min), new Date(max)];\n        xSet = [...values].sort((a, b) => {\n            const aDate = a.getTime();\n            const bDate = b.getTime();\n            if (aDate > bDate)\n                return 1;\n            if (bDate > aDate)\n                return -1;\n            return 0;\n        });\n    }\n    else if (scaleType === ScaleType.Linear) {\n        domain = [min, max];\n        // Use compare function to sort numbers numerically\n        xSet = [...values].sort((a, b) => a - b);\n    }\n    else {\n        domain = values;\n        xSet = values;\n    }\n    return { domain, xSet, scaleType };\n}\n\nfunction sortLinear(data, property, direction = 'asc') {\n    return data.sort((a, b) => {\n        if (direction === 'asc') {\n            return a[property] - b[property];\n        }\n        else {\n            return b[property] - a[property];\n        }\n    });\n}\nfunction sortByDomain(data, property, direction = 'asc', domain) {\n    return data.sort((a, b) => {\n        const aVal = a[property];\n        const bVal = b[property];\n        const aIdx = domain.indexOf(aVal);\n        const bIdx = domain.indexOf(bVal);\n        if (direction === 'asc') {\n            return aIdx - bIdx;\n        }\n        else {\n            return bIdx - aIdx;\n        }\n    });\n}\nfunction sortByTime(data, property, direction = 'asc') {\n    return data.sort((a, b) => {\n        const aDate = a[property].getTime();\n        const bDate = b[property].getTime();\n        if (direction === 'asc') {\n            if (aDate > bDate)\n                return 1;\n            if (bDate > aDate)\n                return -1;\n            return 0;\n        }\n        else {\n            if (aDate > bDate)\n                return -1;\n            if (bDate > aDate)\n                return 1;\n            return 0;\n        }\n    });\n}\n\nclass AreaSeriesComponent {\n    constructor() {\n        this.baseValue = 'auto';\n        this.stacked = false;\n        this.normalized = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateGradient();\n        let currentArea;\n        let startingArea;\n        const xProperty = d => {\n            const label = d.name;\n            return this.xScale(label);\n        };\n        if (this.stacked || this.normalized) {\n            currentArea = area()\n                .x(xProperty)\n                .y0((d, i) => this.yScale(d.d0))\n                .y1((d, i) => this.yScale(d.d1));\n            startingArea = area()\n                .x(xProperty)\n                .y0(d => this.yScale.range()[0])\n                .y1(d => this.yScale.range()[0]);\n        }\n        else {\n            currentArea = area()\n                .x(xProperty)\n                .y0(() => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\n                .y1(d => this.yScale(d.value));\n            startingArea = area()\n                .x(xProperty)\n                .y0(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\n                .y1(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)));\n        }\n        currentArea.curve(this.curve);\n        startingArea.curve(this.curve);\n        this.opacity = 0.8;\n        let data = this.data.series;\n        if (this.scaleType === ScaleType.Linear) {\n            data = sortLinear(data, 'name');\n        }\n        else if (this.scaleType === ScaleType.Time) {\n            data = sortByTime(data, 'name');\n        }\n        else {\n            data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n        }\n        this.path = currentArea(data);\n        this.startingPath = startingArea(data);\n    }\n    updateGradient() {\n        if (this.colors.scaleType === ScaleType.Linear) {\n            this.hasGradient = true;\n            if (this.stacked || this.normalized) {\n                const d0values = this.data.series.map(d => d.d0);\n                const d1values = this.data.series.map(d => d.d1);\n                const max = Math.max(...d1values);\n                const min = Math.min(...d0values);\n                this.gradientStops = this.colors.getLinearGradientStops(max, min);\n            }\n            else {\n                const values = this.data.series.map(d => d.value);\n                const max = Math.max(...values);\n                this.gradientStops = this.colors.getLinearGradientStops(max);\n            }\n        }\n        else {\n            this.hasGradient = false;\n            this.gradientStops = undefined;\n        }\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    isInactive(entry) {\n        if (!this.activeEntries || this.activeEntries.length === 0)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item === undefined;\n    }\n}\nAreaSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nAreaSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaSeriesComponent, selector: \"g[ngx-charts-area-series]\", inputs: { data: \"data\", xScale: \"xScale\", yScale: \"yScale\", baseValue: \"baseValue\", colors: \"colors\", scaleType: \"scaleType\", stacked: \"stacked\", normalized: \"normalized\", gradient: \"gradient\", curve: \"curve\", activeEntries: \"activeEntries\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-area\n      class=\"area-series\"\n      [data]=\"data\"\n      [path]=\"path\"\n      [fill]=\"colors.getColor(data.name)\"\n      [stops]=\"gradientStops\"\n      [startingPath]=\"startingPath\"\n      [opacity]=\"opacity\"\n      [gradient]=\"gradient || hasGradient\"\n      [animations]=\"animations\"\n      [class.active]=\"isActive(data)\"\n      [class.inactive]=\"isInactive(data)\"\n    />\n  `, isInline: true, components: [{ type: AreaComponent, selector: \"g[ngx-charts-area]\", inputs: [\"data\", \"path\", \"startingPath\", \"fill\", \"opacity\", \"startOpacity\", \"endOpacity\", \"gradient\", \"stops\", \"animations\"], outputs: [\"select\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-area-series]',\n                    template: `\n    <svg:g\n      ngx-charts-area\n      class=\"area-series\"\n      [data]=\"data\"\n      [path]=\"path\"\n      [fill]=\"colors.getColor(data.name)\"\n      [stops]=\"gradientStops\"\n      [startingPath]=\"startingPath\"\n      [opacity]=\"opacity\"\n      [gradient]=\"gradient || hasGradient\"\n      [animations]=\"animations\"\n      [class.active]=\"isActive(data)\"\n      [class.inactive]=\"isInactive(data)\"\n    />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], baseValue: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], stacked: [{\n                type: Input\n            }], normalized: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nclass AreaChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.xAxis = false;\n        this.yAxis = false;\n        this.baseValue = 'auto';\n        this.autoScale = false;\n        this.timeline = false;\n        this.showGridLines = true;\n        this.curve = curveLinear;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.timelineHeight = 50;\n        this.timelinePadding = 10;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    updateTimeline() {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n        }\n    }\n    getXDomain() {\n        let values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        let domain = [];\n        if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n        }\n        let min;\n        let max;\n        if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n            min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n            max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n        }\n        if (this.scaleType === ScaleType.Time) {\n            domain = [new Date(min), new Date(max)];\n            this.xSet = [...values].sort((a, b) => {\n                const aDate = a.getTime();\n                const bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            domain = [min, max];\n            // Use compare function to sort numbers numerically\n            this.xSet = [...values].sort((a, b) => a - b);\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        const values = [...domain];\n        if (!this.autoScale) {\n            values.push(0);\n        }\n        if (this.baseValue !== 'auto') {\n            values.push(this.baseValue);\n        }\n        const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n        const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime();\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear();\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().padding(0.1);\n        }\n        scale.range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([height, 0]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getScaleType(values) {\n        let date = true;\n        let num = true;\n        for (const value of values) {\n            if (isDate(value)) {\n                date = false;\n            }\n            if (isNumber(value)) {\n                num = false;\n            }\n        }\n        if (date) {\n            return ScaleType.Time;\n        }\n        if (num) {\n            return ScaleType.Linear;\n        }\n        return ScaleType.Ordinal;\n    }\n    updateDomain(domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n    updateHoveredVertical(item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    }\n    hideCircles() {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n}\nAreaChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nAreaChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaChartComponent, selector: \"ngx-charts-area-chart\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", baseValue: \"baseValue\", autoScale: \"autoScale\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", timeline: \"timeline\", gradient: \"gradient\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", xScaleMin: \"xScaleMin\", xScaleMax: \"xScaleMax\", yScaleMin: \"yScaleMin\", yScaleMax: \"yScaleMax\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }, { propertyName: \"seriesTooltipTemplate\", first: true, predicate: [\"seriesTooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [baseValue]=\"baseValue\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [baseValue]=\"baseValue\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: AreaSeriesComponent, selector: \"g[ngx-charts-area-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"scaleType\", \"stacked\", \"normalized\", \"gradient\", \"curve\", \"activeEntries\", \"animations\"], outputs: [\"select\"] }, { type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: [\"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"hover\"] }, { type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: [\"data\", \"type\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: [\"view\", \"results\", \"scheme\", \"customColors\", \"legend\", \"autoScale\", \"scaleType\", \"height\"], outputs: [\"select\", \"onDomainChange\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-area-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [baseValue]=\"baseValue\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [baseValue]=\"baseValue\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], baseValue: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], timeline: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], seriesTooltipTemplate: [{\n                type: ContentChild,\n                args: ['seriesTooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass AreaChartNormalizedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.showXAxisLabel = false;\n        this.showYAxisLabel = false;\n        this.showGridLines = true;\n        this.curve = curveLinear;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.yDomain = [0, 100];\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.seriesType = SeriesType;\n        this.timelineHeight = 50;\n        this.timelinePadding = 10;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        for (let i = 0; i < this.xSet.length; i++) {\n            const val = this.xSet[i];\n            let d0 = 0;\n            let total = 0;\n            for (const group of this.results) {\n                const d = group.series.find(item => {\n                    let a = item.name;\n                    let b = val;\n                    if (this.scaleType === ScaleType.Time) {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    total += d.value;\n                }\n            }\n            for (const group of this.results) {\n                let d = group.series.find(item => {\n                    let a = item.name;\n                    let b = val;\n                    if (this.scaleType === ScaleType.Time) {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    d.d0 = d0;\n                    d.d1 = d0 + d.value;\n                    d0 += d.value;\n                }\n                else {\n                    d = {\n                        name: val,\n                        value: 0,\n                        d0,\n                        d1: d0\n                    };\n                    group.series.push(d);\n                }\n                if (total > 0) {\n                    d.d0 = (d.d0 * 100) / total;\n                    d.d1 = (d.d1 * 100) / total;\n                }\n                else {\n                    d.d0 = 0;\n                    d.d1 = 0;\n                }\n            }\n        }\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    updateTimeline() {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n        }\n    }\n    getXDomain() {\n        let values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        let domain = [];\n        if (this.scaleType === ScaleType.Time) {\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            domain = [new Date(min), new Date(max)];\n            this.xSet = [...values].sort((a, b) => {\n                const aDate = a.getTime();\n                const bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            domain = [min, max];\n            // Use compare function to sort numbers numerically\n            this.xSet = [...values].sort((a, b) => a - b);\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime();\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear();\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().padding(0.1);\n        }\n        scale.range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([height, 0]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    updateDomain(domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n    updateHoveredVertical(item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    }\n    hideCircles() {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n}\nAreaChartNormalizedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartNormalizedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nAreaChartNormalizedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaChartNormalizedComponent, selector: \"ngx-charts-area-chart-normalized\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", timeline: \"timeline\", gradient: \"gradient\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }, { propertyName: \"seriesTooltipTemplate\", first: true, predicate: [\"seriesTooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [activeEntries]=\"activeEntries\"\n              [gradient]=\"gradient\"\n              [normalized]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [showPercentage]=\"true\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [normalized]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: AreaSeriesComponent, selector: \"g[ngx-charts-area-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"scaleType\", \"stacked\", \"normalized\", \"gradient\", \"curve\", \"activeEntries\", \"animations\"], outputs: [\"select\"] }, { type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: [\"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"hover\"] }, { type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: [\"data\", \"type\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: [\"view\", \"results\", \"scheme\", \"customColors\", \"legend\", \"autoScale\", \"scaleType\", \"height\"], outputs: [\"select\", \"onDomainChange\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartNormalizedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-area-chart-normalized', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [activeEntries]=\"activeEntries\"\n              [gradient]=\"gradient\"\n              [normalized]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [showPercentage]=\"true\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [normalized]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], timeline: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], seriesTooltipTemplate: [{\n                type: ContentChild,\n                args: ['seriesTooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass AreaChartStackedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.xAxis = false;\n        this.yAxis = false;\n        this.timeline = false;\n        this.showGridLines = true;\n        this.curve = curveLinear;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.timelineHeight = 50;\n        this.timelinePadding = 10;\n        this.seriesType = SeriesType;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        for (let i = 0; i < this.xSet.length; i++) {\n            const val = this.xSet[i];\n            let d0 = 0;\n            for (const group of this.results) {\n                let d = group.series.find(item => {\n                    let a = item.name;\n                    let b = val;\n                    if (this.scaleType === ScaleType.Time) {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    d.d0 = d0;\n                    d.d1 = d0 + d.value;\n                    d0 += d.value;\n                }\n                else {\n                    d = {\n                        name: val,\n                        value: 0,\n                        d0,\n                        d1: d0\n                    };\n                    group.series.push(d);\n                }\n            }\n        }\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    updateTimeline() {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n        }\n    }\n    getXDomain() {\n        let values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        let domain = [];\n        if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n        }\n        let min;\n        let max;\n        if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n            min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n            max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n        }\n        if (this.scaleType === ScaleType.Time) {\n            domain = [new Date(min), new Date(max)];\n            this.xSet = [...values].sort((a, b) => {\n                const aDate = a.getTime();\n                const bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            domain = [min, max];\n            // Use compare function to sort numbers numerically\n            this.xSet = [...values].sort((a, b) => a - b);\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (let i = 0; i < this.xSet.length; i++) {\n            const val = this.xSet[i];\n            let sum = 0;\n            for (const group of this.results) {\n                const d = group.series.find(item => {\n                    let a = item.name;\n                    let b = val;\n                    if (this.scaleType === ScaleType.Time) {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    sum += d.value;\n                }\n            }\n            domain.push(sum);\n        }\n        const min = this.yScaleMin ? this.yScaleMin : Math.min(0, ...domain);\n        const max = this.yScaleMax ? this.yScaleMax : Math.max(...domain);\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime();\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear();\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().padding(0.1);\n        }\n        scale.range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([height, 0]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    updateDomain(domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n    updateHoveredVertical(item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    }\n    hideCircles() {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    trackBy(index, item) {\n        return `${item.name}`;\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n}\nAreaChartStackedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartStackedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nAreaChartStackedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaChartStackedComponent, selector: \"ngx-charts-area-chart-stacked\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", timeline: \"timeline\", gradient: \"gradient\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", xScaleMin: \"xScaleMin\", xScaleMax: \"xScaleMax\", yScaleMin: \"yScaleMin\", yScaleMax: \"yScaleMax\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }, { propertyName: \"seriesTooltipTemplate\", first: true, predicate: [\"seriesTooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [activeEntries]=\"activeEntries\"\n              [stacked]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [stacked]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: AreaSeriesComponent, selector: \"g[ngx-charts-area-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"scaleType\", \"stacked\", \"normalized\", \"gradient\", \"curve\", \"activeEntries\", \"animations\"], outputs: [\"select\"] }, { type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: [\"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"hover\"] }, { type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: [\"data\", \"type\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: [\"view\", \"results\", \"scheme\", \"customColors\", \"legend\", \"autoScale\", \"scaleType\", \"height\"], outputs: [\"select\", \"onDomainChange\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartStackedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-area-chart-stacked', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [activeEntries]=\"activeEntries\"\n              [stacked]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [stacked]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], timeline: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], seriesTooltipTemplate: [{\n                type: ContentChild,\n                args: ['seriesTooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass AreaChartModule {\n}\nAreaChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAreaChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartModule, declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent], imports: [ChartCommonModule], exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent] });\nAreaChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent],\n                    exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent]\n                }]\n        }] });\n\nclass BarComponent {\n    constructor(element) {\n        this.roundEdges = true;\n        this.gradient = false;\n        this.offset = 0;\n        this.isActive = false;\n        this.animations = true;\n        this.noBarWhenZero = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.hasGradient = false;\n        this.hideBar = false;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        if (changes.roundEdges) {\n            this.loadAnimation();\n        }\n        this.update();\n    }\n    update() {\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = `url(#${this.gradientId})`;\n        if (this.gradient || this.stops) {\n            this.gradientStops = this.getGradient();\n            this.hasGradient = true;\n        }\n        else {\n            this.hasGradient = false;\n        }\n        this.updatePathEl();\n        this.checkToHideBar();\n    }\n    loadAnimation() {\n        this.path = this.getStartingPath();\n        setTimeout(this.update.bind(this), 100);\n    }\n    updatePathEl() {\n        const node = select(this.element).select('.bar');\n        const path = this.getPath();\n        if (this.animations) {\n            node.transition().duration(500).attr('d', path);\n        }\n        else {\n            node.attr('d', path);\n        }\n    }\n    getGradient() {\n        if (this.stops) {\n            return this.stops;\n        }\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: this.getStartOpacity()\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: 1\n            }\n        ];\n    }\n    getStartingPath() {\n        if (!this.animations) {\n            return this.getPath();\n        }\n        let radius = this.getRadius();\n        let path;\n        if (this.roundEdges) {\n            if (this.orientation === BarOrientation.Vertical) {\n                radius = Math.min(this.height, radius);\n                path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n            }\n            else if (this.orientation === BarOrientation.Horizontal) {\n                radius = Math.min(this.width, radius);\n                path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n            }\n        }\n        else {\n            if (this.orientation === BarOrientation.Vertical) {\n                path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n            }\n            else if (this.orientation === BarOrientation.Horizontal) {\n                path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n            }\n        }\n        return path;\n    }\n    getPath() {\n        let radius = this.getRadius();\n        let path;\n        if (this.roundEdges) {\n            if (this.orientation === BarOrientation.Vertical) {\n                radius = Math.min(this.height, radius);\n                path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n            }\n            else if (this.orientation === BarOrientation.Horizontal) {\n                radius = Math.min(this.width, radius);\n                path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n            }\n        }\n        else {\n            path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n        }\n        return path;\n    }\n    getRadius() {\n        let radius = 0;\n        if (this.roundEdges && this.height > 5 && this.width > 5) {\n            radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n        }\n        return radius;\n    }\n    getStartOpacity() {\n        if (this.roundEdges) {\n            return 0.2;\n        }\n        else {\n            return 0.5;\n        }\n    }\n    get edges() {\n        let edges = [false, false, false, false];\n        if (this.roundEdges) {\n            if (this.orientation === BarOrientation.Vertical) {\n                if (this.data.value > 0) {\n                    edges = [true, true, false, false];\n                }\n                else {\n                    edges = [false, false, true, true];\n                }\n            }\n            else if (this.orientation === BarOrientation.Horizontal) {\n                if (this.data.value > 0) {\n                    edges = [false, true, false, true];\n                }\n                else {\n                    edges = [true, false, true, false];\n                }\n            }\n        }\n        return edges;\n    }\n    onMouseEnter() {\n        this.activate.emit(this.data);\n    }\n    onMouseLeave() {\n        this.deactivate.emit(this.data);\n    }\n    checkToHideBar() {\n        this.hideBar =\n            this.noBarWhenZero &&\n                ((this.orientation === BarOrientation.Vertical && this.height === 0) ||\n                    (this.orientation === BarOrientation.Horizontal && this.width === 0));\n    }\n}\nBarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nBarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarComponent, selector: \"g[ngx-charts-bar]\", inputs: { fill: \"fill\", data: \"data\", width: \"width\", height: \"height\", x: \"x\", y: \"y\", orientation: \"orientation\", roundEdges: \"roundEdges\", gradient: \"gradient\", offset: \"offset\", isActive: \"isActive\", stops: \"stops\", animations: \"animations\", ariaLabel: \"ariaLabel\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:defs *ngIf=\"hasGradient\">\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\"orientation\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path\n      class=\"bar\"\n      stroke=\"none\"\n      role=\"img\"\n      tabIndex=\"-1\"\n      [class.active]=\"isActive\"\n      [class.hidden]=\"hideBar\"\n      [attr.d]=\"path\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.fill]=\"hasGradient ? gradientFill : fill\"\n      (click)=\"select.emit(data)\"\n    />\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-bar]',\n                    template: `\n    <svg:defs *ngIf=\"hasGradient\">\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\"orientation\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path\n      class=\"bar\"\n      stroke=\"none\"\n      role=\"img\"\n      tabIndex=\"-1\"\n      [class.active]=\"isActive\"\n      [class.hidden]=\"hideBar\"\n      [attr.d]=\"path\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.fill]=\"hasGradient ? gradientFill : fill\"\n      (click)=\"select.emit(data)\"\n    />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { fill: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], orientation: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], offset: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], stops: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nvar BarChartType;\n(function (BarChartType) {\n    BarChartType[\"Standard\"] = \"standard\";\n    BarChartType[\"Normalized\"] = \"normalized\";\n    BarChartType[\"Stacked\"] = \"stacked\";\n})(BarChartType || (BarChartType = {}));\n\nvar D0Types;\n(function (D0Types) {\n    D0Types[\"positive\"] = \"positive\";\n    D0Types[\"negative\"] = \"negative\";\n})(D0Types || (D0Types = {}));\n\nclass BarLabelComponent {\n    constructor(element) {\n        this.dimensionsChanged = new EventEmitter();\n        this.horizontalPadding = 2;\n        this.verticalPadding = 5;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    getSize() {\n        const h = this.element.getBoundingClientRect().height;\n        const w = this.element.getBoundingClientRect().width;\n        return { height: h, width: w, negative: this.value < 0 };\n    }\n    ngAfterViewInit() {\n        this.dimensionsChanged.emit(this.getSize());\n    }\n    update() {\n        if (this.valueFormatting) {\n            this.formatedValue = this.valueFormatting(this.value);\n        }\n        else {\n            this.formatedValue = formatLabel(this.value);\n        }\n        if (this.orientation === 'horizontal') {\n            this.x = this.barX + this.barWidth;\n            // if the value is negative then it's on the left of the x0.\n            // we need to put the data label in front of the bar\n            if (this.value < 0) {\n                this.x = this.x - this.horizontalPadding;\n                this.textAnchor = 'end';\n            }\n            else {\n                this.x = this.x + this.horizontalPadding;\n                this.textAnchor = 'start';\n            }\n            this.y = this.barY + this.barHeight / 2;\n        }\n        else {\n            // orientation must be \"vertical\"\n            this.x = this.barX + this.barWidth / 2;\n            this.y = this.barY + this.barHeight;\n            if (this.value < 0) {\n                this.y = this.y + this.verticalPadding;\n                this.textAnchor = 'end';\n            }\n            else {\n                this.y = this.y - this.verticalPadding;\n                this.textAnchor = 'start';\n            }\n            this.transform = `rotate(-45, ${this.x} , ${this.y})`;\n        }\n    }\n}\nBarLabelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarLabelComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nBarLabelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarLabelComponent, selector: \"g[ngx-charts-bar-label]\", inputs: { value: \"value\", valueFormatting: \"valueFormatting\", barX: \"barX\", barY: \"barY\", barWidth: \"barWidth\", barHeight: \"barHeight\", orientation: \"orientation\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:text\n      class=\"textDataLabel\"\n      alignment-baseline=\"middle\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n    >\n      {{ formatedValue }}\n    </svg:text>\n  `, isInline: true, styles: [\".textDataLabel{font-size:11px}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarLabelComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'g[ngx-charts-bar-label]', template: `\n    <svg:text\n      class=\"textDataLabel\"\n      alignment-baseline=\"middle\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n    >\n      {{ formatedValue }}\n    </svg:text>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".textDataLabel{font-size:11px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { value: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], barX: [{\n                type: Input\n            }], barY: [{\n                type: Input\n            }], barWidth: [{\n                type: Input\n            }], barHeight: [{\n                type: Input\n            }], orientation: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }] } });\n\nclass SeriesHorizontal {\n    constructor() {\n        this.type = BarChartType.Standard;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dataLabelWidthChanged = new EventEmitter();\n        this.barsForDataLabels = [];\n        this.barOrientation = BarOrientation;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateTooltipSettings();\n        const d0 = {\n            [D0Types.positive]: 0,\n            [D0Types.negative]: 0\n        };\n        let d0Type;\n        d0Type = D0Types.positive;\n        let total;\n        if (this.type === BarChartType.Normalized) {\n            total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n        }\n        const xScaleMin = Math.max(this.xScale.domain()[0], 0);\n        this.bars = this.series.map(d => {\n            let value = d.value;\n            const label = this.getLabel(d);\n            const formattedLabel = formatLabel(label);\n            const roundEdges = this.roundEdges;\n            d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n            const bar = {\n                value,\n                label,\n                roundEdges,\n                data: d,\n                formattedLabel\n            };\n            bar.height = this.yScale.bandwidth();\n            if (this.type === BarChartType.Standard) {\n                bar.width = Math.abs(this.xScale(value) - this.xScale(xScaleMin));\n                if (value < 0) {\n                    bar.x = this.xScale(value);\n                }\n                else {\n                    bar.x = this.xScale(xScaleMin);\n                }\n                bar.y = this.yScale(label);\n            }\n            else if (this.type === BarChartType.Stacked) {\n                const offset0 = d0[d0Type];\n                const offset1 = offset0 + value;\n                d0[d0Type] += value;\n                bar.width = this.xScale(offset1) - this.xScale(offset0);\n                bar.x = this.xScale(offset0);\n                bar.y = 0;\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n            }\n            else if (this.type === BarChartType.Normalized) {\n                let offset0 = d0[d0Type];\n                let offset1 = offset0 + value;\n                d0[d0Type] += value;\n                if (total > 0) {\n                    offset0 = (offset0 * 100) / total;\n                    offset1 = (offset1 * 100) / total;\n                }\n                else {\n                    offset0 = 0;\n                    offset1 = 0;\n                }\n                bar.width = this.xScale(offset1) - this.xScale(offset0);\n                bar.x = this.xScale(offset0);\n                bar.y = 0;\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n                value = (offset1 - offset0).toFixed(2) + '%';\n            }\n            if (this.colors.scaleType === ScaleType.Ordinal) {\n                bar.color = this.colors.getColor(label);\n            }\n            else {\n                if (this.type === BarChartType.Standard) {\n                    bar.color = this.colors.getColor(value);\n                    bar.gradientStops = this.colors.getLinearGradientStops(value);\n                }\n                else {\n                    bar.color = this.colors.getColor(bar.offset1);\n                    bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n                }\n            }\n            let tooltipLabel = formattedLabel;\n            bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n            if (this.seriesName !== null && this.seriesName !== undefined) {\n                tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n                bar.data.series = this.seriesName;\n                bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n            }\n            bar.tooltipText = this.tooltipDisabled\n                ? undefined\n                : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()}</span>\n      `;\n            return bar;\n        });\n        this.updateDataLabels();\n    }\n    updateDataLabels() {\n        if (this.type === BarChartType.Stacked) {\n            this.barsForDataLabels = [];\n            const section = {};\n            section.series = this.seriesName;\n            const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\n            const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\n            section.total = totalPositive + totalNegative;\n            section.x = 0;\n            section.y = 0;\n            // if total is positive then we show it on the right, otherwise on the left\n            if (section.total > 0) {\n                section.width = this.xScale(totalPositive);\n            }\n            else {\n                section.width = this.xScale(totalNegative);\n            }\n            section.height = this.yScale.bandwidth();\n            this.barsForDataLabels.push(section);\n        }\n        else {\n            this.barsForDataLabels = this.series.map(d => {\n                const section = {};\n                section.series = this.seriesName ?? d.label;\n                section.total = d.value;\n                section.x = this.xScale(0);\n                section.y = this.yScale(d.label);\n                section.width = this.xScale(section.total) - this.xScale(0);\n                section.height = this.yScale.bandwidth();\n                return section;\n            });\n        }\n    }\n    updateTooltipSettings() {\n        this.tooltipPlacement = this.tooltipDisabled ? undefined : PlacementTypes.Top;\n        this.tooltipType = this.tooltipDisabled ? undefined : StyleTypes.tooltip;\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(active => {\n            return entry.name === active.name && entry.value === active.value;\n        });\n        return item !== undefined;\n    }\n    getLabel(dataItem) {\n        if (dataItem.label) {\n            return dataItem.label;\n        }\n        return dataItem.name;\n    }\n    trackBy(index, bar) {\n        return bar.label;\n    }\n    trackDataLabelBy(index, barLabel) {\n        return index + '#' + barLabel.series + '#' + barLabel.total;\n    }\n    click(data) {\n        this.select.emit(data);\n    }\n}\nSeriesHorizontal.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SeriesHorizontal, deps: [], target: i0.ɵɵFactoryTarget.Component });\nSeriesHorizontal.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: { dims: \"dims\", type: \"type\", series: \"series\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", activeEntries: \"activeEntries\", seriesName: \"seriesName\", tooltipTemplate: \"tooltipTemplate\", roundEdges: \"roundEdges\", animations: \"animations\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", dataLabelWidthChanged: \"dataLabelWidthChanged\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"barOrientation.Horizontal\"\n      [roundEdges]=\"bar.roundEdges\"\n      (select)=\"click($event)\"\n      [gradient]=\"gradient\"\n      [isActive]=\"isActive(bar.data)\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [animations]=\"animations\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Horizontal\"\n        (dimensionsChanged)=\"dataLabelWidthChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: BarComponent, selector: \"g[ngx-charts-bar]\", inputs: [\"fill\", \"data\", \"width\", \"height\", \"x\", \"y\", \"orientation\", \"roundEdges\", \"gradient\", \"offset\", \"isActive\", \"stops\", \"animations\", \"ariaLabel\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: BarLabelComponent, selector: \"g[ngx-charts-bar-label]\", inputs: [\"value\", \"valueFormatting\", \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"orientation\"], outputs: [\"dimensionsChanged\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({ opacity: 0 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SeriesHorizontal, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-series-horizontal]',\n                    template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"barOrientation.Horizontal\"\n      [roundEdges]=\"bar.roundEdges\"\n      (select)=\"click($event)\"\n      [gradient]=\"gradient\"\n      [isActive]=\"isActive(bar.data)\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [animations]=\"animations\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Horizontal\"\n        (dimensionsChanged)=\"dataLabelWidthChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({ opacity: 0 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], propDecorators: { dims: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], series: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], seriesName: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], dataLabelWidthChanged: [{\n                type: Output\n            }] } });\n\nclass BarHorizontalComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        }\n        this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getXScale() {\n        this.xDomain = this.getXDomain();\n        const scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getYScale() {\n        this.yDomain = this.getYDomain();\n        const spacing = this.yDomain.length / (this.dims.height / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.yDomain);\n    }\n    getXDomain() {\n        const values = this.results.map(d => d.value);\n        const min = this.xScaleMin ? Math.min(this.xScaleMin, ...values) : Math.min(0, ...values);\n        const max = this.xScaleMax ? Math.max(this.xScaleMax, ...values) : Math.max(0, ...values);\n        return [min, max];\n    }\n    getYDomain() {\n        return this.results.map(d => d.label);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.yDomain;\n        }\n        else {\n            domain = this.xDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === 'ordinal') {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.xDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onDataLabelMaxWidthChanged(event) {\n        if (event.size.negative) {\n            this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n        }\n        else {\n            this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n        }\n        if (event.index === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarHorizontalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarHorizontalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarHorizontalComponent, selector: \"ngx-charts-bar-horizontal\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", roundEdges: \"roundEdges\", xScaleMax: \"xScaleMax\", xScaleMin: \"xScaleMin\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-horizontal\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"tooltipDisabled\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-horizontal', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-horizontal\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarHorizontal2DComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.groupPadding = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        this.isSSR = false;\n        this.barOrientation = BarOrientation;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        }\n        this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.groupScale = this.getGroupScale();\n        this.innerScale = this.getInnerScale();\n        this.valueScale = this.getValueScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getGroupScale() {\n        const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n        return scaleBand()\n            .rangeRound([0, this.dims.height])\n            .paddingInner(spacing)\n            .paddingOuter(spacing / 2)\n            .domain(this.groupDomain);\n    }\n    getInnerScale() {\n        const height = this.groupScale.bandwidth();\n        const spacing = this.innerDomain.length / (height / this.barPadding + 1);\n        return scaleBand().rangeRound([0, height]).paddingInner(spacing).domain(this.innerDomain);\n    }\n    getValueScale() {\n        const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        const min = Math.min(0, ...domain);\n        const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(0, ...domain);\n        return [min, max];\n    }\n    groupTransform(group) {\n        return `translate(0, ${this.groupScale(group.label)})`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onDataLabelMaxWidthChanged(event, groupIndex) {\n        if (event.size.negative) {\n            this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n        }\n        else {\n            this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarHorizontal2DComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontal2DComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarHorizontal2DComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarHorizontal2DComponent, selector: \"ngx-charts-bar-horizontal-2d\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", groupPadding: \"groupPadding\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", roundEdges: \"roundEdges\", xScaleMax: \"xScaleMax\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"valueScale\"\n          [yScale]=\"groupScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Horizontal\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: GridPanelSeriesComponent, selector: \"g[ngx-charts-grid-panel-series]\", inputs: [\"data\", \"dims\", \"xScale\", \"yScale\", \"orient\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"tooltipDisabled\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontal2DComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-horizontal-2d', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"valueScale\"\n          [yScale]=\"groupScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Horizontal\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], groupPadding: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarHorizontalNormalizedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.noBarWhenZero = true;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.valueDomain = [0, 100];\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.barChartType = BarChartType;\n        this.isSSR = false;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getYScale() {\n        const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n    }\n    getXScale() {\n        const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    groupTransform(group) {\n        return `translate(0, ${this.yScale(group.name)})`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarHorizontalNormalizedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalNormalizedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarHorizontalNormalizedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarHorizontalNormalizedComponent, selector: \"ngx-charts-bar-horizontal-normalized\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"tooltipDisabled\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalNormalizedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-horizontal-normalized', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarHorizontalStackedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        this.barChartType = BarChartType;\n        this.isSSR = false;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        }\n        this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        let smallest = 0;\n        let biggest = 0;\n        for (const group of this.results) {\n            let smallestSum = 0;\n            let biggestSum = 0;\n            for (const d of group.series) {\n                if (d.value < 0) {\n                    smallestSum += d.value;\n                }\n                else {\n                    biggestSum += d.value;\n                }\n                smallest = d.value < smallest ? d.value : smallest;\n                biggest = d.value > biggest ? d.value : biggest;\n            }\n            domain.push(smallestSum);\n            domain.push(biggestSum);\n        }\n        domain.push(smallest);\n        domain.push(biggest);\n        const min = Math.min(0, ...domain);\n        const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(...domain);\n        return [min, max];\n    }\n    getYScale() {\n        const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n    }\n    getXScale() {\n        const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    groupTransform(group) {\n        return `translate(0, ${this.yScale(group.name)})`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onDataLabelMaxWidthChanged(event, groupIndex) {\n        if (event.size.negative) {\n            this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n        }\n        else {\n            this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarHorizontalStackedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalStackedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarHorizontalStackedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarHorizontalStackedComponent, selector: \"ngx-charts-bar-horizontal-stacked\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", xScaleMax: \"xScaleMax\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"tooltipDisabled\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalStackedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-horizontal-stacked', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass SeriesVerticalComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.type = BarChartType.Standard;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dataLabelHeightChanged = new EventEmitter();\n        this.barsForDataLabels = [];\n        this.barOrientation = BarOrientation;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateTooltipSettings();\n        let width;\n        if (this.series.length) {\n            width = this.xScale.bandwidth();\n        }\n        width = Math.round(width);\n        const yScaleMin = Math.max(this.yScale.domain()[0], 0);\n        const d0 = {\n            [D0Types.positive]: 0,\n            [D0Types.negative]: 0\n        };\n        let d0Type = D0Types.positive;\n        let total;\n        if (this.type === BarChartType.Normalized) {\n            total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n        }\n        this.bars = this.series.map((d, index) => {\n            let value = d.value;\n            const label = this.getLabel(d);\n            const formattedLabel = formatLabel(label);\n            const roundEdges = this.roundEdges;\n            d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n            const bar = {\n                value,\n                label,\n                roundEdges,\n                data: d,\n                width,\n                formattedLabel,\n                height: 0,\n                x: 0,\n                y: 0\n            };\n            if (this.type === BarChartType.Standard) {\n                bar.height = Math.abs(this.yScale(value) - this.yScale(yScaleMin));\n                bar.x = this.xScale(label);\n                if (value < 0) {\n                    bar.y = this.yScale(0);\n                }\n                else {\n                    bar.y = this.yScale(value);\n                }\n            }\n            else if (this.type === BarChartType.Stacked) {\n                const offset0 = d0[d0Type];\n                const offset1 = offset0 + value;\n                d0[d0Type] += value;\n                bar.height = this.yScale(offset0) - this.yScale(offset1);\n                bar.x = 0;\n                bar.y = this.yScale(offset1);\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n            }\n            else if (this.type === BarChartType.Normalized) {\n                let offset0 = d0[d0Type];\n                let offset1 = offset0 + value;\n                d0[d0Type] += value;\n                if (total > 0) {\n                    offset0 = (offset0 * 100) / total;\n                    offset1 = (offset1 * 100) / total;\n                }\n                else {\n                    offset0 = 0;\n                    offset1 = 0;\n                }\n                bar.height = this.yScale(offset0) - this.yScale(offset1);\n                bar.x = 0;\n                bar.y = this.yScale(offset1);\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n                value = (offset1 - offset0).toFixed(2) + '%';\n            }\n            if (this.colors.scaleType === ScaleType.Ordinal) {\n                bar.color = this.colors.getColor(label);\n            }\n            else {\n                if (this.type === BarChartType.Standard) {\n                    bar.color = this.colors.getColor(value);\n                    bar.gradientStops = this.colors.getLinearGradientStops(value);\n                }\n                else {\n                    bar.color = this.colors.getColor(bar.offset1);\n                    bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n                }\n            }\n            let tooltipLabel = formattedLabel;\n            bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n            if (this.seriesName !== null && this.seriesName !== undefined) {\n                tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n                bar.data.series = this.seriesName;\n                bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n            }\n            bar.tooltipText = this.tooltipDisabled\n                ? undefined\n                : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()}</span>\n      `;\n            return bar;\n        });\n        this.updateDataLabels();\n    }\n    updateDataLabels() {\n        if (this.type === BarChartType.Stacked) {\n            this.barsForDataLabels = [];\n            const section = {};\n            section.series = this.seriesName;\n            const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\n            const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\n            section.total = totalPositive + totalNegative;\n            section.x = 0;\n            section.y = 0;\n            if (section.total > 0) {\n                section.height = this.yScale(totalPositive);\n            }\n            else {\n                section.height = this.yScale(totalNegative);\n            }\n            section.width = this.xScale.bandwidth();\n            this.barsForDataLabels.push(section);\n        }\n        else {\n            this.barsForDataLabels = this.series.map(d => {\n                const section = {};\n                section.series = this.seriesName ?? d.label;\n                section.total = d.value;\n                section.x = this.xScale(d.label);\n                section.y = this.yScale(0);\n                section.height = this.yScale(section.total) - this.yScale(0);\n                section.width = this.xScale.bandwidth();\n                return section;\n            });\n        }\n    }\n    updateTooltipSettings() {\n        this.tooltipPlacement = this.tooltipDisabled ? undefined : PlacementTypes.Top;\n        this.tooltipType = this.tooltipDisabled ? undefined : StyleTypes.tooltip;\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(active => {\n            return entry.name === active.name && entry.value === active.value;\n        });\n        return item !== undefined;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    getLabel(dataItem) {\n        if (dataItem.label) {\n            return dataItem.label;\n        }\n        return dataItem.name;\n    }\n    trackBy(index, bar) {\n        return bar.label;\n    }\n    trackDataLabelBy(index, barLabel) {\n        return index + '#' + barLabel.series + '#' + barLabel.total;\n    }\n}\nSeriesVerticalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SeriesVerticalComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nSeriesVerticalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: { dims: \"dims\", type: \"type\", series: \"series\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", gradient: \"gradient\", activeEntries: \"activeEntries\", seriesName: \"seriesName\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\", roundEdges: \"roundEdges\", animations: \"animations\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", dataLabelHeightChanged: \"dataLabelHeightChanged\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [@animationState]=\"'active'\"\n        [@.disabled]=\"!animations\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Vertical\"\n        (dimensionsChanged)=\"dataLabelHeightChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: BarComponent, selector: \"g[ngx-charts-bar]\", inputs: [\"fill\", \"data\", \"width\", \"height\", \"x\", \"y\", \"orientation\", \"roundEdges\", \"gradient\", \"offset\", \"isActive\", \"stops\", \"animations\", \"ariaLabel\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: BarLabelComponent, selector: \"g[ngx-charts-bar-label]\", inputs: [\"value\", \"valueFormatting\", \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"orientation\"], outputs: [\"dimensionsChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({ opacity: 0 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SeriesVerticalComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-series-vertical]',\n                    template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [@animationState]=\"'active'\"\n        [@.disabled]=\"!animations\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Vertical\"\n        (dimensionsChanged)=\"dataLabelHeightChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({ opacity: 0 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { dims: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], series: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], seriesName: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], dataLabelHeightChanged: [{\n                type: Output\n            }] } });\n\nclass BarVerticalComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        }\n        this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        if (this.showDataLabel) {\n            this.dims.height -= this.dataLabelMaxHeight.negative;\n        }\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n    }\n    getXScale() {\n        this.xDomain = this.getXDomain();\n        const spacing = this.xDomain.length / (this.dims.width / this.barPadding + 1);\n        return scaleBand().range([0, this.dims.width]).paddingInner(spacing).domain(this.xDomain);\n    }\n    getYScale() {\n        this.yDomain = this.getYDomain();\n        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.yDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getXDomain() {\n        return this.results.map(d => d.label);\n    }\n    getYDomain() {\n        const values = this.results.map(d => d.value);\n        let min = this.yScaleMin ? Math.min(this.yScaleMin, ...values) : Math.min(0, ...values);\n        if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n            min = Math.min(min, ...this.yAxisTicks);\n        }\n        let max = this.yScaleMax ? Math.max(this.yScaleMax, ...values) : Math.max(0, ...values);\n        if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n            max = Math.max(max, ...this.yAxisTicks);\n        }\n        return [min, max];\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.xDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.xDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onDataLabelMaxHeightChanged(event) {\n        if (event.size.negative) {\n            this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n        }\n        else {\n            this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n        }\n        if (event.index === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarVerticalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarVerticalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarVerticalComponent, selector: \"ngx-charts-bar-vertical\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", roundEdges: \"roundEdges\", yScaleMax: \"yScaleMax\", yScaleMin: \"yScaleMin\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (select)=\"onClick($event)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipDisabled\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-vertical', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (select)=\"onClick($event)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarVertical2DComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.scaleType = ScaleType.Ordinal;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.groupPadding = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        this.isSSR = false;\n        this.barOrientation = BarOrientation;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        }\n        this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.showDataLabel) {\n            this.dims.height -= this.dataLabelMaxHeight.negative;\n        }\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.groupScale = this.getGroupScale();\n        this.innerScale = this.getInnerScale();\n        this.valueScale = this.getValueScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n    }\n    onDataLabelMaxHeightChanged(event, groupIndex) {\n        if (event.size.negative) {\n            this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n        }\n        else {\n            this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    getGroupScale() {\n        const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n        return scaleBand()\n            .rangeRound([0, this.dims.width])\n            .paddingInner(spacing)\n            .paddingOuter(spacing / 2)\n            .domain(this.groupDomain);\n    }\n    getInnerScale() {\n        const width = this.groupScale.bandwidth();\n        const spacing = this.innerDomain.length / (width / this.barPadding + 1);\n        return scaleBand().rangeRound([0, width]).paddingInner(spacing).domain(this.innerDomain);\n    }\n    getValueScale() {\n        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        const min = Math.min(0, ...domain);\n        const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(0, ...domain);\n        return [min, max];\n    }\n    groupTransform(group) {\n        return `translate(${this.groupScale(group.label)}, 0)`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarVertical2DComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVertical2DComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarVertical2DComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarVertical2DComponent, selector: \"ngx-charts-bar-vertical-2d\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", scaleType: \"scaleType\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", groupPadding: \"groupPadding\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", roundEdges: \"roundEdges\", yScaleMax: \"yScaleMax\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"groupScale\"\n          [yScale]=\"valueScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Vertical\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            ngx-charts-series-vertical\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n            [activeEntries]=\"activeEntries\"\n            [xScale]=\"innerScale\"\n            [yScale]=\"valueScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [roundEdges]=\"roundEdges\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          ngx-charts-series-vertical\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n          [activeEntries]=\"activeEntries\"\n          [xScale]=\"innerScale\"\n          [yScale]=\"valueScale\"\n          [colors]=\"colors\"\n          [series]=\"group.series\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [seriesName]=\"group.name\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event, group)\"\n          (activate)=\"onActivate($event, group)\"\n          (deactivate)=\"onDeactivate($event, group)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: GridPanelSeriesComponent, selector: \"g[ngx-charts-grid-panel-series]\", inputs: [\"data\", \"dims\", \"xScale\", \"yScale\", \"orient\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipDisabled\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVertical2DComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-vertical-2d', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"groupScale\"\n          [yScale]=\"valueScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Vertical\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            ngx-charts-series-vertical\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n            [activeEntries]=\"activeEntries\"\n            [xScale]=\"innerScale\"\n            [yScale]=\"valueScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [roundEdges]=\"roundEdges\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          ngx-charts-series-vertical\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n          [activeEntries]=\"activeEntries\"\n          [xScale]=\"innerScale\"\n          [yScale]=\"valueScale\"\n          [colors]=\"colors\"\n          [series]=\"group.series\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [seriesName]=\"group.name\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event, group)\"\n          (activate)=\"onActivate($event, group)\"\n          (deactivate)=\"onDeactivate($event, group)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], groupPadding: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarVerticalNormalizedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.noBarWhenZero = true;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.valueDomain = [0, 100];\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.isSSR = false;\n        this.barChartType = BarChartType;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getXScale() {\n        const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n    }\n    getYScale() {\n        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    groupTransform(group) {\n        return `translate(${this.xScale(group.name)}, 0)`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarVerticalNormalizedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalNormalizedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarVerticalNormalizedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarVerticalNormalizedComponent, selector: \"ngx-charts-bar-vertical-normalized\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipDisabled\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalNormalizedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-vertical-normalized', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarVerticalStackedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        this.isSSR = false;\n        this.barChartType = BarChartType;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        }\n        this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.showDataLabel) {\n            this.dims.height -= this.dataLabelMaxHeight.negative;\n        }\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        let smallest = 0;\n        let biggest = 0;\n        for (const group of this.results) {\n            let smallestSum = 0;\n            let biggestSum = 0;\n            for (const d of group.series) {\n                if (d.value < 0) {\n                    smallestSum += d.value;\n                }\n                else {\n                    biggestSum += d.value;\n                }\n                smallest = d.value < smallest ? d.value : smallest;\n                biggest = d.value > biggest ? d.value : biggest;\n            }\n            domain.push(smallestSum);\n            domain.push(biggestSum);\n        }\n        domain.push(smallest);\n        domain.push(biggest);\n        const min = Math.min(0, ...domain);\n        const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(...domain);\n        return [min, max];\n    }\n    getXScale() {\n        const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n    }\n    getYScale() {\n        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    onDataLabelMaxHeightChanged(event, groupIndex) {\n        if (event.size.negative) {\n            this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n        }\n        else {\n            this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    groupTransform(group) {\n        return `translate(${this.xScale(group.name) || 0}, 0)`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarVerticalStackedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalStackedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarVerticalStackedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarVerticalStackedComponent, selector: \"ngx-charts-bar-vertical-stacked\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", yScaleMax: \"yScaleMax\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            [type]=\"barChartType.Stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipDisabled\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalStackedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-vertical-stacked', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            [type]=\"barChartType.Stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarChartModule {\n}\nBarChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBarChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarChartModule, declarations: [BarComponent,\n        BarHorizontalComponent,\n        BarHorizontal2DComponent,\n        BarHorizontalNormalizedComponent,\n        BarHorizontalStackedComponent,\n        BarVerticalComponent,\n        BarVertical2DComponent,\n        BarVerticalNormalizedComponent,\n        BarVerticalStackedComponent,\n        BarLabelComponent,\n        SeriesHorizontal,\n        SeriesVerticalComponent], imports: [ChartCommonModule], exports: [BarComponent,\n        BarHorizontalComponent,\n        BarHorizontal2DComponent,\n        BarHorizontalNormalizedComponent,\n        BarHorizontalStackedComponent,\n        BarVerticalComponent,\n        BarVertical2DComponent,\n        BarVerticalNormalizedComponent,\n        BarVerticalStackedComponent,\n        BarLabelComponent,\n        SeriesHorizontal,\n        SeriesVerticalComponent] });\nBarChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [\n                        BarComponent,\n                        BarHorizontalComponent,\n                        BarHorizontal2DComponent,\n                        BarHorizontalNormalizedComponent,\n                        BarHorizontalStackedComponent,\n                        BarVerticalComponent,\n                        BarVertical2DComponent,\n                        BarVerticalNormalizedComponent,\n                        BarVerticalStackedComponent,\n                        BarLabelComponent,\n                        SeriesHorizontal,\n                        SeriesVerticalComponent\n                    ],\n                    exports: [\n                        BarComponent,\n                        BarHorizontalComponent,\n                        BarHorizontal2DComponent,\n                        BarHorizontalNormalizedComponent,\n                        BarHorizontalStackedComponent,\n                        BarVerticalComponent,\n                        BarVertical2DComponent,\n                        BarVerticalNormalizedComponent,\n                        BarVerticalStackedComponent,\n                        BarLabelComponent,\n                        SeriesHorizontal,\n                        SeriesVerticalComponent\n                    ]\n                }]\n        }] });\n\nclass BoxComponent {\n    constructor(element, cd) {\n        this.cd = cd;\n        this.roundEdges = true;\n        this.gradient = false;\n        this.offset = 0;\n        this.isActive = false;\n        this.animations = true;\n        this.noBarWhenZero = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.BarOrientation = BarOrientation;\n        this.initialized = false;\n        this.hasGradient = false;\n        this.hideBar = false;\n        this.nativeElm = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        if (!this.initialized) {\n            this.loadAnimation();\n            this.initialized = true;\n        }\n        else {\n            this.update();\n        }\n    }\n    update() {\n        this.boxStrokeWidth = Math.max(this.strokeWidth, 1);\n        this.whiskerStrokeWidth = Math.max(this.strokeWidth / 2, 1);\n        this.medianLineWidth = 1.5 * this.strokeWidth;\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = `url(#${this.gradientId})`;\n        if (this.gradient) {\n            this.gradientStops = this.getGradient();\n            this.hasGradient = true;\n        }\n        else {\n            this.hasGradient = false;\n        }\n        this.updateLineEl();\n        this.updatePathEl();\n        this.checkToHideBar();\n        this.maskLineId = 'mask' + id().toString();\n        this.maskLine = `url(#${this.maskLineId})`;\n        if (this.cd) {\n            this.cd.markForCheck();\n        }\n    }\n    loadAnimation() {\n        this.boxPath = this.oldPath = this.getStartingPath();\n        this.oldLineCoordinates = this.getStartingLineCoordinates();\n        setTimeout(this.update.bind(this), 100);\n    }\n    updatePathEl() {\n        const nodeBar = select(this.nativeElm).selectAll('.bar');\n        const path = this.getPath();\n        if (this.animations) {\n            nodeBar\n                .attr('d', this.oldPath)\n                .transition()\n                .ease(easeSinInOut)\n                .duration(500)\n                .attrTween('d', this.pathTween(path, 4));\n        }\n        else {\n            nodeBar.attr('d', path);\n        }\n        this.oldPath = path;\n    }\n    updateLineEl() {\n        const lineEl = select(this.nativeElm).selectAll('.bar-line');\n        const lineCoordinates = this.lineCoordinates;\n        const oldLineCoordinates = this.oldLineCoordinates;\n        if (this.animations) {\n            lineEl\n                .attr('x1', (_, index) => oldLineCoordinates[index].v1.x)\n                .attr('y1', (_, index) => oldLineCoordinates[index].v1.y)\n                .attr('x2', (_, index) => oldLineCoordinates[index].v2.x)\n                .attr('y2', (_, index) => oldLineCoordinates[index].v2.y)\n                .transition()\n                .ease(easeSinInOut)\n                .duration(500)\n                .attr('x1', (_, index) => lineCoordinates[index].v1.x)\n                .attr('y1', (_, index) => lineCoordinates[index].v1.y)\n                .attr('x2', (_, index) => lineCoordinates[index].v2.x)\n                .attr('y2', (_, index) => lineCoordinates[index].v2.y);\n        }\n        else {\n            lineEl\n                .attr('x1', (_, index) => lineCoordinates[index].v1.x)\n                .attr('y1', (_, index) => lineCoordinates[index].v1.y)\n                .attr('x2', (_, index) => lineCoordinates[index].v2.x)\n                .attr('y2', (_, index) => lineCoordinates[index].v2.y);\n        }\n        this.oldLineCoordinates = [...lineCoordinates];\n    }\n    /**\n     * See [D3 Selections](https://www.d3indepth.com/selections/)\n     * @param d The joined data.\n     * @param index The index of the element within the selection\n     * @param node The node element (Line).\n     */\n    lineTween(attr, d, index, node) {\n        const nodeLineEl = node[index];\n        return nodeLineEl[attr].baseVal.value;\n    }\n    // TODO: Refactor into another .ts file if https://github.com/swimlane/ngx-charts/pull/1179 gets merged.\n    pathTween(d1, precision) {\n        return function () {\n            // tslint:disable-next-line: no-this-assignment\n            const path0 = this;\n            const path1 = this.cloneNode();\n            path1.setAttribute('d', d1);\n            const n0 = path0?.getTotalLength();\n            const n1 = path1?.getTotalLength();\n            // Uniform sampling of distance based on specified precision.\n            const distances = [0];\n            let i = 0;\n            const dt = precision / Math.max(n0, n1);\n            while (i < 1) {\n                distances.push(i);\n                i += dt;\n            }\n            distances.push(1);\n            // Compute point-interpolators at each distance.\n            const points = distances.map((t) => {\n                const p0 = path0.getPointAtLength(t * n0);\n                const p1 = path1.getPointAtLength(t * n1);\n                return interpolate([p0.x, p0.y], [p1.x, p1.y]);\n            });\n            // 't': T is the fraction of time (between 0 and 1) since the transition began.\n            return (t) => {\n                return t < 1 ? 'M' + points.map((p) => p(t)).join('L') : d1;\n            };\n        };\n    }\n    getStartingPath() {\n        if (!this.animations) {\n            return this.getPath();\n        }\n        const radius = this.roundEdges ? 1 : 0;\n        const { x, y } = this.lineCoordinates[2].v1;\n        return roundedRect(x - this.width, y - 1, this.width, 2, radius, this.edges);\n    }\n    getPath() {\n        const radius = this.getRadius();\n        let path = '';\n        path = roundedRect(this.x, this.y, this.width, this.height, Math.min(this.height, radius), this.edges);\n        return path;\n    }\n    getStartingLineCoordinates() {\n        if (!this.animations) {\n            return [...this.lineCoordinates];\n        }\n        const lineCoordinates = cloneDeep(this.lineCoordinates);\n        lineCoordinates[1].v1.y = lineCoordinates[1].v2.y = lineCoordinates[3].v1.y = lineCoordinates[3].v2.y = lineCoordinates[0].v1.y = lineCoordinates[0].v2.y =\n            lineCoordinates[2].v1.y;\n        return lineCoordinates;\n    }\n    getRadius() {\n        let radius = 0;\n        if (this.roundEdges && this.height > 5 && this.width > 5) {\n            radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n        }\n        return radius;\n    }\n    getGradient() {\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: this.getStartOpacity()\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: 1\n            }\n        ];\n    }\n    getStartOpacity() {\n        if (this.roundEdges) {\n            return 0.2;\n        }\n        else {\n            return 0.5;\n        }\n    }\n    get edges() {\n        let edges = [false, false, false, false];\n        if (this.roundEdges) {\n            edges = [true, true, true, true];\n        }\n        return edges;\n    }\n    onMouseEnter() {\n        this.activate.emit(this.data);\n    }\n    onMouseLeave() {\n        this.deactivate.emit(this.data);\n    }\n    checkToHideBar() {\n        this.hideBar = this.noBarWhenZero && this.height === 0;\n    }\n}\nBoxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nBoxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BoxComponent, selector: \"g[ngx-charts-box]\", inputs: { strokeColor: \"strokeColor\", strokeWidth: \"strokeWidth\", fill: \"fill\", data: \"data\", width: \"width\", height: \"height\", x: \"x\", y: \"y\", lineCoordinates: \"lineCoordinates\", roundEdges: \"roundEdges\", gradient: \"gradient\", gradientStops: \"gradientStops\", offset: \"offset\", isActive: \"isActive\", animations: \"animations\", ariaLabel: \"ariaLabel\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:defs>\n      <svg:g\n        *ngIf=\"hasGradient\"\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"BarOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n      <svg:mask [attr.id]=\"maskLineId\">\n        <svg:g>\n          <rect height=\"100%\" width=\"100%\" fill=\"white\" fill-opacity=\"1\" />\n          <path class=\"bar\" [attr.d]=\"boxPath\" fill=\"black\" fill-opacity=\"1\" />\n        </svg:g>\n      </svg:mask>\n    </svg:defs>\n    <svg:g>\n      <svg:path\n        class=\"bar\"\n        role=\"img\"\n        tabIndex=\"-1\"\n        [class.active]=\"isActive\"\n        [class.hidden]=\"hideBar\"\n        [attr.d]=\"boxPath\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"boxStrokeWidth\"\n        [attr.aria-label]=\"ariaLabel\"\n        [attr.fill]=\"hasGradient ? gradientFill : fill\"\n        (click)=\"select.emit(data)\"\n      />\n      <svg:line\n        *ngFor=\"let line of lineCoordinates; let i = index\"\n        class=\"bar-line\"\n        [class.hidden]=\"hideBar\"\n        [attr.x1]=\"line.v1.x\"\n        [attr.y1]=\"line.v1.y\"\n        [attr.x2]=\"line.v2.x\"\n        [attr.y2]=\"line.v2.y\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"i === 2 ? medianLineWidth : whiskerStrokeWidth\"\n        [attr.mask]=\"i ? undefined : maskLine\"\n        fill=\"none\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-box]',\n                    template: `\n    <svg:defs>\n      <svg:g\n        *ngIf=\"hasGradient\"\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"BarOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n      <svg:mask [attr.id]=\"maskLineId\">\n        <svg:g>\n          <rect height=\"100%\" width=\"100%\" fill=\"white\" fill-opacity=\"1\" />\n          <path class=\"bar\" [attr.d]=\"boxPath\" fill=\"black\" fill-opacity=\"1\" />\n        </svg:g>\n      </svg:mask>\n    </svg:defs>\n    <svg:g>\n      <svg:path\n        class=\"bar\"\n        role=\"img\"\n        tabIndex=\"-1\"\n        [class.active]=\"isActive\"\n        [class.hidden]=\"hideBar\"\n        [attr.d]=\"boxPath\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"boxStrokeWidth\"\n        [attr.aria-label]=\"ariaLabel\"\n        [attr.fill]=\"hasGradient ? gradientFill : fill\"\n        (click)=\"select.emit(data)\"\n      />\n      <svg:line\n        *ngFor=\"let line of lineCoordinates; let i = index\"\n        class=\"bar-line\"\n        [class.hidden]=\"hideBar\"\n        [attr.x1]=\"line.v1.x\"\n        [attr.y1]=\"line.v1.y\"\n        [attr.x2]=\"line.v2.x\"\n        [attr.y2]=\"line.v2.y\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"i === 2 ? medianLineWidth : whiskerStrokeWidth\"\n        [attr.mask]=\"i ? undefined : maskLine\"\n        fill=\"none\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { strokeColor: [{\n                type: Input\n            }], strokeWidth: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], lineCoordinates: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], gradientStops: [{\n                type: Input\n            }], offset: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass BoxSeriesComponent {\n    constructor() {\n        this.animations = true;\n        this.tooltipDisabled = false;\n        this.gradient = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    update() {\n        this.updateTooltipSettings();\n        const width = this.series && this.series.series.length ? Math.round(this.xScale.bandwidth()) : null;\n        const seriesName = this.series.name;\n        // Calculate Quantile and Whiskers for each box serie.\n        this.counts = this.series.series;\n        const mappedCounts = this.counts.map(serie => Number(serie.value));\n        this.whiskers = [min(mappedCounts), max(mappedCounts)];\n        // We get the group count and must sort it in order to retrieve quantiles.\n        const groupCounts = this.counts.map(item => item.value).sort((a, b) => Number(a) - Number(b));\n        this.quartiles = this.getBoxQuantiles(groupCounts);\n        this.lineCoordinates = this.getLinesCoordinates(seriesName.toString(), this.whiskers, this.quartiles, width);\n        const value = this.quartiles[1];\n        const formattedLabel = formatLabel(seriesName);\n        const box = {\n            value,\n            data: this.counts,\n            label: seriesName,\n            formattedLabel,\n            width,\n            height: 0,\n            x: 0,\n            y: 0,\n            roundEdges: this.roundEdges,\n            quartiles: this.quartiles,\n            lineCoordinates: this.lineCoordinates\n        };\n        box.height = Math.abs(this.yScale(this.quartiles[0]) - this.yScale(this.quartiles[2]));\n        box.x = this.xScale(seriesName.toString());\n        box.y = this.yScale(this.quartiles[2]);\n        box.ariaLabel = formattedLabel + ' - Median: ' + value.toLocaleString();\n        if (this.colors.scaleType === ScaleType.Ordinal) {\n            box.color = this.colors.getColor(seriesName);\n        }\n        else {\n            box.color = this.colors.getColor(this.quartiles[1]);\n            box.gradientStops = this.colors.getLinearGradientStops(this.quartiles[0], this.quartiles[2]);\n        }\n        const tooltipLabel = formattedLabel;\n        const formattedTooltipLabel = `\n    <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n    <span class=\"tooltip-val\">\n      • Q1: ${this.quartiles[0]} • Q2: ${this.quartiles[1]} • Q3: ${this.quartiles[2]}<br>\n      • Min: ${this.whiskers[0]} • Max: ${this.whiskers[1]}\n    </span>`;\n        box.tooltipText = this.tooltipDisabled ? undefined : formattedTooltipLabel;\n        this.tooltipTitle = this.tooltipDisabled ? undefined : box.tooltipText;\n        this.box = box;\n    }\n    getBoxQuantiles(inputData) {\n        return [quantile(inputData, 0.25), quantile(inputData, 0.5), quantile(inputData, 0.75)];\n    }\n    getLinesCoordinates(seriesName, whiskers, quartiles, barWidth) {\n        // The X value is not being centered, so had to sum half the width to align it.\n        const commonX = this.xScale(seriesName);\n        const offsetX = commonX + barWidth / 2;\n        const medianLineWidth = Math.max(barWidth + 4 * this.strokeWidth, 1);\n        const whiskerLineWidth = Math.max(barWidth / 3, 1);\n        const whiskerZero = this.yScale(whiskers[0]);\n        const whiskerOne = this.yScale(whiskers[1]);\n        const median = this.yScale(quartiles[1]);\n        const topLine = {\n            v1: { x: offsetX + whiskerLineWidth / 2, y: whiskerZero },\n            v2: { x: offsetX - whiskerLineWidth / 2, y: whiskerZero }\n        };\n        const medianLine = {\n            v1: { x: offsetX + medianLineWidth / 2, y: median },\n            v2: { x: offsetX - medianLineWidth / 2, y: median }\n        };\n        const bottomLine = {\n            v1: { x: offsetX + whiskerLineWidth / 2, y: whiskerOne },\n            v2: { x: offsetX - whiskerLineWidth / 2, y: whiskerOne }\n        };\n        const verticalLine = {\n            v1: { x: offsetX, y: whiskerZero },\n            v2: { x: offsetX, y: whiskerOne }\n        };\n        return [verticalLine, topLine, medianLine, bottomLine];\n    }\n    updateTooltipSettings() {\n        if (this.tooltipDisabled) {\n            this.tooltipPlacement = undefined;\n            this.tooltipType = undefined;\n        }\n        else {\n            if (!this.tooltipPlacement) {\n                this.tooltipPlacement = PlacementTypes.Top;\n            }\n            if (!this.tooltipType) {\n                this.tooltipType = StyleTypes.tooltip;\n            }\n        }\n    }\n}\nBoxSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nBoxSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BoxSeriesComponent, selector: \"g[ngx-charts-box-series]\", inputs: { dims: \"dims\", series: \"series\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", animations: \"animations\", strokeColor: \"strokeColor\", strokeWidth: \"strokeWidth\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\", tooltipPlacement: \"tooltipPlacement\", tooltipType: \"tooltipType\", roundEdges: \"roundEdges\", gradient: \"gradient\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-box\n      [@animationState]=\"'active'\"\n      [@.disabled]=\"!animations\"\n      [width]=\"box.width\"\n      [height]=\"box.height\"\n      [x]=\"box.x\"\n      [y]=\"box.y\"\n      [roundEdges]=\"box.roundEdges\"\n      [fill]=\"box.color\"\n      [gradientStops]=\"box.gradientStops\"\n      [strokeColor]=\"strokeColor\"\n      [strokeWidth]=\"strokeWidth\"\n      [data]=\"box.data\"\n      [lineCoordinates]=\"box.lineCoordinates\"\n      [gradient]=\"gradient\"\n      [ariaLabel]=\"box.ariaLabel\"\n      (select)=\"onClick($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTitle\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"box.data\"\n      [animations]=\"animations\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: BoxComponent, selector: \"g[ngx-charts-box]\", inputs: [\"strokeColor\", \"strokeWidth\", \"fill\", \"data\", \"width\", \"height\", \"x\", \"y\", \"lineCoordinates\", \"roundEdges\", \"gradient\", \"gradientStops\", \"offset\", \"isActive\", \"animations\", \"ariaLabel\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({ opacity: 0 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-box-series]',\n                    template: `\n    <svg:g\n      ngx-charts-box\n      [@animationState]=\"'active'\"\n      [@.disabled]=\"!animations\"\n      [width]=\"box.width\"\n      [height]=\"box.height\"\n      [x]=\"box.x\"\n      [y]=\"box.y\"\n      [roundEdges]=\"box.roundEdges\"\n      [fill]=\"box.color\"\n      [gradientStops]=\"box.gradientStops\"\n      [strokeColor]=\"strokeColor\"\n      [strokeWidth]=\"strokeWidth\"\n      [data]=\"box.data\"\n      [lineCoordinates]=\"box.lineCoordinates\"\n      [gradient]=\"gradient\"\n      [ariaLabel]=\"box.ariaLabel\"\n      (select)=\"onClick($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTitle\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"box.data\"\n      [animations]=\"animations\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({ opacity: 0 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], propDecorators: { dims: [{\n                type: Input\n            }], series: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], strokeColor: [{\n                type: Input\n            }], strokeWidth: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], tooltipPlacement: [{\n                type: Input\n            }], tooltipType: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass BoxChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        /** Show or hide the legend. */\n        this.legend = false;\n        this.legendPosition = LegendPosition.Right;\n        this.legendTitle = 'Legend';\n        this.showGridLines = true;\n        this.xAxis = true;\n        this.yAxis = true;\n        this.showXAxisLabel = true;\n        this.showYAxisLabel = true;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.strokeColor = '#FFFFFF';\n        this.strokeWidth = 2;\n        this.tooltipDisabled = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        /** Chart Margins (For each side, counterclock wise). */\n        this.margin = [10, 20, 10, 20];\n        /** Chart X axis dimension. */\n        this.xAxisHeight = 0;\n        /** Chart Y axis dimension. */\n        this.yAxisWidth = 0;\n    }\n    trackBy(index, item) {\n        return item.name;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendPosition: this.legendPosition\n        });\n        this.xDomain = this.getXDomain();\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.setScales();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    setColors() {\n        let domain = [];\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    setScales() {\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n    }\n    getXScale(domain, width) {\n        const scale = scaleBand()\n            .domain(domain.map(d => d.toString()))\n            .rangeRound([0, width])\n            .padding(0.5);\n        return scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().domain(domain).range([height, 0]);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getUniqueBoxChartXDomainValues(results) {\n        const valueSet = new Set();\n        for (const result of results) {\n            valueSet.add(result.name);\n        }\n        return Array.from(valueSet);\n    }\n    getXDomain() {\n        let domain = [];\n        const values = this.getUniqueBoxChartXDomainValues(this.results);\n        let min;\n        let max;\n        if (typeof values[0] === 'string') {\n            domain = values.map(val => val.toString());\n        }\n        else if (typeof values[0] === 'number') {\n            const mappedValues = values.map(v => Number(v));\n            min = Math.min(...mappedValues);\n            max = Math.max(...mappedValues);\n            domain = [min, max];\n        }\n        else {\n            const mappedValues = values.map(v => Number(new Date(v)));\n            min = Math.min(...mappedValues);\n            max = Math.max(...mappedValues);\n            domain = [new Date(min), new Date(max)];\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (domain.indexOf(d.value) < 0) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        const values = [...domain];\n        const mappedValues = values.map(v => Number(v));\n        const min = Math.min(...mappedValues);\n        const max = Math.max(...mappedValues);\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => `${d.name}`);\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    onActivate(data) {\n        this.activate.emit(data);\n    }\n    onDeactivate(data) {\n        this.deactivate.emit(data);\n    }\n    getLegendOptions() {\n        const legendOpts = {\n            scaleType: this.schemeType,\n            colors: this.colors,\n            domain: [],\n            position: this.legendPosition,\n            title: this.legendTitle\n        };\n        if (this.schemeType === ScaleType.Ordinal) {\n            legendOpts.domain = this.xDomain;\n            legendOpts.colors = this.colors;\n        }\n        else {\n            legendOpts.domain = this.yDomain;\n            legendOpts.colors = this.colors.scale;\n        }\n        return legendOpts;\n    }\n}\nBoxChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBoxChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BoxChartComponent, selector: \"ngx-charts-box-chart\", inputs: { legend: \"legend\", legendPosition: \"legendPosition\", legendTitle: \"legendTitle\", legendOptionsConfig: \"legendOptionsConfig\", showGridLines: \"showGridLines\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", roundDomains: \"roundDomains\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", roundEdges: \"roundEdges\", strokeColor: \"strokeColor\", strokeWidth: \"strokeWidth\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"box-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [yScale]=\"yScale\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n      </svg:g>\n      <svg:g [attr.transform]=\"transform\">\n        <svg:g *ngFor=\"let result of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-box-series\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [roundEdges]=\"roundEdges\"\n            [strokeColor]=\"strokeColor\"\n            [strokeWidth]=\"strokeWidth\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [series]=\"result\"\n            [dims]=\"dims\"\n            [animations]=\"animations\"\n            [gradient]=\"gradient\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n            (select)=\"onClick($event)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: BoxSeriesComponent, selector: \"g[ngx-charts-box-series]\", inputs: [\"dims\", \"series\", \"xScale\", \"yScale\", \"colors\", \"animations\", \"strokeColor\", \"strokeWidth\", \"tooltipDisabled\", \"tooltipTemplate\", \"tooltipPlacement\", \"tooltipType\", \"roundEdges\", \"gradient\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-box-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"box-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [yScale]=\"yScale\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n      </svg:g>\n      <svg:g [attr.transform]=\"transform\">\n        <svg:g *ngFor=\"let result of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-box-series\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [roundEdges]=\"roundEdges\"\n            [strokeColor]=\"strokeColor\"\n            [strokeWidth]=\"strokeWidth\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [series]=\"result\"\n            [dims]=\"dims\"\n            [animations]=\"animations\"\n            [gradient]=\"gradient\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n            (select)=\"onClick($event)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendOptionsConfig: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], strokeColor: [{\n                type: Input\n            }], strokeWidth: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate', { static: false }]\n            }] } });\n\nclass BoxChartModule {\n}\nBoxChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBoxChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartModule, declarations: [BoxChartComponent, BoxSeriesComponent, BoxComponent], imports: [ChartCommonModule], exports: [BoxChartComponent, BoxSeriesComponent, BoxComponent] });\nBoxChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [BoxChartComponent, BoxSeriesComponent, BoxComponent],\n                    exports: [BoxChartComponent, BoxSeriesComponent, BoxComponent]\n                }]\n        }] });\n\nfunction getDomain(values, scaleType, autoScale, minVal, maxVal) {\n    let domain = [];\n    if (scaleType === ScaleType.Linear) {\n        values = values.map(v => Number(v));\n        if (!autoScale) {\n            values.push(0);\n        }\n    }\n    if (scaleType === ScaleType.Time || scaleType === ScaleType.Linear) {\n        const min = minVal ? minVal : Math.min(...values);\n        const max = maxVal ? maxVal : Math.max(...values);\n        domain = [min, max];\n    }\n    else {\n        domain = values;\n    }\n    return domain;\n}\nfunction getScale(domain, range, scaleType, roundDomains) {\n    switch (scaleType) {\n        case ScaleType.Time:\n            return scaleTime().range(range).domain(domain);\n        case ScaleType.Linear: {\n            const scale = scaleLinear().range(range).domain(domain);\n            if (roundDomains) {\n                return scale.nice();\n            }\n            return scale;\n        }\n        case ScaleType.Ordinal:\n            return scalePoint()\n                .range([range[0], range[1]])\n                .domain(domain.map(r => r.toString()));\n        default:\n            return undefined;\n    }\n}\n\nclass BubbleSeriesComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.tooltipDisabled = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.circles = this.getCircles();\n    }\n    getCircles() {\n        const seriesName = this.data.name;\n        return this.data.series\n            .map((d, i) => {\n            if (typeof d.y !== 'undefined' && typeof d.x !== 'undefined') {\n                const y = d.y;\n                const x = d.x;\n                const r = d.r;\n                const radius = this.rScale(r || 1);\n                const tooltipLabel = formatLabel(d.name);\n                const cx = this.xScaleType === ScaleType.Linear ? this.xScale(Number(x)) : this.xScale(x);\n                const cy = this.yScaleType === ScaleType.Linear ? this.yScale(Number(y)) : this.yScale(y);\n                const color = this.colors.scaleType === ScaleType.Linear ? this.colors.getColor(r) : this.colors.getColor(seriesName);\n                const isActive = !this.activeEntries.length ? true : this.isActive({ name: seriesName });\n                const opacity = isActive ? 1 : 0.3;\n                const data = Object.assign({}, d, {\n                    series: seriesName,\n                    name: d.name,\n                    value: d.y,\n                    x: d.x,\n                    radius: d.r\n                });\n                return {\n                    data,\n                    x,\n                    y,\n                    r,\n                    classNames: [`circle-data-${i}`],\n                    value: y,\n                    label: x,\n                    cx,\n                    cy,\n                    radius,\n                    tooltipLabel,\n                    color,\n                    opacity,\n                    seriesName,\n                    isActive,\n                    transform: `translate(${cx},${cy})`\n                };\n            }\n        })\n            .filter(circle => circle !== undefined);\n    }\n    getTooltipText(circle) {\n        const hasRadius = typeof circle.r !== 'undefined';\n        const hasTooltipLabel = circle.tooltipLabel && circle.tooltipLabel.length;\n        const hasSeriesName = circle.seriesName && circle.seriesName.length;\n        const radiusValue = hasRadius ? formatLabel(circle.r) : '';\n        const xAxisLabel = this.xAxisLabel && this.xAxisLabel !== '' ? `${this.xAxisLabel}:` : '';\n        const yAxisLabel = this.yAxisLabel && this.yAxisLabel !== '' ? `${this.yAxisLabel}:` : '';\n        const x = formatLabel(circle.x);\n        const y = formatLabel(circle.y);\n        const name = hasSeriesName && hasTooltipLabel\n            ? `${circle.seriesName} • ${circle.tooltipLabel}`\n            : circle.seriesName + circle.tooltipLabel;\n        const tooltipTitle = hasSeriesName || hasTooltipLabel ? `<span class=\"tooltip-label\">${escapeLabel(name)}</span>` : '';\n        return `\n      ${tooltipTitle}\n      <span class=\"tooltip-label\">\n        <label>${escapeLabel(xAxisLabel)}</label> ${escapeLabel(x)}<br />\n        <label>${escapeLabel(yAxisLabel)}</label> ${escapeLabel(y)}\n      </span>\n      <span class=\"tooltip-val\">\n        ${escapeLabel(radiusValue)}\n      </span>\n    `;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    isVisible(circle) {\n        if (this.activeEntries.length > 0) {\n            return this.isActive({ name: circle.seriesName });\n        }\n        return circle.opacity !== 0;\n    }\n    activateCircle(circle) {\n        circle.barVisible = true;\n        this.activate.emit({ name: this.data.name });\n    }\n    deactivateCircle(circle) {\n        circle.barVisible = false;\n        this.deactivate.emit({ name: this.data.name });\n    }\n    trackBy(index, circle) {\n        return `${circle.data.series} ${circle.data.name}`;\n    }\n}\nBubbleSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleSeriesComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nBubbleSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BubbleSeriesComponent, selector: \"g[ngx-charts-bubble-series]\", inputs: { data: \"data\", xScale: \"xScale\", yScale: \"yScale\", rScale: \"rScale\", xScaleType: \"xScaleType\", yScaleType: \"yScaleType\", colors: \"colors\", visibleValue: \"visibleValue\", activeEntries: \"activeEntries\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngFor=\"let circle of circles; trackBy: trackBy\">\n      <svg:g [attr.transform]=\"circle.transform\">\n        <svg:g\n          *ngIf=\"!isSSR\"\n          ngx-charts-circle\n          [@animationState]=\"'active'\"\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n        <svg:g\n          *ngIf=\"isSSR\"\n          ngx-charts-circle\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n      </svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: CircleComponent, selector: \"g[ngx-charts-circle]\", inputs: [\"cx\", \"cy\", \"r\", \"fill\", \"stroke\", \"data\", \"classNames\", \"circleOpacity\", \"pointerEvents\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition(':enter', [\n                style({\n                    opacity: 0,\n                    transform: 'scale(0)'\n                }),\n                animate(250, style({ opacity: 1, transform: 'scale(1)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-bubble-series]',\n                    template: `\n    <svg:g *ngFor=\"let circle of circles; trackBy: trackBy\">\n      <svg:g [attr.transform]=\"circle.transform\">\n        <svg:g\n          *ngIf=\"!isSSR\"\n          ngx-charts-circle\n          [@animationState]=\"'active'\"\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n        <svg:g\n          *ngIf=\"isSSR\"\n          ngx-charts-circle\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n      </svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':enter', [\n                                style({\n                                    opacity: 0,\n                                    transform: 'scale(0)'\n                                }),\n                                animate(250, style({ opacity: 1, transform: 'scale(1)' }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { data: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], rScale: [{\n                type: Input\n            }], xScaleType: [{\n                type: Input\n            }], yScaleType: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], visibleValue: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass BubbleChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.showGridLines = true;\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.xAxis = true;\n        this.yAxis = true;\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.maxRadius = 10;\n        this.minRadius = 3;\n        this.schemeType = ScaleType.Ordinal;\n        this.tooltipDisabled = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.scaleType = ScaleType.Linear;\n        this.margin = [10, 20, 10, 20];\n        this.bubblePadding = [0, 0, 0, 0];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.activeEntries = [];\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.seriesDomain = this.results.map(d => d.name);\n        this.rDomain = this.getRDomain();\n        this.xDomain = this.getXDomain();\n        this.yDomain = this.getYDomain();\n        this.transform = `translate(${this.dims.xOffset},${this.margin[0]})`;\n        const colorDomain = this.schemeType === ScaleType.Ordinal ? this.seriesDomain : this.rDomain;\n        this.colors = new ColorHelper(this.scheme, this.schemeType, colorDomain, this.customColors);\n        this.data = this.results;\n        this.minRadius = Math.max(this.minRadius, 1);\n        this.maxRadius = Math.max(this.maxRadius, 1);\n        this.rScale = this.getRScale(this.rDomain, [this.minRadius, this.maxRadius]);\n        this.bubblePadding = [0, 0, 0, 0];\n        this.setScales();\n        this.bubblePadding = this.getBubblePadding();\n        this.setScales();\n        this.legendOptions = this.getLegendOptions();\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    hideCircles() {\n        this.deactivateAll();\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    getBubblePadding() {\n        let yMin = 0;\n        let xMin = 0;\n        let yMax = this.dims.height;\n        let xMax = this.dims.width;\n        for (const s of this.data) {\n            for (const d of s.series) {\n                const r = this.rScale(d.r);\n                const cx = this.xScaleType === ScaleType.Linear ? this.xScale(Number(d.x)) : this.xScale(d.x);\n                const cy = this.yScaleType === ScaleType.Linear ? this.yScale(Number(d.y)) : this.yScale(d.y);\n                xMin = Math.max(r - cx, xMin);\n                yMin = Math.max(r - cy, yMin);\n                yMax = Math.max(cy + r, yMax);\n                xMax = Math.max(cx + r, xMax);\n            }\n        }\n        xMax = Math.max(xMax - this.dims.width, 0);\n        yMax = Math.max(yMax - this.dims.height, 0);\n        return [yMin, xMax, yMax, xMin];\n    }\n    setScales() {\n        let width = this.dims.width;\n        if (this.xScaleMin === undefined && this.xScaleMax === undefined) {\n            width = width - this.bubblePadding[1];\n        }\n        let height = this.dims.height;\n        if (this.yScaleMin === undefined && this.yScaleMax === undefined) {\n            height = height - this.bubblePadding[2];\n        }\n        this.xScale = this.getXScale(this.xDomain, width);\n        this.yScale = this.getYScale(this.yDomain, height);\n    }\n    getYScale(domain, height) {\n        return getScale(domain, [height, this.bubblePadding[0]], this.yScaleType, this.roundDomains);\n    }\n    getXScale(domain, width) {\n        return getScale(domain, [this.bubblePadding[3], width], this.xScaleType, this.roundDomains);\n    }\n    getRScale(domain, range) {\n        const scale = scaleLinear().range(range).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            position: this.legendPosition,\n            title: undefined\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.rDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    getXDomain() {\n        const values = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!values.includes(d.x)) {\n                    values.push(d.x);\n                }\n            }\n        }\n        this.xScaleType = getScaleType(values);\n        return getDomain(values, this.xScaleType, this.autoScale, this.xScaleMin, this.xScaleMax);\n    }\n    getYDomain() {\n        const values = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!values.includes(d.y)) {\n                    values.push(d.y);\n                }\n            }\n        }\n        this.yScaleType = getScaleType(values);\n        return getDomain(values, this.yScaleType, this.autoScale, this.yScaleMin, this.yScaleMax);\n    }\n    getRDomain() {\n        let min = Infinity;\n        let max = -Infinity;\n        for (const results of this.results) {\n            for (const d of results.series) {\n                const value = Number(d.r) || 1;\n                min = Math.min(min, value);\n                max = Math.max(max, value);\n            }\n        }\n        return [min, max];\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n    trackBy(index, item) {\n        return `${item.name}`;\n    }\n}\nBubbleChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBubbleChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BubbleChartComponent, selector: \"ngx-charts-bubble-chart\", inputs: { showGridLines: \"showGridLines\", legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", maxRadius: \"maxRadius\", minRadius: \"minRadius\", autoScale: \"autoScale\", schemeType: \"schemeType\", tooltipDisabled: \"tooltipDisabled\", xScaleMin: \"xScaleMin\", xScaleMax: \"xScaleMax\", yScaleMin: \"yScaleMin\", yScaleMax: \"yScaleMax\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [activeEntries]=\"activeEntries\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"bubble-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [showGridLines]=\"showGridLines\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n        <svg:rect\n          class=\"bubble-chart-area\"\n          x=\"0\"\n          y=\"0\"\n          [attr.width]=\"dims.width\"\n          [attr.height]=\"dims.height\"\n          style=\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\"\n          (mouseenter)=\"deactivateAll()\"\n        />\n        <svg:g *ngIf=\"!isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: BubbleSeriesComponent, selector: \"g[ngx-charts-bubble-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"rScale\", \"xScaleType\", \"yScaleType\", \"colors\", \"visibleValue\", \"activeEntries\", \"xAxisLabel\", \"yAxisLabel\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({\n                    opacity: 0\n                }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bubble-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [activeEntries]=\"activeEntries\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"bubble-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [showGridLines]=\"showGridLines\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n        <svg:rect\n          class=\"bubble-chart-area\"\n          x=\"0\"\n          y=\"0\"\n          [attr.width]=\"dims.width\"\n          [attr.height]=\"dims.height\"\n          style=\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\"\n          (mouseenter)=\"deactivateAll()\"\n        />\n        <svg:g *ngIf=\"!isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({\n                                    opacity: 0\n                                }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { showGridLines: [{\n                type: Input\n            }], legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], maxRadius: [{\n                type: Input\n            }], minRadius: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass BubbleChartModule {\n}\nBubbleChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBubbleChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartModule, declarations: [BubbleChartComponent, BubbleSeriesComponent], imports: [ChartCommonModule], exports: [BubbleChartComponent, BubbleSeriesComponent] });\nBubbleChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [BubbleChartComponent, BubbleSeriesComponent],\n                    exports: [BubbleChartComponent, BubbleSeriesComponent]\n                }]\n        }] });\n\nclass HeatMapCellComponent {\n    constructor(element) {\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.barOrientation = BarOrientation;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.transform = `translate(${this.x} , ${this.y})`;\n        this.startOpacity = 0.3;\n        this.gradientId = 'grad' + id().toString();\n        this.gradientUrl = `url(#${this.gradientId})`;\n        this.gradientStops = this.getGradientStops();\n        if (this.animations) {\n            this.loadAnimation();\n        }\n    }\n    getGradientStops() {\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: this.startOpacity\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: 1\n            }\n        ];\n    }\n    loadAnimation() {\n        const node = select(this.element).select('.cell');\n        node.attr('opacity', 0);\n        this.animateToCurrentForm();\n    }\n    animateToCurrentForm() {\n        const node = select(this.element).select('.cell');\n        node.transition().duration(750).attr('opacity', 1);\n    }\n    onClick() {\n        this.select.emit(this.data);\n    }\n    onMouseEnter() {\n        this.activate.emit(this.data);\n    }\n    onMouseLeave() {\n        this.deactivate.emit(this.data);\n    }\n}\nHeatMapCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapCellComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nHeatMapCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: HeatMapCellComponent, selector: \"g[ngx-charts-heat-map-cell]\", inputs: { fill: \"fill\", x: \"x\", y: \"y\", width: \"width\", height: \"height\", data: \"data\", gradient: \"gradient\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\">\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        rx=\"3\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapCellComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-heat-map-cell]',\n                    template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\">\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        rx=\"3\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { fill: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass HeatCellSeriesComponent {\n    constructor() {\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    ngOnInit() {\n        if (!this.tooltipText) {\n            this.tooltipText = this.getTooltipText;\n        }\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.cells = this.getCells();\n    }\n    getCells() {\n        const cells = [];\n        this.data.map(row => {\n            row.series.map(cell => {\n                const value = cell.value;\n                cell.series = row.name;\n                cells.push({\n                    row,\n                    cell,\n                    x: this.xScale(row.name),\n                    y: this.yScale(cell.name),\n                    width: this.xScale.bandwidth(),\n                    height: this.yScale.bandwidth(),\n                    fill: this.colors.getColor(value),\n                    data: value,\n                    label: formatLabel(cell.name),\n                    series: row.name\n                });\n            });\n        });\n        return cells;\n    }\n    getTooltipText({ label, data, series }) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(series)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${data.toLocaleString()}</span>\n    `;\n    }\n    trackBy(index, item) {\n        return item.label;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n}\nHeatCellSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatCellSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nHeatCellSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: HeatCellSeriesComponent, selector: \"g[ngx-charts-heat-map-cell-series]\", inputs: { data: \"data\", colors: \"colors\", xScale: \"xScale\", yScale: \"yScale\", gradient: \"gradient\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-heat-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [data]=\"c.data\"\n      (select)=\"onClick(c.cell)\"\n      (activate)=\"activate.emit(c.cell)\"\n      (deactivate)=\"deactivate.emit(c.cell)\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: HeatMapCellComponent, selector: \"g[ngx-charts-heat-map-cell]\", inputs: [\"fill\", \"x\", \"y\", \"width\", \"height\", \"data\", \"gradient\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatCellSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-heat-map-cell-series]',\n                    template: `\n    <svg:g\n      ngx-charts-heat-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [data]=\"c.data\"\n      (select)=\"onClick(c.cell)\"\n      (activate)=\"activate.emit(c.cell)\"\n      (deactivate)=\"deactivate.emit(c.cell)\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass HeatMapComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.innerPadding = 8;\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.tooltipDisabled = false;\n        this.activeEntries = [];\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.scaleType = ScaleType.Linear;\n    }\n    update() {\n        super.update();\n        this.formatDates();\n        this.xDomain = this.getXDomain();\n        this.yDomain = this.getYDomain();\n        this.valueDomain = this.getValueDomain();\n        this.scaleType = getScaleType(this.valueDomain, false);\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.scaleType,\n            legendPosition: this.legendPosition\n        });\n        if (this.scaleType === ScaleType.Linear) {\n            let min = this.min;\n            let max = this.max;\n            if (!this.min) {\n                min = Math.min(0, ...this.valueDomain);\n            }\n            if (!this.max) {\n                max = Math.max(...this.valueDomain);\n            }\n            this.valueDomain = [min, max];\n        }\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        this.rects = this.getRects();\n    }\n    getXDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.name)) {\n                domain.push(group.name);\n            }\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.name)) {\n                    domain.push(d.name);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        return domain;\n    }\n    /**\n     * Converts the input to gap paddingInner in fraction\n     * Supports the following inputs:\n     *    Numbers: 8\n     *    Strings: \"8\", \"8px\", \"8%\"\n     *    Arrays: [8,2], \"8,2\", \"[8,2]\"\n     *    Mixed: [8,\"2%\"], [\"8px\",\"2%\"], \"8,2%\", \"[8,2%]\"\n     *\n     * @memberOf HeatMapComponent\n     */\n    getDimension(value, index = 0, N, L) {\n        if (typeof value === 'string') {\n            value = value\n                .replace('[', '')\n                .replace(']', '')\n                .replace('px', '')\n                // tslint:disable-next-line: quotemark\n                .replace(\"'\", '');\n            if (value.includes(',')) {\n                value = value.split(',');\n            }\n        }\n        if (Array.isArray(value) && typeof index === 'number') {\n            return this.getDimension(value[index], null, N, L);\n        }\n        if (typeof value === 'string' && value.includes('%')) {\n            return +value.replace('%', '') / 100;\n        }\n        return N / (L / +value + 1);\n    }\n    getXScale() {\n        const f = this.getDimension(this.innerPadding, 0, this.xDomain.length, this.dims.width);\n        return scaleBand().rangeRound([0, this.dims.width]).domain(this.xDomain).paddingInner(f);\n    }\n    getYScale() {\n        const f = this.getDimension(this.innerPadding, 1, this.yDomain.length, this.dims.height);\n        return scaleBand().rangeRound([this.dims.height, 0]).domain(this.yDomain).paddingInner(f);\n    }\n    getRects() {\n        const rects = [];\n        this.xDomain.map(xVal => {\n            this.yDomain.map(yVal => {\n                rects.push({\n                    x: this.xScale(xVal),\n                    y: this.yScale(yVal),\n                    rx: 3,\n                    width: this.xScale.bandwidth(),\n                    height: this.yScale.bandwidth(),\n                    fill: 'rgba(200,200,200,0.03)'\n                });\n            });\n        });\n        return rects;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);\n    }\n    getLegendOptions() {\n        return {\n            scaleType: this.scaleType,\n            domain: this.valueDomain,\n            colors: this.scaleType === ScaleType.Ordinal ? this.colors : this.colors.scale,\n            title: this.scaleType === ScaleType.Ordinal ? this.legendTitle : undefined,\n            position: this.legendPosition\n        };\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nHeatMapComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nHeatMapComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: HeatMapComponent, selector: \"ngx-charts-heat-map\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", gradient: \"gradient\", innerPadding: \"innerPadding\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", min: \"min\", max: \"max\", activeEntries: \"activeEntries\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [animations]=\"animations\"\n      [legendOptions]=\"legendOptions\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"heat-map chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:rect\n          *ngFor=\"let rect of rects\"\n          [attr.x]=\"rect.x\"\n          [attr.y]=\"rect.y\"\n          [attr.rx]=\"rect.rx\"\n          [attr.width]=\"rect.width\"\n          [attr.height]=\"rect.height\"\n          [attr.fill]=\"rect.fill\"\n        />\n        <svg:g\n          ngx-charts-heat-map-cell-series\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [data]=\"results\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, undefined)\"\n          (deactivate)=\"onDeactivate($event, undefined)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: HeatCellSeriesComponent, selector: \"g[ngx-charts-heat-map-cell-series]\", inputs: [\"data\", \"colors\", \"xScale\", \"yScale\", \"gradient\", \"tooltipDisabled\", \"tooltipText\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-heat-map', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [animations]=\"animations\"\n      [legendOptions]=\"legendOptions\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"heat-map chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:rect\n          *ngFor=\"let rect of rects\"\n          [attr.x]=\"rect.x\"\n          [attr.y]=\"rect.y\"\n          [attr.rx]=\"rect.rx\"\n          [attr.width]=\"rect.width\"\n          [attr.height]=\"rect.height\"\n          [attr.fill]=\"rect.fill\"\n        />\n        <svg:g\n          ngx-charts-heat-map-cell-series\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [data]=\"results\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, undefined)\"\n          (deactivate)=\"onDeactivate($event, undefined)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], innerPadding: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass HeatMapModule {\n}\nHeatMapModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nHeatMapModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapModule, declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent], imports: [ChartCommonModule], exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent] });\nHeatMapModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent],\n                    exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent]\n                }]\n        }] });\n\nclass LineComponent {\n    constructor(element, platformId) {\n        this.element = element;\n        this.platformId = platformId;\n        this.fill = 'none';\n        this.animations = true;\n        // @Output() select = new EventEmitter();\n        this.initialized = false;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    ngOnChanges(changes) {\n        if (!this.initialized) {\n            this.initialized = true;\n            this.initialPath = this.path;\n        }\n        else {\n            this.updatePathEl();\n        }\n    }\n    updatePathEl() {\n        const node = select(this.element.nativeElement).select('.line');\n        if (this.animations) {\n            node.transition().duration(750).attr('d', this.path);\n        }\n        else {\n            node.attr('d', this.path);\n        }\n    }\n}\nLineComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineComponent, deps: [{ token: i0.ElementRef }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nLineComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LineComponent, selector: \"g[ngx-charts-line]\", inputs: { path: \"path\", stroke: \"stroke\", data: \"data\", fill: \"fill\", animations: \"animations\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:path\n        [@animationState]=\"'active'\"\n        class=\"line\"\n        [attr.d]=\"initialPath\"\n        [attr.fill]=\"fill\"\n        [attr.stroke]=\"stroke\"\n        stroke-width=\"1.5px\"\n      />\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:path class=\"line\" [attr.d]=\"initialPath\" [attr.fill]=\"fill\" [attr.stroke]=\"stroke\" stroke-width=\"1.5px\" />\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [\n        trigger('animationState', [\n            transition(':enter', [\n                style({\n                    strokeDasharray: 2000,\n                    strokeDashoffset: 2000\n                }),\n                animate(1000, style({\n                    strokeDashoffset: 0\n                }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-line]',\n                    template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:path\n        [@animationState]=\"'active'\"\n        class=\"line\"\n        [attr.d]=\"initialPath\"\n        [attr.fill]=\"fill\"\n        [attr.stroke]=\"stroke\"\n        stroke-width=\"1.5px\"\n      />\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:path class=\"line\" [attr.d]=\"initialPath\" [attr.fill]=\"fill\" [attr.stroke]=\"stroke\" stroke-width=\"1.5px\" />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':enter', [\n                                style({\n                                    strokeDasharray: 2000,\n                                    strokeDashoffset: 2000\n                                }),\n                                animate(1000, style({\n                                    strokeDashoffset: 0\n                                }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { path: [{\n                type: Input\n            }], stroke: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }] } });\n\nclass LineSeriesComponent {\n    constructor() {\n        this.animations = true;\n        this.barOrientation = BarOrientation;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateGradients();\n        const data = this.sortData(this.data.series);\n        const lineGen = this.getLineGenerator();\n        this.path = lineGen(data) || '';\n        const areaGen = this.getAreaGenerator();\n        this.areaPath = areaGen(data) || '';\n        if (this.hasRange) {\n            const range = this.getRangeGenerator();\n            this.outerPath = range(data) || '';\n        }\n        if (this.hasGradient) {\n            this.stroke = this.gradientUrl;\n            const values = this.data.series.map(d => d.value);\n            const max = Math.max(...values);\n            const min = Math.min(...values);\n            if (max === min) {\n                this.stroke = this.colors.getColor(max);\n            }\n        }\n        else {\n            this.stroke = this.colors.getColor(this.data.name);\n        }\n    }\n    getLineGenerator() {\n        return line()\n            .x(d => {\n            const label = d.name;\n            let value;\n            if (this.scaleType === ScaleType.Time) {\n                value = this.xScale(label);\n            }\n            else if (this.scaleType === ScaleType.Linear) {\n                value = this.xScale(Number(label));\n            }\n            else {\n                value = this.xScale(label);\n            }\n            return value;\n        })\n            .y(d => this.yScale(d.value))\n            .curve(this.curve);\n    }\n    getRangeGenerator() {\n        return area()\n            .x(d => {\n            const label = d.name;\n            let value;\n            if (this.scaleType === ScaleType.Time) {\n                value = this.xScale(label);\n            }\n            else if (this.scaleType === ScaleType.Linear) {\n                value = this.xScale(Number(label));\n            }\n            else {\n                value = this.xScale(label);\n            }\n            return value;\n        })\n            .y0(d => this.yScale(typeof d.min === 'number' ? d.min : d.value))\n            .y1(d => this.yScale(typeof d.max === 'number' ? d.max : d.value))\n            .curve(this.curve);\n    }\n    getAreaGenerator() {\n        const xProperty = d => {\n            const label = d.name;\n            return this.xScale(label);\n        };\n        return area()\n            .x(xProperty)\n            .y0(() => this.yScale.range()[0])\n            .y1(d => this.yScale(d.value))\n            .curve(this.curve);\n    }\n    sortData(data) {\n        if (this.scaleType === ScaleType.Linear) {\n            data = sortLinear(data, 'name');\n        }\n        else if (this.scaleType === ScaleType.Time) {\n            data = sortByTime(data, 'name');\n        }\n        else {\n            data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n        }\n        return data;\n    }\n    updateGradients() {\n        if (this.colors.scaleType === ScaleType.Linear) {\n            this.hasGradient = true;\n            this.gradientId = 'grad' + id().toString();\n            this.gradientUrl = `url(#${this.gradientId})`;\n            const values = this.data.series.map(d => d.value);\n            const max = Math.max(...values);\n            const min = Math.min(...values);\n            this.gradientStops = this.colors.getLinearGradientStops(max, min);\n            this.areaGradientStops = this.colors.getLinearGradientStops(max);\n        }\n        else {\n            this.hasGradient = false;\n            this.gradientStops = undefined;\n            this.areaGradientStops = undefined;\n        }\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    isInactive(entry) {\n        if (!this.activeEntries || this.activeEntries.length === 0)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item === undefined;\n    }\n}\nLineSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nLineSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LineSeriesComponent, selector: \"g[ngx-charts-line-series]\", inputs: { data: \"data\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", scaleType: \"scaleType\", curve: \"curve\", activeEntries: \"activeEntries\", rangeFillOpacity: \"rangeFillOpacity\", hasRange: \"hasRange\", animations: \"animations\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g>\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          *ngIf=\"hasGradient\"\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-area\n        class=\"line-highlight\"\n        [data]=\"data\"\n        [path]=\"areaPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [opacity]=\"0.25\"\n        [startOpacity]=\"0\"\n        [gradient]=\"true\"\n        [stops]=\"areaGradientStops\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-line\n        class=\"line-series\"\n        [data]=\"data\"\n        [path]=\"path\"\n        [stroke]=\"stroke\"\n        [animations]=\"animations\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n      />\n      <svg:g\n        ngx-charts-area\n        *ngIf=\"hasRange\"\n        class=\"line-series-range\"\n        [data]=\"data\"\n        [path]=\"outerPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [opacity]=\"rangeFillOpacity\"\n        [animations]=\"animations\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }, { type: AreaComponent, selector: \"g[ngx-charts-area]\", inputs: [\"data\", \"path\", \"startingPath\", \"fill\", \"opacity\", \"startOpacity\", \"endOpacity\", \"gradient\", \"stops\", \"animations\"], outputs: [\"select\"] }, { type: LineComponent, selector: \"g[ngx-charts-line]\", inputs: [\"path\", \"stroke\", \"data\", \"fill\", \"animations\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-line-series]',\n                    template: `\n    <svg:g>\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          *ngIf=\"hasGradient\"\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-area\n        class=\"line-highlight\"\n        [data]=\"data\"\n        [path]=\"areaPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [opacity]=\"0.25\"\n        [startOpacity]=\"0\"\n        [gradient]=\"true\"\n        [stops]=\"areaGradientStops\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-line\n        class=\"line-series\"\n        [data]=\"data\"\n        [path]=\"path\"\n        [stroke]=\"stroke\"\n        [animations]=\"animations\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n      />\n      <svg:g\n        ngx-charts-area\n        *ngIf=\"hasRange\"\n        class=\"line-series-range\"\n        [data]=\"data\"\n        [path]=\"outerPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [opacity]=\"rangeFillOpacity\"\n        [animations]=\"animations\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], rangeFillOpacity: [{\n                type: Input\n            }], hasRange: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }] } });\n\nclass LineChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.showGridLines = true;\n        this.curve = curveLinear;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.showRefLines = false;\n        this.showRefLabels = true;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.timelineHeight = 50;\n        this.timelinePadding = 10;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    updateTimeline() {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n        }\n    }\n    getXDomain() {\n        let values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        let domain = [];\n        if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n        }\n        let min;\n        let max;\n        if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n            min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n            max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n        }\n        if (this.scaleType === ScaleType.Time) {\n            domain = [new Date(min), new Date(max)];\n            this.xSet = [...values].sort((a, b) => {\n                const aDate = a.getTime();\n                const bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            domain = [min, max];\n            // Use compare function to sort numbers numerically\n            this.xSet = [...values].sort((a, b) => a - b);\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (domain.indexOf(d.value) < 0) {\n                    domain.push(d.value);\n                }\n                if (d.min !== undefined) {\n                    this.hasRange = true;\n                    if (domain.indexOf(d.min) < 0) {\n                        domain.push(d.min);\n                    }\n                }\n                if (d.max !== undefined) {\n                    this.hasRange = true;\n                    if (domain.indexOf(d.max) < 0) {\n                        domain.push(d.max);\n                    }\n                }\n            }\n        }\n        const values = [...domain];\n        if (!this.autoScale) {\n            values.push(0);\n        }\n        const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n        const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime().range([0, width]).domain(domain);\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear().range([0, width]).domain(domain);\n            if (this.roundDomains) {\n                scale = scale.nice();\n            }\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().range([0, width]).padding(0.1).domain(domain);\n        }\n        return scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([height, 0]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    updateDomain(domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n    updateHoveredVertical(item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    }\n    hideCircles() {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    trackBy(index, item) {\n        return `${item.name}`;\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        this.deactivateAll();\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n}\nLineChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nLineChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LineChartComponent, selector: \"ngx-charts-line-chart\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", autoScale: \"autoScale\", timeline: \"timeline\", gradient: \"gradient\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", rangeFillOpacity: \"rangeFillOpacity\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", showRefLines: \"showRefLines\", referenceLines: \"referenceLines\", showRefLabels: \"showRefLabels\", xScaleMin: \"xScaleMin\", xScaleMax: \"xScaleMax\", yScaleMin: \"yScaleMin\", yScaleMax: \"yScaleMax\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }, { propertyName: \"seriesTooltipTemplate\", first: true, predicate: [\"seriesTooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [referenceLines]=\"referenceLines\"\n          [showRefLines]=\"showRefLines\"\n          [showRefLabels]=\"showRefLabels\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngIf=\"!isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n          <svg:g *ngIf=\"isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [activeEntries]=\"activeEntries\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [scaleType]=\"scaleType\"\n        [legend]=\"legend\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-line-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [curve]=\"curve\"\n            [hasRange]=\"hasRange\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: LineSeriesComponent, selector: \"g[ngx-charts-line-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"curve\", \"activeEntries\", \"rangeFillOpacity\", \"hasRange\", \"animations\"] }, { type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: [\"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"hover\"] }, { type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: [\"data\", \"type\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: [\"view\", \"results\", \"scheme\", \"customColors\", \"legend\", \"autoScale\", \"scaleType\", \"height\"], outputs: [\"select\", \"onDomainChange\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({\n                    opacity: 0\n                }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-line-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [referenceLines]=\"referenceLines\"\n          [showRefLines]=\"showRefLines\"\n          [showRefLabels]=\"showRefLabels\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngIf=\"!isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n          <svg:g *ngIf=\"isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [activeEntries]=\"activeEntries\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [scaleType]=\"scaleType\"\n        [legend]=\"legend\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-line-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [curve]=\"curve\"\n            [hasRange]=\"hasRange\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({\n                                    opacity: 0\n                                }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], timeline: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], rangeFillOpacity: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], showRefLines: [{\n                type: Input\n            }], referenceLines: [{\n                type: Input\n            }], showRefLabels: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], seriesTooltipTemplate: [{\n                type: ContentChild,\n                args: ['seriesTooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass LineChartModule {\n}\nLineChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nLineChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartModule, declarations: [LineComponent, LineChartComponent, LineSeriesComponent], imports: [ChartCommonModule], exports: [LineComponent, LineChartComponent, LineSeriesComponent] });\nLineChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [LineComponent, LineChartComponent, LineSeriesComponent],\n                    exports: [LineComponent, LineChartComponent, LineSeriesComponent]\n                }]\n        }] });\n\nclass PieLabelComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.animations = true;\n        this.labelTrim = true;\n        this.labelTrimSize = 10;\n        this.trimLabel = trimLabel;\n    }\n    ngOnChanges(changes) {\n        this.setTransforms();\n        this.update();\n    }\n    setTransforms() {\n        if (isPlatformServer(this.platformId)) {\n            this.styleTransform = `translate3d(${this.textX}px,${this.textY}px, 0)`;\n            this.attrTransform = `translate(${this.textX},${this.textY})`;\n            this.textTransition = !this.animations ? null : 'transform 0.75s';\n        }\n        else {\n            const isIE = /(edge|msie|trident)/i.test(navigator.userAgent);\n            this.styleTransform = isIE ? null : `translate3d(${this.textX}px,${this.textY}px, 0)`;\n            this.attrTransform = !isIE ? null : `translate(${this.textX},${this.textY})`;\n            this.textTransition = isIE || !this.animations ? null : 'transform 0.75s';\n        }\n    }\n    update() {\n        let startRadius = this.radius;\n        if (this.explodeSlices) {\n            startRadius = (this.radius * this.value) / this.max;\n        }\n        const innerArc = arc().innerRadius(startRadius).outerRadius(startRadius);\n        // Calculate innerPos then scale outer position to match label position\n        const innerPos = innerArc.centroid(this.data);\n        let scale = this.data.pos[1] / innerPos[1];\n        if (this.data.pos[1] === 0 || innerPos[1] === 0) {\n            scale = 1;\n        }\n        const outerPos = [scale * innerPos[0], scale * innerPos[1]];\n        this.line = `M${innerPos}L${outerPos}L${this.data.pos}`;\n    }\n    get textX() {\n        return this.data.pos[0];\n    }\n    get textY() {\n        return this.data.pos[1];\n    }\n    textAnchor() {\n        return this.midAngle(this.data) < Math.PI ? TextAnchor.Start : TextAnchor.End;\n    }\n    midAngle(d) {\n        return d.startAngle + (d.endAngle - d.startAngle) / 2;\n    }\n}\nPieLabelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieLabelComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nPieLabelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieLabelComponent, selector: \"g[ngx-charts-pie-label]\", inputs: { data: \"data\", radius: \"radius\", label: \"label\", color: \"color\", max: \"max\", value: \"value\", explodeSlices: \"explodeSlices\", animations: \"animations\", labelTrim: \"labelTrim\", labelTrimSize: \"labelTrimSize\" }, usesOnChanges: true, ngImport: i0, template: `\n    <title>{{ label }}</title>\n    <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\n      <svg:text\n        class=\"pie-label\"\n        [class.animation]=\"animations\"\n        dy=\".35em\"\n        [style.textAnchor]=\"textAnchor()\"\n        [style.shapeRendering]=\"'crispEdges'\"\n      >\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\n      </svg:text>\n    </svg:g>\n    <svg:path\n      [attr.d]=\"line\"\n      [attr.stroke]=\"color\"\n      fill=\"none\"\n      class=\"pie-label-line line\"\n      [class.animation]=\"animations\"\n    ></svg:path>\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieLabelComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-pie-label]',\n                    template: `\n    <title>{{ label }}</title>\n    <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\n      <svg:text\n        class=\"pie-label\"\n        [class.animation]=\"animations\"\n        dy=\".35em\"\n        [style.textAnchor]=\"textAnchor()\"\n        [style.shapeRendering]=\"'crispEdges'\"\n      >\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\n      </svg:text>\n    </svg:g>\n    <svg:path\n      [attr.d]=\"line\"\n      [attr.stroke]=\"color\"\n      fill=\"none\"\n      class=\"pie-label-line line\"\n      [class.animation]=\"animations\"\n    ></svg:path>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { data: [{\n                type: Input\n            }], radius: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], color: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], explodeSlices: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], labelTrim: [{\n                type: Input\n            }], labelTrimSize: [{\n                type: Input\n            }] } });\n\nclass PolarSeriesComponent {\n    constructor() {\n        this.tooltipDisabled = false;\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.circleRadius = 3;\n        this.barOrientation = BarOrientation;\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateGradients();\n        const line = this.getLineGenerator();\n        const data = this.sortData(this.data.series);\n        const seriesName = this.data.name;\n        const linearScaleType = this.colors.scaleType === ScaleType.Linear;\n        const min = this.yScale.domain()[0];\n        this.seriesColor = this.colors.getColor(linearScaleType ? min : seriesName);\n        this.path = line(data) || '';\n        this.circles = data.map(d => {\n            const a = this.getAngle(d);\n            const r = this.getRadius(d);\n            const value = d.value;\n            const color = this.colors.getColor(linearScaleType ? Math.abs(value) : seriesName);\n            const cData = Object.assign({}, d, {\n                series: seriesName,\n                value,\n                name: d.name\n            });\n            return {\n                data: cData,\n                cx: r * Math.sin(a),\n                cy: -r * Math.cos(a),\n                value,\n                color,\n                label: d.name\n            };\n        });\n        this.active = this.isActive(this.data);\n        this.inactive = this.isInactive(this.data);\n        this.tooltipText = this.tooltipText || (c => this.defaultTooltipText(c));\n    }\n    getAngle(d) {\n        const label = d.name;\n        if (this.scaleType === ScaleType.Time) {\n            return this.xScale(label);\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            return this.xScale(Number(label));\n        }\n        return this.xScale(label);\n    }\n    getRadius(d) {\n        return this.yScale(d.value);\n    }\n    getLineGenerator() {\n        return lineRadial()\n            .angle(d => this.getAngle(d))\n            .radius(d => this.getRadius(d))\n            .curve(this.curve);\n    }\n    sortData(data) {\n        if (this.scaleType === ScaleType.Linear) {\n            return sortLinear(data, 'name');\n        }\n        else if (this.scaleType === ScaleType.Time) {\n            return sortByTime(data, 'name');\n        }\n        return sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    isInactive(entry) {\n        if (!this.activeEntries || this.activeEntries.length === 0)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item === undefined;\n    }\n    defaultTooltipText({ label, value }) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(this.data.name)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n    }\n    updateGradients() {\n        this.hasGradient = this.gradient || this.colors.scaleType === ScaleType.Linear;\n        if (!this.hasGradient) {\n            return;\n        }\n        this.gradientId = 'grad' + id().toString();\n        this.gradientUrl = `url(#${this.gradientId})`;\n        if (this.colors.scaleType === ScaleType.Linear) {\n            const values = this.data.series.map(d => d.value);\n            const max = Math.max(...values);\n            const min = Math.min(...values);\n            this.gradientStops = this.colors.getLinearGradientStops(max, min);\n        }\n        else {\n            this.gradientStops = undefined;\n        }\n    }\n}\nPolarSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nPolarSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PolarSeriesComponent, selector: \"g[ngx-charts-polar-series]\", inputs: { name: \"name\", data: \"data\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", scaleType: \"scaleType\", curve: \"curve\", activeEntries: \"activeEntries\", rangeFillOpacity: \"rangeFillOpacity\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", gradient: \"gradient\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g class=\"polar-charts-series\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          *ngIf=\"hasGradient\"\n          [color]=\"seriesColor\"\n          [name]=\"gradientId\"\n          [startOpacity]=\"0.25\"\n          [endOpacity]=\"1\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-line\n        class=\"polar-series-path\"\n        [path]=\"path\"\n        [stroke]=\"hasGradient ? gradientUrl : seriesColor\"\n        [class.active]=\"active\"\n        [class.inactive]=\"inactive\"\n        [attr.fill-opacity]=\"rangeFillOpacity\"\n        [fill]=\"hasGradient ? gradientUrl : seriesColor\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-circle\n        *ngFor=\"let circle of circles\"\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circleRadius\"\n        [fill]=\"circle.color\"\n        [style.opacity]=\"inactive ? 0.2 : 1\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n        (select)=\"select.emit(circle.data)\"\n        (activate)=\"activate.emit({ name: circle.data.series })\"\n        (deactivate)=\"deactivate.emit({ name: circle.data.series })\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgRadialGradientComponent, selector: \"g[ngx-charts-svg-radial-gradient]\", inputs: [\"color\", \"name\", \"startOpacity\", \"endOpacity\", \"cx\", \"cy\", \"stops\"] }, { type: LineComponent, selector: \"g[ngx-charts-line]\", inputs: [\"path\", \"stroke\", \"data\", \"fill\", \"animations\"] }, { type: CircleComponent, selector: \"g[ngx-charts-circle]\", inputs: [\"cx\", \"cy\", \"r\", \"fill\", \"stroke\", \"data\", \"classNames\", \"circleOpacity\", \"pointerEvents\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-polar-series]',\n                    template: `\n    <svg:g class=\"polar-charts-series\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          *ngIf=\"hasGradient\"\n          [color]=\"seriesColor\"\n          [name]=\"gradientId\"\n          [startOpacity]=\"0.25\"\n          [endOpacity]=\"1\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-line\n        class=\"polar-series-path\"\n        [path]=\"path\"\n        [stroke]=\"hasGradient ? gradientUrl : seriesColor\"\n        [class.active]=\"active\"\n        [class.inactive]=\"inactive\"\n        [attr.fill-opacity]=\"rangeFillOpacity\"\n        [fill]=\"hasGradient ? gradientUrl : seriesColor\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-circle\n        *ngFor=\"let circle of circles\"\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circleRadius\"\n        [fill]=\"circle.color\"\n        [style.opacity]=\"inactive ? 0.2 : 1\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n        (select)=\"select.emit(circle.data)\"\n        (activate)=\"activate.emit({ name: circle.data.series })\"\n        (deactivate)=\"deactivate.emit({ name: circle.data.series })\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { name: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], rangeFillOpacity: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nconst twoPI = 2 * Math.PI;\nclass PolarChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.showGridLines = true;\n        this.curve = curveCardinalClosed;\n        this.activeEntries = [];\n        this.rangeFillOpacity = 0.15;\n        this.trimYAxisTicks = true;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.showSeriesOnHover = true;\n        this.gradient = false;\n        this.yAxisMinScale = 0;\n        this.labelTrim = true;\n        this.labelTrimSize = 10;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        // series: any; // ???\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.orientation = Orientation;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        this.setDims();\n        this.setScales();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.setTicks();\n    }\n    setDims() {\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        const halfWidth = Math.floor(this.dims.width / 2);\n        const halfHeight = Math.floor(this.dims.height / 2);\n        const outerRadius = (this.outerRadius = Math.min(halfHeight / 1.5, halfWidth / 1.5));\n        const yOffset = Math.max(0, halfHeight - outerRadius);\n        this.yAxisDims = {\n            ...this.dims,\n            width: halfWidth\n        };\n        this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n        this.transformYAxis = `translate(0, ${yOffset})`;\n        this.labelOffset = this.dims.height + 40;\n        this.transformPlot = `translate(${halfWidth}, ${halfHeight})`;\n    }\n    setScales() {\n        const xValues = this.getXValues();\n        this.scaleType = getScaleType(xValues);\n        this.xDomain = this.filteredDomain || this.getXDomain(xValues);\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, twoPI);\n        this.yScale = this.getYScale(this.yDomain, this.outerRadius);\n        this.yAxisScale = this.getYScale(this.yDomain.reverse(), this.outerRadius);\n    }\n    setTicks() {\n        let tickFormat;\n        if (this.xAxisTickFormatting) {\n            tickFormat = this.xAxisTickFormatting;\n        }\n        else if (this.xScale.tickFormat) {\n            tickFormat = this.xScale.tickFormat.apply(this.xScale, [5]);\n        }\n        else {\n            tickFormat = d => {\n                if (isDate(d)) {\n                    return d.toLocaleDateString();\n                }\n                return d.toLocaleString();\n            };\n        }\n        const outerRadius = this.outerRadius;\n        const s = 1.1;\n        this.thetaTicks = this.xDomain.map(d => {\n            const startAngle = this.xScale(d);\n            const dd = s * outerRadius * (startAngle > Math.PI ? -1 : 1);\n            const label = tickFormat(d);\n            const startPos = [outerRadius * Math.sin(startAngle), -outerRadius * Math.cos(startAngle)];\n            const pos = [dd, s * startPos[1]];\n            return {\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle: startAngle,\n                value: outerRadius,\n                label,\n                startPos,\n                pos\n            };\n        });\n        const minDistance = 10;\n        /* from pie chart, abstract out -*/\n        for (let i = 0; i < this.thetaTicks.length - 1; i++) {\n            const a = this.thetaTicks[i];\n            for (let j = i + 1; j < this.thetaTicks.length; j++) {\n                const b = this.thetaTicks[j];\n                // if they're on the same side\n                if (b.pos[0] * a.pos[0] > 0) {\n                    // if they're overlapping\n                    const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n                    if (o > 0) {\n                        // push the second up or down\n                        b.pos[1] += Math.sign(b.pos[0]) * o;\n                    }\n                }\n            }\n        }\n        this.radiusTicks = this.yAxisScale.ticks(Math.floor(this.dims.height / 50)).map(d => this.yScale(d));\n    }\n    getXValues() {\n        const values = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!values.includes(d.name)) {\n                    values.push(d.name);\n                }\n            }\n        }\n        return values;\n    }\n    getXDomain(values = this.getXValues()) {\n        if (this.scaleType === ScaleType.Time) {\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            return [min, max];\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            return [min, max];\n        }\n        return values;\n    }\n    getYValues() {\n        const domain = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (domain.indexOf(d.value) < 0) {\n                    domain.push(d.value);\n                }\n                if (d.min !== undefined) {\n                    if (domain.indexOf(d.min) < 0) {\n                        domain.push(d.min);\n                    }\n                }\n                if (d.max !== undefined) {\n                    if (domain.indexOf(d.max) < 0) {\n                        domain.push(d.max);\n                    }\n                }\n            }\n        }\n        return domain;\n    }\n    getYDomain(domain = this.getYValues()) {\n        let min = Math.min(...domain);\n        const max = Math.max(this.yAxisMinScale, ...domain);\n        min = Math.max(0, min);\n        if (!this.autoScale) {\n            min = Math.min(0, min);\n        }\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        switch (this.scaleType) {\n            case ScaleType.Time:\n                return scaleTime().range([0, width]).domain(domain);\n            case ScaleType.Linear:\n                const scale = scaleLinear().range([0, width]).domain(domain);\n                return this.roundDomains ? scale.nice() : scale;\n            default:\n                return scalePoint()\n                    .range([0, width - twoPI / domain.length])\n                    .padding(0)\n                    .domain(domain);\n        }\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([0, height]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        const domain = this.schemeType === ScaleType.Ordinal ? this.seriesDomain : this.yDomain.reverse();\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        if (this.schemeType === ScaleType.Ordinal) {\n            return {\n                scaleType: this.schemeType,\n                colors: this.colors,\n                domain: this.seriesDomain,\n                title: this.legendTitle,\n                position: this.legendPosition\n            };\n        }\n        return {\n            scaleType: this.schemeType,\n            colors: this.colors.scale,\n            domain: this.yDomain,\n            title: undefined,\n            position: this.legendPosition\n        };\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = this.showSeriesOnHover ? [item, ...this.activeEntries] : this.activeEntries;\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n    trackBy(index, item) {\n        return `${item.name}`;\n    }\n}\nPolarChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nPolarChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PolarChartComponent, selector: \"ngx-charts-polar-chart\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", autoScale: \"autoScale\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", rangeFillOpacity: \"rangeFillOpacity\", trimYAxisTicks: \"trimYAxisTicks\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", showSeriesOnHover: \"showSeriesOnHover\", gradient: \"gradient\", yAxisMinScale: \"yAxisMinScale\", labelTrim: \"labelTrim\", labelTrimSize: \"labelTrimSize\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g class=\"polar-chart chart\" [attr.transform]=\"transform\">\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:circle class=\"polar-chart-background\" cx=\"0\" cy=\"0\" [attr.r]=\"this.outerRadius\" />\n          <svg:g *ngIf=\"showGridLines\">\n            <svg:circle\n              *ngFor=\"let r of radiusTicks\"\n              class=\"gridline-path radial-gridline-path\"\n              cx=\"0\"\n              cy=\"0\"\n              [attr.r]=\"r\"\n            />\n          </svg:g>\n          <svg:g *ngIf=\"xAxis\">\n            <svg:g\n              ngx-charts-pie-label\n              *ngFor=\"let tick of thetaTicks\"\n              [data]=\"tick\"\n              [radius]=\"outerRadius\"\n              [label]=\"tick.label\"\n              [max]=\"outerRadius\"\n              [value]=\"showGridLines ? 1 : outerRadius\"\n              [explodeSlices]=\"true\"\n              [animations]=\"animations\"\n              [labelTrim]=\"labelTrim\"\n              [labelTrimSize]=\"labelTrimSize\"\n            ></svg:g>\n          </svg:g>\n        </svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          [attr.transform]=\"transformYAxis\"\n          *ngIf=\"yAxis\"\n          [yScale]=\"yAxisScale\"\n          [dims]=\"yAxisDims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-axis-label\n          *ngIf=\"xAxis && showXAxisLabel\"\n          [label]=\"xAxisLabel\"\n          [offset]=\"labelOffset\"\n          [orient]=\"orientation.Bottom\"\n          [height]=\"dims.height\"\n          [width]=\"dims.width\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{-webkit-animation:.75s ease-in fadeIn;animation:.75s ease-in fadeIn}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{-webkit-animation:3s linear drawOut;animation:3s linear drawOut;transition:d .75s}@-webkit-keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\", \".polar-chart .polar-chart-background{fill:none}.polar-chart .radial-gridline-path{stroke-dasharray:10 10;fill:none}.polar-chart .pie-label-line{stroke:#2f3646}.polar-charts-series .polar-series-area,.polar-series-path{pointer-events:none}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: PieLabelComponent, selector: \"g[ngx-charts-pie-label]\", inputs: [\"data\", \"radius\", \"label\", \"color\", \"max\", \"value\", \"explodeSlices\", \"animations\", \"labelTrim\", \"labelTrimSize\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\"], outputs: [\"dimensionsChanged\"] }, { type: AxisLabelComponent, selector: \"g[ngx-charts-axis-label]\", inputs: [\"orient\", \"label\", \"offset\", \"width\", \"height\"] }, { type: PolarSeriesComponent, selector: \"g[ngx-charts-polar-series]\", inputs: [\"name\", \"data\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"curve\", \"activeEntries\", \"rangeFillOpacity\", \"tooltipDisabled\", \"tooltipText\", \"gradient\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({\n                    opacity: 0\n                }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-polar-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g class=\"polar-chart chart\" [attr.transform]=\"transform\">\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:circle class=\"polar-chart-background\" cx=\"0\" cy=\"0\" [attr.r]=\"this.outerRadius\" />\n          <svg:g *ngIf=\"showGridLines\">\n            <svg:circle\n              *ngFor=\"let r of radiusTicks\"\n              class=\"gridline-path radial-gridline-path\"\n              cx=\"0\"\n              cy=\"0\"\n              [attr.r]=\"r\"\n            />\n          </svg:g>\n          <svg:g *ngIf=\"xAxis\">\n            <svg:g\n              ngx-charts-pie-label\n              *ngFor=\"let tick of thetaTicks\"\n              [data]=\"tick\"\n              [radius]=\"outerRadius\"\n              [label]=\"tick.label\"\n              [max]=\"outerRadius\"\n              [value]=\"showGridLines ? 1 : outerRadius\"\n              [explodeSlices]=\"true\"\n              [animations]=\"animations\"\n              [labelTrim]=\"labelTrim\"\n              [labelTrimSize]=\"labelTrimSize\"\n            ></svg:g>\n          </svg:g>\n        </svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          [attr.transform]=\"transformYAxis\"\n          *ngIf=\"yAxis\"\n          [yScale]=\"yAxisScale\"\n          [dims]=\"yAxisDims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-axis-label\n          *ngIf=\"xAxis && showXAxisLabel\"\n          [label]=\"xAxisLabel\"\n          [offset]=\"labelOffset\"\n          [orient]=\"orientation.Bottom\"\n          [height]=\"dims.height\"\n          [width]=\"dims.width\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({\n                                    opacity: 0\n                                }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{-webkit-animation:.75s ease-in fadeIn;animation:.75s ease-in fadeIn}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{-webkit-animation:3s linear drawOut;animation:3s linear drawOut;transition:d .75s}@-webkit-keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\", \".polar-chart .polar-chart-background{fill:none}.polar-chart .radial-gridline-path{stroke-dasharray:10 10;fill:none}.polar-chart .pie-label-line{stroke:#2f3646}.polar-charts-series .polar-series-area,.polar-series-path{pointer-events:none}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], rangeFillOpacity: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], showSeriesOnHover: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], yAxisMinScale: [{\n                type: Input\n            }], labelTrim: [{\n                type: Input\n            }], labelTrimSize: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass PieArcComponent {\n    constructor(element) {\n        this.startAngle = 0;\n        this.endAngle = Math.PI * 2;\n        this.cornerRadius = 0;\n        this.explodeSlices = false;\n        this.gradient = false;\n        this.animate = true;\n        this.pointerEvents = true;\n        this.isActive = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dblclick = new EventEmitter();\n        this.barOrientation = BarOrientation;\n        this.initialized = false;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    getGradient() {\n        return this.gradient ? this.gradientFill : this.fill;\n    }\n    getPointerEvents() {\n        return this.pointerEvents ? 'auto' : 'none';\n    }\n    update() {\n        const calc = this.calculateArc();\n        this.startOpacity = 0.5;\n        this.radialGradientId = 'linearGrad' + id().toString();\n        this.gradientFill = `url(#${this.radialGradientId})`;\n        if (this.animate) {\n            if (this.initialized) {\n                this.updateAnimation();\n            }\n            else {\n                this.loadAnimation();\n                this.initialized = true;\n            }\n        }\n        else {\n            this.path = calc.startAngle(this.startAngle).endAngle(this.endAngle)();\n        }\n    }\n    calculateArc() {\n        let outerRadius = this.outerRadius;\n        if (this.explodeSlices && this.innerRadius === 0) {\n            outerRadius = (this.outerRadius * this.value) / this.max;\n        }\n        return arc().innerRadius(this.innerRadius).outerRadius(outerRadius).cornerRadius(this.cornerRadius);\n    }\n    loadAnimation() {\n        const node = select(this.element)\n            .selectAll('.arc')\n            .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n        const calc = this.calculateArc();\n        node\n            .transition()\n            .attrTween('d', function (d) {\n            this._current = this._current || d;\n            const copyOfD = Object.assign({}, d);\n            copyOfD.endAngle = copyOfD.startAngle;\n            const interpolater = interpolate(copyOfD, copyOfD);\n            this._current = interpolater(0);\n            return function (t) {\n                return calc(interpolater(t));\n            };\n        })\n            .transition()\n            .duration(750)\n            .attrTween('d', function (d) {\n            this._current = this._current || d;\n            const interpolater = interpolate(this._current, d);\n            this._current = interpolater(0);\n            return function (t) {\n                return calc(interpolater(t));\n            };\n        });\n    }\n    updateAnimation() {\n        const node = select(this.element)\n            .selectAll('.arc')\n            .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n        const calc = this.calculateArc();\n        node\n            .transition()\n            .duration(750)\n            .attrTween('d', function (d) {\n            this._current = this._current || d;\n            const interpolater = interpolate(this._current, d);\n            this._current = interpolater(0);\n            return function (t) {\n                return calc(interpolater(t));\n            };\n        });\n    }\n    onClick() {\n        clearTimeout(this._timeout);\n        this._timeout = setTimeout(() => this.select.emit(this.data), 200);\n    }\n    onDblClick(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        clearTimeout(this._timeout);\n        this.dblclick.emit({\n            data: this.data,\n            nativeEvent: event\n        });\n    }\n}\nPieArcComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieArcComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nPieArcComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieArcComponent, selector: \"g[ngx-charts-pie-arc]\", inputs: { fill: \"fill\", startAngle: \"startAngle\", endAngle: \"endAngle\", innerRadius: \"innerRadius\", outerRadius: \"outerRadius\", cornerRadius: \"cornerRadius\", value: \"value\", max: \"max\", data: \"data\", explodeSlices: \"explodeSlices\", gradient: \"gradient\", animate: \"animate\", pointerEvents: \"pointerEvents\", isActive: \"isActive\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", dblclick: \"dblclick\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g class=\"arc-group\">\n      <svg:defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-radial-gradient [color]=\"fill\" [name]=\"radialGradientId\" [startOpacity]=\"startOpacity\" />\n      </svg:defs>\n      <svg:path\n        [attr.d]=\"path\"\n        class=\"arc\"\n        [class.active]=\"isActive\"\n        [attr.fill]=\"getGradient()\"\n        (click)=\"onClick()\"\n        (dblclick)=\"onDblClick($event)\"\n        (mouseenter)=\"activate.emit(data)\"\n        (mouseleave)=\"deactivate.emit(data)\"\n        [style.pointer-events]=\"getPointerEvents()\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgRadialGradientComponent, selector: \"g[ngx-charts-svg-radial-gradient]\", inputs: [\"color\", \"name\", \"startOpacity\", \"endOpacity\", \"cx\", \"cy\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieArcComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-pie-arc]',\n                    template: `\n    <svg:g class=\"arc-group\">\n      <svg:defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-radial-gradient [color]=\"fill\" [name]=\"radialGradientId\" [startOpacity]=\"startOpacity\" />\n      </svg:defs>\n      <svg:path\n        [attr.d]=\"path\"\n        class=\"arc\"\n        [class.active]=\"isActive\"\n        [attr.fill]=\"getGradient()\"\n        (click)=\"onClick()\"\n        (dblclick)=\"onDblClick($event)\"\n        (mouseenter)=\"activate.emit(data)\"\n        (mouseleave)=\"deactivate.emit(data)\"\n        [style.pointer-events]=\"getPointerEvents()\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { fill: [{\n                type: Input\n            }], startAngle: [{\n                type: Input\n            }], endAngle: [{\n                type: Input\n            }], innerRadius: [{\n                type: Input\n            }], outerRadius: [{\n                type: Input\n            }], cornerRadius: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], explodeSlices: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], animate: [{\n                type: Input\n            }], pointerEvents: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], dblclick: [{\n                type: Output\n            }] } });\n\nclass PieSeriesComponent {\n    constructor() {\n        this.series = [];\n        this.innerRadius = 60;\n        this.outerRadius = 80;\n        this.trimLabels = true;\n        this.maxLabelLength = 10;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dblclick = new EventEmitter();\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        const pieGenerator = pie()\n            .value(d => d.value)\n            .sort(null);\n        const arcData = pieGenerator(this.series);\n        this.max = max(arcData, d => {\n            return d.value;\n        });\n        this.data = this.calculateLabelPositions(arcData);\n        this.tooltipText = this.tooltipText || this.defaultTooltipText;\n    }\n    midAngle(d) {\n        return d.startAngle + (d.endAngle - d.startAngle) / 2;\n    }\n    outerArc() {\n        const factor = 1.5;\n        return arc()\n            .innerRadius(this.outerRadius * factor)\n            .outerRadius(this.outerRadius * factor);\n    }\n    calculateLabelPositions(pieData) {\n        const factor = 1.5;\n        const minDistance = 10;\n        const labelPositions = pieData;\n        labelPositions.forEach(d => {\n            d.pos = this.outerArc().centroid(d);\n            d.pos[0] = factor * this.outerRadius * (this.midAngle(d) < Math.PI ? 1 : -1);\n        });\n        for (let i = 0; i < labelPositions.length - 1; i++) {\n            const a = labelPositions[i];\n            if (!this.labelVisible(a)) {\n                continue;\n            }\n            for (let j = i + 1; j < labelPositions.length; j++) {\n                const b = labelPositions[j];\n                if (!this.labelVisible(b)) {\n                    continue;\n                }\n                // if they're on the same side\n                if (b.pos[0] * a.pos[0] > 0) {\n                    // if they're overlapping\n                    const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n                    if (o > 0) {\n                        // push the second up or down\n                        b.pos[1] += Math.sign(b.pos[0]) * o;\n                    }\n                }\n            }\n        }\n        return labelPositions;\n    }\n    labelVisible(myArc) {\n        return this.showLabels && myArc.endAngle - myArc.startAngle > Math.PI / 30;\n    }\n    getTooltipTitle(a) {\n        return this.tooltipTemplate ? undefined : this.tooltipText(a);\n    }\n    labelText(myArc) {\n        if (this.labelFormatting) {\n            return this.labelFormatting(myArc.data.name);\n        }\n        return this.label(myArc);\n    }\n    label(myArc) {\n        return formatLabel(myArc.data.name);\n    }\n    defaultTooltipText(myArc) {\n        const label = this.label(myArc);\n        const val = formatLabel(myArc.data.value);\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n    }\n    color(myArc) {\n        return this.colors.getColor(this.label(myArc));\n    }\n    trackBy(index, item) {\n        return item.data.name;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name && entry.series === d.series;\n        });\n        return item !== undefined;\n    }\n}\nPieSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nPieSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieSeriesComponent, selector: \"g[ngx-charts-pie-series]\", inputs: { colors: \"colors\", series: \"series\", dims: \"dims\", innerRadius: \"innerRadius\", outerRadius: \"outerRadius\", explodeSlices: \"explodeSlices\", showLabels: \"showLabels\", gradient: \"gradient\", activeEntries: \"activeEntries\", labelFormatting: \"labelFormatting\", trimLabels: \"trimLabels\", maxLabelLength: \"maxLabelLength\", tooltipText: \"tooltipText\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", dblclick: \"dblclick\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngFor=\"let arc of data; trackBy: trackBy\">\n      <svg:g\n        ngx-charts-pie-label\n        *ngIf=\"labelVisible(arc)\"\n        [data]=\"arc\"\n        [radius]=\"outerRadius\"\n        [color]=\"color(arc)\"\n        [label]=\"labelText(arc)\"\n        [labelTrim]=\"trimLabels\"\n        [labelTrimSize]=\"maxLabelLength\"\n        [max]=\"max\"\n        [value]=\"arc.value\"\n        [explodeSlices]=\"explodeSlices\"\n        [animations]=\"animations\"\n      ></svg:g>\n      <svg:g\n        ngx-charts-pie-arc\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [gradient]=\"gradient\"\n        [data]=\"arc.data\"\n        [max]=\"max\"\n        [explodeSlices]=\"explodeSlices\"\n        [isActive]=\"isActive(arc.data)\"\n        [animate]=\"animations\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        (dblclick)=\"dblclick.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"getTooltipTitle(arc)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"arc.data\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: PieLabelComponent, selector: \"g[ngx-charts-pie-label]\", inputs: [\"data\", \"radius\", \"label\", \"color\", \"max\", \"value\", \"explodeSlices\", \"animations\", \"labelTrim\", \"labelTrimSize\"] }, { type: PieArcComponent, selector: \"g[ngx-charts-pie-arc]\", inputs: [\"fill\", \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"value\", \"max\", \"data\", \"explodeSlices\", \"gradient\", \"animate\", \"pointerEvents\", \"isActive\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-pie-series]',\n                    template: `\n    <svg:g *ngFor=\"let arc of data; trackBy: trackBy\">\n      <svg:g\n        ngx-charts-pie-label\n        *ngIf=\"labelVisible(arc)\"\n        [data]=\"arc\"\n        [radius]=\"outerRadius\"\n        [color]=\"color(arc)\"\n        [label]=\"labelText(arc)\"\n        [labelTrim]=\"trimLabels\"\n        [labelTrimSize]=\"maxLabelLength\"\n        [max]=\"max\"\n        [value]=\"arc.value\"\n        [explodeSlices]=\"explodeSlices\"\n        [animations]=\"animations\"\n      ></svg:g>\n      <svg:g\n        ngx-charts-pie-arc\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [gradient]=\"gradient\"\n        [data]=\"arc.data\"\n        [max]=\"max\"\n        [explodeSlices]=\"explodeSlices\"\n        [isActive]=\"isActive(arc.data)\"\n        [animate]=\"animations\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        (dblclick)=\"dblclick.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"getTooltipTitle(arc)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"arc.data\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { colors: [{\n                type: Input\n            }], series: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], innerRadius: [{\n                type: Input\n            }], outerRadius: [{\n                type: Input\n            }], explodeSlices: [{\n                type: Input\n            }], showLabels: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], trimLabels: [{\n                type: Input\n            }], maxLabelLength: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], dblclick: [{\n                type: Output\n            }] } });\n\nclass AdvancedPieChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.activeEntries = [];\n        this.tooltipDisabled = false;\n        this.label = 'Total';\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [20, 20, 20, 20];\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: (this.width * 4) / 12.0,\n            height: this.height,\n            margins: this.margin\n        });\n        this.formatDates();\n        this.domain = this.getDomain();\n        this.setColors();\n        const xOffset = this.dims.width / 2;\n        const yOffset = this.margin[0] + this.dims.height / 2;\n        this.legendWidth = this.width - this.dims.width - this.margin[1];\n        this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2.5;\n        this.innerRadius = this.outerRadius * 0.75;\n        this.transform = `translate(${xOffset} , ${yOffset})`;\n    }\n    getDomain() {\n        return this.results.map(d => d.label);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nAdvancedPieChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AdvancedPieChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nAdvancedPieChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AdvancedPieChartComponent, selector: \"ngx-charts-advanced-pie-chart\", inputs: { gradient: \"gradient\", activeEntries: \"activeEntries\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", label: \"label\", valueFormatting: \"valueFormatting\", nameFormatting: \"nameFormatting\", percentageFormatting: \"percentageFormatting\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <div [style.width.px]=\"width\" [style.height.px]=\"height\">\n      <div class=\"advanced-pie chart\" [style.width.px]=\"dims.width\" [style.height.px]=\"dims.height\">\n        <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n          <svg:g [attr.transform]=\"transform\" class=\"pie chart\">\n            <svg:g\n              ngx-charts-pie-series\n              [colors]=\"colors\"\n              [series]=\"results\"\n              [innerRadius]=\"innerRadius\"\n              [activeEntries]=\"activeEntries\"\n              [outerRadius]=\"outerRadius\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipText]=\"tooltipText\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n              [animations]=\"animations\"\n            ></svg:g>\n          </svg:g>\n        </ngx-charts-chart>\n      </div>\n      <div class=\"advanced-pie-legend-wrapper\" [style.width.px]=\"width - dims.width\" [style.height.px]=\"height\">\n        <ngx-charts-advanced-legend\n          [data]=\"results\"\n          [colors]=\"colors\"\n          [width]=\"width - dims.width - margin[1]\"\n          [label]=\"label\"\n          [animations]=\"animations\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"nameFormatting\"\n          [percentageFormatting]=\"percentageFormatting\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, true)\"\n          (deactivate)=\"onDeactivate($event, true)\"\n        >\n        </ngx-charts-advanced-legend>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".advanced-pie{display:inline-block;float:left}.advanced-pie-legend-wrapper{display:inline-block}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: PieSeriesComponent, selector: \"g[ngx-charts-pie-series]\", inputs: [\"colors\", \"series\", \"dims\", \"innerRadius\", \"outerRadius\", \"explodeSlices\", \"showLabels\", \"gradient\", \"activeEntries\", \"labelFormatting\", \"trimLabels\", \"maxLabelLength\", \"tooltipText\", \"tooltipDisabled\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }, { type: AdvancedLegendComponent, selector: \"ngx-charts-advanced-legend\", inputs: [\"width\", \"data\", \"colors\", \"label\", \"animations\", \"valueFormatting\", \"labelFormatting\", \"percentageFormatting\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AdvancedPieChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-advanced-pie-chart', template: `\n    <div [style.width.px]=\"width\" [style.height.px]=\"height\">\n      <div class=\"advanced-pie chart\" [style.width.px]=\"dims.width\" [style.height.px]=\"dims.height\">\n        <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n          <svg:g [attr.transform]=\"transform\" class=\"pie chart\">\n            <svg:g\n              ngx-charts-pie-series\n              [colors]=\"colors\"\n              [series]=\"results\"\n              [innerRadius]=\"innerRadius\"\n              [activeEntries]=\"activeEntries\"\n              [outerRadius]=\"outerRadius\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipText]=\"tooltipText\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n              [animations]=\"animations\"\n            ></svg:g>\n          </svg:g>\n        </ngx-charts-chart>\n      </div>\n      <div class=\"advanced-pie-legend-wrapper\" [style.width.px]=\"width - dims.width\" [style.height.px]=\"height\">\n        <ngx-charts-advanced-legend\n          [data]=\"results\"\n          [colors]=\"colors\"\n          [width]=\"width - dims.width - margin[1]\"\n          [label]=\"label\"\n          [animations]=\"animations\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"nameFormatting\"\n          [percentageFormatting]=\"percentageFormatting\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, true)\"\n          (deactivate)=\"onDeactivate($event, true)\"\n        >\n        </ngx-charts-advanced-legend>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".advanced-pie{display:inline-block;float:left}.advanced-pie-legend-wrapper{display:inline-block}\\n\"] }]\n        }], propDecorators: { gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], valueFormatting: [{\n                type: Input\n            }], nameFormatting: [{\n                type: Input\n            }], percentageFormatting: [{\n                type: Input\n            }] } });\n\nclass PieChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.labels = false;\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.explodeSlices = false;\n        this.doughnut = false;\n        this.arcWidth = 0.25;\n        this.activeEntries = [];\n        this.tooltipDisabled = false;\n        this.trimLabels = true;\n        this.maxLabelLength = 10;\n        this.dblclick = new EventEmitter();\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n    }\n    update() {\n        super.update();\n        if (this.labels && this.hasNoOptionalMarginsSet()) {\n            this.margins = [30, 80, 30, 80];\n        }\n        else if (!this.labels && this.hasNoOptionalMarginsSet()) {\n            // default value for margins\n            this.margins = [20, 20, 20, 20];\n        }\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margins,\n            showLegend: this.legend,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        const xOffset = this.margins[3] + this.dims.width / 2;\n        const yOffset = this.margins[0] + this.dims.height / 2;\n        this.translation = `translate(${xOffset}, ${yOffset})`;\n        this.outerRadius = Math.min(this.dims.width, this.dims.height);\n        if (this.labels) {\n            // make room for labels\n            this.outerRadius /= 3;\n        }\n        else {\n            this.outerRadius /= 2;\n        }\n        this.innerRadius = 0;\n        if (this.doughnut) {\n            this.innerRadius = this.outerRadius * (1 - this.arcWidth);\n        }\n        this.domain = this.getDomain();\n        // sort data according to domain\n        this.data = this.results.sort((a, b) => {\n            return this.domain.indexOf(a.name) - this.domain.indexOf(b.name);\n        });\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n    }\n    getDomain() {\n        return this.results.map(d => d.label);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n    getLegendOptions() {\n        return {\n            scaleType: ScaleType.Ordinal,\n            domain: this.domain,\n            colors: this.colors,\n            title: this.legendTitle,\n            position: this.legendPosition\n        };\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    hasNoOptionalMarginsSet() {\n        return !this.margins || this.margins.length <= 0;\n    }\n}\nPieChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nPieChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieChartComponent, selector: \"ngx-charts-pie-chart\", inputs: { labels: \"labels\", legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", explodeSlices: \"explodeSlices\", doughnut: \"doughnut\", arcWidth: \"arcWidth\", gradient: \"gradient\", activeEntries: \"activeEntries\", tooltipDisabled: \"tooltipDisabled\", labelFormatting: \"labelFormatting\", trimLabels: \"trimLabels\", maxLabelLength: \"maxLabelLength\", tooltipText: \"tooltipText\", margins: \"margins\" }, outputs: { dblclick: \"dblclick\", select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\n        <svg:g\n          ngx-charts-pie-series\n          [colors]=\"colors\"\n          [series]=\"data\"\n          [showLabels]=\"labels\"\n          [labelFormatting]=\"labelFormatting\"\n          [trimLabels]=\"trimLabels\"\n          [maxLabelLength]=\"maxLabelLength\"\n          [activeEntries]=\"activeEntries\"\n          [innerRadius]=\"innerRadius\"\n          [outerRadius]=\"outerRadius\"\n          [explodeSlices]=\"explodeSlices\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (dblclick)=\"dblclick.emit($event)\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{-webkit-animation:.75s ease-in fadeIn;animation:.75s ease-in fadeIn}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{-webkit-animation:3s linear drawOut;animation:3s linear drawOut;transition:d .75s}@-webkit-keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: PieSeriesComponent, selector: \"g[ngx-charts-pie-series]\", inputs: [\"colors\", \"series\", \"dims\", \"innerRadius\", \"outerRadius\", \"explodeSlices\", \"showLabels\", \"gradient\", \"activeEntries\", \"labelFormatting\", \"trimLabels\", \"maxLabelLength\", \"tooltipText\", \"tooltipDisabled\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-pie-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\n        <svg:g\n          ngx-charts-pie-series\n          [colors]=\"colors\"\n          [series]=\"data\"\n          [showLabels]=\"labels\"\n          [labelFormatting]=\"labelFormatting\"\n          [trimLabels]=\"trimLabels\"\n          [maxLabelLength]=\"maxLabelLength\"\n          [activeEntries]=\"activeEntries\"\n          [innerRadius]=\"innerRadius\"\n          [outerRadius]=\"outerRadius\"\n          [explodeSlices]=\"explodeSlices\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (dblclick)=\"dblclick.emit($event)\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{-webkit-animation:.75s ease-in fadeIn;animation:.75s ease-in fadeIn}@-webkit-keyframes fadeIn{0%{opacity:0}to{opacity:1}}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{-webkit-animation:3s linear drawOut;animation:3s linear drawOut;transition:d .75s}@-webkit-keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\"] }]\n        }], propDecorators: { labels: [{\n                type: Input\n            }], legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], explodeSlices: [{\n                type: Input\n            }], doughnut: [{\n                type: Input\n            }], arcWidth: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], trimLabels: [{\n                type: Input\n            }], maxLabelLength: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], dblclick: [{\n                type: Output\n            }], margins: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nfunction gridSize(dims, len, minWidth) {\n    let rows = 1;\n    let cols = len;\n    const width = dims.width;\n    if (width > minWidth) {\n        while (width / cols < minWidth) {\n            rows += 1;\n            cols = Math.ceil(len / rows);\n        }\n    }\n    return [cols, rows];\n}\nfunction gridLayout(dims, data, minWidth, designatedTotal) {\n    const xScale = scaleBand();\n    const yScale = scaleBand();\n    const width = dims.width;\n    const height = dims.height;\n    const [columns, rows] = gridSize(dims, data.length, minWidth);\n    const xDomain = [];\n    const yDomain = [];\n    for (let i = 0; i < rows; i++) {\n        yDomain.push(i);\n    }\n    for (let i = 0; i < columns; i++) {\n        xDomain.push(i);\n    }\n    xScale.domain(xDomain);\n    yScale.domain(yDomain);\n    xScale.rangeRound([0, width], 0.1);\n    yScale.rangeRound([0, height], 0.1);\n    const res = [];\n    const total = designatedTotal ? designatedTotal : getTotal(data);\n    const cardWidth = xScale.bandwidth();\n    const cardHeight = yScale.bandwidth();\n    for (let i = 0; i < data.length; i++) {\n        res[i] = {};\n        res[i].data = {\n            name: data[i] ? data[i].name : '',\n            value: data[i] ? data[i].value : undefined,\n            extra: data[i] ? data[i].extra : undefined,\n            label: data[i] ? data[i].label : ''\n        };\n        res[i].x = xScale(i % columns);\n        res[i].y = yScale(Math.floor(i / columns));\n        res[i].width = cardWidth;\n        res[i].height = cardHeight;\n        res[i].data.percent = total > 0 ? res[i].data.value / total : 0;\n        res[i].data.total = total;\n    }\n    return res;\n}\nfunction getTotal(results) {\n    return results.map(d => (d ? d.value : 0)).reduce((sum, val) => sum + val, 0);\n}\n\nclass PieGridSeriesComponent {\n    constructor(element) {\n        this.innerRadius = 70;\n        this.outerRadius = 80;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.layout = pie()\n            .value(d => d.data.value)\n            .sort(null);\n        this.arcs = this.getArcs();\n    }\n    getArcs() {\n        return this.layout(this.data).map((arc, index) => {\n            const label = arc.data.data.name;\n            const other = arc.data.data.other;\n            if (index === 0) {\n                arc.startAngle = 0;\n            }\n            const color = this.colors(label);\n            return {\n                data: arc.data.data,\n                class: 'arc ' + 'arc' + index,\n                fill: color,\n                startAngle: other ? 0 : arc.startAngle,\n                endAngle: arc.endAngle,\n                animate: this.animations && !other,\n                pointerEvents: !other\n            };\n        });\n    }\n    onClick(data) {\n        this.select.emit(this.data[0].data);\n    }\n    trackBy(index, item) {\n        return item.data.name;\n    }\n    label(arc) {\n        return arc.data.name;\n    }\n    color(arc) {\n        return this.colors(this.label(arc));\n    }\n}\nPieGridSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieGridSeriesComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nPieGridSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieGridSeriesComponent, selector: \"g[ngx-charts-pie-grid-series]\", inputs: { colors: \"colors\", data: \"data\", innerRadius: \"innerRadius\", outerRadius: \"outerRadius\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g class=\"pie-grid-arcs\">\n      <svg:g\n        ngx-charts-pie-arc\n        *ngFor=\"let arc of arcs; trackBy: trackBy\"\n        [attr.class]=\"arc.class\"\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [data]=\"arc.data\"\n        [gradient]=\"false\"\n        [pointerEvents]=\"arc.pointerEvents\"\n        [animate]=\"arc.animate\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: PieArcComponent, selector: \"g[ngx-charts-pie-arc]\", inputs: [\"fill\", \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"value\", \"max\", \"data\", \"explodeSlices\", \"gradient\", \"animate\", \"pointerEvents\", \"isActive\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieGridSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-pie-grid-series]',\n                    template: `\n    <svg:g class=\"pie-grid-arcs\">\n      <svg:g\n        ngx-charts-pie-arc\n        *ngFor=\"let arc of arcs; trackBy: trackBy\"\n        [attr.class]=\"arc.class\"\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [data]=\"arc.data\"\n        [gradient]=\"false\"\n        [pointerEvents]=\"arc.pointerEvents\"\n        [animate]=\"arc.animate\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { colors: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], innerRadius: [{\n                type: Input\n            }], outerRadius: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass PieGridComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.tooltipDisabled = false;\n        this.label = 'Total';\n        this.minWidth = 150;\n        this.activeEntries = [];\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [20, 20, 20, 20];\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.formatDates();\n        this.domain = this.getDomain();\n        this.data = gridLayout(this.dims, this.results, this.minWidth, this.designatedTotal);\n        this.transform = `translate(${this.margin[3]} , ${this.margin[0]})`;\n        this.series = this.getSeries();\n        this.setColors();\n        this.tooltipText = this.tooltipText || this.defaultTooltipText;\n    }\n    defaultTooltipText({ data }) {\n        const label = trimLabel(formatLabel(data.name));\n        const val = data.value.toLocaleString();\n        return `\n      <span class=\"tooltip-label\">${label}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n    }\n    getDomain() {\n        return this.results.map(d => d.label);\n    }\n    getSeries() {\n        const total = this.designatedTotal ? this.designatedTotal : this.getTotal();\n        return this.data.map(d => {\n            const baselineLabelHeight = 20;\n            const padding = 10;\n            const name = d.data.name;\n            const label = formatLabel(name);\n            const value = d.data.value;\n            const radius = min([d.width - padding, d.height - baselineLabelHeight]) / 2 - 5;\n            const innerRadius = radius * 0.9;\n            let count = 0;\n            const colors = () => {\n                count += 1;\n                if (count === 1) {\n                    return 'rgba(100,100,100,0.3)';\n                }\n                else {\n                    return this.colorScale.getColor(label);\n                }\n            };\n            const xPos = d.x + (d.width - padding) / 2;\n            const yPos = d.y + (d.height - baselineLabelHeight) / 2;\n            return {\n                transform: `translate(${xPos}, ${yPos})`,\n                colors,\n                innerRadius,\n                outerRadius: radius,\n                name,\n                label: trimLabel(label),\n                total: value,\n                value,\n                percent: format('.1%')(d.data.percent),\n                data: [\n                    d,\n                    {\n                        data: {\n                            other: true,\n                            value: total - value,\n                            name: d.data.name\n                        }\n                    }\n                ]\n            };\n        });\n    }\n    getTotal() {\n        return this.results.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colorScale = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nPieGridComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieGridComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nPieGridComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieGridComponent, selector: \"ngx-charts-pie-grid\", inputs: { designatedTotal: \"designatedTotal\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", label: \"label\", minWidth: \"minWidth\", activeEntries: \"activeEntries\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"pie-grid chart\">\n        <svg:g *ngFor=\"let series of series\" class=\"pie-grid-item\" [attr.transform]=\"series.transform\">\n          <svg:g\n            ngx-charts-pie-grid-series\n            [colors]=\"series.colors\"\n            [data]=\"series.data\"\n            [innerRadius]=\"series.innerRadius\"\n            [outerRadius]=\"series.outerRadius\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipPlacement]=\"placementTypes.Top\"\n            [tooltipType]=\"styleTypes.tooltip\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText({ data: series })\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"series.data[0].data\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          />\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label percent-label\"\n            dy=\"-0.5em\"\n            x=\"0\"\n            y=\"5\"\n            ngx-charts-count-up\n            [countTo]=\"series.percent\"\n            [countSuffix]=\"'%'\"\n            text-anchor=\"middle\"\n          ></svg:text>\n          <svg:text *ngIf=\"!animations\" class=\"label percent-label\" dy=\"-0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.percent.toLocaleString() }}\n          </svg:text>\n          <svg:text class=\"label\" dy=\"0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.label }}\n          </svg:text>\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n            ngx-charts-count-up\n            [countTo]=\"series.total\"\n            [countPrefix]=\"label + ': '\"\n          ></svg:text>\n          <svg:text\n            *ngIf=\"!animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n          >\n            {{ label }}: {{ series.total.toLocaleString() }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-grid .arc1{opacity:.4}.pie-grid .percent-label{font-size:16px;font-weight:400}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: PieGridSeriesComponent, selector: \"g[ngx-charts-pie-grid-series]\", inputs: [\"colors\", \"data\", \"innerRadius\", \"outerRadius\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: CountUpDirective, selector: \"[ngx-charts-count-up]\", inputs: [\"countDuration\", \"countPrefix\", \"countSuffix\", \"valueFormatting\", \"countDecimals\", \"countTo\", \"countFrom\"], outputs: [\"countChange\", \"countFinish\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieGridComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-pie-grid', template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"pie-grid chart\">\n        <svg:g *ngFor=\"let series of series\" class=\"pie-grid-item\" [attr.transform]=\"series.transform\">\n          <svg:g\n            ngx-charts-pie-grid-series\n            [colors]=\"series.colors\"\n            [data]=\"series.data\"\n            [innerRadius]=\"series.innerRadius\"\n            [outerRadius]=\"series.outerRadius\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipPlacement]=\"placementTypes.Top\"\n            [tooltipType]=\"styleTypes.tooltip\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText({ data: series })\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"series.data[0].data\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          />\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label percent-label\"\n            dy=\"-0.5em\"\n            x=\"0\"\n            y=\"5\"\n            ngx-charts-count-up\n            [countTo]=\"series.percent\"\n            [countSuffix]=\"'%'\"\n            text-anchor=\"middle\"\n          ></svg:text>\n          <svg:text *ngIf=\"!animations\" class=\"label percent-label\" dy=\"-0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.percent.toLocaleString() }}\n          </svg:text>\n          <svg:text class=\"label\" dy=\"0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.label }}\n          </svg:text>\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n            ngx-charts-count-up\n            [countTo]=\"series.total\"\n            [countPrefix]=\"label + ': '\"\n          ></svg:text>\n          <svg:text\n            *ngIf=\"!animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n          >\n            {{ label }}: {{ series.total.toLocaleString() }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-grid .arc1{opacity:.4}.pie-grid .percent-label{font-size:16px;font-weight:400}\\n\"] }]\n        }], propDecorators: { designatedTotal: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], minWidth: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass PieChartModule {\n}\nPieChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nPieChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartModule, declarations: [AdvancedPieChartComponent,\n        PieLabelComponent,\n        PieArcComponent,\n        PieChartComponent,\n        PieGridComponent,\n        PieGridSeriesComponent,\n        PieSeriesComponent], imports: [ChartCommonModule], exports: [AdvancedPieChartComponent,\n        PieLabelComponent,\n        PieArcComponent,\n        PieChartComponent,\n        PieGridComponent,\n        PieGridSeriesComponent,\n        PieSeriesComponent] });\nPieChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [\n                        AdvancedPieChartComponent,\n                        PieLabelComponent,\n                        PieArcComponent,\n                        PieChartComponent,\n                        PieGridComponent,\n                        PieGridSeriesComponent,\n                        PieSeriesComponent\n                    ],\n                    exports: [\n                        AdvancedPieChartComponent,\n                        PieLabelComponent,\n                        PieArcComponent,\n                        PieChartComponent,\n                        PieGridComponent,\n                        PieGridSeriesComponent,\n                        PieSeriesComponent\n                    ]\n                }]\n        }] });\n\nclass PolarChartModule {\n}\nPolarChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nPolarChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartModule, declarations: [PolarChartComponent, PolarSeriesComponent], imports: [ChartCommonModule, PieChartModule, LineChartModule], exports: [PolarChartComponent, PolarSeriesComponent] });\nPolarChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartModule, imports: [[ChartCommonModule, PieChartModule, LineChartModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule, PieChartModule, LineChartModule],\n                    declarations: [PolarChartComponent, PolarSeriesComponent],\n                    exports: [PolarChartComponent, PolarSeriesComponent]\n                }]\n        }] });\n\nfunction calculateTextWidth(fontFamilyKey, text, defaultWidth = 8) {\n    return text.split('').reduce((acc, curr) => {\n        const width = fontFamilyKey[curr] || defaultWidth;\n        return acc + width;\n    }, 0);\n}\n\nconst VERDANA_FONT_WIDTHS_16_PX = {\n    '0': 10,\n    '1': 10,\n    '2': 10,\n    '3': 10,\n    '4': 10,\n    '5': 10,\n    '6': 10,\n    '7': 10,\n    '8': 10,\n    '9': 10,\n    A: 11,\n    B: 11,\n    C: 11,\n    D: 12,\n    E: 10,\n    F: 9,\n    G: 12,\n    H: 12,\n    I: 7,\n    J: 7,\n    K: 11,\n    L: 9,\n    M: 13,\n    N: 12,\n    O: 13,\n    P: 10,\n    Q: 13,\n    R: 11,\n    S: 11,\n    T: 10,\n    U: 12,\n    V: 11,\n    W: 16,\n    X: 11,\n    Y: 10,\n    Z: 11,\n    a: 10,\n    b: 10,\n    c: 8,\n    d: 10,\n    e: 10,\n    f: 6,\n    g: 10,\n    h: 10,\n    i: 4,\n    j: 6,\n    k: 9,\n    l: 4,\n    m: 16,\n    n: 10,\n    o: 10,\n    p: 10,\n    q: 10,\n    r: 7,\n    s: 8,\n    t: 6,\n    u: 10,\n    v: 9,\n    w: 13,\n    x: 9,\n    y: 9,\n    z: 8,\n    '!': 6,\n    '@': 16,\n    '#': 13,\n    $: 10,\n    '%': 17,\n    '^': 13,\n    '&': 12,\n    '*': 10,\n    '(': 7,\n    ')': 7,\n    _: 10,\n    '-': 7,\n    '+': 13,\n    '=': 13,\n    ',': 6,\n    '.': 6,\n    '/': 7,\n    \"'\": 4,\n    ':': 7,\n    '|': 7,\n    '?': 9,\n    ';': 7,\n    '<': 13,\n    '>': 13\n};\n\nclass CardComponent {\n    constructor(element, cd, zone, platformId) {\n        this.cd = cd;\n        this.zone = zone;\n        this.platformId = platformId;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.value = '';\n        this.textFontSize = 12;\n        this.textTransform = '';\n        this.initialized = false;\n        this.bandHeight = 10;\n        this.textPadding = [10, 20, 5, 20];\n        this.labelFontSize = 15;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.scaleTextSSR();\n        }\n    }\n    ngOnDestroy() {\n        if (isPlatformBrowser(this.platformId)) {\n            cancelAnimationFrame(this.animationReq);\n        }\n    }\n    update() {\n        this.zone.run(() => {\n            const hasValue = this.data && typeof this.data.value !== 'undefined';\n            const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n            const labelFormatting = this.labelFormatting || (card => escapeLabel(trimLabel(card.label, 55)));\n            this.transform = `translate(${this.x} , ${this.y})`;\n            this.textWidth = Math.max(0, this.width) - this.textPadding[1] - this.textPadding[3];\n            this.cardWidth = Math.max(0, this.width);\n            this.cardHeight = Math.max(0, this.height);\n            this.label = this.label ? this.label : this.data.name;\n            const cardData = {\n                label: this.label,\n                data: this.data,\n                value: this.data.value\n            };\n            this.formattedLabel = labelFormatting(cardData);\n            this.transformBand = `translate(0 , ${this.cardHeight - this.bandHeight})`;\n            const value = hasValue ? valueFormatting(cardData) : '';\n            this.value = this.paddedValue(value);\n            this.setPadding();\n            this.bandPath = roundedRect(0, 0, this.cardWidth, this.bandHeight, 3, [false, false, true, true]);\n            setTimeout(() => {\n                if (isPlatformBrowser(this.platformId)) {\n                    this.scaleText();\n                }\n                this.value = value;\n                if (hasValue && !this.initialized) {\n                    setTimeout(() => this.startCount(), 20);\n                }\n            }, 8);\n        });\n    }\n    paddedValue(value) {\n        if (this.medianSize && this.medianSize > value.length) {\n            value += '\\u2007'.repeat(this.medianSize - value.length);\n        }\n        return value;\n    }\n    startCount() {\n        if (!this.initialized && this.animations) {\n            cancelAnimationFrame(this.animationReq);\n            const val = this.data.value;\n            const decs = decimalChecker(val);\n            const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n            const callback = ({ value, finished }) => {\n                this.zone.run(() => {\n                    value = finished ? val : value;\n                    this.value = valueFormatting({ label: this.label, data: this.data, value });\n                    if (!finished) {\n                        this.value = this.paddedValue(this.value);\n                    }\n                    this.cd.markForCheck();\n                });\n            };\n            this.animationReq = count(0, val, decs, 1, callback);\n            this.initialized = true;\n        }\n    }\n    scaleText() {\n        this.zone.run(() => {\n            const { width, height } = this.textEl.nativeElement.getBoundingClientRect();\n            if (width === 0 || height === 0) {\n                return;\n            }\n            const textPadding = (this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8);\n            const availableWidth = this.cardWidth - 2 * textPadding;\n            const availableHeight = this.cardHeight / 3;\n            const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n            this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n            this.labelFontSize = Math.min(this.textFontSize, 15);\n            this.setPadding();\n            this.cd.markForCheck();\n        });\n    }\n    scaleTextSSR() {\n        const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, this.value, 10);\n        const height = 18;\n        const textPadding = (this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8);\n        const availableWidth = this.cardWidth - 2 * textPadding;\n        const availableHeight = this.cardHeight / 3;\n        const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n        this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n        this.labelFontSize = Math.min(this.textFontSize, 15);\n        this.setPadding();\n    }\n    setPadding() {\n        this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n        const padding = this.cardHeight / 2;\n        this.textPadding[0] = padding - this.textFontSize - this.labelFontSize / 2;\n        this.textPadding[2] = padding - this.labelFontSize;\n    }\n    onClick() {\n        this.select.emit(this.data);\n    }\n}\nCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CardComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CardComponent, selector: \"g[ngx-charts-card]\", inputs: { color: \"color\", bandColor: \"bandColor\", textColor: \"textColor\", x: \"x\", y: \"y\", width: \"width\", height: \"height\", label: \"label\", data: \"data\", medianSize: \"medianSize\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", animations: \"animations\" }, outputs: { select: \"select\" }, viewQueries: [{ propertyName: \"textEl\", first: true, predicate: [\"textEl\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\" (click)=\"onClick()\">\n      <svg:rect class=\"card\" [style.fill]=\"color\" [attr.width]=\"cardWidth\" [attr.height]=\"cardHeight\" rx=\"3\" ry=\"3\" />\n      <svg:path\n        *ngIf=\"bandColor && bandColor !== color\"\n        class=\"card-band\"\n        [attr.fill]=\"bandColor\"\n        [attr.transform]=\"transformBand\"\n        stroke=\"none\"\n        [attr.d]=\"bandPath\"\n      />\n      <title>{{ label }}</title>\n      <svg:foreignObject\n        class=\"trimmed-label\"\n        x=\"5\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"cardHeight - textPadding[2]\"\n        [attr.width]=\"textWidth\"\n        [attr.height]=\"labelFontSize + textPadding[2]\"\n        alignment-baseline=\"hanging\"\n      >\n        <xhtml:p\n          [style.color]=\"textColor\"\n          [style.fontSize.px]=\"labelFontSize\"\n          [style.lineHeight.px]=\"labelFontSize\"\n          [innerHTML]=\"formattedLabel\"\n        >\n        </xhtml:p>\n      </svg:foreignObject>\n      <svg:text\n        #textEl\n        class=\"value-text\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"textPadding[0]\"\n        [style.fill]=\"textColor\"\n        text-anchor=\"start\"\n        alignment-baseline=\"hanging\"\n        [style.font-size.pt]=\"textFontSize\"\n      >\n        {{ value }}\n      </svg:text>\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CardComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-card]',\n                    template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\" (click)=\"onClick()\">\n      <svg:rect class=\"card\" [style.fill]=\"color\" [attr.width]=\"cardWidth\" [attr.height]=\"cardHeight\" rx=\"3\" ry=\"3\" />\n      <svg:path\n        *ngIf=\"bandColor && bandColor !== color\"\n        class=\"card-band\"\n        [attr.fill]=\"bandColor\"\n        [attr.transform]=\"transformBand\"\n        stroke=\"none\"\n        [attr.d]=\"bandPath\"\n      />\n      <title>{{ label }}</title>\n      <svg:foreignObject\n        class=\"trimmed-label\"\n        x=\"5\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"cardHeight - textPadding[2]\"\n        [attr.width]=\"textWidth\"\n        [attr.height]=\"labelFontSize + textPadding[2]\"\n        alignment-baseline=\"hanging\"\n      >\n        <xhtml:p\n          [style.color]=\"textColor\"\n          [style.fontSize.px]=\"labelFontSize\"\n          [style.lineHeight.px]=\"labelFontSize\"\n          [innerHTML]=\"formattedLabel\"\n        >\n        </xhtml:p>\n      </svg:foreignObject>\n      <svg:text\n        #textEl\n        class=\"value-text\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"textPadding[0]\"\n        [style.fill]=\"textColor\"\n        text-anchor=\"start\"\n        alignment-baseline=\"hanging\"\n        [style.font-size.pt]=\"textFontSize\"\n      >\n        {{ value }}\n      </svg:text>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { color: [{\n                type: Input\n            }], bandColor: [{\n                type: Input\n            }], textColor: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], medianSize: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], textEl: [{\n                type: ViewChild,\n                args: ['textEl', { static: false }]\n            }] } });\n\n/**\n * Converts a hex to RGB\n *\n * @export\n */\nfunction hexToRgb(value) {\n    // deprecated, use d3.color()\n    return d3_color.rgb(value);\n}\n/**\n * Accepts a color (string) and returns a inverted hex color (string)\n * http://stackoverflow.com/questions/9600295/automatically-change-text-color-to-assure-readability\n *\n * @export\n */\nfunction invertColor(value) {\n    const color = d3_color.rgb(value);\n    const { r, g, b, opacity } = color;\n    if (opacity === 0) {\n        return color.toString();\n    }\n    const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n    const depth = yiq >= 128 ? -0.8 : 0.8;\n    return shadeRGBColor(color, depth);\n}\n/**\n * Given a rgb, it will darken/lighten\n * http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\n *\n * @export\n * @param \\{ r, g, b }\n */\nfunction shadeRGBColor({ r, g, b }, percent) {\n    const t = percent < 0 ? 0 : 255;\n    const p = percent < 0 ? percent * -1 : percent;\n    r = Math.round((t - r) * p) + r;\n    g = Math.round((t - g) * p) + g;\n    b = Math.round((t - b) * p) + b;\n    return `rgb(${r}, ${g}, ${b})`;\n}\n\nclass CardSeriesComponent {\n    constructor() {\n        this.innerPadding = 15;\n        this.emptyColor = 'rgba(0, 0, 0, 0)';\n        this.animations = true;\n        this.select = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        if (this.data.length > 2) {\n            const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n            const sortedLengths = this.data\n                .map(d => {\n                const hasValue = d && d.data && typeof d.data.value !== 'undefined' && d.data.value !== null;\n                return hasValue\n                    ? valueFormatting({\n                        data: d.data,\n                        label: d ? d.data.name : '',\n                        value: d && d.data ? d.data.value : ''\n                    }).length\n                    : 0;\n            })\n                .sort((a, b) => b - a);\n            const idx = Math.ceil(this.data.length / 2);\n            this.medianSize = sortedLengths[idx];\n        }\n        const cards = this.getCards();\n        this.cards = cards.filter(d => d.data.value !== null);\n        this.emptySlots = cards.filter(d => d.data.value === null);\n    }\n    getCards() {\n        const yPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[0] + this.innerPadding[2];\n        const xPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[1] + this.innerPadding[3];\n        return this.data.map((d, index) => {\n            let label = d.data.name;\n            if (label && label.constructor.name === 'Date') {\n                label = label.toLocaleDateString();\n            }\n            else {\n                label = label ? label.toLocaleString() : label;\n            }\n            const value = d.data.value;\n            const valueColor = label ? this.colors.getColor(label) : this.emptyColor;\n            const color = this.cardColor || valueColor || '#000';\n            return {\n                x: d.x,\n                y: d.y,\n                width: d.width - xPadding,\n                height: d.height - yPadding,\n                color,\n                bandColor: this.bandColor || valueColor,\n                textColor: this.textColor || invertColor(color),\n                label,\n                data: d.data,\n                tooltipText: `${label}: ${value}`\n            };\n        });\n    }\n    trackBy(index, card) {\n        return card.label;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n}\nCardSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CardSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCardSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CardSeriesComponent, selector: \"g[ngx-charts-card-series]\", inputs: { data: \"data\", dims: \"dims\", colors: \"colors\", innerPadding: \"innerPadding\", cardColor: \"cardColor\", bandColor: \"bandColor\", emptyColor: \"emptyColor\", textColor: \"textColor\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:rect\n      *ngFor=\"let c of emptySlots; trackBy: trackBy\"\n      class=\"card-empty\"\n      [attr.x]=\"c.x\"\n      [attr.y]=\"c.y\"\n      [style.fill]=\"emptyColor\"\n      [attr.width]=\"c.width\"\n      [attr.height]=\"c.height\"\n      rx=\"3\"\n      ry=\"3\"\n    />\n    <svg:g\n      ngx-charts-card\n      *ngFor=\"let c of cards; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [color]=\"c.color\"\n      [bandColor]=\"c.bandColor\"\n      [textColor]=\"c.textColor\"\n      [data]=\"c.data\"\n      [label]=\"c.label\"\n      [medianSize]=\"medianSize\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n    />\n  `, isInline: true, components: [{ type: CardComponent, selector: \"g[ngx-charts-card]\", inputs: [\"color\", \"bandColor\", \"textColor\", \"x\", \"y\", \"width\", \"height\", \"label\", \"data\", \"medianSize\", \"valueFormatting\", \"labelFormatting\", \"animations\"], outputs: [\"select\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CardSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-card-series]',\n                    template: `\n    <svg:rect\n      *ngFor=\"let c of emptySlots; trackBy: trackBy\"\n      class=\"card-empty\"\n      [attr.x]=\"c.x\"\n      [attr.y]=\"c.y\"\n      [style.fill]=\"emptyColor\"\n      [attr.width]=\"c.width\"\n      [attr.height]=\"c.height\"\n      rx=\"3\"\n      ry=\"3\"\n    />\n    <svg:g\n      ngx-charts-card\n      *ngFor=\"let c of cards; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [color]=\"c.color\"\n      [bandColor]=\"c.bandColor\"\n      [textColor]=\"c.textColor\"\n      [data]=\"c.data\"\n      [label]=\"c.label\"\n      [medianSize]=\"medianSize\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n    />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], innerPadding: [{\n                type: Input\n            }], cardColor: [{\n                type: Input\n            }], bandColor: [{\n                type: Input\n            }], emptyColor: [{\n                type: Input\n            }], textColor: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nclass NumberCardComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.emptyColor = 'rgba(0, 0, 0, 0)';\n        this.innerPadding = 15;\n        this.margin = [10, 10, 10, 10];\n    }\n    get clickable() {\n        return !!this.select.observers.length;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.formatDates();\n        this.domain = this.getDomain();\n        this.setColors();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        const size = gridSize(this.dims, this.results.length, 150);\n        const N = size[0] * size[1];\n        const data = this.results.slice();\n        while (data.length < N) {\n            data.push({ value: null });\n        }\n        this.data = gridLayout(this.dims, data, 150, this.designatedTotal);\n    }\n    getDomain() {\n        return this.results.map(d => d.label);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n}\nNumberCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nNumberCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: NumberCardComponent, selector: \"ngx-charts-number-card\", inputs: { cardColor: \"cardColor\", bandColor: \"bandColor\", emptyColor: \"emptyColor\", innerPadding: \"innerPadding\", textColor: \"textColor\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", designatedTotal: \"designatedTotal\" }, usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"number-card chart\" [class.clickable]=\"clickable\">\n        <svg:g\n          ngx-charts-card-series\n          [colors]=\"colors\"\n          [cardColor]=\"cardColor\"\n          [bandColor]=\"bandColor\"\n          [textColor]=\"textColor\"\n          [emptyColor]=\"emptyColor\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [innerPadding]=\"innerPadding\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \"ngx-charts-number-card .cell .trimmed-label{font-size:12px;pointer-events:none;overflow:hidden;text-align:left;line-height:1em}ngx-charts-number-card .cell .trimmed-label p{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;width:100%;padding:0;margin:0}ngx-charts-number-card .cell .value-text{pointer-events:none}ngx-charts-number-card .number-card.clickable .cell .card,ngx-charts-number-card .number-card.clickable .cell .card-band{cursor:pointer}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: CardSeriesComponent, selector: \"g[ngx-charts-card-series]\", inputs: [\"data\", \"dims\", \"colors\", \"innerPadding\", \"cardColor\", \"bandColor\", \"emptyColor\", \"textColor\", \"valueFormatting\", \"labelFormatting\", \"animations\"], outputs: [\"select\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-number-card', template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"number-card chart\" [class.clickable]=\"clickable\">\n        <svg:g\n          ngx-charts-card-series\n          [colors]=\"colors\"\n          [cardColor]=\"cardColor\"\n          [bandColor]=\"bandColor\"\n          [textColor]=\"textColor\"\n          [emptyColor]=\"emptyColor\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [innerPadding]=\"innerPadding\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \"ngx-charts-number-card .cell .trimmed-label{font-size:12px;pointer-events:none;overflow:hidden;text-align:left;line-height:1em}ngx-charts-number-card .cell .trimmed-label p{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;width:100%;padding:0;margin:0}ngx-charts-number-card .cell .value-text{pointer-events:none}ngx-charts-number-card .number-card.clickable .cell .card,ngx-charts-number-card .number-card.clickable .cell .card-band{cursor:pointer}\\n\"] }]\n        }], propDecorators: { cardColor: [{\n                type: Input\n            }], bandColor: [{\n                type: Input\n            }], emptyColor: [{\n                type: Input\n            }], innerPadding: [{\n                type: Input\n            }], textColor: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], designatedTotal: [{\n                type: Input\n            }] } });\n\nclass NumberCardModule {\n}\nNumberCardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNumberCardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardModule, declarations: [CardComponent, CardSeriesComponent, NumberCardComponent], imports: [ChartCommonModule], exports: [CardComponent, CardSeriesComponent, NumberCardComponent] });\nNumberCardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [CardComponent, CardSeriesComponent, NumberCardComponent],\n                    exports: [CardComponent, CardSeriesComponent, NumberCardComponent]\n                }]\n        }] });\n\nclass TreeMapCellComponent {\n    constructor(element) {\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.initialized = false;\n        this.orientation = BarOrientation;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges() {\n        this.update();\n        this.valueFormatting = this.valueFormatting || (value => value.toLocaleString());\n        const labelFormatting = this.labelFormatting || (cell => escapeLabel(trimLabel(cell.label, 55)));\n        const cellData = {\n            data: this.data,\n            label: this.label,\n            value: this.value\n        };\n        this.formattedValue = this.valueFormatting(cellData.value);\n        this.formattedLabel = labelFormatting(cellData);\n        this.gradientId = 'grad' + id().toString();\n        this.gradientUrl = `url(#${this.gradientId})`;\n        this.gradientStops = this.getGradientStops();\n    }\n    update() {\n        if (this.initialized) {\n            this.animateToCurrentForm();\n        }\n        else {\n            if (this.animations) {\n                this.loadAnimation();\n            }\n            this.initialized = true;\n        }\n    }\n    loadAnimation() {\n        const node = select(this.element).select('.cell');\n        node.attr('opacity', 0).attr('x', this.x).attr('y', this.y);\n        this.animateToCurrentForm();\n    }\n    getTextColor() {\n        return invertColor(this.fill);\n    }\n    animateToCurrentForm() {\n        const node = select(this.element).select('.cell');\n        if (this.animations) {\n            node\n                .transition()\n                .duration(750)\n                .attr('opacity', 1)\n                .attr('x', this.x)\n                .attr('y', this.y)\n                .attr('width', this.width)\n                .attr('height', this.height);\n        }\n        else {\n            node.attr('opacity', 1).attr('x', this.x).attr('y', this.y).attr('width', this.width).attr('height', this.height);\n        }\n    }\n    onClick() {\n        this.select.emit(this.data);\n    }\n    getGradientStops() {\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: 0.3\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: 1\n            }\n        ];\n    }\n}\nTreeMapCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapCellComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nTreeMapCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TreeMapCellComponent, selector: \"g[ngx-charts-tree-map-cell]\", inputs: { data: \"data\", fill: \"fill\", x: \"x\", y: \"y\", width: \"width\", height: \"height\", label: \"label\", value: \"value\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", gradient: \"gradient\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g>\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"orientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n      <svg:foreignObject\n        *ngIf=\"width >= 70 && height >= 35\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"treemap-label\"\n        [style.pointer-events]=\"'none'\"\n      >\n        <xhtml:p [style.color]=\"getTextColor()\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\n          <xhtml:span class=\"treemap-label\" [innerHTML]=\"formattedLabel\"> </xhtml:span>\n          <xhtml:br />\n          <xhtml:span\n            *ngIf=\"animations\"\n            class=\"treemap-val\"\n            ngx-charts-count-up\n            [countTo]=\"value\"\n            [valueFormatting]=\"valueFormatting\"\n          >\n          </xhtml:span>\n          <xhtml:span *ngIf=\"!animations\" class=\"treemap-val\">\n            {{ formattedValue }}\n          </xhtml:span>\n        </xhtml:p>\n      </svg:foreignObject>\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }, { type: CountUpDirective, selector: \"[ngx-charts-count-up]\", inputs: [\"countDuration\", \"countPrefix\", \"countSuffix\", \"valueFormatting\", \"countDecimals\", \"countTo\", \"countFrom\"], outputs: [\"countChange\", \"countFinish\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapCellComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-tree-map-cell]',\n                    template: `\n    <svg:g>\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"orientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n      <svg:foreignObject\n        *ngIf=\"width >= 70 && height >= 35\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"treemap-label\"\n        [style.pointer-events]=\"'none'\"\n      >\n        <xhtml:p [style.color]=\"getTextColor()\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\n          <xhtml:span class=\"treemap-label\" [innerHTML]=\"formattedLabel\"> </xhtml:span>\n          <xhtml:br />\n          <xhtml:span\n            *ngIf=\"animations\"\n            class=\"treemap-val\"\n            ngx-charts-count-up\n            [countTo]=\"value\"\n            [valueFormatting]=\"valueFormatting\"\n          >\n          </xhtml:span>\n          <xhtml:span *ngIf=\"!animations\" class=\"treemap-val\">\n            {{ formattedValue }}\n          </xhtml:span>\n        </xhtml:p>\n      </svg:foreignObject>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nclass TreeMapCellSeriesComponent {\n    constructor() {\n        this.gradient = false;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.styleTypes = StyleTypes;\n        this.placementTypes = PlacementTypes;\n    }\n    ngOnChanges(changes) {\n        this.cells = this.getCells();\n    }\n    getCells() {\n        return this.data.children\n            .filter(d => {\n            return d.depth === 1;\n        })\n            .map((d, index) => {\n            const label = d.id;\n            return {\n                data: d.data,\n                x: d.x0,\n                y: d.y0,\n                width: d.x1 - d.x0,\n                height: d.y1 - d.y0,\n                fill: this.colors.getColor(label),\n                label,\n                value: d.value\n            };\n        });\n    }\n    getTooltipText({ label, value }) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    trackBy(index, item) {\n        return item.label;\n    }\n}\nTreeMapCellSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapCellSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nTreeMapCellSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TreeMapCellSeriesComponent, selector: \"g[ngx-charts-tree-map-cell-series]\", inputs: { data: \"data\", dims: \"dims\", colors: \"colors\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", gradient: \"gradient\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-tree-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [data]=\"c.data\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [label]=\"c.label\"\n      [value]=\"c.value\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"c.data\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: TreeMapCellComponent, selector: \"g[ngx-charts-tree-map-cell]\", inputs: [\"data\", \"fill\", \"x\", \"y\", \"width\", \"height\", \"label\", \"value\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"animations\"], outputs: [\"select\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapCellSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-tree-map-cell-series]',\n                    template: `\n    <svg:g\n      ngx-charts-tree-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [data]=\"c.data\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [label]=\"c.label\"\n      [value]=\"c.value\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"c.data\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nclass TreeMapComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.tooltipDisabled = false;\n        this.gradient = false;\n        this.select = new EventEmitter();\n        this.margin = [10, 10, 10, 10];\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.domain = this.getDomain();\n        this.treemap = treemap().size([this.dims.width, this.dims.height]);\n        const rootNode = {\n            name: 'root',\n            value: 0,\n            isRoot: true\n        };\n        const root = stratify()\n            .id(d => {\n            let label = d.name;\n            if (label.constructor.name === 'Date') {\n                label = label.toLocaleDateString();\n            }\n            else {\n                label = label.toLocaleString();\n            }\n            return label;\n        })\n            .parentId(d => (d.isRoot ? null : 'root'))([rootNode, ...this.results])\n            .sum(d => d.value);\n        this.data = this.treemap(root);\n        this.setColors();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getDomain() {\n        return this.results.map(d => d.name);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n}\nTreeMapComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nTreeMapComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TreeMapComponent, selector: \"ngx-charts-tree-map\", inputs: { results: \"results\", tooltipDisabled: \"tooltipDisabled\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", gradient: \"gradient\" }, outputs: { select: \"select\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\n        <svg:g\n          ngx-charts-tree-map-cell-series\n          [colors]=\"colors\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".tree-map .treemap-val{font-size:1.3em;padding-top:5px;display:inline-block}.tree-map .treemap-label p{display:table-cell;text-align:center;line-height:1.2em;vertical-align:middle}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: TreeMapCellSeriesComponent, selector: \"g[ngx-charts-tree-map-cell-series]\", inputs: [\"data\", \"dims\", \"colors\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-tree-map', template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\n        <svg:g\n          ngx-charts-tree-map-cell-series\n          [colors]=\"colors\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".tree-map .treemap-val{font-size:1.3em;padding-top:5px;display:inline-block}.tree-map .treemap-label p{display:table-cell;text-align:center;line-height:1.2em;vertical-align:middle}\\n\"] }]\n        }], propDecorators: { results: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass TreeMapModule {\n}\nTreeMapModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTreeMapModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapModule, declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent], imports: [ChartCommonModule], exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent] });\nTreeMapModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent],\n                    exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent]\n                }]\n        }] });\n\nvar ElementType;\n(function (ElementType) {\n    ElementType[\"Value\"] = \"value\";\n    ElementType[\"Units\"] = \"units\";\n})(ElementType || (ElementType = {}));\nclass LinearGaugeComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.min = 0;\n        this.max = 100;\n        this.value = 0;\n        this.margin = [10, 20, 10, 20];\n        this.valueResizeScale = 1;\n        this.unitsResizeScale = 1;\n        this.valueTextTransform = '';\n        this.valueTranslate = '';\n        this.unitsTextTransform = '';\n        this.unitsTranslate = '';\n        this.barOrientation = BarOrientation;\n    }\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        setTimeout(() => {\n            this.scaleText(ElementType.Value);\n            this.scaleText(ElementType.Units);\n        });\n    }\n    update() {\n        super.update();\n        this.hasPreviousValue = this.previousValue !== undefined;\n        this.max = Math.max(this.max, this.value);\n        this.min = Math.min(this.min, this.value);\n        if (this.hasPreviousValue) {\n            this.max = Math.max(this.max, this.previousValue);\n            this.min = Math.min(this.min, this.previousValue);\n        }\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.valueDomain = this.getValueDomain();\n        this.valueScale = this.getValueScale();\n        this.displayValue = this.getDisplayValue();\n        this.setColors();\n        const xOffset = this.margin[3] + this.dims.width / 2;\n        const yOffset = this.margin[0] + this.dims.height / 2;\n        this.transform = `translate(${xOffset}, ${yOffset})`;\n        this.transformLine = `translate(${this.margin[3] + this.valueScale(this.previousValue)}, ${yOffset})`;\n        this.valueTranslate = `translate(0, -15)`;\n        this.unitsTranslate = `translate(0, 15)`;\n        if (isPlatformServer(this.platformId)) {\n            this.scaleTextSSR('value');\n            this.scaleTextSSR('units');\n        }\n        else {\n            setTimeout(() => this.scaleText(ElementType.Value), 50);\n            setTimeout(() => this.scaleText(ElementType.Units), 50);\n        }\n    }\n    getValueDomain() {\n        return [this.min, this.max];\n    }\n    getValueScale() {\n        return scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    }\n    getDisplayValue() {\n        if (this.valueFormatting) {\n            return this.valueFormatting(this.value);\n        }\n        return this.value.toLocaleString();\n    }\n    scaleText(element, repeat = true) {\n        let el;\n        let resizeScale;\n        if (element === ElementType.Value) {\n            el = this.valueTextEl;\n            resizeScale = this.valueResizeScale;\n        }\n        else {\n            el = this.unitsTextEl;\n            resizeScale = this.unitsResizeScale;\n        }\n        const { width, height } = el.nativeElement.getBoundingClientRect();\n        if (width === 0 || height === 0)\n            return;\n        const oldScale = resizeScale;\n        const availableWidth = this.dims.width;\n        const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n        const resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;\n        const resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;\n        resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n        if (resizeScale !== oldScale) {\n            if (element === ElementType.Value) {\n                this.valueResizeScale = resizeScale;\n                this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n            }\n            else {\n                this.unitsResizeScale = resizeScale;\n                this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n            }\n            this.cd.markForCheck();\n            if (repeat && isPlatformBrowser(this.platformId)) {\n                setTimeout(() => {\n                    this.scaleText(element, false);\n                }, 50);\n            }\n        }\n    }\n    scaleTextSSR(element) {\n        let resizeScale = 1;\n        const value = element === 'value' ? this.displayValue : this.units;\n        const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, value, 10);\n        const height = 25;\n        const availableWidth = this.dims.width;\n        const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n        const resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;\n        const resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;\n        resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n        if (element === 'value') {\n            this.valueResizeScale = resizeScale;\n            this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n        }\n        else {\n            this.unitsResizeScale = resizeScale;\n            this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n        }\n        this.cd.markForCheck();\n    }\n    onClick() {\n        this.select.emit({\n            name: 'Value',\n            value: this.value\n        });\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, [this.value], this.customColors);\n    }\n}\nLinearGaugeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LinearGaugeComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nLinearGaugeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LinearGaugeComponent, selector: \"ngx-charts-linear-gauge\", inputs: { min: \"min\", max: \"max\", value: \"value\", units: \"units\", previousValue: \"previousValue\", valueFormatting: \"valueFormatting\" }, viewQueries: [{ propertyName: \"valueTextEl\", first: true, predicate: [\"valueTextEl\"], descendants: true }, { propertyName: \"unitsTextEl\", first: true, predicate: [\"unitsTextEl\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\" (click)=\"onClick()\">\n      <svg:g class=\"linear-gauge chart\">\n        <svg:g\n          ngx-charts-bar\n          class=\"background-bar\"\n          [width]=\"dims.width\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-bar\n          [width]=\"valueScale(value)\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [fill]=\"colors.getColor(units)\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"5\"\n          x2=\"0\"\n          y2=\"15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"-5\"\n          x2=\"0\"\n          y2=\"-15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:g [attr.transform]=\"transform\">\n          <svg:g [attr.transform]=\"valueTranslate\">\n            <svg:text\n              #valueTextEl\n              class=\"value\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"valueTextTransform\"\n              alignment-baseline=\"after-edge\"\n            >\n              {{ displayValue }}\n            </svg:text>\n          </svg:g>\n\n          <svg:g [attr.transform]=\"unitsTranslate\">\n            <svg:text\n              #unitsTextEl\n              class=\"units\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"unitsTextTransform\"\n              alignment-baseline=\"before-edge\"\n            >\n              {{ units }}\n            </svg:text>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".linear-gauge{cursor:pointer}.linear-gauge .background-bar path{fill:#0000000d}.linear-gauge .units{fill:#666}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: BarComponent, selector: \"g[ngx-charts-bar]\", inputs: [\"fill\", \"data\", \"width\", \"height\", \"x\", \"y\", \"orientation\", \"roundEdges\", \"gradient\", \"offset\", \"isActive\", \"stops\", \"animations\", \"ariaLabel\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LinearGaugeComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-linear-gauge', template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\" (click)=\"onClick()\">\n      <svg:g class=\"linear-gauge chart\">\n        <svg:g\n          ngx-charts-bar\n          class=\"background-bar\"\n          [width]=\"dims.width\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-bar\n          [width]=\"valueScale(value)\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [fill]=\"colors.getColor(units)\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"5\"\n          x2=\"0\"\n          y2=\"15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"-5\"\n          x2=\"0\"\n          y2=\"-15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:g [attr.transform]=\"transform\">\n          <svg:g [attr.transform]=\"valueTranslate\">\n            <svg:text\n              #valueTextEl\n              class=\"value\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"valueTextTransform\"\n              alignment-baseline=\"after-edge\"\n            >\n              {{ displayValue }}\n            </svg:text>\n          </svg:g>\n\n          <svg:g [attr.transform]=\"unitsTranslate\">\n            <svg:text\n              #unitsTextEl\n              class=\"units\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"unitsTextTransform\"\n              alignment-baseline=\"before-edge\"\n            >\n              {{ units }}\n            </svg:text>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".linear-gauge{cursor:pointer}.linear-gauge .background-bar path{fill:#0000000d}.linear-gauge .units{fill:#666}\\n\"] }]\n        }], propDecorators: { min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], units: [{\n                type: Input\n            }], previousValue: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], valueTextEl: [{\n                type: ViewChild,\n                args: ['valueTextEl']\n            }], unitsTextEl: [{\n                type: ViewChild,\n                args: ['unitsTextEl']\n            }] } });\n\nclass GaugeArcComponent {\n    constructor() {\n        this.isActive = false;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    tooltipText(arc) {\n        const label = formatLabel(arc.data.name);\n        let val;\n        if (this.valueFormatting) {\n            val = this.valueFormatting(arc.data.value);\n        }\n        else {\n            val = formatLabel(arc.data.value);\n        }\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n    }\n}\nGaugeArcComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeArcComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nGaugeArcComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GaugeArcComponent, selector: \"g[ngx-charts-gauge-arc]\", inputs: { backgroundArc: \"backgroundArc\", valueArc: \"valueArc\", cornerRadius: \"cornerRadius\", colors: \"colors\", isActive: \"isActive\", tooltipDisabled: \"tooltipDisabled\", valueFormatting: \"valueFormatting\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-pie-arc\n      class=\"background-arc\"\n      [startAngle]=\"0\"\n      [endAngle]=\"backgroundArc.endAngle\"\n      [innerRadius]=\"backgroundArc.innerRadius\"\n      [outerRadius]=\"backgroundArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [data]=\"backgroundArc.data\"\n      [animate]=\"false\"\n      [pointerEvents]=\"false\"\n    ></svg:g>\n    <svg:g\n      ngx-charts-pie-arc\n      [startAngle]=\"0\"\n      [endAngle]=\"valueArc.endAngle\"\n      [innerRadius]=\"valueArc.innerRadius\"\n      [outerRadius]=\"valueArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [fill]=\"colors.getColor(valueArc.data.name)\"\n      [data]=\"valueArc.data\"\n      [animate]=\"animations\"\n      [isActive]=\"isActive\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(valueArc)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"valueArc.data\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: PieArcComponent, selector: \"g[ngx-charts-pie-arc]\", inputs: [\"fill\", \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"value\", \"max\", \"data\", \"explodeSlices\", \"gradient\", \"animate\", \"pointerEvents\", \"isActive\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }], directives: [{ type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeArcComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-gauge-arc]',\n                    template: `\n    <svg:g\n      ngx-charts-pie-arc\n      class=\"background-arc\"\n      [startAngle]=\"0\"\n      [endAngle]=\"backgroundArc.endAngle\"\n      [innerRadius]=\"backgroundArc.innerRadius\"\n      [outerRadius]=\"backgroundArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [data]=\"backgroundArc.data\"\n      [animate]=\"false\"\n      [pointerEvents]=\"false\"\n    ></svg:g>\n    <svg:g\n      ngx-charts-pie-arc\n      [startAngle]=\"0\"\n      [endAngle]=\"valueArc.endAngle\"\n      [innerRadius]=\"valueArc.innerRadius\"\n      [outerRadius]=\"valueArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [fill]=\"colors.getColor(valueArc.data.name)\"\n      [data]=\"valueArc.data\"\n      [animate]=\"animations\"\n      [isActive]=\"isActive\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(valueArc)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"valueArc.data\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { backgroundArc: [{\n                type: Input\n            }], valueArc: [{\n                type: Input\n            }], cornerRadius: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass GaugeAxisComponent {\n    constructor() {\n        this.rotate = '';\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.rotationAngle = -90 + this.startAngle;\n        this.rotate = `rotate(${this.rotationAngle})`;\n        this.ticks = this.getTicks();\n    }\n    getTicks() {\n        const bigTickSegment = this.angleSpan / this.bigSegments;\n        const smallTickSegment = bigTickSegment / this.smallSegments;\n        const tickLength = 20;\n        const ticks = {\n            big: [],\n            small: []\n        };\n        const startDistance = this.radius + 10;\n        const textDist = startDistance + tickLength + 10;\n        for (let i = 0; i <= this.bigSegments; i++) {\n            const angleDeg = i * bigTickSegment;\n            const angle = (angleDeg * Math.PI) / 180;\n            const textAnchor = this.getTextAnchor(angleDeg);\n            let skip = false;\n            if (i === 0 && this.angleSpan === 360) {\n                skip = true;\n            }\n            if (!skip) {\n                let text = Number.parseFloat(this.valueScale.invert(angleDeg).toString()).toLocaleString();\n                if (this.tickFormatting) {\n                    text = this.tickFormatting(text);\n                }\n                ticks.big.push({\n                    line: this.getTickPath(startDistance, tickLength, angle),\n                    textAnchor,\n                    text,\n                    textTransform: `\n            translate(${textDist * Math.cos(angle)}, ${textDist * Math.sin(angle)}) rotate(${-this.rotationAngle})\n          `\n                });\n            }\n            if (i === this.bigSegments) {\n                continue;\n            }\n            for (let j = 1; j <= this.smallSegments; j++) {\n                const smallAngleDeg = angleDeg + j * smallTickSegment;\n                const smallAngle = (smallAngleDeg * Math.PI) / 180;\n                ticks.small.push({\n                    line: this.getTickPath(startDistance, tickLength / 2, smallAngle)\n                });\n            }\n        }\n        return ticks;\n    }\n    getTextAnchor(angle) {\n        // [0, 45] = 'middle';\n        // [46, 135] = 'start';\n        // [136, 225] = 'middle';\n        // [226, 315] = 'end';\n        angle = (this.startAngle + angle) % 360;\n        let textAnchor = TextAnchor.Middle;\n        if (angle > 45 && angle <= 135) {\n            textAnchor = TextAnchor.Start;\n        }\n        else if (angle > 225 && angle <= 315) {\n            textAnchor = TextAnchor.End;\n        }\n        return textAnchor;\n    }\n    getTickPath(startDistance, tickLength, angle) {\n        const y1 = startDistance * Math.sin(angle);\n        const y2 = (startDistance + tickLength) * Math.sin(angle);\n        const x1 = startDistance * Math.cos(angle);\n        const x2 = (startDistance + tickLength) * Math.cos(angle);\n        const points = [\n            { x: x1, y: y1 },\n            { x: x2, y: y2 }\n        ];\n        const lineGenerator = line()\n            .x(d => d.x)\n            .y(d => d.y);\n        return lineGenerator(points);\n    }\n}\nGaugeAxisComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeAxisComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nGaugeAxisComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GaugeAxisComponent, selector: \"g[ngx-charts-gauge-axis]\", inputs: { bigSegments: \"bigSegments\", smallSegments: \"smallSegments\", min: \"min\", max: \"max\", angleSpan: \"angleSpan\", startAngle: \"startAngle\", radius: \"radius\", valueScale: \"valueScale\", tickFormatting: \"tickFormatting\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.transform]=\"rotate\">\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:text\n          [style.textAnchor]=\"tick.textAnchor\"\n          [attr.transform]=\"tick.textTransform\"\n          alignment-baseline=\"central\"\n        >\n          {{ tick.text }}\n        </svg:text>\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.small\" class=\"gauge-tick gauge-tick-small\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeAxisComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-gauge-axis]',\n                    template: `\n    <svg:g [attr.transform]=\"rotate\">\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:text\n          [style.textAnchor]=\"tick.textAnchor\"\n          [attr.transform]=\"tick.textTransform\"\n          alignment-baseline=\"central\"\n        >\n          {{ tick.text }}\n        </svg:text>\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.small\" class=\"gauge-tick gauge-tick-small\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { bigSegments: [{\n                type: Input\n            }], smallSegments: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], angleSpan: [{\n                type: Input\n            }], startAngle: [{\n                type: Input\n            }], radius: [{\n                type: Input\n            }], valueScale: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }] } });\n\nclass GaugeComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.min = 0;\n        this.max = 100;\n        this.bigSegments = 10;\n        this.smallSegments = 5;\n        this.showAxis = true;\n        this.startAngle = -120;\n        this.angleSpan = 240;\n        this.activeEntries = [];\n        this.tooltipDisabled = false;\n        this.showText = true;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.resizeScale = 1;\n        this.rotation = '';\n        this.textTransform = 'scale(1, 1)';\n        this.cornerRadius = 10;\n    }\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        setTimeout(() => this.scaleText());\n    }\n    update() {\n        super.update();\n        if (!this.showAxis) {\n            if (!this.margin) {\n                this.margin = [10, 20, 10, 20];\n            }\n        }\n        else {\n            if (!this.margin) {\n                this.margin = [60, 100, 60, 100];\n            }\n        }\n        // make the starting angle positive\n        if (this.startAngle < 0) {\n            this.startAngle = (this.startAngle % 360) + 360;\n        }\n        this.angleSpan = Math.min(this.angleSpan, 360);\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showLegend: this.legend,\n            legendPosition: this.legendPosition\n        });\n        this.domain = this.getDomain();\n        this.valueDomain = this.getValueDomain();\n        this.valueScale = this.getValueScale();\n        this.displayValue = this.getDisplayValue();\n        this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2;\n        this.arcs = this.getArcs();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        const xOffset = this.margin[3] + this.dims.width / 2;\n        const yOffset = this.margin[0] + this.dims.height / 2;\n        this.transform = `translate(${xOffset}, ${yOffset})`;\n        this.rotation = `rotate(${this.startAngle})`;\n        setTimeout(() => this.scaleText(), 50);\n    }\n    getArcs() {\n        const arcs = [];\n        const availableRadius = this.outerRadius * 0.7;\n        const radiusPerArc = Math.min(availableRadius / this.results.length, 10);\n        const arcWidth = radiusPerArc * 0.7;\n        this.textRadius = this.outerRadius - this.results.length * radiusPerArc;\n        this.cornerRadius = Math.floor(arcWidth / 2);\n        let i = 0;\n        for (const d of this.results) {\n            const outerRadius = this.outerRadius - i * radiusPerArc;\n            const innerRadius = outerRadius - arcWidth;\n            const backgroundArc = {\n                endAngle: (this.angleSpan * Math.PI) / 180,\n                innerRadius,\n                outerRadius,\n                data: {\n                    value: this.max,\n                    name: d.name\n                }\n            };\n            const valueArc = {\n                endAngle: (Math.min(this.valueScale(d.value), this.angleSpan) * Math.PI) / 180,\n                innerRadius,\n                outerRadius,\n                data: {\n                    value: d.value,\n                    name: d.name\n                }\n            };\n            const arc = {\n                backgroundArc,\n                valueArc\n            };\n            arcs.push(arc);\n            i++;\n        }\n        return arcs;\n    }\n    getDomain() {\n        return this.results.map(d => d.name);\n    }\n    getValueDomain() {\n        const values = this.results.map(d => d.value);\n        const dataMin = Math.min(...values);\n        const dataMax = Math.max(...values);\n        if (this.min !== undefined) {\n            this.min = Math.min(this.min, dataMin);\n        }\n        else {\n            this.min = dataMin;\n        }\n        if (this.max !== undefined) {\n            this.max = Math.max(this.max, dataMax);\n        }\n        else {\n            this.max = dataMax;\n        }\n        return [this.min, this.max];\n    }\n    getValueScale() {\n        return scaleLinear().range([0, this.angleSpan]).nice().domain(this.valueDomain);\n    }\n    getDisplayValue() {\n        const value = this.results.map(d => d.value).reduce((a, b) => a + b, 0);\n        if (this.textValue && 0 !== this.textValue.length) {\n            return this.textValue.toLocaleString();\n        }\n        if (this.valueFormatting) {\n            return this.valueFormatting(value);\n        }\n        return value.toLocaleString();\n    }\n    scaleText(repeat = true) {\n        if (!this.showText) {\n            return;\n        }\n        const { width } = this.textEl.nativeElement.getBoundingClientRect();\n        const oldScale = this.resizeScale;\n        if (width === 0) {\n            this.resizeScale = 1;\n        }\n        else {\n            const availableSpace = this.textRadius;\n            this.resizeScale = Math.floor((availableSpace / (width / this.resizeScale)) * 100) / 100;\n        }\n        if (this.resizeScale !== oldScale) {\n            this.textTransform = `scale(${this.resizeScale}, ${this.resizeScale})`;\n            this.cd.markForCheck();\n            if (repeat) {\n                setTimeout(() => this.scaleText(false), 50);\n            }\n        }\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    getLegendOptions() {\n        return {\n            scaleType: ScaleType.Ordinal,\n            colors: this.colors,\n            domain: this.domain,\n            title: this.legendTitle,\n            position: this.legendPosition\n        };\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name && entry.series === d.series;\n        });\n        return item !== undefined;\n    }\n    trackBy(index, item) {\n        return item.valueArc.data.name;\n    }\n}\nGaugeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nGaugeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GaugeComponent, selector: \"ngx-charts-gauge\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", min: \"min\", max: \"max\", textValue: \"textValue\", units: \"units\", bigSegments: \"bigSegments\", smallSegments: \"smallSegments\", results: \"results\", showAxis: \"showAxis\", startAngle: \"startAngle\", angleSpan: \"angleSpan\", activeEntries: \"activeEntries\", axisTickFormatting: \"axisTickFormatting\", tooltipDisabled: \"tooltipDisabled\", valueFormatting: \"valueFormatting\", showText: \"showText\", margin: \"margin\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], viewQueries: [{ propertyName: \"textEl\", first: true, predicate: [\"textEl\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"gauge chart\">\n        <svg:g *ngFor=\"let arc of arcs; trackBy: trackBy\" [attr.transform]=\"rotation\">\n          <svg:g\n            ngx-charts-gauge-arc\n            [backgroundArc]=\"arc.backgroundArc\"\n            [valueArc]=\"arc.valueArc\"\n            [cornerRadius]=\"cornerRadius\"\n            [colors]=\"colors\"\n            [isActive]=\"isActive(arc.valueArc.data)\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [valueFormatting]=\"valueFormatting\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          ></svg:g>\n        </svg:g>\n\n        <svg:g\n          ngx-charts-gauge-axis\n          *ngIf=\"showAxis\"\n          [bigSegments]=\"bigSegments\"\n          [smallSegments]=\"smallSegments\"\n          [min]=\"min\"\n          [max]=\"max\"\n          [radius]=\"outerRadius\"\n          [angleSpan]=\"angleSpan\"\n          [valueScale]=\"valueScale\"\n          [startAngle]=\"startAngle\"\n          [tickFormatting]=\"axisTickFormatting\"\n        ></svg:g>\n\n        <svg:text\n          #textEl\n          *ngIf=\"showText\"\n          [style.textAnchor]=\"'middle'\"\n          [attr.transform]=\"textTransform\"\n          alignment-baseline=\"central\"\n        >\n          <tspan x=\"0\" dy=\"0\">{{ displayValue }}</tspan>\n          <tspan x=\"0\" dy=\"1.2em\">{{ units }}</tspan>\n        </svg:text>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".gauge .background-arc path{fill:#0000000d}.gauge .gauge-tick path{stroke:#666}.gauge .gauge-tick text{font-size:12px;fill:#666;font-weight:700}.gauge .gauge-tick-large path{stroke-width:2px}.gauge .gauge-tick-small path{stroke-width:1px}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: GaugeArcComponent, selector: \"g[ngx-charts-gauge-arc]\", inputs: [\"backgroundArc\", \"valueArc\", \"cornerRadius\", \"colors\", \"isActive\", \"tooltipDisabled\", \"valueFormatting\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: GaugeAxisComponent, selector: \"g[ngx-charts-gauge-axis]\", inputs: [\"bigSegments\", \"smallSegments\", \"min\", \"max\", \"angleSpan\", \"startAngle\", \"radius\", \"valueScale\", \"tickFormatting\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-gauge', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"gauge chart\">\n        <svg:g *ngFor=\"let arc of arcs; trackBy: trackBy\" [attr.transform]=\"rotation\">\n          <svg:g\n            ngx-charts-gauge-arc\n            [backgroundArc]=\"arc.backgroundArc\"\n            [valueArc]=\"arc.valueArc\"\n            [cornerRadius]=\"cornerRadius\"\n            [colors]=\"colors\"\n            [isActive]=\"isActive(arc.valueArc.data)\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [valueFormatting]=\"valueFormatting\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          ></svg:g>\n        </svg:g>\n\n        <svg:g\n          ngx-charts-gauge-axis\n          *ngIf=\"showAxis\"\n          [bigSegments]=\"bigSegments\"\n          [smallSegments]=\"smallSegments\"\n          [min]=\"min\"\n          [max]=\"max\"\n          [radius]=\"outerRadius\"\n          [angleSpan]=\"angleSpan\"\n          [valueScale]=\"valueScale\"\n          [startAngle]=\"startAngle\"\n          [tickFormatting]=\"axisTickFormatting\"\n        ></svg:g>\n\n        <svg:text\n          #textEl\n          *ngIf=\"showText\"\n          [style.textAnchor]=\"'middle'\"\n          [attr.transform]=\"textTransform\"\n          alignment-baseline=\"central\"\n        >\n          <tspan x=\"0\" dy=\"0\">{{ displayValue }}</tspan>\n          <tspan x=\"0\" dy=\"1.2em\">{{ units }}</tspan>\n        </svg:text>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{-webkit-animation:chartFadeIn linear .6s;animation:chartFadeIn linear .6s}@-webkit-keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".gauge .background-arc path{fill:#0000000d}.gauge .gauge-tick path{stroke:#666}.gauge .gauge-tick text{font-size:12px;fill:#666;font-weight:700}.gauge .gauge-tick-large path{stroke-width:2px}.gauge .gauge-tick-small path{stroke-width:1px}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], textValue: [{\n                type: Input\n            }], units: [{\n                type: Input\n            }], bigSegments: [{\n                type: Input\n            }], smallSegments: [{\n                type: Input\n            }], results: [{\n                type: Input\n            }], showAxis: [{\n                type: Input\n            }], startAngle: [{\n                type: Input\n            }], angleSpan: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], axisTickFormatting: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], showText: [{\n                type: Input\n            }], margin: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], textEl: [{\n                type: ViewChild,\n                args: ['textEl']\n            }] } });\n\nclass GaugeModule {\n}\nGaugeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nGaugeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeModule, declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent], imports: [ChartCommonModule, PieChartModule, BarChartModule], exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent] });\nGaugeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeModule, imports: [[ChartCommonModule, PieChartModule, BarChartModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule, PieChartModule, BarChartModule],\n                    declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent],\n                    exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent]\n                }]\n        }] });\n\n// The export is needed here to generate a valid polyfills.metadata.json file\nfunction ngxChartsPolyfills() {\n    // IE11 fix\n    // Ref: https://github.com/swimlane/ngx-charts/issues/386\n    if (typeof SVGElement !== 'undefined' && typeof SVGElement.prototype.contains === 'undefined') {\n        SVGElement.prototype.contains = HTMLDivElement.prototype.contains;\n    }\n}\n\nclass NgxChartsModule {\n    constructor() {\n        ngxChartsPolyfills();\n    }\n}\nNgxChartsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NgxChartsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxChartsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NgxChartsModule, exports: [ChartCommonModule,\n        AreaChartModule,\n        BarChartModule,\n        BoxChartModule,\n        BubbleChartModule,\n        HeatMapModule,\n        LineChartModule,\n        PolarChartModule,\n        NumberCardModule,\n        PieChartModule,\n        TreeMapModule,\n        GaugeModule] });\nNgxChartsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NgxChartsModule, imports: [ChartCommonModule,\n        AreaChartModule,\n        BarChartModule,\n        BoxChartModule,\n        BubbleChartModule,\n        HeatMapModule,\n        LineChartModule,\n        PolarChartModule,\n        NumberCardModule,\n        PieChartModule,\n        TreeMapModule,\n        GaugeModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NgxChartsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [\n                        ChartCommonModule,\n                        AreaChartModule,\n                        BarChartModule,\n                        BoxChartModule,\n                        BubbleChartModule,\n                        HeatMapModule,\n                        LineChartModule,\n                        PolarChartModule,\n                        NumberCardModule,\n                        PieChartModule,\n                        TreeMapModule,\n                        GaugeModule\n                    ]\n                }]\n        }], ctorParameters: function () { return []; } });\n\nfunction tickFormat(fieldType, groupByType) {\n    return function (label) {\n        if (label === 'No Value' || label === 'Other') {\n            return label;\n        }\n        if (fieldType === 'date' && groupByType === 'groupBy') {\n            const formatter = timeFormat('MM/DD/YYYY');\n            return formatter(label);\n        }\n        return label.toString();\n    };\n}\n\n/*\n * Public API Surface of ngx-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AdvancedLegendComponent, AdvancedPieChartComponent, AreaChartComponent, AreaChartModule, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaComponent, AreaSeriesComponent, AxesModule, AxisLabelComponent, BarChartModule, BarChartType, BarComponent, BarHorizontal2DComponent, BarHorizontalComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarLabelComponent, BarOrientation, BarVertical2DComponent, BarVerticalComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BaseChartComponent, BoxChartComponent, BoxChartModule, BoxComponent, BoxSeriesComponent, BubbleChartComponent, BubbleChartModule, BubbleSeriesComponent, CardComponent, CardSeriesComponent, ChartCommonModule, ChartComponent, CircleComponent, CircleSeriesComponent, ColorHelper, CountUpDirective, D0Types, GaugeArcComponent, GaugeAxisComponent, GaugeComponent, GaugeModule, GridPanelComponent, GridPanelSeriesComponent, HeatCellSeriesComponent, HeatMapCellComponent, HeatMapComponent, HeatMapModule, LegendComponent, LegendEntryComponent, LegendPosition, LegendType, LineChartComponent, LineChartModule, LineComponent, LineSeriesComponent, LinearGaugeComponent, NgxChartsModule, NumberCardComponent, NumberCardModule, Orientation, PieArcComponent, PieChartComponent, PieChartModule, PieGridComponent, PieGridSeriesComponent, PieLabelComponent, PieSeriesComponent, PlacementTypes, PolarChartComponent, PolarChartModule, PolarSeriesComponent, ScaleLegendComponent, ScaleType, SeriesHorizontal, SeriesType, SeriesVerticalComponent, ShowTypes, StyleTypes, SvgLinearGradientComponent, SvgRadialGradientComponent, TextAnchor, Timeline, TooltipArea, TooltipContentComponent, TooltipDirective, TooltipModule, TooltipService, TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent, TreeMapModule, VisibilityObserver, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent, calculateViewDimensions, colorSets, count, decimalChecker, escapeLabel, formatLabel, getDomain, getScale, getScaleType, getUniqueXDomainValues, getXDomainArray, gridLayout, gridSize, hexToRgb, id, invertColor, reduceTicks, shadeRGBColor, sortByDomain, sortByTime, sortLinear, throttle, throttleable, tickFormat, trimLabel };\n//# sourceMappingURL=swimlane-ngx-charts.mjs.map\n"]},"metadata":{},"sourceType":"module"}