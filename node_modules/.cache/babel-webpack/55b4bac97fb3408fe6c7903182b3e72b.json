{"ast":null,"code":"import _asyncToGenerator from \"F:/statvalu/project/AR_DocuExpert_Test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { processAzureAsyncOperationResult } from \"./azureAsyncPolling\";\nimport { isBodyPollingDone, processBodyPollingOperationResult } from \"./bodyPolling\";\nimport { processLocationPollingOperationResult } from \"./locationPolling\";\nimport { logger } from \"./logger\";\nimport { processPassthroughOperationResult } from \"./passthrough\";\nimport { getPollingUrl, inferLroMode, isUnexpectedInitialResponse } from \"./requestUtils\";\n/**\n * creates a stepping function that maps an LRO state to another.\n */\n\nexport function createGetLroStatusFromResponse(lroPrimitives, config, lroResourceLocationConfig) {\n  switch (config.mode) {\n    case \"AzureAsync\":\n      {\n        return processAzureAsyncOperationResult(lroPrimitives, config.resourceLocation, lroResourceLocationConfig);\n      }\n\n    case \"Location\":\n      {\n        return processLocationPollingOperationResult;\n      }\n\n    case \"Body\":\n      {\n        return processBodyPollingOperationResult;\n      }\n\n    default:\n      {\n        return processPassthroughOperationResult;\n      }\n  }\n}\n/**\n * Creates a polling operation.\n */\n\nexport function createPoll(lroPrimitives) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (path, pollerConfig, getLroStatusFromResponse) {\n      const response = yield lroPrimitives.sendPollRequest(path);\n      const retryAfter = response.rawResponse.headers[\"retry-after\"];\n\n      if (retryAfter !== undefined) {\n        const retryAfterInMs = parseInt(retryAfter);\n        pollerConfig.intervalInMs = isNaN(retryAfterInMs) ? calculatePollingIntervalFromDate(new Date(retryAfter), pollerConfig.intervalInMs) : retryAfterInMs;\n      }\n\n      return getLroStatusFromResponse(response);\n    });\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}\n\nfunction calculatePollingIntervalFromDate(retryAfterDate, defaultIntervalInMs) {\n  const timeNow = Math.floor(new Date().getTime());\n  const retryAfterTime = retryAfterDate.getTime();\n\n  if (timeNow < retryAfterTime) {\n    return retryAfterTime - timeNow;\n  }\n\n  return defaultIntervalInMs;\n}\n/**\n * Creates a callback to be used to initialize the polling operation state.\n * @param state - of the polling operation\n * @param operationSpec - of the LRO\n * @param callback - callback to be called when the operation is done\n * @returns callback that initializes the state of the polling operation\n */\n\n\nexport function createInitializeState(state, requestPath, requestMethod) {\n  return response => {\n    if (isUnexpectedInitialResponse(response.rawResponse)) return true;\n    state.initialRawResponse = response.rawResponse;\n    state.isStarted = true;\n    state.pollingURL = getPollingUrl(state.initialRawResponse, requestPath);\n    state.config = inferLroMode(requestPath, requestMethod, state.initialRawResponse);\n    /** short circuit polling if body polling is done in the initial request */\n\n    if (state.config.mode === undefined || state.config.mode === \"Body\" && isBodyPollingDone(state.initialRawResponse)) {\n      state.result = response.flatResponse;\n      state.isCompleted = true;\n    }\n\n    logger.verbose(`LRO: initial state: ${JSON.stringify(state)}`);\n    return Boolean(state.isCompleted);\n  };\n} //# sourceMappingURL=stateMachine.js.map","map":{"version":3,"sources":["F:/statvalu/project/AR_DocuExpert_Test/node_modules/@azure/core-lro/dist-esm/src/lroEngine/stateMachine.js"],"names":["processAzureAsyncOperationResult","isBodyPollingDone","processBodyPollingOperationResult","processLocationPollingOperationResult","logger","processPassthroughOperationResult","getPollingUrl","inferLroMode","isUnexpectedInitialResponse","createGetLroStatusFromResponse","lroPrimitives","config","lroResourceLocationConfig","mode","resourceLocation","createPoll","path","pollerConfig","getLroStatusFromResponse","response","sendPollRequest","retryAfter","rawResponse","headers","undefined","retryAfterInMs","parseInt","intervalInMs","isNaN","calculatePollingIntervalFromDate","Date","retryAfterDate","defaultIntervalInMs","timeNow","Math","floor","getTime","retryAfterTime","createInitializeState","state","requestPath","requestMethod","initialRawResponse","isStarted","pollingURL","result","flatResponse","isCompleted","verbose","JSON","stringify","Boolean"],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { processAzureAsyncOperationResult } from \"./azureAsyncPolling\";\nimport { isBodyPollingDone, processBodyPollingOperationResult } from \"./bodyPolling\";\nimport { processLocationPollingOperationResult } from \"./locationPolling\";\nimport { logger } from \"./logger\";\nimport { processPassthroughOperationResult } from \"./passthrough\";\nimport { getPollingUrl, inferLroMode, isUnexpectedInitialResponse } from \"./requestUtils\";\n/**\n * creates a stepping function that maps an LRO state to another.\n */\nexport function createGetLroStatusFromResponse(lroPrimitives, config, lroResourceLocationConfig) {\n    switch (config.mode) {\n        case \"AzureAsync\": {\n            return processAzureAsyncOperationResult(lroPrimitives, config.resourceLocation, lroResourceLocationConfig);\n        }\n        case \"Location\": {\n            return processLocationPollingOperationResult;\n        }\n        case \"Body\": {\n            return processBodyPollingOperationResult;\n        }\n        default: {\n            return processPassthroughOperationResult;\n        }\n    }\n}\n/**\n * Creates a polling operation.\n */\nexport function createPoll(lroPrimitives) {\n    return async (path, pollerConfig, getLroStatusFromResponse) => {\n        const response = await lroPrimitives.sendPollRequest(path);\n        const retryAfter = response.rawResponse.headers[\"retry-after\"];\n        if (retryAfter !== undefined) {\n            const retryAfterInMs = parseInt(retryAfter);\n            pollerConfig.intervalInMs = isNaN(retryAfterInMs)\n                ? calculatePollingIntervalFromDate(new Date(retryAfter), pollerConfig.intervalInMs)\n                : retryAfterInMs;\n        }\n        return getLroStatusFromResponse(response);\n    };\n}\nfunction calculatePollingIntervalFromDate(retryAfterDate, defaultIntervalInMs) {\n    const timeNow = Math.floor(new Date().getTime());\n    const retryAfterTime = retryAfterDate.getTime();\n    if (timeNow < retryAfterTime) {\n        return retryAfterTime - timeNow;\n    }\n    return defaultIntervalInMs;\n}\n/**\n * Creates a callback to be used to initialize the polling operation state.\n * @param state - of the polling operation\n * @param operationSpec - of the LRO\n * @param callback - callback to be called when the operation is done\n * @returns callback that initializes the state of the polling operation\n */\nexport function createInitializeState(state, requestPath, requestMethod) {\n    return (response) => {\n        if (isUnexpectedInitialResponse(response.rawResponse))\n            return true;\n        state.initialRawResponse = response.rawResponse;\n        state.isStarted = true;\n        state.pollingURL = getPollingUrl(state.initialRawResponse, requestPath);\n        state.config = inferLroMode(requestPath, requestMethod, state.initialRawResponse);\n        /** short circuit polling if body polling is done in the initial request */\n        if (state.config.mode === undefined ||\n            (state.config.mode === \"Body\" && isBodyPollingDone(state.initialRawResponse))) {\n            state.result = response.flatResponse;\n            state.isCompleted = true;\n        }\n        logger.verbose(`LRO: initial state: ${JSON.stringify(state)}`);\n        return Boolean(state.isCompleted);\n    };\n}\n//# sourceMappingURL=stateMachine.js.map"]},"metadata":{},"sourceType":"module"}