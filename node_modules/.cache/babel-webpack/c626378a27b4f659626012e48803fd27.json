{"ast":null,"code":"import _asyncToGenerator from \"F:/statvalu/AR_DocuExpert_Test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport \"@azure/core-paging\";\nimport { getDefaultProxySettings, isNode } from \"@azure/core-http\";\nimport { BlobServiceClient } from \"@azure/storage-blob\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { DataLakeFileSystemClient } from \"./DataLakeFileSystemClient\";\nimport { Pipeline, newPipeline } from \"./Pipeline\";\nimport { StorageClient } from \"./StorageClient\";\nimport { appendToURLPath, appendToURLQuery, extractConnectionStringParts } from \"./utils/utils.common\";\nimport { createSpan } from \"./utils/tracing\";\nimport { toDfsEndpointUrl, toFileSystemPagedAsyncIterableIterator } from \"./transforms\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { AccountSASPermissions } from \"./sas/AccountSASPermissions\";\nimport { generateAccountSASQueryParameters } from \"./sas/AccountSASSignatureValues\";\nimport { AccountSASServices } from \"./sas/AccountSASServices\";\n/**\n * DataLakeServiceClient allows you to manipulate Azure\n * Data Lake service resources and file systems. The storage account provides\n * the top-level namespace for the Data Lake service.\n */\n\nexport class DataLakeServiceClient extends StorageClient {\n  constructor(url, credentialOrPipeline, // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n  options) {\n    if (credentialOrPipeline instanceof Pipeline) {\n      super(url, credentialOrPipeline);\n    } else {\n      let credential;\n\n      if (credentialOrPipeline === undefined) {\n        credential = new AnonymousCredential();\n      } else {\n        credential = credentialOrPipeline;\n      }\n\n      const pipeline = newPipeline(credential, options);\n      super(url, pipeline);\n    } // this.serviceContext = new Service(this.storageClientContext);\n\n\n    this.blobServiceClient = new BlobServiceClient(this.blobEndpointUrl, this.pipeline);\n  }\n  /**\n   *\n   * Creates an instance of DataLakeServiceClient from connection string.\n   *\n   * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.\n   *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]\n   *                                  Account connection string example -\n   *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n   *                                  SAS connection string example -\n   *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n\n\n  static fromConnectionString(connectionString, // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n  options) {\n    options = options || {};\n    const extractedCreds = extractConnectionStringParts(connectionString);\n\n    if (extractedCreds.kind === \"AccountConnString\") {\n      if (isNode) {\n        const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n        options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n        const pipeline = newPipeline(sharedKeyCredential, options);\n        return new DataLakeServiceClient(toDfsEndpointUrl(extractedCreds.url), pipeline);\n      } else {\n        throw new Error(\"Account connection string is only supported in Node.js environment\");\n      }\n    } else if (extractedCreds.kind === \"SASConnString\") {\n      const pipeline = newPipeline(new AnonymousCredential(), options);\n      return new DataLakeServiceClient(toDfsEndpointUrl(extractedCreds.url) + \"?\" + extractedCreds.accountSas, pipeline);\n    } else {\n      throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n    }\n  }\n  /**\n   * Creates a {@link DataLakeFileSystemClient} object.\n   *\n   * @param fileSystemName - File system name.\n   */\n  // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-subclients */\n\n\n  getFileSystemClient(fileSystemName) {\n    return new DataLakeFileSystemClient(appendToURLPath(this.url, encodeURIComponent(fileSystemName)), this.pipeline);\n  }\n  /**\n   * ONLY AVAILABLE WHEN USING BEARER TOKEN AUTHENTICATION (TokenCredential).\n   *\n   * Retrieves a user delegation key for the Data Lake service. This is only a valid operation when using\n   * bearer token authentication.\n   *\n   * @example\n   * ```js\n   * // Generate user delegation SAS for a file system\n   * const userDelegationKey = await dataLakeServiceClient.getUserDelegationKey(startsOn, expiresOn);\n   * const fileSystemSAS = generateDataLakeSASQueryParameters({\n   *     fileSystemName, // Required\n   *     permissions: FileSystemSASPermissions.parse(\"racwdl\"), // Required\n   *     startsOn, // Required. Date type\n   *     expiresOn, // Optional. Date type\n   *     ipRange: { start: \"0.0.0.0\", end: \"255.255.255.255\" }, // Optional\n   *     protocol: SASProtocol.HttpsAndHttp, // Optional\n   *     version: \"2018-11-09\" // Must greater than or equal to 2018-11-09 to generate user delegation SAS\n   *   },\n   *   userDelegationKey, // UserDelegationKey\n   *   accountName\n   * ).toString();\n   * ```\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-user-delegation-key\n   *\n   * @param startsOn - The start time for the user delegation SAS. Must be within 7 days of the current time.\n   * @param expiresOn - The end time for the user delegation SAS. Must be within 7 days of the current time.\n   * @param options -\n   */\n\n\n  getUserDelegationKey(startsOn, expiresOn, options = {}) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        span,\n        updatedOptions\n      } = createSpan(\"DataLakeServiceClient-getUserDelegationKey\", options);\n\n      try {\n        return yield _this.blobServiceClient.getUserDelegationKey(startsOn, expiresOn, updatedOptions);\n      } catch (e) {\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message: e.message\n        });\n        throw e;\n      } finally {\n        span.end();\n      }\n    })();\n  }\n  /**\n   * Returns an async iterable iterator to list all the file systems\n   * under the specified account.\n   *\n   * .byPage() returns an async iterable iterator to list the file systems in pages.\n   *\n   * Example using `for await` syntax:\n   *\n   * ```js\n   * let i = 1;\n   * for await (const fileSystem of serviceClient.listFileSystems()) {\n   *   console.log(`FileSystem ${i++}: ${fileSystem.name}`);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```js\n   * let i = 1;\n   * const iter = serviceClient.listFileSystems();\n   * let fileSystemItem = await iter.next();\n   * while (!fileSystemItem.done) {\n   *   console.log(`FileSystem ${i++}: ${fileSystemItem.value.name}`);\n   *   fileSystemItem = await iter.next();\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```js\n   * // passing optional maxPageSize in the page settings\n   * let i = 1;\n   * for await (const response of serviceClient.listFileSystems().byPage({ maxPageSize: 20 })) {\n   *   if (response.fileSystemItems) {\n   *     for (const fileSystem of response.fileSystemItems) {\n   *       console.log(`FileSystem ${i++}: ${fileSystem.name}`);\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * Example using paging with a marker:\n   *\n   * ```js\n   * let i = 1;\n   * let iterator = serviceClient.listFileSystems().byPage({ maxPageSize: 2 });\n   * let response = (await iterator.next()).value;\n   *\n   * // Prints 2 file system names\n   * if (response.fileSystemItems) {\n   *   for (const fileSystem of response.fileSystemItems) {\n   *     console.log(`FileSystem ${i++}: ${fileSystem.name}`);\n   *   }\n   * }\n   *\n   * // Gets next marker\n   * let marker = response.continuationToken;\n   * // Passing next marker as continuationToken\n   * iterator = serviceClient\n   *   .listContainers()\n   *   .byPage({ continuationToken: marker, maxPageSize: 10 });\n   * response = (await iterator.next()).value;\n   *\n   * // Prints 10 file system names\n   * if (response.fileSystemItems) {\n   *   for (const fileSystem of response.fileSystemItems) {\n   *      console.log(`FileSystem ${i++}: ${fileSystem.name}`);\n   *   }\n   * }\n   * ```\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/list-containers2\n   *\n   * @param options -\n   */\n\n\n  listFileSystems(options = {}) {\n    return toFileSystemPagedAsyncIterableIterator(this.blobServiceClient.listContainers(options));\n  } // public async createFileSystem(): Promise<DataLakeFileSystemClient> {\n  //   throw Error(\"NotImplemented\");\n  // }\n  // public async deleteFileSystem(fileSystem: string): Promise<ServiceDeleteFileSystemResponse> {\n  //   throw Error(\"NotImplemented\");\n  // }\n\n  /**\n   * Only available for DataLakeServiceClient constructed with a shared key credential.\n   *\n   * Generates an account Shared Access Signature (SAS) URI based on the client properties\n   * and parameters passed in. The SAS is signed by the shared key credential of the client.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-account-sas\n   *\n   * @param expiresOn - Optional. The time at which the shared access signature becomes invalid. Default to an hour later if not specified.\n   * @param permissions - Specifies the list of permissions to be associated with the SAS.\n   * @param resourceTypes - Specifies the resource types associated with the shared access signature.\n   * @param options - Optional parameters.\n   * @returns An account SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n   */\n\n\n  generateAccountSasUrl(expiresOn, permissions = AccountSASPermissions.parse(\"r\"), resourceTypes = \"sco\", options = {}) {\n    if (!(this.credential instanceof StorageSharedKeyCredential)) {\n      throw RangeError(\"Can only generate the account SAS when the client is initialized with a shared key credential\");\n    }\n\n    if (expiresOn === undefined) {\n      const now = new Date();\n      expiresOn = new Date(now.getTime() + 3600 * 1000);\n    }\n\n    const sas = generateAccountSASQueryParameters(Object.assign({\n      permissions,\n      expiresOn,\n      resourceTypes,\n      services: AccountSASServices.parse(\"b\").toString()\n    }, options), this.credential).toString();\n    return appendToURLQuery(this.url, sas);\n  }\n  /**\n   * Renames an existing File System.\n   *\n   * @param sourceFileSystemName - The name of the source File System.\n   * @param destinationContainerName - The new name of the File System.\n   * @param options - Options to configure File System Rename operation.\n   */\n\n  /* eslint-disable-next-line @typescript-eslint/ban-ts-comment */\n  // @ts-ignore Need to hide this interface for now. Make it public and turn on the live tests for it when the service is ready.\n\n\n  renameFileSystem(sourceFileSystemName, destinationFileSystemName, options = {}) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        span,\n        updatedOptions\n      } = createSpan(\"DataLakeServiceClient-renameFileSystem\", options);\n\n      try {\n        // const res = await this.blobServiceClient.renameContainer(\n        const res = yield _this2.blobServiceClient[\"renameContainer\"](sourceFileSystemName, destinationFileSystemName, updatedOptions);\n\n        const fileSystemClient = _this2.getFileSystemClient(destinationFileSystemName);\n\n        return {\n          fileSystemClient,\n          fileSystemRenameResponse: res.containerRenameResponse\n        };\n      } catch (e) {\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message: e.message\n        });\n        throw e;\n      } finally {\n        span.end();\n      }\n    })();\n  }\n  /**\n   * Restore a previously deleted File System.\n   * This API is only functional if Container Soft Delete is enabled for the storage account.\n   *\n   * @param deletedFileSystemName - The name of the source File System.\n   * @param deleteFileSystemVersion - The new name of the File System.\n   * @param options - Options to configure File System Restore operation.\n   */\n\n\n  undeleteFileSystem(deletedFileSystemName, deleteFileSystemVersion, options = {}) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        span,\n        updatedOptions\n      } = createSpan(\"DataLakeServiceClient-undeleteFileSystem\", options);\n\n      try {\n        const res = yield _this3.blobServiceClient.undeleteContainer(deletedFileSystemName, deleteFileSystemVersion, Object.assign(Object.assign({}, options), {\n          destinationContainerName: options.destinationFileSystemName,\n          tracingOptions: updatedOptions.tracingOptions\n        }));\n\n        const fileSystemClient = _this3.getFileSystemClient(options.destinationFileSystemName || deletedFileSystemName);\n\n        return {\n          fileSystemClient,\n          fileSystemUndeleteResponse: res.containerUndeleteResponse\n        };\n      } catch (e) {\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message: e.message\n        });\n        throw e;\n      } finally {\n        span.end();\n      }\n    })();\n  }\n  /**\n   * Gets the properties of a storage account’s Blob service endpoint, including properties\n   * for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties\n   *\n   * @param options - Options to the Service Get Properties operation.\n   * @returns Response data for the Service Get Properties operation.\n   */\n\n\n  getProperties(options = {}) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        span,\n        updatedOptions\n      } = createSpan(\"DataLakeServiceClient-getProperties\", options);\n\n      try {\n        return yield _this4.blobServiceClient.getProperties({\n          abortSignal: options.abortSignal,\n          tracingOptions: updatedOptions.tracingOptions\n        });\n      } catch (e) {\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message: e.message\n        });\n        throw e;\n      } finally {\n        span.end();\n      }\n    })();\n  }\n  /**\n   * Sets properties for a storage account’s Blob service endpoint, including properties\n   * for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft delete settings.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-service-properties\n   *\n   * @param properties -\n   * @param options - Options to the Service Set Properties operation.\n   * @returns Response data for the Service Set Properties operation.\n   */\n\n\n  setProperties(properties, options = {}) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        span,\n        updatedOptions\n      } = createSpan(\"DataLakeServiceClient-setProperties\", options);\n\n      try {\n        return yield _this5.blobServiceClient.setProperties(properties, {\n          abortSignal: options.abortSignal,\n          tracingOptions: updatedOptions.tracingOptions\n        });\n      } catch (e) {\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message: e.message\n        });\n        throw e;\n      } finally {\n        span.end();\n      }\n    })();\n  }\n\n} //# sourceMappingURL=DataLakeServiceClient.js.map","map":{"version":3,"sources":["F:/statvalu/AR_DocuExpert_Test/node_modules/@azure/storage-file-datalake/dist-esm/storage-file-datalake/src/DataLakeServiceClient.js"],"names":["getDefaultProxySettings","isNode","BlobServiceClient","AnonymousCredential","StorageSharedKeyCredential","DataLakeFileSystemClient","Pipeline","newPipeline","StorageClient","appendToURLPath","appendToURLQuery","extractConnectionStringParts","createSpan","toDfsEndpointUrl","toFileSystemPagedAsyncIterableIterator","SpanStatusCode","AccountSASPermissions","generateAccountSASQueryParameters","AccountSASServices","DataLakeServiceClient","constructor","url","credentialOrPipeline","options","credential","undefined","pipeline","blobServiceClient","blobEndpointUrl","fromConnectionString","connectionString","extractedCreds","kind","sharedKeyCredential","accountName","accountKey","proxyOptions","proxyUri","Error","accountSas","getFileSystemClient","fileSystemName","encodeURIComponent","getUserDelegationKey","startsOn","expiresOn","span","updatedOptions","e","setStatus","code","ERROR","message","end","listFileSystems","listContainers","generateAccountSasUrl","permissions","parse","resourceTypes","RangeError","now","Date","getTime","sas","Object","assign","services","toString","renameFileSystem","sourceFileSystemName","destinationFileSystemName","res","fileSystemClient","fileSystemRenameResponse","containerRenameResponse","undeleteFileSystem","deletedFileSystemName","deleteFileSystemVersion","undeleteContainer","destinationContainerName","tracingOptions","fileSystemUndeleteResponse","containerUndeleteResponse","getProperties","abortSignal","setProperties","properties"],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport \"@azure/core-paging\";\nimport { getDefaultProxySettings, isNode } from \"@azure/core-http\";\nimport { BlobServiceClient } from \"@azure/storage-blob\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { DataLakeFileSystemClient } from \"./DataLakeFileSystemClient\";\nimport { Pipeline, newPipeline } from \"./Pipeline\";\nimport { StorageClient } from \"./StorageClient\";\nimport { appendToURLPath, appendToURLQuery, extractConnectionStringParts } from \"./utils/utils.common\";\nimport { createSpan } from \"./utils/tracing\";\nimport { toDfsEndpointUrl, toFileSystemPagedAsyncIterableIterator } from \"./transforms\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { AccountSASPermissions } from \"./sas/AccountSASPermissions\";\nimport { generateAccountSASQueryParameters } from \"./sas/AccountSASSignatureValues\";\nimport { AccountSASServices } from \"./sas/AccountSASServices\";\n/**\n * DataLakeServiceClient allows you to manipulate Azure\n * Data Lake service resources and file systems. The storage account provides\n * the top-level namespace for the Data Lake service.\n */\nexport class DataLakeServiceClient extends StorageClient {\n    constructor(url, credentialOrPipeline, \n    // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n    options) {\n        if (credentialOrPipeline instanceof Pipeline) {\n            super(url, credentialOrPipeline);\n        }\n        else {\n            let credential;\n            if (credentialOrPipeline === undefined) {\n                credential = new AnonymousCredential();\n            }\n            else {\n                credential = credentialOrPipeline;\n            }\n            const pipeline = newPipeline(credential, options);\n            super(url, pipeline);\n        }\n        // this.serviceContext = new Service(this.storageClientContext);\n        this.blobServiceClient = new BlobServiceClient(this.blobEndpointUrl, this.pipeline);\n    }\n    /**\n     *\n     * Creates an instance of DataLakeServiceClient from connection string.\n     *\n     * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.\n     *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]\n     *                                  Account connection string example -\n     *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n     *                                  SAS connection string example -\n     *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n     * @param options - Optional. Options to configure the HTTP pipeline.\n     */\n    // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n    static fromConnectionString(connectionString, \n    // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n    options) {\n        options = options || {};\n        const extractedCreds = extractConnectionStringParts(connectionString);\n        if (extractedCreds.kind === \"AccountConnString\") {\n            if (isNode) {\n                const sharedKeyCredential = new StorageSharedKeyCredential(extractedCreds.accountName, extractedCreds.accountKey);\n                options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n                const pipeline = newPipeline(sharedKeyCredential, options);\n                return new DataLakeServiceClient(toDfsEndpointUrl(extractedCreds.url), pipeline);\n            }\n            else {\n                throw new Error(\"Account connection string is only supported in Node.js environment\");\n            }\n        }\n        else if (extractedCreds.kind === \"SASConnString\") {\n            const pipeline = newPipeline(new AnonymousCredential(), options);\n            return new DataLakeServiceClient(toDfsEndpointUrl(extractedCreds.url) + \"?\" + extractedCreds.accountSas, pipeline);\n        }\n        else {\n            throw new Error(\"Connection string must be either an Account connection string or a SAS connection string\");\n        }\n    }\n    /**\n     * Creates a {@link DataLakeFileSystemClient} object.\n     *\n     * @param fileSystemName - File system name.\n     */\n    // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-subclients */\n    getFileSystemClient(fileSystemName) {\n        return new DataLakeFileSystemClient(appendToURLPath(this.url, encodeURIComponent(fileSystemName)), this.pipeline);\n    }\n    /**\n     * ONLY AVAILABLE WHEN USING BEARER TOKEN AUTHENTICATION (TokenCredential).\n     *\n     * Retrieves a user delegation key for the Data Lake service. This is only a valid operation when using\n     * bearer token authentication.\n     *\n     * @example\n     * ```js\n     * // Generate user delegation SAS for a file system\n     * const userDelegationKey = await dataLakeServiceClient.getUserDelegationKey(startsOn, expiresOn);\n     * const fileSystemSAS = generateDataLakeSASQueryParameters({\n     *     fileSystemName, // Required\n     *     permissions: FileSystemSASPermissions.parse(\"racwdl\"), // Required\n     *     startsOn, // Required. Date type\n     *     expiresOn, // Optional. Date type\n     *     ipRange: { start: \"0.0.0.0\", end: \"255.255.255.255\" }, // Optional\n     *     protocol: SASProtocol.HttpsAndHttp, // Optional\n     *     version: \"2018-11-09\" // Must greater than or equal to 2018-11-09 to generate user delegation SAS\n     *   },\n     *   userDelegationKey, // UserDelegationKey\n     *   accountName\n     * ).toString();\n     * ```\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-user-delegation-key\n     *\n     * @param startsOn - The start time for the user delegation SAS. Must be within 7 days of the current time.\n     * @param expiresOn - The end time for the user delegation SAS. Must be within 7 days of the current time.\n     * @param options -\n     */\n    async getUserDelegationKey(startsOn, expiresOn, options = {}) {\n        const { span, updatedOptions } = createSpan(\"DataLakeServiceClient-getUserDelegationKey\", options);\n        try {\n            return await this.blobServiceClient.getUserDelegationKey(startsOn, expiresOn, updatedOptions);\n        }\n        catch (e) {\n            span.setStatus({\n                code: SpanStatusCode.ERROR,\n                message: e.message\n            });\n            throw e;\n        }\n        finally {\n            span.end();\n        }\n    }\n    /**\n     * Returns an async iterable iterator to list all the file systems\n     * under the specified account.\n     *\n     * .byPage() returns an async iterable iterator to list the file systems in pages.\n     *\n     * Example using `for await` syntax:\n     *\n     * ```js\n     * let i = 1;\n     * for await (const fileSystem of serviceClient.listFileSystems()) {\n     *   console.log(`FileSystem ${i++}: ${fileSystem.name}`);\n     * }\n     * ```\n     *\n     * Example using `iter.next()`:\n     *\n     * ```js\n     * let i = 1;\n     * const iter = serviceClient.listFileSystems();\n     * let fileSystemItem = await iter.next();\n     * while (!fileSystemItem.done) {\n     *   console.log(`FileSystem ${i++}: ${fileSystemItem.value.name}`);\n     *   fileSystemItem = await iter.next();\n     * }\n     * ```\n     *\n     * Example using `byPage()`:\n     *\n     * ```js\n     * // passing optional maxPageSize in the page settings\n     * let i = 1;\n     * for await (const response of serviceClient.listFileSystems().byPage({ maxPageSize: 20 })) {\n     *   if (response.fileSystemItems) {\n     *     for (const fileSystem of response.fileSystemItems) {\n     *       console.log(`FileSystem ${i++}: ${fileSystem.name}`);\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * Example using paging with a marker:\n     *\n     * ```js\n     * let i = 1;\n     * let iterator = serviceClient.listFileSystems().byPage({ maxPageSize: 2 });\n     * let response = (await iterator.next()).value;\n     *\n     * // Prints 2 file system names\n     * if (response.fileSystemItems) {\n     *   for (const fileSystem of response.fileSystemItems) {\n     *     console.log(`FileSystem ${i++}: ${fileSystem.name}`);\n     *   }\n     * }\n     *\n     * // Gets next marker\n     * let marker = response.continuationToken;\n     * // Passing next marker as continuationToken\n     * iterator = serviceClient\n     *   .listContainers()\n     *   .byPage({ continuationToken: marker, maxPageSize: 10 });\n     * response = (await iterator.next()).value;\n     *\n     * // Prints 10 file system names\n     * if (response.fileSystemItems) {\n     *   for (const fileSystem of response.fileSystemItems) {\n     *      console.log(`FileSystem ${i++}: ${fileSystem.name}`);\n     *   }\n     * }\n     * ```\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/list-containers2\n     *\n     * @param options -\n     */\n    listFileSystems(options = {}) {\n        return toFileSystemPagedAsyncIterableIterator(this.blobServiceClient.listContainers(options));\n    }\n    // public async createFileSystem(): Promise<DataLakeFileSystemClient> {\n    //   throw Error(\"NotImplemented\");\n    // }\n    // public async deleteFileSystem(fileSystem: string): Promise<ServiceDeleteFileSystemResponse> {\n    //   throw Error(\"NotImplemented\");\n    // }\n    /**\n     * Only available for DataLakeServiceClient constructed with a shared key credential.\n     *\n     * Generates an account Shared Access Signature (SAS) URI based on the client properties\n     * and parameters passed in. The SAS is signed by the shared key credential of the client.\n     *\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-account-sas\n     *\n     * @param expiresOn - Optional. The time at which the shared access signature becomes invalid. Default to an hour later if not specified.\n     * @param permissions - Specifies the list of permissions to be associated with the SAS.\n     * @param resourceTypes - Specifies the resource types associated with the shared access signature.\n     * @param options - Optional parameters.\n     * @returns An account SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n     */\n    generateAccountSasUrl(expiresOn, permissions = AccountSASPermissions.parse(\"r\"), resourceTypes = \"sco\", options = {}) {\n        if (!(this.credential instanceof StorageSharedKeyCredential)) {\n            throw RangeError(\"Can only generate the account SAS when the client is initialized with a shared key credential\");\n        }\n        if (expiresOn === undefined) {\n            const now = new Date();\n            expiresOn = new Date(now.getTime() + 3600 * 1000);\n        }\n        const sas = generateAccountSASQueryParameters(Object.assign({ permissions,\n            expiresOn,\n            resourceTypes, services: AccountSASServices.parse(\"b\").toString() }, options), this.credential).toString();\n        return appendToURLQuery(this.url, sas);\n    }\n    /**\n     * Renames an existing File System.\n     *\n     * @param sourceFileSystemName - The name of the source File System.\n     * @param destinationContainerName - The new name of the File System.\n     * @param options - Options to configure File System Rename operation.\n     */\n    /* eslint-disable-next-line @typescript-eslint/ban-ts-comment */\n    // @ts-ignore Need to hide this interface for now. Make it public and turn on the live tests for it when the service is ready.\n    async renameFileSystem(sourceFileSystemName, destinationFileSystemName, options = {}) {\n        const { span, updatedOptions } = createSpan(\"DataLakeServiceClient-renameFileSystem\", options);\n        try {\n            // const res = await this.blobServiceClient.renameContainer(\n            const res = await this.blobServiceClient[\"renameContainer\"](sourceFileSystemName, destinationFileSystemName, updatedOptions);\n            const fileSystemClient = this.getFileSystemClient(destinationFileSystemName);\n            return {\n                fileSystemClient,\n                fileSystemRenameResponse: res.containerRenameResponse\n            };\n        }\n        catch (e) {\n            span.setStatus({\n                code: SpanStatusCode.ERROR,\n                message: e.message\n            });\n            throw e;\n        }\n        finally {\n            span.end();\n        }\n    }\n    /**\n     * Restore a previously deleted File System.\n     * This API is only functional if Container Soft Delete is enabled for the storage account.\n     *\n     * @param deletedFileSystemName - The name of the source File System.\n     * @param deleteFileSystemVersion - The new name of the File System.\n     * @param options - Options to configure File System Restore operation.\n     */\n    async undeleteFileSystem(deletedFileSystemName, deleteFileSystemVersion, options = {}) {\n        const { span, updatedOptions } = createSpan(\"DataLakeServiceClient-undeleteFileSystem\", options);\n        try {\n            const res = await this.blobServiceClient.undeleteContainer(deletedFileSystemName, deleteFileSystemVersion, Object.assign(Object.assign({}, options), { destinationContainerName: options.destinationFileSystemName, tracingOptions: updatedOptions.tracingOptions }));\n            const fileSystemClient = this.getFileSystemClient(options.destinationFileSystemName || deletedFileSystemName);\n            return {\n                fileSystemClient,\n                fileSystemUndeleteResponse: res.containerUndeleteResponse\n            };\n        }\n        catch (e) {\n            span.setStatus({\n                code: SpanStatusCode.ERROR,\n                message: e.message\n            });\n            throw e;\n        }\n        finally {\n            span.end();\n        }\n    }\n    /**\n     * Gets the properties of a storage account’s Blob service endpoint, including properties\n     * for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties\n     *\n     * @param options - Options to the Service Get Properties operation.\n     * @returns Response data for the Service Get Properties operation.\n     */\n    async getProperties(options = {}) {\n        const { span, updatedOptions } = createSpan(\"DataLakeServiceClient-getProperties\", options);\n        try {\n            return await this.blobServiceClient.getProperties({\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions\n            });\n        }\n        catch (e) {\n            span.setStatus({\n                code: SpanStatusCode.ERROR,\n                message: e.message\n            });\n            throw e;\n        }\n        finally {\n            span.end();\n        }\n    }\n    /**\n     * Sets properties for a storage account’s Blob service endpoint, including properties\n     * for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft delete settings.\n     * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-service-properties\n     *\n     * @param properties -\n     * @param options - Options to the Service Set Properties operation.\n     * @returns Response data for the Service Set Properties operation.\n     */\n    async setProperties(properties, options = {}) {\n        const { span, updatedOptions } = createSpan(\"DataLakeServiceClient-setProperties\", options);\n        try {\n            return await this.blobServiceClient.setProperties(properties, {\n                abortSignal: options.abortSignal,\n                tracingOptions: updatedOptions.tracingOptions\n            });\n        }\n        catch (e) {\n            span.setStatus({\n                code: SpanStatusCode.ERROR,\n                message: e.message\n            });\n            throw e;\n        }\n        finally {\n            span.end();\n        }\n    }\n}\n//# sourceMappingURL=DataLakeServiceClient.js.map"]},"metadata":{},"sourceType":"module"}