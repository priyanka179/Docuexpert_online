{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Input, Output, HostListener, NgModule } from '@angular/core';\nimport { saveAs } from 'file-saver';\nimport * as i2 from '@angular/common/http';\nimport { HttpParams } from '@angular/common/http';\n\nclass FileSaverService {\n  get isFileSaverSupported() {\n    try {\n      return !!new Blob();\n    } catch (e) {\n      return false;\n    }\n  }\n\n  genType(fileName) {\n    if (!fileName || fileName.lastIndexOf('.') === -1) {\n      return 'text/plain';\n    }\n\n    const type = fileName.substr(fileName.lastIndexOf('.') + 1);\n\n    switch (type) {\n      case 'txt':\n        return 'text/plain';\n\n      case 'xml':\n      case 'html':\n        return `text/${type}`;\n\n      case 'json':\n        return 'octet/stream';\n\n      default:\n        return `application/${type}`;\n    }\n  }\n\n  save(blob, fileName, filtType, option) {\n    if (!blob) {\n      throw new Error('Data argument should be a blob instance');\n    }\n\n    const file = new Blob([blob], {\n      type: filtType || blob.type || this.genType(fileName)\n    });\n    saveAs(file, decodeURI(fileName || 'download'), option);\n  }\n\n  saveText(txt, fileName, option) {\n    const blob = new Blob([txt]);\n    this.save(blob, fileName, undefined, option);\n  }\n\n}\n\nFileSaverService.ɵfac = function FileSaverService_Factory(t) {\n  return new (t || FileSaverService)();\n};\n\nFileSaverService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: FileSaverService,\n  factory: FileSaverService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FileSaverService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\nclass FileSaverDirective {\n  constructor(el, fss, httpClient) {\n    this.el = el;\n    this.fss = fss;\n    this.httpClient = httpClient;\n    this.method = 'GET';\n    this.success = new EventEmitter();\n    this.error = new EventEmitter();\n\n    if (!fss.isFileSaverSupported) {\n      el.nativeElement.classList.add(`filesaver__not-support`);\n    }\n  }\n\n  getName(res) {\n    return decodeURI(this.fileName || res.headers.get('filename') || res.headers.get('x-filename') || '');\n  }\n\n  _click() {\n    if (!this.fss.isFileSaverSupported) {\n      return;\n    }\n\n    let req = this.http;\n\n    if (!req) {\n      let params = new HttpParams();\n      const query = this.query || {}; // tslint:disable-next-line:forin\n\n      for (const item in query) {\n        params = params.set(item, query[item]);\n      }\n\n      req = this.httpClient.request(this.method, this.url, {\n        observe: 'response',\n        responseType: 'blob',\n        headers: this.header,\n        params\n      });\n    }\n\n    this.setDisabled(true);\n    req.subscribe(res => {\n      if (res.status !== 200 || res.body.size <= 0) {\n        this.error.emit(res);\n        return;\n      }\n\n      this.fss.save(res.body, this.getName(res), undefined, this.fsOptions);\n      this.success.emit(res);\n    }, err => this.error.emit(err), () => this.setDisabled(false));\n  }\n\n  setDisabled(status) {\n    const el = this.el.nativeElement;\n    el.disabled = status;\n    el.classList[status ? 'add' : 'remove'](`filesaver__disabled`);\n  }\n\n}\n\nFileSaverDirective.ɵfac = function FileSaverDirective_Factory(t) {\n  return new (t || FileSaverDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(FileSaverService), i0.ɵɵdirectiveInject(i2.HttpClient));\n};\n\nFileSaverDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: FileSaverDirective,\n  selectors: [[\"\", \"fileSaver\", \"\"]],\n  hostBindings: function FileSaverDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function FileSaverDirective_click_HostBindingHandler() {\n        return ctx._click();\n      });\n    }\n  },\n  inputs: {\n    method: \"method\",\n    http: \"http\",\n    query: \"query\",\n    header: \"header\",\n    url: \"url\",\n    fileName: \"fileName\",\n    fsOptions: \"fsOptions\"\n  },\n  outputs: {\n    success: \"success\",\n    error: \"error\"\n  },\n  exportAs: [\"fileSaver\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FileSaverDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[fileSaver]',\n      exportAs: 'fileSaver'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: FileSaverService\n    }, {\n      type: i2.HttpClient\n    }];\n  }, {\n    method: [{\n      type: Input\n    }],\n    http: [{\n      type: Input\n    }],\n    query: [{\n      type: Input\n    }],\n    header: [{\n      type: Input\n    }],\n    url: [{\n      type: Input\n    }],\n    fileName: [{\n      type: Input\n    }],\n    fsOptions: [{\n      type: Input\n    }],\n    success: [{\n      type: Output\n    }],\n    error: [{\n      type: Output\n    }],\n    _click: [{\n      type: HostListener,\n      args: ['click']\n    }]\n  });\n})();\n\nclass FileSaverModule {}\n\nFileSaverModule.ɵfac = function FileSaverModule_Factory(t) {\n  return new (t || FileSaverModule)();\n};\n\nFileSaverModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: FileSaverModule\n});\nFileSaverModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FileSaverModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [FileSaverDirective],\n      exports: [FileSaverDirective]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { FileSaverDirective, FileSaverModule, FileSaverService }; //# sourceMappingURL=ngx-filesaver.mjs.map","map":{"version":3,"sources":["F:/statvalu/AR_DocuExpert_Test/node_modules/ngx-filesaver/fesm2020/ngx-filesaver.mjs"],"names":["i0","Injectable","EventEmitter","Directive","Input","Output","HostListener","NgModule","saveAs","i2","HttpParams","FileSaverService","isFileSaverSupported","Blob","e","genType","fileName","lastIndexOf","type","substr","save","blob","filtType","option","Error","file","decodeURI","saveText","txt","undefined","ɵfac","ɵprov","args","providedIn","FileSaverDirective","constructor","el","fss","httpClient","method","success","error","nativeElement","classList","add","getName","res","headers","get","_click","req","http","params","query","item","set","request","url","observe","responseType","header","setDisabled","subscribe","status","body","size","emit","fsOptions","err","disabled","ElementRef","HttpClient","ɵdir","selector","exportAs","FileSaverModule","ɵmod","ɵinj","declarations","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Input, Output, HostListener, NgModule } from '@angular/core';\nimport { saveAs } from 'file-saver';\nimport * as i2 from '@angular/common/http';\nimport { HttpParams } from '@angular/common/http';\n\nclass FileSaverService {\n    get isFileSaverSupported() {\n        try {\n            return !!new Blob();\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    genType(fileName) {\n        if (!fileName || fileName.lastIndexOf('.') === -1) {\n            return 'text/plain';\n        }\n        const type = fileName.substr(fileName.lastIndexOf('.') + 1);\n        switch (type) {\n            case 'txt':\n                return 'text/plain';\n            case 'xml':\n            case 'html':\n                return `text/${type}`;\n            case 'json':\n                return 'octet/stream';\n            default:\n                return `application/${type}`;\n        }\n    }\n    save(blob, fileName, filtType, option) {\n        if (!blob) {\n            throw new Error('Data argument should be a blob instance');\n        }\n        const file = new Blob([blob], { type: filtType || blob.type || this.genType(fileName) });\n        saveAs(file, decodeURI(fileName || 'download'), option);\n    }\n    saveText(txt, fileName, option) {\n        const blob = new Blob([txt]);\n        this.save(blob, fileName, undefined, option);\n    }\n}\nFileSaverService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: FileSaverService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nFileSaverService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: FileSaverService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: FileSaverService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\nclass FileSaverDirective {\n    constructor(el, fss, httpClient) {\n        this.el = el;\n        this.fss = fss;\n        this.httpClient = httpClient;\n        this.method = 'GET';\n        this.success = new EventEmitter();\n        this.error = new EventEmitter();\n        if (!fss.isFileSaverSupported) {\n            el.nativeElement.classList.add(`filesaver__not-support`);\n        }\n    }\n    getName(res) {\n        return decodeURI(this.fileName || res.headers.get('filename') || res.headers.get('x-filename') || '');\n    }\n    _click() {\n        if (!this.fss.isFileSaverSupported) {\n            return;\n        }\n        let req = this.http;\n        if (!req) {\n            let params = new HttpParams();\n            const query = this.query || {};\n            // tslint:disable-next-line:forin\n            for (const item in query) {\n                params = params.set(item, query[item]);\n            }\n            req = this.httpClient.request(this.method, this.url, {\n                observe: 'response',\n                responseType: 'blob',\n                headers: this.header,\n                params,\n            });\n        }\n        this.setDisabled(true);\n        req.subscribe((res) => {\n            if (res.status !== 200 || res.body.size <= 0) {\n                this.error.emit(res);\n                return;\n            }\n            this.fss.save(res.body, this.getName(res), undefined, this.fsOptions);\n            this.success.emit(res);\n        }, (err) => this.error.emit(err), () => this.setDisabled(false));\n    }\n    setDisabled(status) {\n        const el = this.el.nativeElement;\n        el.disabled = status;\n        el.classList[status ? 'add' : 'remove'](`filesaver__disabled`);\n    }\n}\nFileSaverDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: FileSaverDirective, deps: [{ token: i0.ElementRef }, { token: FileSaverService }, { token: i2.HttpClient }], target: i0.ɵɵFactoryTarget.Directive });\nFileSaverDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: FileSaverDirective, selector: \"[fileSaver]\", inputs: { method: \"method\", http: \"http\", query: \"query\", header: \"header\", url: \"url\", fileName: \"fileName\", fsOptions: \"fsOptions\" }, outputs: { success: \"success\", error: \"error\" }, host: { listeners: { \"click\": \"_click()\" } }, exportAs: [\"fileSaver\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: FileSaverDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[fileSaver]',\n                    exportAs: 'fileSaver',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: FileSaverService }, { type: i2.HttpClient }]; }, propDecorators: { method: [{\n                type: Input\n            }], http: [{\n                type: Input\n            }], query: [{\n                type: Input\n            }], header: [{\n                type: Input\n            }], url: [{\n                type: Input\n            }], fileName: [{\n                type: Input\n            }], fsOptions: [{\n                type: Input\n            }], success: [{\n                type: Output\n            }], error: [{\n                type: Output\n            }], _click: [{\n                type: HostListener,\n                args: ['click']\n            }] } });\n\nclass FileSaverModule {\n}\nFileSaverModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: FileSaverModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nFileSaverModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: FileSaverModule, declarations: [FileSaverDirective], exports: [FileSaverDirective] });\nFileSaverModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: FileSaverModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: FileSaverModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [FileSaverDirective],\n                    exports: [FileSaverDirective],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FileSaverDirective, FileSaverModule, FileSaverService };\n//# sourceMappingURL=ngx-filesaver.mjs.map\n"]},"metadata":{},"sourceType":"module"}