{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __extends } from \"tslib\";\nimport { AbortSignal, abortSignal } from \"./AbortSignal\";\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * ```ts\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n * ```\n */\n\nvar AbortError = function (_super) {\n  __extends(AbortError, _super);\n\n  function AbortError(message) {\n    var _this = _super.call(this, message) || this;\n\n    _this.name = \"AbortError\";\n    return _this;\n  }\n\n  return AbortError;\n}(Error);\n\nexport { AbortError };\n/**\n * An AbortController provides an AbortSignal and the associated controls to signal\n * that an asynchronous operation should be aborted.\n *\n * @example\n * Abort an operation when another event fires\n * ```ts\n * const controller = new AbortController();\n * const signal = controller.signal;\n * doAsyncWork(signal);\n * button.addEventListener('click', () => controller.abort());\n * ```\n *\n * @example\n * Share aborter cross multiple operations in 30s\n * ```ts\n * // Upload the same data to 2 different data centers at the same time,\n * // abort another when any of them is finished\n * const controller = AbortController.withTimeout(30 * 1000);\n * doAsyncWork(controller.signal).then(controller.abort);\n * doAsyncWork(controller.signal).then(controller.abort);\n *```\n *\n * @example\n * Cascaded aborting\n * ```ts\n * // All operations can't take more than 30 seconds\n * const aborter = Aborter.timeout(30 * 1000);\n *\n * // Following 2 operations can't take more than 25 seconds\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * ```\n */\n\nvar AbortController = function () {\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  function AbortController(parentSignals) {\n    var _this = this;\n\n    this._signal = new AbortSignal();\n\n    if (!parentSignals) {\n      return;\n    } // coerce parentSignals into an array\n\n\n    if (!Array.isArray(parentSignals)) {\n      // eslint-disable-next-line prefer-rest-params\n      parentSignals = arguments;\n    }\n\n    for (var _i = 0, parentSignals_1 = parentSignals; _i < parentSignals_1.length; _i++) {\n      var parentSignal = parentSignals_1[_i]; // if the parent signal has already had abort() called,\n      // then call abort on this signal as well.\n\n      if (parentSignal.aborted) {\n        this.abort();\n      } else {\n        // when the parent signal aborts, this signal should as well.\n        parentSignal.addEventListener(\"abort\", function () {\n          _this.abort();\n        });\n      }\n    }\n  }\n\n  Object.defineProperty(AbortController.prototype, \"signal\", {\n    /**\n     * The AbortSignal associated with this controller that will signal aborted\n     * when the abort method is called on this controller.\n     *\n     * @readonly\n     */\n    get: function () {\n      return this._signal;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Signal that any operations passed this controller's associated abort signal\n   * to cancel any remaining work and throw an `AbortError`.\n   */\n\n  AbortController.prototype.abort = function () {\n    abortSignal(this._signal);\n  };\n  /**\n   * Creates a new AbortSignal instance that will abort after the provided ms.\n   * @param ms - Elapsed time in milliseconds to trigger an abort.\n   */\n\n\n  AbortController.timeout = function (ms) {\n    var signal = new AbortSignal();\n    var timer = setTimeout(abortSignal, ms, signal); // Prevent the active Timer from keeping the Node.js event loop active.\n\n    if (typeof timer.unref === \"function\") {\n      timer.unref();\n    }\n\n    return signal;\n  };\n\n  return AbortController;\n}();\n\nexport { AbortController }; //# sourceMappingURL=AbortController.js.map","map":{"version":3,"sources":["F:/statvalu/AR_DocuExpert_Test/node_modules/@azure/abort-controller/dist-esm/src/AbortController.js"],"names":["__extends","AbortSignal","abortSignal","AbortError","_super","message","_this","call","name","Error","AbortController","parentSignals","_signal","Array","isArray","arguments","_i","parentSignals_1","length","parentSignal","aborted","abort","addEventListener","Object","defineProperty","prototype","get","enumerable","configurable","timeout","ms","signal","timer","setTimeout","unref"],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __extends } from \"tslib\";\nimport { AbortSignal, abortSignal } from \"./AbortSignal\";\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * ```ts\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n * ```\n */\nvar AbortError = /** @class */ (function (_super) {\n    __extends(AbortError, _super);\n    function AbortError(message) {\n        var _this = _super.call(this, message) || this;\n        _this.name = \"AbortError\";\n        return _this;\n    }\n    return AbortError;\n}(Error));\nexport { AbortError };\n/**\n * An AbortController provides an AbortSignal and the associated controls to signal\n * that an asynchronous operation should be aborted.\n *\n * @example\n * Abort an operation when another event fires\n * ```ts\n * const controller = new AbortController();\n * const signal = controller.signal;\n * doAsyncWork(signal);\n * button.addEventListener('click', () => controller.abort());\n * ```\n *\n * @example\n * Share aborter cross multiple operations in 30s\n * ```ts\n * // Upload the same data to 2 different data centers at the same time,\n * // abort another when any of them is finished\n * const controller = AbortController.withTimeout(30 * 1000);\n * doAsyncWork(controller.signal).then(controller.abort);\n * doAsyncWork(controller.signal).then(controller.abort);\n *```\n *\n * @example\n * Cascaded aborting\n * ```ts\n * // All operations can't take more than 30 seconds\n * const aborter = Aborter.timeout(30 * 1000);\n *\n * // Following 2 operations can't take more than 25 seconds\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * ```\n */\nvar AbortController = /** @class */ (function () {\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    function AbortController(parentSignals) {\n        var _this = this;\n        this._signal = new AbortSignal();\n        if (!parentSignals) {\n            return;\n        }\n        // coerce parentSignals into an array\n        if (!Array.isArray(parentSignals)) {\n            // eslint-disable-next-line prefer-rest-params\n            parentSignals = arguments;\n        }\n        for (var _i = 0, parentSignals_1 = parentSignals; _i < parentSignals_1.length; _i++) {\n            var parentSignal = parentSignals_1[_i];\n            // if the parent signal has already had abort() called,\n            // then call abort on this signal as well.\n            if (parentSignal.aborted) {\n                this.abort();\n            }\n            else {\n                // when the parent signal aborts, this signal should as well.\n                parentSignal.addEventListener(\"abort\", function () {\n                    _this.abort();\n                });\n            }\n        }\n    }\n    Object.defineProperty(AbortController.prototype, \"signal\", {\n        /**\n         * The AbortSignal associated with this controller that will signal aborted\n         * when the abort method is called on this controller.\n         *\n         * @readonly\n         */\n        get: function () {\n            return this._signal;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Signal that any operations passed this controller's associated abort signal\n     * to cancel any remaining work and throw an `AbortError`.\n     */\n    AbortController.prototype.abort = function () {\n        abortSignal(this._signal);\n    };\n    /**\n     * Creates a new AbortSignal instance that will abort after the provided ms.\n     * @param ms - Elapsed time in milliseconds to trigger an abort.\n     */\n    AbortController.timeout = function (ms) {\n        var signal = new AbortSignal();\n        var timer = setTimeout(abortSignal, ms, signal);\n        // Prevent the active Timer from keeping the Node.js event loop active.\n        if (typeof timer.unref === \"function\") {\n            timer.unref();\n        }\n        return signal;\n    };\n    return AbortController;\n}());\nexport { AbortController };\n//# sourceMappingURL=AbortController.js.map"]},"metadata":{},"sourceType":"module"}