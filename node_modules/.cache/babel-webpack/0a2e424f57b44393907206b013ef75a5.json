{"ast":null,"code":"import _asyncToGenerator from \"F:/statvalu/project/AR_DocuExpert_Test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy, isNode } from \"@azure/core-http\";\nimport { HeaderConstants, UrlConstants } from \"../utils/constants\";\nimport { setURLParameter } from \"../utils/utils.common\";\n/**\n * StorageBrowserPolicy will handle differences between Node.js and browser runtime, including:\n *\n * 1. Browsers cache GET/HEAD requests by adding conditional headers such as 'IF_MODIFIED_SINCE'.\n * StorageBrowserPolicy is a policy used to add a timestamp query to GET/HEAD request URL\n * thus avoid the browser cache.\n *\n * 2. Remove cookie header for security\n *\n * 3. Remove content-length header to avoid browsers warning\n */\n\nexport class StorageBrowserPolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of StorageBrowserPolicy.\n   * @param nextPolicy -\n   * @param options -\n   */\n  // The base class has a protected constructor. Adding a public one to enable constructing of this class.\n\n  /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/\n  constructor(nextPolicy, options) {\n    super(nextPolicy, options);\n  }\n  /**\n   * Sends out request.\n   *\n   * @param request -\n   */\n\n\n  sendRequest(request) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (isNode) {\n        return _this._nextPolicy.sendRequest(request);\n      }\n\n      if (request.method.toUpperCase() === \"GET\" || request.method.toUpperCase() === \"HEAD\") {\n        request.url = setURLParameter(request.url, UrlConstants.Parameters.FORCE_BROWSER_NO_CACHE, new Date().getTime().toString());\n      }\n\n      request.headers.remove(HeaderConstants.COOKIE); // According to XHR standards, content-length should be fully controlled by browsers\n\n      request.headers.remove(HeaderConstants.CONTENT_LENGTH); // DFS flush file API requires content-length=0, workaround to force browsers add content-length header\n\n      if (request.method === \"PATCH\" && request.body === undefined) {\n        request.body = \"\";\n      }\n\n      return _this._nextPolicy.sendRequest(request);\n    })();\n  }\n\n} //# sourceMappingURL=StorageBrowserPolicy.js.map","map":{"version":3,"sources":["F:/statvalu/project/AR_DocuExpert_Test/node_modules/@azure/storage-file-datalake/dist-esm/storage-file-datalake/src/policies/StorageBrowserPolicy.js"],"names":["BaseRequestPolicy","isNode","HeaderConstants","UrlConstants","setURLParameter","StorageBrowserPolicy","constructor","nextPolicy","options","sendRequest","request","_nextPolicy","method","toUpperCase","url","Parameters","FORCE_BROWSER_NO_CACHE","Date","getTime","toString","headers","remove","COOKIE","CONTENT_LENGTH","body","undefined"],"mappings":";AAAA;AACA;AACA,SAASA,iBAAT,EAA4BC,MAA5B,QAA0C,kBAA1C;AACA,SAASC,eAAT,EAA0BC,YAA1B,QAA8C,oBAA9C;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,oBAAN,SAAmCL,iBAAnC,CAAqD;AACxD;AACJ;AACA;AACA;AACA;AACI;;AACA;AACAM,EAAAA,WAAW,CAACC,UAAD,EAAaC,OAAb,EAAsB;AAC7B,UAAMD,UAAN,EAAkBC,OAAlB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACUC,EAAAA,WAAW,CAACC,OAAD,EAAU;AAAA;;AAAA;AACvB,UAAIT,MAAJ,EAAY;AACR,eAAO,KAAI,CAACU,WAAL,CAAiBF,WAAjB,CAA6BC,OAA7B,CAAP;AACH;;AACD,UAAIA,OAAO,CAACE,MAAR,CAAeC,WAAf,OAAiC,KAAjC,IAA0CH,OAAO,CAACE,MAAR,CAAeC,WAAf,OAAiC,MAA/E,EAAuF;AACnFH,QAAAA,OAAO,CAACI,GAAR,GAAcV,eAAe,CAACM,OAAO,CAACI,GAAT,EAAcX,YAAY,CAACY,UAAb,CAAwBC,sBAAtC,EAA8D,IAAIC,IAAJ,GAAWC,OAAX,GAAqBC,QAArB,EAA9D,CAA7B;AACH;;AACDT,MAAAA,OAAO,CAACU,OAAR,CAAgBC,MAAhB,CAAuBnB,eAAe,CAACoB,MAAvC,EAPuB,CAQvB;;AACAZ,MAAAA,OAAO,CAACU,OAAR,CAAgBC,MAAhB,CAAuBnB,eAAe,CAACqB,cAAvC,EATuB,CAUvB;;AACA,UAAIb,OAAO,CAACE,MAAR,KAAmB,OAAnB,IAA8BF,OAAO,CAACc,IAAR,KAAiBC,SAAnD,EAA8D;AAC1Df,QAAAA,OAAO,CAACc,IAAR,GAAe,EAAf;AACH;;AACD,aAAO,KAAI,CAACb,WAAL,CAAiBF,WAAjB,CAA6BC,OAA7B,CAAP;AAduB;AAe1B;;AA/BuD,C,CAiC5D","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy, isNode } from \"@azure/core-http\";\nimport { HeaderConstants, UrlConstants } from \"../utils/constants\";\nimport { setURLParameter } from \"../utils/utils.common\";\n/**\n * StorageBrowserPolicy will handle differences between Node.js and browser runtime, including:\n *\n * 1. Browsers cache GET/HEAD requests by adding conditional headers such as 'IF_MODIFIED_SINCE'.\n * StorageBrowserPolicy is a policy used to add a timestamp query to GET/HEAD request URL\n * thus avoid the browser cache.\n *\n * 2. Remove cookie header for security\n *\n * 3. Remove content-length header to avoid browsers warning\n */\nexport class StorageBrowserPolicy extends BaseRequestPolicy {\n    /**\n     * Creates an instance of StorageBrowserPolicy.\n     * @param nextPolicy -\n     * @param options -\n     */\n    // The base class has a protected constructor. Adding a public one to enable constructing of this class.\n    /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/\n    constructor(nextPolicy, options) {\n        super(nextPolicy, options);\n    }\n    /**\n     * Sends out request.\n     *\n     * @param request -\n     */\n    async sendRequest(request) {\n        if (isNode) {\n            return this._nextPolicy.sendRequest(request);\n        }\n        if (request.method.toUpperCase() === \"GET\" || request.method.toUpperCase() === \"HEAD\") {\n            request.url = setURLParameter(request.url, UrlConstants.Parameters.FORCE_BROWSER_NO_CACHE, new Date().getTime().toString());\n        }\n        request.headers.remove(HeaderConstants.COOKIE);\n        // According to XHR standards, content-length should be fully controlled by browsers\n        request.headers.remove(HeaderConstants.CONTENT_LENGTH);\n        // DFS flush file API requires content-length=0, workaround to force browsers add content-length header\n        if (request.method === \"PATCH\" && request.body === undefined) {\n            request.body = \"\";\n        }\n        return this._nextPolicy.sendRequest(request);\n    }\n}\n//# sourceMappingURL=StorageBrowserPolicy.js.map"]},"metadata":{},"sourceType":"module"}