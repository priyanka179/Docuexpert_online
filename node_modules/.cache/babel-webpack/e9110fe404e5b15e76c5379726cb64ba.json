{"ast":null,"code":"import _asyncToGenerator from \"F:/statvalu/project/AR_DocuExpert_Test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"../policies/requestPolicy\";\nimport { Constants } from \"../util/constants\";\nimport { delay } from \"../util/delay\"; // Default options for the cycler if none are provided\n\nexport const DEFAULT_CYCLER_OPTIONS = {\n  forcedRefreshWindowInMs: 1000,\n  retryIntervalInMs: 3000,\n  refreshWindowInMs: 1000 * 60 * 2 // Start refreshing 2m before expiry\n\n};\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - a function that produces a promise of an access\n * token that may fail by returning null\n * @param retryIntervalInMs - the time (in milliseconds) to wait between retry\n * attempts\n * @param timeoutInMs - the timestamp after which the refresh attempt will fail,\n * throwing an exception\n * @returns - a promise that, if it resolves, will resolve with an access token\n */\n\nfunction beginRefresh(_x, _x2, _x3) {\n  return _beginRefresh.apply(this, arguments);\n}\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param scopes - the scopes to request authorization for\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\n\n\nfunction _beginRefresh() {\n  _beginRefresh = _asyncToGenerator(function* (getAccessToken, retryIntervalInMs, timeoutInMs) {\n    // This wrapper handles exceptions gracefully as long as we haven't exceeded\n    // the timeout.\n    function tryGetAccessToken() {\n      return _tryGetAccessToken.apply(this, arguments);\n    }\n\n    function _tryGetAccessToken() {\n      _tryGetAccessToken = _asyncToGenerator(function* () {\n        if (Date.now() < timeoutInMs) {\n          try {\n            return yield getAccessToken();\n          } catch (_a) {\n            return null;\n          }\n        } else {\n          const finalToken = yield getAccessToken(); // Timeout is up, so throw if it's still null\n\n          if (finalToken === null) {\n            throw new Error(\"Failed to refresh access token.\");\n          }\n\n          return finalToken;\n        }\n      });\n      return _tryGetAccessToken.apply(this, arguments);\n    }\n\n    let token = yield tryGetAccessToken();\n\n    while (token === null) {\n      yield delay(retryIntervalInMs);\n      token = yield tryGetAccessToken();\n    }\n\n    return token;\n  });\n  return _beginRefresh.apply(this, arguments);\n}\n\nfunction createTokenCycler(credential, scopes, tokenCyclerOptions) {\n  let refreshWorker = null;\n  let token = null;\n  const options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);\n  /**\n   * This little holder defines several predicates that we use to construct\n   * the rules of refreshing the token.\n   */\n\n  const cycler = {\n    /**\n     * Produces true if a refresh job is currently in progress.\n     */\n    get isRefreshing() {\n      return refreshWorker !== null;\n    },\n\n    /**\n     * Produces true if the cycler SHOULD refresh (we are within the refresh\n     * window and not already refreshing)\n     */\n    get shouldRefresh() {\n      var _a;\n\n      return !cycler.isRefreshing && ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now();\n    },\n\n    /**\n     * Produces true if the cycler MUST refresh (null or nearly-expired\n     * token).\n     */\n    get mustRefresh() {\n      return token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now();\n    }\n\n  };\n  /**\n   * Starts a refresh job or returns the existing job if one is already\n   * running.\n   */\n\n  function refresh(getTokenOptions) {\n    var _a;\n\n    if (!cycler.isRefreshing) {\n      // We bind `scopes` here to avoid passing it around a lot\n      const tryGetAccessToken = () => credential.getToken(scopes, getTokenOptions); // Take advantage of promise chaining to insert an assignment to `token`\n      // before the refresh can be considered done.\n\n\n      refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs, // If we don't have a token, then we should timeout immediately\n      (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now()).then(_token => {\n        refreshWorker = null;\n        token = _token;\n        return token;\n      }).catch(reason => {\n        // We also should reset the refresher if we enter a failed state.  All\n        // existing awaiters will throw, but subsequent requests will start a\n        // new retry chain.\n        refreshWorker = null;\n        token = null;\n        throw reason;\n      });\n    }\n\n    return refreshWorker;\n  }\n\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (tokenOptions) {\n      //\n      // Simple rules:\n      // - If we MUST refresh, then return the refresh task, blocking\n      //   the pipeline until a token is available.\n      // - If we SHOULD refresh, then run refresh but don't return it\n      //   (we can still use the cached token).\n      // - Return the token, since it's fine if we didn't return in\n      //   step 1.\n      //\n      if (cycler.mustRefresh) return refresh(tokenOptions);\n\n      if (cycler.shouldRefresh) {\n        refresh(tokenOptions);\n      }\n\n      return token;\n    });\n\n    return function (_x4) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n} // #endregion\n\n/**\n * Creates a new factory for a RequestPolicy that applies a bearer token to\n * the requests' `Authorization` headers.\n *\n * @param credential - The TokenCredential implementation that can supply the bearer token.\n * @param scopes - The scopes for which the bearer token applies.\n */\n\n\nexport function bearerTokenAuthenticationPolicy(credential, scopes) {\n  // This simple function encapsulates the entire process of reliably retrieving the token\n  const getToken = createTokenCycler(credential, scopes\n  /* , options */\n  );\n\n  class BearerTokenAuthenticationPolicy extends BaseRequestPolicy {\n    constructor(nextPolicy, options) {\n      super(nextPolicy, options);\n    }\n\n    sendRequest(webResource) {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        if (!webResource.url.toLowerCase().startsWith(\"https://\")) {\n          throw new Error(\"Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.\");\n        }\n\n        const {\n          token\n        } = yield getToken({\n          abortSignal: webResource.abortSignal,\n          tracingOptions: {\n            tracingContext: webResource.tracingContext\n          }\n        });\n        webResource.headers.set(Constants.HeaderConstants.AUTHORIZATION, `Bearer ${token}`);\n        return _this._nextPolicy.sendRequest(webResource);\n      })();\n    }\n\n  }\n\n  return {\n    create: (nextPolicy, options) => {\n      return new BearerTokenAuthenticationPolicy(nextPolicy, options);\n    }\n  };\n} //# sourceMappingURL=bearerTokenAuthenticationPolicy.js.map","map":{"version":3,"sources":["F:/statvalu/project/AR_DocuExpert_Test/node_modules/@azure/core-http/dist-esm/src/policies/bearerTokenAuthenticationPolicy.js"],"names":["BaseRequestPolicy","Constants","delay","DEFAULT_CYCLER_OPTIONS","forcedRefreshWindowInMs","retryIntervalInMs","refreshWindowInMs","beginRefresh","getAccessToken","timeoutInMs","tryGetAccessToken","Date","now","_a","finalToken","Error","token","createTokenCycler","credential","scopes","tokenCyclerOptions","refreshWorker","options","Object","assign","cycler","isRefreshing","shouldRefresh","expiresOnTimestamp","mustRefresh","refresh","getTokenOptions","getToken","then","_token","catch","reason","tokenOptions","bearerTokenAuthenticationPolicy","BearerTokenAuthenticationPolicy","constructor","nextPolicy","sendRequest","webResource","url","toLowerCase","startsWith","abortSignal","tracingOptions","tracingContext","headers","set","HeaderConstants","AUTHORIZATION","_nextPolicy","create"],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"../policies/requestPolicy\";\nimport { Constants } from \"../util/constants\";\nimport { delay } from \"../util/delay\";\n// Default options for the cycler if none are provided\nexport const DEFAULT_CYCLER_OPTIONS = {\n    forcedRefreshWindowInMs: 1000,\n    retryIntervalInMs: 3000,\n    refreshWindowInMs: 1000 * 60 * 2 // Start refreshing 2m before expiry\n};\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - a function that produces a promise of an access\n * token that may fail by returning null\n * @param retryIntervalInMs - the time (in milliseconds) to wait between retry\n * attempts\n * @param timeoutInMs - the timestamp after which the refresh attempt will fail,\n * throwing an exception\n * @returns - a promise that, if it resolves, will resolve with an access token\n */\nasync function beginRefresh(getAccessToken, retryIntervalInMs, timeoutInMs) {\n    // This wrapper handles exceptions gracefully as long as we haven't exceeded\n    // the timeout.\n    async function tryGetAccessToken() {\n        if (Date.now() < timeoutInMs) {\n            try {\n                return await getAccessToken();\n            }\n            catch (_a) {\n                return null;\n            }\n        }\n        else {\n            const finalToken = await getAccessToken();\n            // Timeout is up, so throw if it's still null\n            if (finalToken === null) {\n                throw new Error(\"Failed to refresh access token.\");\n            }\n            return finalToken;\n        }\n    }\n    let token = await tryGetAccessToken();\n    while (token === null) {\n        await delay(retryIntervalInMs);\n        token = await tryGetAccessToken();\n    }\n    return token;\n}\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param scopes - the scopes to request authorization for\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nfunction createTokenCycler(credential, scopes, tokenCyclerOptions) {\n    let refreshWorker = null;\n    let token = null;\n    const options = Object.assign(Object.assign({}, DEFAULT_CYCLER_OPTIONS), tokenCyclerOptions);\n    /**\n     * This little holder defines several predicates that we use to construct\n     * the rules of refreshing the token.\n     */\n    const cycler = {\n        /**\n         * Produces true if a refresh job is currently in progress.\n         */\n        get isRefreshing() {\n            return refreshWorker !== null;\n        },\n        /**\n         * Produces true if the cycler SHOULD refresh (we are within the refresh\n         * window and not already refreshing)\n         */\n        get shouldRefresh() {\n            var _a;\n            return (!cycler.isRefreshing &&\n                ((_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : 0) - options.refreshWindowInMs < Date.now());\n        },\n        /**\n         * Produces true if the cycler MUST refresh (null or nearly-expired\n         * token).\n         */\n        get mustRefresh() {\n            return (token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now());\n        }\n    };\n    /**\n     * Starts a refresh job or returns the existing job if one is already\n     * running.\n     */\n    function refresh(getTokenOptions) {\n        var _a;\n        if (!cycler.isRefreshing) {\n            // We bind `scopes` here to avoid passing it around a lot\n            const tryGetAccessToken = () => credential.getToken(scopes, getTokenOptions);\n            // Take advantage of promise chaining to insert an assignment to `token`\n            // before the refresh can be considered done.\n            refreshWorker = beginRefresh(tryGetAccessToken, options.retryIntervalInMs, \n            // If we don't have a token, then we should timeout immediately\n            (_a = token === null || token === void 0 ? void 0 : token.expiresOnTimestamp) !== null && _a !== void 0 ? _a : Date.now())\n                .then((_token) => {\n                refreshWorker = null;\n                token = _token;\n                return token;\n            })\n                .catch((reason) => {\n                // We also should reset the refresher if we enter a failed state.  All\n                // existing awaiters will throw, but subsequent requests will start a\n                // new retry chain.\n                refreshWorker = null;\n                token = null;\n                throw reason;\n            });\n        }\n        return refreshWorker;\n    }\n    return async (tokenOptions) => {\n        //\n        // Simple rules:\n        // - If we MUST refresh, then return the refresh task, blocking\n        //   the pipeline until a token is available.\n        // - If we SHOULD refresh, then run refresh but don't return it\n        //   (we can still use the cached token).\n        // - Return the token, since it's fine if we didn't return in\n        //   step 1.\n        //\n        if (cycler.mustRefresh)\n            return refresh(tokenOptions);\n        if (cycler.shouldRefresh) {\n            refresh(tokenOptions);\n        }\n        return token;\n    };\n}\n// #endregion\n/**\n * Creates a new factory for a RequestPolicy that applies a bearer token to\n * the requests' `Authorization` headers.\n *\n * @param credential - The TokenCredential implementation that can supply the bearer token.\n * @param scopes - The scopes for which the bearer token applies.\n */\nexport function bearerTokenAuthenticationPolicy(credential, scopes) {\n    // This simple function encapsulates the entire process of reliably retrieving the token\n    const getToken = createTokenCycler(credential, scopes /* , options */);\n    class BearerTokenAuthenticationPolicy extends BaseRequestPolicy {\n        constructor(nextPolicy, options) {\n            super(nextPolicy, options);\n        }\n        async sendRequest(webResource) {\n            if (!webResource.url.toLowerCase().startsWith(\"https://\")) {\n                throw new Error(\"Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.\");\n            }\n            const { token } = await getToken({\n                abortSignal: webResource.abortSignal,\n                tracingOptions: {\n                    tracingContext: webResource.tracingContext\n                }\n            });\n            webResource.headers.set(Constants.HeaderConstants.AUTHORIZATION, `Bearer ${token}`);\n            return this._nextPolicy.sendRequest(webResource);\n        }\n    }\n    return {\n        create: (nextPolicy, options) => {\n            return new BearerTokenAuthenticationPolicy(nextPolicy, options);\n        }\n    };\n}\n//# sourceMappingURL=bearerTokenAuthenticationPolicy.js.map"]},"metadata":{},"sourceType":"module"}