{"ast":null,"code":"import _asyncToGenerator from \"F:/statvalu/project/AR_DocuExpert_Test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy, HttpHeaders, isNode } from \"@azure/core-http\";\nimport { HeaderConstants } from \"../utils/constants\";\n/**\n * TelemetryPolicy is a policy used to tag user-agent header for every requests.\n */\n\nexport class TelemetryPolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of TelemetryPolicy.\n   * @param nextPolicy -\n   * @param options -\n   * @param telemetry -\n   */\n  constructor(nextPolicy, options, telemetry) {\n    super(nextPolicy, options);\n    this.telemetry = telemetry;\n  }\n  /**\n   * Sends out request.\n   *\n   * @param request -\n   */\n\n\n  sendRequest(request) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (isNode) {\n        if (!request.headers) {\n          request.headers = new HttpHeaders();\n        }\n\n        if (!request.headers.get(HeaderConstants.USER_AGENT)) {\n          request.headers.set(HeaderConstants.USER_AGENT, _this.telemetry);\n        }\n      }\n\n      return _this._nextPolicy.sendRequest(request);\n    })();\n  }\n\n} //# sourceMappingURL=TelemetryPolicy.js.map","map":{"version":3,"sources":["F:/statvalu/project/AR_DocuExpert_Test/node_modules/@azure/storage-file-datalake/dist-esm/storage-file-datalake/src/policies/TelemetryPolicy.js"],"names":["BaseRequestPolicy","HttpHeaders","isNode","HeaderConstants","TelemetryPolicy","constructor","nextPolicy","options","telemetry","sendRequest","request","headers","get","USER_AGENT","set","_nextPolicy"],"mappings":";AAAA;AACA;AACA,SAASA,iBAAT,EAA4BC,WAA5B,EAAyCC,MAAzC,QAAuD,kBAAvD;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA;AACA;AACA;;AACA,OAAO,MAAMC,eAAN,SAA8BJ,iBAA9B,CAAgD;AACnD;AACJ;AACA;AACA;AACA;AACA;AACIK,EAAAA,WAAW,CAACC,UAAD,EAAaC,OAAb,EAAsBC,SAAtB,EAAiC;AACxC,UAAMF,UAAN,EAAkBC,OAAlB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACUC,EAAAA,WAAW,CAACC,OAAD,EAAU;AAAA;;AAAA;AACvB,UAAIR,MAAJ,EAAY;AACR,YAAI,CAACQ,OAAO,CAACC,OAAb,EAAsB;AAClBD,UAAAA,OAAO,CAACC,OAAR,GAAkB,IAAIV,WAAJ,EAAlB;AACH;;AACD,YAAI,CAACS,OAAO,CAACC,OAAR,CAAgBC,GAAhB,CAAoBT,eAAe,CAACU,UAApC,CAAL,EAAsD;AAClDH,UAAAA,OAAO,CAACC,OAAR,CAAgBG,GAAhB,CAAoBX,eAAe,CAACU,UAApC,EAAgD,KAAI,CAACL,SAArD;AACH;AACJ;;AACD,aAAO,KAAI,CAACO,WAAL,CAAiBN,WAAjB,CAA6BC,OAA7B,CAAP;AATuB;AAU1B;;AA1BkD,C,CA4BvD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy, HttpHeaders, isNode } from \"@azure/core-http\";\nimport { HeaderConstants } from \"../utils/constants\";\n/**\n * TelemetryPolicy is a policy used to tag user-agent header for every requests.\n */\nexport class TelemetryPolicy extends BaseRequestPolicy {\n    /**\n     * Creates an instance of TelemetryPolicy.\n     * @param nextPolicy -\n     * @param options -\n     * @param telemetry -\n     */\n    constructor(nextPolicy, options, telemetry) {\n        super(nextPolicy, options);\n        this.telemetry = telemetry;\n    }\n    /**\n     * Sends out request.\n     *\n     * @param request -\n     */\n    async sendRequest(request) {\n        if (isNode) {\n            if (!request.headers) {\n                request.headers = new HttpHeaders();\n            }\n            if (!request.headers.get(HeaderConstants.USER_AGENT)) {\n                request.headers.set(HeaderConstants.USER_AGENT, this.telemetry);\n            }\n        }\n        return this._nextPolicy.sendRequest(request);\n    }\n}\n//# sourceMappingURL=TelemetryPolicy.js.map"]},"metadata":{},"sourceType":"module"}