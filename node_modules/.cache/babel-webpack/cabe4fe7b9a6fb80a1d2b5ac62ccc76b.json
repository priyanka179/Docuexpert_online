{"ast":null,"code":"import _asyncToGenerator from \"F:/statvalu/project/AR_DocuExpert_Test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { HttpEventType } from '@angular/common/http';\nimport { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport * as XLSX from 'xlsx';\nlet PreviewCsvComponent = class PreviewCsvComponent {\n  constructor(httpClient, _common, sanitizer) {\n    this.httpClient = httpClient;\n    this._common = _common;\n    this.sanitizer = sanitizer; // csvData: any[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\n\n    this.csvData = [];\n    this.maxColumnNum = 0;\n    this.columnSize = 5;\n    this.page = 1;\n    this.pageSize = 14;\n    this.isLinkClicked = false;\n    this.isCsvSplitView = false;\n    this.isShowFullPDF = false;\n    this.hideCsvtoggle = false;\n    this.hidepdftoggle = false;\n    this.isXlView = false;\n    this.path = \"\";\n    this.onClose = new EventEmitter();\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    let formdata = new FormData();\n\n    if (this.path.includes(\"Hard time dashboard\") || this.path.includes(\"AMP Build\")) {\n      this.isCsvSplitView = true;\n    } else {\n      this.isCsvSplitView = false;\n    } // console.log(\"dir path is\",this.path,this.isCsvSplitView)\n\n\n    formdata.append('dir_path', this.path);\n    this.httpClient.post('/document_upload/download_output_files/', formdata, {\n      reportProgress: true,\n      observe: 'events'\n    }).subscribe( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (res) {\n        console.log(\"res is\", res);\n\n        if (res.type === HttpEventType.DownloadProgress) {\n          const percentDone = Math.round(100 * res.loaded / res.total);\n          _this._common.loaderText = `Downloading CSV ${percentDone}%`;\n        }\n\n        if (res.type === HttpEventType.Response) {\n          console.log(atob(res.body['res_data']['encoded_string']));\n\n          if (res.body['res_data']['Filename'].includes('xlsx')) {\n            console.log(\"in xlsx\");\n            _this.isXlView = true; // let xlsxDataParse = await this._common.xlsxtoText(res.body.res_data.encoded_string);\n            // console.log(\">>>>>>>>>>>>>>>>>>>>>>xlsx\",xlsxDataParse)\n\n            const byteCharacters = atob(res.body.res_data.encoded_string); // const byteNumbers = new Array(byteCharacters.length);\n\n            length = byteCharacters.length;\n            let byteNumbers = new Uint8Array(length);\n\n            for (let i = 0; i < byteCharacters.length; i++) {\n              byteNumbers[i] = byteCharacters.charCodeAt(i);\n            }\n\n            console.log(\">>>>>>>buffer\", byteNumbers.buffer);\n            var data = new Uint8Array(byteNumbers.buffer);\n            var arr = new Array();\n\n            for (var i = 0; i != data.length; ++i) arr[i] = String.fromCharCode(data[i]);\n\n            var bstr = arr.join(\"\");\n            var workbook = XLSX.read(bstr, {\n              type: \"binary\"\n            });\n            var first_sheet_name = workbook.SheetNames[0];\n            var worksheet = workbook.Sheets[first_sheet_name];\n            var arraylist = XLSX.utils.sheet_to_json(worksheet, {\n              raw: true\n            });\n            console.log(arraylist);\n\n            let convrtedCSV = _this.convertToCSV(arraylist);\n\n            console.log(convrtedCSV);\n            let solved = yield _this.getMaxColumns(convrtedCSV);\n            _this.csvData = convrtedCSV; // const byteArray = new Uint8Array(byteNumbers);\n            // let objectUrl = URL.createObjectURL(new Blob([byteArray], { type: \"application/xlsx\" }));\n            // this.xlsxPath = this.sanitizer.bypassSecurityTrustResourceUrl(objectUrl);\n          } else {\n            // let csvDataParse = Papa.parse(atob(res.body['res_data']['encoded_string']));\n            let csvDataParse = Papa.parse(yield _this._common.csvToText(res.body.res_data.encoded_string), {\n              skipEmptyLines: true\n            });\n            console.log(csvDataParse);\n            let solved = yield _this.getMaxColumns(csvDataParse.data);\n\n            if (solved) {\n              _this.csvData = csvDataParse.data;\n\n              _this.csvData.forEach((element, ind) => {\n                console.log(\"element is\", element, ind);\n\n                for (let i = 0; i < element.length; i++) {\n                  if (element[i].includes(\".pdf\")) {\n                    element[i] = element[i].split(/\\r?\\n/);\n                  }\n                }\n              });\n\n              console.log(\"csv data\", _this.csvData);\n            }\n          }\n        }\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n\n  convertToCSV(arr) {\n    const array = [Object.keys(arr[0])].concat(arr);\n    let CSVARR = [];\n    array.map(it => {\n      let ele = Object.values(it).toString();\n      CSVARR.push(ele.split(','));\n      return Object.values(it).toString();\n    });\n    return CSVARR;\n  }\n\n  ngAfterViewInit() {\n    console.log(this.tableElement.nativeElement.offsetWidth);\n  }\n\n  getMaxColumns(data) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        for (let i = 0; i < data.length; i++) {\n          _this2.maxColumnNum = Math.max(_this2.maxColumnNum, data[i].length);\n\n          if (i == data.length - 1) {\n            _this2.maxColumnSize = new Array(_this2.maxColumnNum + _this2.columnSize).fill('');\n            resolve(_this2.maxColumnNum);\n          }\n        }\n      });\n    })();\n  }\n\n  fillTable(len) {\n    return new Array(this.maxColumnNum + this.columnSize - len).fill('');\n  }\n\n  getChar(num) {\n    return String.fromCharCode(65 + num);\n  }\n\n  hideCsv() {\n    this.onClose.emit('');\n  }\n\n  isUrl(str) {\n    let basePathList = ['Input', 'Req', 'Err_Info', 'Output', 'G_input'];\n    let isUrl = basePathList.some(basePath => {\n      if (str.includes(basePath)) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    return isUrl;\n  }\n\n  isArray(val) {\n    return Array.isArray(val);\n  }\n\n  redirectToDir(path) {\n    this._common.$hideExternalViewer.next('');\n\n    console.log(path);\n\n    if (path.includes('Input')) {\n      this._common.redirectToDir(path, 'input');\n    } else if (path.includes('Req')) {\n      this._common.redirectToDir(path, 'req');\n    } else if (path.includes('Err_Info')) {\n      this._common.redirectToDir(path, 'err');\n    } else if (path.includes('Output')) {\n      this._common.redirectToDir(path, 'output');\n    } else if (path.includes('G_input')) {\n      path = path + \"/\";\n\n      this._common.redirectToDir(path, 'input');\n    } // window.location.reload();\n\n  }\n\n  showPdfAtRight(path) {\n    // this.pdfFilePath=path\n    if (path.includes(\"/home/statvalu-local/mycontainer\")) {\n      path = path.replace(\"/home/statvalu-local/mycontainer/\", \"\");\n    }\n\n    console.log(path);\n    let formdata = new FormData();\n    formdata.append('dir_path', path);\n    this.httpClient.post('/document_upload/download_output_files/', formdata, {\n      reportProgress: true,\n      observe: 'events'\n    }).subscribe(res => {\n      if (res.type === HttpEventType.DownloadProgress) {\n        const percentDone = Math.round(100 * res.loaded / res.total);\n        this._common.loaderText = `Downloading PDF ${percentDone}%`;\n      }\n\n      if (res.type === HttpEventType.Response) {\n        res['body']['res_data'] && this.readPdf(res['body']['res_data']['encoded_string']);\n      }\n    });\n  }\n\n  readPdf(res) {\n    const byteCharacters = atob(res);\n    const byteNumbers = new Array(byteCharacters.length);\n\n    for (let i = 0; i < byteCharacters.length; i++) {\n      byteNumbers[i] = byteCharacters.charCodeAt(i);\n    }\n\n    const byteArray = new Uint8Array(byteNumbers);\n    let objectUrl = URL.createObjectURL(new Blob([byteArray], {\n      type: \"application/pdf\"\n    }));\n    this.pdfFilePath = this.sanitizer.bypassSecurityTrustResourceUrl(objectUrl);\n\n    if (this.pdfFilePath) {\n      this.isLinkClicked = true;\n    }\n  }\n\n  toggle(id) {\n    this.editRowId = id;\n  }\n\n};\n\n__decorate([Input()], PreviewCsvComponent.prototype, \"path\", void 0);\n\n__decorate([Output()], PreviewCsvComponent.prototype, \"onClose\", void 0);\n\n__decorate([ViewChild('csvtable')], PreviewCsvComponent.prototype, \"tableElement\", void 0);\n\nPreviewCsvComponent = __decorate([Component({\n  selector: 'app-preview-csv',\n  templateUrl: './preview-csv.component.html',\n  styleUrls: ['./preview-csv.component.scss'],\n  styles: []\n})], PreviewCsvComponent);\nexport { PreviewCsvComponent };","map":{"version":3,"sources":["F:\\statvalu\\project\\AR_DocuExpert_Test\\src\\app\\shared\\preview-csv\\preview-csv.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpClient, HttpEventType } from '@angular/common/http';\r\nimport { AfterViewInit, Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { CommonnService } from 'src/app/_helpers/common/commonn.service';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\ndeclare var Papa: any;\r\nimport * as XLSX from 'xlsx'\r\n\r\n@Component({\r\n  selector: 'app-preview-csv',\r\n  templateUrl: './preview-csv.component.html',\r\n  styleUrls: ['./preview-csv.component.scss'],\r\n})\r\nexport class PreviewCsvComponent implements OnInit, AfterViewInit {\r\n\r\n  // csvData: any[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\r\n  csvData: any[] = [];\r\n\r\n  maxColumnNum: number = 0;\r\n  maxColumnSize: any[];\r\n\r\n  columnSize: number = 5;\r\n\r\n  page: number = 1;\r\n  pageSize: number = 14;\r\n\r\n  editRowId: any;\r\n\r\n  isLinkClicked: boolean = false;\r\n  isCsvSplitView: boolean = false;\r\n  isShowFullPDF: boolean = false\r\n  hideCsvtoggle: boolean = false\r\n  hidepdftoggle: boolean = false\r\n  isXlView: boolean = false\r\n\r\n\r\n\r\n  pdfFilePath: any\r\n  xlsxPath: any\r\n\r\n  @Input()\r\n  path: string = \"\";\r\n\r\n  @Output()\r\n  onClose = new EventEmitter();\r\n\r\n  @ViewChild('csvtable') tableElement: ElementRef;\r\n\r\n  constructor(private httpClient: HttpClient, private _common: CommonnService, private sanitizer: DomSanitizer) { }\r\n\r\n  ngOnInit(): void {\r\n    let formdata = new FormData;\r\n    if (this.path.includes(\"Hard time dashboard\") || this.path.includes(\"AMP Build\")) {\r\n      this.isCsvSplitView = true\r\n    } else {\r\n      this.isCsvSplitView = false\r\n    }\r\n\r\n    // console.log(\"dir path is\",this.path,this.isCsvSplitView)\r\n\r\n    formdata.append('dir_path', this.path);\r\n\r\n    this.httpClient.post(\r\n      '/document_upload/download_output_files/',\r\n      formdata, { reportProgress: true, observe: 'events' })\r\n      .subscribe(async (res: any) => {\r\n        console.log(\"res is\", res)\r\n        if (res.type === HttpEventType.DownloadProgress) {\r\n          const percentDone = Math.round(100 * res.loaded / res.total);\r\n          this._common.loaderText = `Downloading CSV ${percentDone}%`;\r\n        }\r\n\r\n        if (res.type === HttpEventType.Response) {\r\n          console.log(atob(res.body['res_data']['encoded_string']));\r\n\r\n          if (res.body['res_data']['Filename'].includes('xlsx')) {\r\n            console.log(\"in xlsx\")\r\n            this.isXlView = true\r\n            // let xlsxDataParse = await this._common.xlsxtoText(res.body.res_data.encoded_string);\r\n\r\n            // console.log(\">>>>>>>>>>>>>>>>>>>>>>xlsx\",xlsxDataParse)\r\n\r\n            const byteCharacters = atob(res.body.res_data.encoded_string);\r\n            // const byteNumbers = new Array(byteCharacters.length);\r\n            length=byteCharacters.length\r\n            let byteNumbers=new Uint8Array(length)\r\n            for (let i = 0; i < byteCharacters.length; i++) {\r\n              byteNumbers[i] = byteCharacters.charCodeAt(i);\r\n            }\r\n            console.log(\">>>>>>>buffer\",byteNumbers.buffer)\r\n\r\n            var data = new Uint8Array(byteNumbers.buffer);    \r\n            var arr = new Array();    \r\n            for(var i = 0; i != data.length; ++i) arr[i] = String.fromCharCode(data[i]);    \r\n            var bstr = arr.join(\"\");    \r\n            var workbook = XLSX.read(bstr, {type:\"binary\"});    \r\n            var first_sheet_name = workbook.SheetNames[0];    \r\n            var worksheet = workbook.Sheets[first_sheet_name]; \r\n            var arraylist = XLSX.utils.sheet_to_json(worksheet,{raw:true});   \r\n            console.log(arraylist); \r\n            let convrtedCSV=this.convertToCSV(arraylist)\r\n            console.log(convrtedCSV)\r\n            let solved = await this.getMaxColumns(convrtedCSV);\r\n            this.csvData=convrtedCSV\r\n\r\n            // const byteArray = new Uint8Array(byteNumbers);\r\n            // let objectUrl = URL.createObjectURL(new Blob([byteArray], { type: \"application/xlsx\" }));\r\n            // this.xlsxPath = this.sanitizer.bypassSecurityTrustResourceUrl(objectUrl);\r\n\r\n\r\n\r\n          } else {\r\n            // let csvDataParse = Papa.parse(atob(res.body['res_data']['encoded_string']));\r\n            let csvDataParse = Papa.parse(await this._common.csvToText(res.body.res_data.encoded_string), { skipEmptyLines: true });\r\n\r\n            console.log(csvDataParse);\r\n\r\n            let solved = await this.getMaxColumns(csvDataParse.data);\r\n            if (solved) {\r\n              this.csvData = csvDataParse.data;\r\n              this.csvData.forEach((element, ind) => {\r\n                console.log(\"element is\", element, ind)\r\n                for (let i = 0; i < element.length; i++) {\r\n                  if (element[i].includes(\".pdf\")) {\r\n                    element[i] = element[i].split(/\\r?\\n/)\r\n                  }\r\n                }\r\n              }\r\n              )\r\n              console.log(\"csv data\", this.csvData)\r\n            }\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\nconvertToCSV(arr:any) {\r\n    const array = [Object.keys(arr[0])].concat(arr)\r\n    let CSVARR:any=[]\r\n  \r\n     array.map(it => {\r\n      let ele=Object.values(it).toString()\r\n      CSVARR.push(ele.split(','))\r\n      return Object.values(it).toString()\r\n    })\r\n\r\n    return CSVARR\r\n\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    console.log(this.tableElement.nativeElement.offsetWidth);\r\n  }\r\n\r\n  async getMaxColumns(data: any) {\r\n    return new Promise((resolve, reject) => {\r\n      for (let i = 0; i < data.length; i++) {\r\n        this.maxColumnNum = Math.max(this.maxColumnNum, data[i].length);\r\n        if (i == data.length - 1) {\r\n          this.maxColumnSize = new Array(this.maxColumnNum + this.columnSize).fill('');\r\n\r\n          resolve(this.maxColumnNum);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  fillTable(len: number) {\r\n    return new Array((this.maxColumnNum + this.columnSize) - len).fill('');\r\n  }\r\n\r\n  getChar(num: number) {\r\n    return String.fromCharCode(65 + num);\r\n  }\r\n\r\n  hideCsv() {\r\n    this.onClose.emit('');\r\n  }\r\n\r\n  isUrl(str: string) {\r\n    let basePathList = ['Input', 'Req', 'Err_Info', 'Output','G_input'];\r\n\r\n    let isUrl = basePathList.some(basePath => {\r\n      if (str.includes(basePath)) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n\r\n    return isUrl;\r\n  }\r\n\r\n  isArray(val: any) {\r\n    return Array.isArray(val)\r\n  }\r\n\r\n  redirectToDir(path: string) {\r\n    this._common.$hideExternalViewer.next('');\r\n    console.log(path);\r\n\r\n    if (path.includes('Input')) {\r\n      this._common.redirectToDir(path, 'input');\r\n    } else if (path.includes('Req')) {\r\n      this._common.redirectToDir(path, 'req');\r\n    } else if (path.includes('Err_Info')) {\r\n      this._common.redirectToDir(path, 'err');\r\n    } else if (path.includes('Output')) {\r\n      this._common.redirectToDir(path, 'output');\r\n    }else if (path.includes('G_input')) {\r\n      path=path+\"/\"\r\n      this._common.redirectToDir(path, 'input');\r\n    }\r\n\r\n    // window.location.reload();\r\n  }\r\n\r\n  showPdfAtRight(path: string) {\r\n    // this.pdfFilePath=path\r\n\r\n    if (path.includes(\"/home/statvalu-local/mycontainer\")) {\r\n      path = path.replace(\"/home/statvalu-local/mycontainer/\", \"\")\r\n    }\r\n\r\n    console.log(path)\r\n    let formdata = new FormData;\r\n\r\n    formdata.append('dir_path', path);\r\n\r\n    this.httpClient.post(\r\n      '/document_upload/download_output_files/',\r\n      formdata, { reportProgress: true, observe: 'events' })\r\n      .subscribe((res: any) => {\r\n        if (res.type === HttpEventType.DownloadProgress) {\r\n          const percentDone = Math.round(100 * res.loaded / res.total);\r\n          this._common.loaderText = `Downloading PDF ${percentDone}%`;\r\n        }\r\n\r\n        if (res.type === HttpEventType.Response) {\r\n          res['body']['res_data'] && this.readPdf(res['body']['res_data']['encoded_string']);\r\n        }\r\n\r\n      });\r\n  }\r\n\r\n  readPdf(res: any) {\r\n    const byteCharacters = atob(res);\r\n    const byteNumbers = new Array(byteCharacters.length);\r\n    for (let i = 0; i < byteCharacters.length; i++) {\r\n      byteNumbers[i] = byteCharacters.charCodeAt(i);\r\n    }\r\n    const byteArray = new Uint8Array(byteNumbers);\r\n    let objectUrl = URL.createObjectURL(new Blob([byteArray], { type: \"application/pdf\" }));\r\n    this.pdfFilePath = this.sanitizer.bypassSecurityTrustResourceUrl(objectUrl);\r\n    if (this.pdfFilePath) {\r\n      this.isLinkClicked = true\r\n    }\r\n\r\n  }\r\n\r\n  toggle(id:number){\r\n    this.editRowId = id;\r\n  }\r\n\r\n\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}