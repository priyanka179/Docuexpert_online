{"version":3,"file":"angular-resizable.directive.d.ts","sources":["angular-resizable.directive.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, Renderer2, OnInit, EventEmitter, OnChanges, SimpleChanges, OnDestroy, AfterViewInit } from '@angular/core';\nimport { ResizeHandle } from './widgets/resize-handle';\nimport { ResizeHandleType } from './models/resize-handle-type';\nimport { IResizeEvent } from './models/resize-event';\nexport declare class AngularResizableDirective implements OnInit, OnChanges, OnDestroy, AfterViewInit {\n    private el;\n    private renderer;\n    private _resizable;\n    private _handles;\n    private _handleType;\n    private _handleResizing;\n    private _direction;\n    private _directionChanged;\n    private _aspectRatio;\n    private _containment;\n    private _origMousePos;\n    /** Original Size and Position */\n    private _origSize;\n    private _origPos;\n    /** Current Size and Position */\n    private _currSize;\n    private _currPos;\n    /** Initial Size and Position */\n    private _initSize;\n    private _initPos;\n    /** Snap to gird */\n    private _gridSize;\n    private _bounding;\n    /**\n     * Bugfix: iFrames, and context unrelated elements block all events, and are unusable\n     * https://github.com/xieziyu/angular2-draggable/issues/84\n     */\n    private _helperBlock;\n    private draggingSub;\n    private _adjusted;\n    /** Disables the resizable if set to false. */\n    ngResizable: any;\n    /**\n     * Which handles can be used for resizing.\n     * @example\n     * [rzHandles] = \"'n,e,s,w,se,ne,sw,nw'\"\n     * equals to: [rzHandles] = \"'all'\"\n     *\n     * */\n    rzHandles: ResizeHandleType;\n    /**\n     * Whether the element should be constrained to a specific aspect ratio.\n     *  Multiple types supported:\n     *  boolean: When set to true, the element will maintain its original aspect ratio.\n     *  number: Force the element to maintain a specific aspect ratio during resizing.\n     */\n    rzAspectRatio: boolean | number;\n    /**\n     * Constrains resizing to within the bounds of the specified element or region.\n     *  Multiple types supported:\n     *  Selector: The resizable element will be contained to the bounding box of the first element found by the selector.\n     *            If no element is found, no containment will be set.\n     *  Element: The resizable element will be contained to the bounding box of this element.\n     *  String: Possible values: \"parent\".\n     */\n    rzContainment: string | HTMLElement;\n    /**\n     * Snaps the resizing element to a grid, every x and y pixels.\n     * A number for both width and height or an array values like [ x, y ]\n     */\n    rzGrid: number | number[];\n    /** The minimum width the resizable should be allowed to resize to. */\n    rzMinWidth: number;\n    /** The minimum height the resizable should be allowed to resize to. */\n    rzMinHeight: number;\n    /** The maximum width the resizable should be allowed to resize to. */\n    rzMaxWidth: number;\n    /** The maximum height the resizable should be allowed to resize to. */\n    rzMaxHeight: number;\n    /** Whether to prevent default event */\n    preventDefaultEvent: boolean;\n    /** emitted when start resizing */\n    rzStart: EventEmitter<IResizeEvent>;\n    /** emitted when start resizing */\n    rzResizing: EventEmitter<IResizeEvent>;\n    /** emitted when stop resizing */\n    rzStop: EventEmitter<IResizeEvent>;\n    constructor(el: ElementRef<HTMLElement>, renderer: Renderer2);\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    ngAfterViewInit(): void;\n    /** A method to reset size */\n    resetSize(): void;\n    /** A method to get current status */\n    getStatus(): {\n        size: {\n            width: number;\n            height: number;\n        };\n        position: {\n            top: number;\n            left: number;\n        };\n    };\n    private updateResizable;\n    /** Use it to update aspect */\n    private updateAspectRatio;\n    /** Use it to update containment */\n    private updateContainment;\n    /** Use it to create handle divs */\n    private createHandles;\n    /** Use it to create a handle */\n    private createHandleByType;\n    private removeHandles;\n    onMouseDown(event: MouseEvent | TouchEvent, handle: ResizeHandle): void;\n    private subscribeEvents;\n    private unsubscribeEvents;\n    onMouseLeave(): void;\n    onMouseMove(event: MouseEvent | TouchEvent): void;\n    private startResize;\n    private stopResize;\n    private onResizing;\n    private getResizingEvent;\n    private updateDirection;\n    private resizeTo;\n    private doResize;\n    private adjustByRatio;\n    private checkBounds;\n    private checkSize;\n    private getBounding;\n    private resetBounding;\n    private getGridSize;\n}\n"]}