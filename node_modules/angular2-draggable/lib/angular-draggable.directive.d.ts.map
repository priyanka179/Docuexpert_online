{"version":3,"file":"angular-draggable.directive.d.ts","sources":["angular-draggable.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, Renderer2, OnInit, EventEmitter, OnChanges, SimpleChanges, OnDestroy, AfterViewInit } from '@angular/core';\nimport { IPosition } from './models/position';\nexport declare class AngularDraggableDirective implements OnInit, OnDestroy, OnChanges, AfterViewInit {\n    private el;\n    private renderer;\n    private allowDrag;\n    private moving;\n    private orignal;\n    private oldTrans;\n    private tempTrans;\n    private currTrans;\n    private oldZIndex;\n    private _zIndex;\n    private needTransform;\n    private draggingSub;\n    /**\n     * Bugfix: iFrames, and context unrelated elements block all events, and are unusable\n     * https://github.com/xieziyu/angular2-draggable/issues/84\n     */\n    private _helperBlock;\n    started: EventEmitter<any>;\n    stopped: EventEmitter<any>;\n    edge: EventEmitter<any>;\n    /** Make the handle HTMLElement draggable */\n    handle: HTMLElement;\n    /** Set the bounds HTMLElement */\n    bounds: HTMLElement;\n    /** List of allowed out of bounds edges **/\n    outOfBounds: {\n        top: boolean;\n        right: boolean;\n        bottom: boolean;\n        left: boolean;\n    };\n    /** Round the position to nearest grid */\n    gridSize: number;\n    /** Set z-index when dragging */\n    zIndexMoving: string;\n    /** Set z-index when not dragging */\n    zIndex: string;\n    /** Whether to limit the element stay in the bounds */\n    inBounds: boolean;\n    /** Whether the element should use it's previous drag position on a new drag event. */\n    trackPosition: boolean;\n    /** Input css scale transform of element so translations are correct */\n    scale: number;\n    /** Whether to prevent default event */\n    preventDefaultEvent: boolean;\n    /** Set initial position by offsets */\n    position: IPosition;\n    /** Lock axis: 'x' or 'y' */\n    lockAxis: string;\n    /** Emit position offsets when moving */\n    movingOffset: EventEmitter<IPosition>;\n    /** Emit position offsets when put back */\n    endOffset: EventEmitter<IPosition>;\n    ngDraggable: any;\n    constructor(el: ElementRef, renderer: Renderer2);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngAfterViewInit(): void;\n    private getDragEl;\n    resetPosition(): void;\n    private moveTo;\n    private transform;\n    private pickUp;\n    private subscribeEvents;\n    private unsubscribeEvents;\n    boundsCheck(): {\n        'top': boolean;\n        'right': boolean;\n        'bottom': boolean;\n        'left': boolean;\n    };\n    /** Get current offset */\n    getCurrentOffset(): IPosition;\n    private putBack;\n    checkHandleTarget(target: EventTarget, element: Element): boolean;\n    onMouseDown(event: MouseEvent | TouchEvent): void;\n    onMouseMove(event: MouseEvent | TouchEvent): void;\n}\n"]}