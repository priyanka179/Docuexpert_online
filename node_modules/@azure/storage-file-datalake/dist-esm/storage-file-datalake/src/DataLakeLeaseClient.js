import { SpanStatusCode } from "@azure/core-tracing";
import { createSpan } from "./utils/tracing";
export class DataLakeLeaseClient {
    constructor(client) {
        this.client = client;
    }
    get leaseId() {
        return this.client.leaseId;
    }
    get url() {
        return this.client.url;
    }
    async acquireLease(duration, options = {}) {
        options.conditions = options.conditions || {};
        const { span, updatedOptions } = createSpan("DataLakeLeaseClient-acquireLease", options);
        try {
            return await this.client.acquireLease(duration, updatedOptions);
        }
        catch (e) {
            span.setStatus({
                code: SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        }
        finally {
            span.end();
        }
    }
    async changeLease(proposedLeaseId, options = {}) {
        options.conditions = options.conditions || {};
        const { span, updatedOptions } = createSpan("DataLakeLeaseClient-changeLease", options);
        try {
            return await this.client.changeLease(proposedLeaseId, updatedOptions);
        }
        catch (e) {
            span.setStatus({
                code: SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        }
        finally {
            span.end();
        }
    }
    async releaseLease(options = {}) {
        options.conditions = options.conditions || {};
        const { span, updatedOptions } = createSpan("DataLakeLeaseClient-releaseLease", options);
        try {
            return await this.client.releaseLease(updatedOptions);
        }
        catch (e) {
            span.setStatus({
                code: SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        }
        finally {
            span.end();
        }
    }
    async renewLease(options = {}) {
        options.conditions = options.conditions || {};
        const { span, updatedOptions } = createSpan("DataLakeLeaseClient-renewLease", options);
        try {
            return await this.client.renewLease(updatedOptions);
        }
        catch (e) {
            span.setStatus({
                code: SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        }
        finally {
            span.end();
        }
    }
    async breakLease(breakPeriod, options = {}) {
        options.conditions = options.conditions || {};
        const { span, updatedOptions } = createSpan("DataLakeLeaseClient-renewLease", options);
        try {
            return await this.client.breakLease(breakPeriod, updatedOptions);
        }
        catch (e) {
            span.setStatus({
                code: SpanStatusCode.ERROR,
                message: e.message
            });
            throw e;
        }
        finally {
            span.end();
        }
    }
}
//# sourceMappingURL=DataLakeLeaseClient.js.map