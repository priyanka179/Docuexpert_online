{"version":3,"file":"StorageClient.js","sourceRoot":"","sources":["../../../src/StorageClient.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAClC,OAAO,EAAE,MAAM,EAAE,iBAAiB,EAAmB,MAAM,kBAAkB,CAAC;AAG9E,OAAO,EAAE,mBAAmB,EAAE,MAAM,mCAAmC,CAAC;AACxE,OAAO,EAAE,0BAA0B,EAAE,MAAM,0CAA0C,CAAC;AACtF,OAAO,EAAE,oBAAoB,EAAE,MAAM,sCAAsC,CAAC;AAE5E,OAAO,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,MAAM,cAAc,CAAC;AACnE,OAAO,EAAE,aAAa,EAAE,qBAAqB,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,sBAAsB,CAAC;AAYlG;;;GAGG;AACH,MAAM,OAAgB,aAAa;IA8CjC;;;;OAIG;IACH,YAAsB,GAAW,EAAE,QAAkB;QACnD,iFAAiF;QACjF,IAAI,CAAC,GAAG,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;QAC9B,IAAI,CAAC,eAAe,GAAG,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACnD,IAAI,CAAC,cAAc,GAAG,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACjD,IAAI,CAAC,WAAW,GAAG,qBAAqB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAC/D,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,oBAAoB,GAAG,IAAI,oBAAoB,CAClD,IAAI,CAAC,cAAc,EACnB,QAAQ,CAAC,sBAAsB,EAAE,CAClC,CAAC;QACF,IAAI,CAAC,kCAAkC,GAAG,IAAI,oBAAoB,CAChE,IAAI,CAAC,eAAe,EACpB,QAAQ,CAAC,sBAAsB,EAAE,CAClC,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;QAE7D,IAAI,CAAC,UAAU,GAAG,IAAI,mBAAmB,EAAE,CAAC;QAC5C,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE;YAC7C,IACE,CAAC,MAAM,IAAI,OAAO,YAAY,0BAA0B,CAAC;gBACzD,OAAO,YAAY,mBAAmB,EACtC;gBACA,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC;aAC3B;iBAAM,IAAI,iBAAiB,CAAE,OAAe,CAAC,UAAU,CAAC,EAAE;gBACzD,uEAAuE;gBACvE,0DAA0D;gBAC1D,IAAI,CAAC,UAAU,GAAI,OAAe,CAAC,UAAU,CAAC;aAC/C;SACF;QAED,iDAAiD;QACjD,MAAM,oBAAoB,GAAG,IAAI,CAAC,oBAA2B,CAAC;QAC9D,oBAAoB,CAAC,kBAAkB,GAAG,SAAS,CAAC;QACpD,MAAM,oCAAoC,GAAG,IAAI,CAAC,kCAAyC,CAAC;QAC5F,oCAAoC,CAAC,kBAAkB,GAAG,SAAS,CAAC;IACtE,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { isNode, isTokenCredential, TokenCredential } from \"@azure/core-http\";\nimport { OperationTracingOptions } from \"@azure/core-tracing\";\n\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { StorageClientContext } from \"./generated/src/storageClientContext\";\nimport { Pipeline } from \"./Pipeline\";\nimport { toBlobEndpointUrl, toDfsEndpointUrl } from \"./transforms\";\nimport { escapeURLPath, getAccountNameFromUrl, getURLScheme, iEqual } from \"./utils/utils.common\";\n\n/**\n * An interface for options common to every remote operation.\n */\nexport interface CommonOptions {\n  /**\n   * Options to configure spans created when tracing is enabled.\n   */\n  tracingOptions?: OperationTracingOptions;\n}\n\n/**\n * A StorageClient represents a based URL class for {@link BlobServiceClient}, {@link ContainerClient}\n * and etc.\n */\nexport abstract class StorageClient {\n  /**\n   * Encoded URL string value.\n   */\n  public readonly url: string;\n\n  public readonly accountName: string;\n\n  /**\n   * Encoded URL string value for corresponding blob endpoint.\n   */\n  protected readonly blobEndpointUrl: string;\n\n  /**\n   * Encoded URL string value for corresponding dfs endpoint.\n   */\n  protected readonly dfsEndpointUrl: string;\n\n  /**\n   * Request policy pipeline.\n   *\n   * @internal\n   */\n  protected readonly pipeline: Pipeline;\n\n  /**\n   * Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   */\n  public readonly credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential;\n\n  /**\n   * StorageClient is a reference to protocol layer operations entry, which is\n   * generated by AutoRest generator.\n   */\n  protected readonly storageClientContext: StorageClientContext;\n\n  /**\n   * storageClientContextWithBlobEndpoint is a reference to protocol layer operations entry, which is\n   * generated by AutoRest generator, with its url pointing to the Blob endpoint.\n   */\n  protected readonly storageClientContextToBlobEndpoint: StorageClientContext;\n\n  /**\n   */\n  protected readonly isHttps: boolean;\n\n  /**\n   * Creates an instance of StorageClient.\n   * @param url - url to resource\n   * @param pipeline - request policy pipeline.\n   */\n  protected constructor(url: string, pipeline: Pipeline) {\n    // URL should be encoded and only once, protocol layer shouldn't encode URL again\n    this.url = escapeURLPath(url);\n    this.blobEndpointUrl = toBlobEndpointUrl(this.url);\n    this.dfsEndpointUrl = toDfsEndpointUrl(this.url);\n    this.accountName = getAccountNameFromUrl(this.blobEndpointUrl);\n    this.pipeline = pipeline;\n    this.storageClientContext = new StorageClientContext(\n      this.dfsEndpointUrl,\n      pipeline.toServiceClientOptions()\n    );\n    this.storageClientContextToBlobEndpoint = new StorageClientContext(\n      this.blobEndpointUrl,\n      pipeline.toServiceClientOptions()\n    );\n\n    this.isHttps = iEqual(getURLScheme(this.url) || \"\", \"https\");\n\n    this.credential = new AnonymousCredential();\n    for (const factory of this.pipeline.factories) {\n      if (\n        (isNode && factory instanceof StorageSharedKeyCredential) ||\n        factory instanceof AnonymousCredential\n      ) {\n        this.credential = factory;\n      } else if (isTokenCredential((factory as any).credential)) {\n        // Only works if the factory has been attached a \"credential\" property.\n        // We do that in newPipeline() when using TokenCredential.\n        this.credential = (factory as any).credential;\n      }\n    }\n\n    // Override protocol layer's default content-type\n    const storageClientContext = this.storageClientContext as any;\n    storageClientContext.requestContentType = undefined;\n    const storageClientContextWithBlobEndpoint = this.storageClientContextToBlobEndpoint as any;\n    storageClientContextWithBlobEndpoint.requestContentType = undefined;\n  }\n}\n"]}