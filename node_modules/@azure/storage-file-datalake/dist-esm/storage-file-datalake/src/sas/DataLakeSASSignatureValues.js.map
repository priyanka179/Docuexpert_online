{"version":3,"file":"DataLakeSASSignatureValues.js","sourceRoot":"","sources":["../../../../src/sas/DataLakeSASSignatureValues.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { StorageSharedKeyCredential } from \"../credentials/StorageSharedKeyCredential\";\nimport { UserDelegationKeyCredential } from \"../credentials/UserDelegationKeyCredential\";\nimport { DataLakeSASPermissions } from \"./DataLakeSASPermissions\";\nimport { FileSystemSASPermissions } from \"./FileSystemSASPermissions\";\nimport { UserDelegationKey } from \"../models\";\nimport { ipRangeToString, SasIPRange } from \"./SasIPRange\";\nimport { SASProtocol, SASQueryParameters } from \"./SASQueryParameters\";\nimport { SERVICE_VERSION } from \"../utils/constants\";\nimport { truncatedISO8061Date } from \"../utils/utils.common\";\nimport { DirectorySASPermissions } from \"./DirectorySASPermissions\";\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * DataLakeSASSignatureValues is used to help generating Blob and DataLake service SAS tokens for containers, blobs, filesystem, directories and files.\n */\nexport interface DataLakeSASSignatureValues {\n  /**\n   * The version of the service this SAS will target. If not specified, it will default to the version targeted by the\n   * library.\n   */\n  version?: string;\n\n  /**\n   * Optional. SAS protocols, HTTPS only or HTTPSandHTTP\n   */\n  protocol?: SASProtocol;\n\n  /**\n   * Optional. When the SAS will take effect.\n   */\n  startsOn?: Date;\n\n  /**\n   * Optional only when identifier is provided. The time after which the SAS will no longer work.\n   */\n  expiresOn?: Date;\n\n  /**\n   * Optional only when identifier is provided.\n   * Please refer to {@link FileSystemSASPermissions}, {@link DirectorySASPermissions} or {@link DataLakeSASPermissions} depending on the resource\n   * being accessed for help constructing the permissions string.\n   */\n  permissions?: DataLakeSASPermissions | DirectorySASPermissions | FileSystemSASPermissions;\n\n  /**\n   * Optional. IP ranges allowed in this SAS.\n   */\n  ipRange?: SasIPRange;\n\n  /**\n   * The name of the file system the SAS user may access.\n   */\n  fileSystemName: string;\n\n  /**\n   * Optional. The path name of the directory or file SAS user may access. Required if snapshotTime is provided.\n   */\n  pathName?: string;\n\n  /**\n   * Optional. Beginning in version 2020-02-10, this value defines whether or not the {@link pathName} is a directory.\n   * If this value is set to true, the Path is a Directory for a Directory SAS. If set to false or default, the Path\n   * is a File Path for a File Path SAS.\n   */\n  isDirectory?: boolean;\n\n  /**\n   * Optional. Beginning in version 2020-02-10, indicate the depth of the directory specified in the canonicalizedresource field of the string-to-sign.\n   * The depth of the directory is the number of directories beneath the root folder.\n   */\n  directoryDepth?: number;\n\n  /**\n   * Optional. Beginning in version 2020-02-10, specifies the Authorized AAD Object Id in GUID format. The AAD Object ID of a user\n   * authorized by the owner of the user delegation key to perform the action granted by the SAS. The Azure Storage service will\n   * ensure that the owner of the user delegation key has the required permissions before granting access but no additional permission\n   * check for the user specified in this value will be performed. This cannot be used in conjuction with {@link agentObjectId}.\n   * This is only used for User Delegation SAS.\n   */\n  preauthorizedAgentObjectId?: string;\n\n  /**\n   * Optional. Beginning in version 2020-02-10, specifies the Unauthorized AAD Object Id in GUID format. The AAD Object Id of a user that is assumed\n   * to be unauthorized by the owner of the user delegation key. The Azure Storage Service will perform an additional POSIX ACL check to determine\n   * if the user is authorized to perform the requested operation. This cannot be used in conjuction with {@link preauthorizedAgentObjectId}.\n   * This is only used for User Delegation SAS.\n   */\n  agentObjectId?: string;\n\n  /**\n   * Optional. Beginning in version 2020-02-10, this is a GUID value that will be logged in the storage diagnostic logs and can be used to\n   * correlate SAS generation with storage resource access. This is only used for User Delegation SAS.\n   */\n  correlationId?: string;\n\n  /**\n   * Optional. Snapshot timestamp string the SAS user may access. Only supported from API version 2018-11-09.\n   */\n  snapshotTime?: string;\n\n  /**\n   * Optional. The name of the access policy on the file system this SAS references if any.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/establishing-a-stored-access-policy\n   */\n  identifier?: string;\n\n  /**\n   * Optional. The cache-control header for the SAS.\n   */\n  cacheControl?: string;\n\n  /**\n   * Optional. The content-disposition header for the SAS.\n   */\n  contentDisposition?: string;\n\n  /**\n   * Optional. The content-encoding header for the SAS.\n   */\n  contentEncoding?: string;\n\n  /**\n   * Optional. The content-language header for the SAS.\n   */\n  contentLanguage?: string;\n\n  /**\n   * Optional. The content-type header for the SAS.\n   */\n  contentType?: string;\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * Fill in the required details before running the following snippets.\n * @example\n * ```js\n * // Generate service level SAS for a file system\n * const containerSAS = generateDataLakeSASQueryParameters({\n *     fileSystemName, // Required\n *     permissions: ContainerSASPermissions.parse(\"racwdl\"), // Required\n *     startsOn: new Date(), // Optional\n *     expiresOn: new Date(new Date().valueOf() + 86400), // Required. Date type\n *     ipRange: { start: \"0.0.0.0\", end: \"255.255.255.255\" }, // Optional\n *     protocol: SASProtocol.HttpsAndHttp, // Optional\n *     version: \"2016-05-31\" // Optional\n *   },\n *   sharedKeyCredential // StorageSharedKeyCredential - `new StorageSharedKeyCredential(account, accountKey)`\n * ).toString();\n * ```\n *\n * // Fill in the required details before running the snippet.\n * @example\n * ```js\n * // Generate service level SAS for a file\n * const fileSAS = generateDataLakeSASQueryParameters({\n *     fileSystemName, // Required\n *     fileName, // Required\n *     permissions: DataLakeSASPermissions.parse(\"racwd\"), // Required\n *     startsOn: new Date(), // Optional\n *     expiresOn: new Date(new Date().valueOf() + 86400), // Required. Date type\n *     cacheControl: \"cache-control-override\", // Optional\n *     contentDisposition: \"content-disposition-override\", // Optional\n *     contentEncoding: \"content-encoding-override\", // Optional\n *     contentLanguage: \"content-language-override\", // Optional\n *     contentType: \"content-type-override\", // Optional\n *     ipRange: { start: \"0.0.0.0\", end: \"255.255.255.255\" }, // Optional\n *     protocol: SASProtocol.HttpsAndHttp, // Optional\n *     version: \"2016-05-31\" // Optional\n *   },\n *   sharedKeyCredential // StorageSharedKeyCredential - `new StorageSharedKeyCredential(account, accountKey)`\n * ).toString();\n * ```\n *\n * @param dataLakeSASSignatureValues -\n * @param sharedKeyCredential -\n */\nexport function generateDataLakeSASQueryParameters(\n  dataLakeSASSignatureValues: DataLakeSASSignatureValues,\n  sharedKeyCredential: StorageSharedKeyCredential\n): SASQueryParameters;\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Creates an instance of SASQueryParameters.\n * WARNING: identifier will be ignored when generating user delegation SAS, permissions and expiresOn are required.\n *\n * @example\n * ```js\n * // Generate user delegation SAS for a file system\n * const userDelegationKey = await dataLakeServiceClient.getUserDelegationKey(startsOn, expiresOn);\n * const fileSystemSAS = generateDataLakeSASQueryParameters({\n *     fileSystemName, // Required\n *     permissions: FileSystemSASPermissions.parse(\"racwdl\"), // Required\n *     startsOn, // Optional. Date type\n *     expiresOn, // Required. Date type\n *     ipRange: { start: \"0.0.0.0\", end: \"255.255.255.255\" }, // Optional\n *     protocol: SASProtocol.HttpsAndHttp, // Optional\n *     version: \"2018-11-09\" // Must greater than or equal to 2018-11-09 to generate user delegation SAS\n *   },\n *   userDelegationKey, // UserDelegationKey\n *   accountName\n * ).toString();\n * ```\n *\n * @param dataLakeSASSignatureValues -\n * @param userDelegationKey - Return value of `blobServiceClient.getUserDelegationKey()`\n * @param accountName -\n */\nexport function generateDataLakeSASQueryParameters(\n  dataLakeSASSignatureValues: DataLakeSASSignatureValues,\n  userDelegationKey: UserDelegationKey,\n  accountName: string\n): SASQueryParameters;\n\nexport function generateDataLakeSASQueryParameters(\n  dataLakeSASSignatureValues: DataLakeSASSignatureValues,\n  sharedKeyCredentialOrUserDelegationKey: StorageSharedKeyCredential | UserDelegationKey,\n  accountName?: string\n): SASQueryParameters {\n  const version = dataLakeSASSignatureValues.version\n    ? dataLakeSASSignatureValues.version\n    : SERVICE_VERSION;\n\n  const sharedKeyCredential =\n    sharedKeyCredentialOrUserDelegationKey instanceof StorageSharedKeyCredential\n      ? sharedKeyCredentialOrUserDelegationKey\n      : undefined;\n  let userDelegationKeyCredential: UserDelegationKeyCredential | undefined;\n\n  if (sharedKeyCredential === undefined && accountName !== undefined) {\n    userDelegationKeyCredential = new UserDelegationKeyCredential(\n      accountName,\n      sharedKeyCredentialOrUserDelegationKey as UserDelegationKey\n    );\n  }\n\n  if (sharedKeyCredential === undefined && userDelegationKeyCredential === undefined) {\n    throw TypeError(\"Invalid sharedKeyCredential, userDelegationKey or accountName.\");\n  }\n\n  // Version 2018-11-09 adds support for the signed resource and signed blob snapshot time fields.\n  // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas#constructing-the-signature-string\n  if (version >= \"2018-11-09\") {\n    if (sharedKeyCredential !== undefined) {\n      return generateBlobSASQueryParameters20181109(\n        dataLakeSASSignatureValues,\n        sharedKeyCredential\n      );\n    } else {\n      // Version 2020-02-10 delegation SAS signature construction includes preauthorizedAgentObjectId, agentObjectId, correlationId.\n      if (version >= \"2020-02-10\") {\n        return generateBlobSASQueryParametersUDK20200210(\n          dataLakeSASSignatureValues,\n          userDelegationKeyCredential!\n        );\n      } else {\n        return generateBlobSASQueryParametersUDK20181109(\n          dataLakeSASSignatureValues,\n          userDelegationKeyCredential!\n        );\n      }\n    }\n  }\n\n  if (version >= \"2015-04-05\") {\n    if (sharedKeyCredential !== undefined) {\n      return generateBlobSASQueryParameters20150405(\n        dataLakeSASSignatureValues,\n        sharedKeyCredential\n      );\n    } else {\n      throw new RangeError(\n        \"'version' must be >= '2018-11-09' when generating user delegation SAS using user delegation key.\"\n      );\n    }\n  }\n\n  throw new RangeError(\"'version' must be >= '2015-04-05'.\");\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2015-04-05 AND BEFORE 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * @param dataLakeSASSignatureValues -\n * @param sharedKeyCredential -\n */\nfunction generateBlobSASQueryParameters20150405(\n  dataLakeSASSignatureValues: DataLakeSASSignatureValues,\n  sharedKeyCredential: StorageSharedKeyCredential\n): SASQueryParameters {\n  if (\n    !dataLakeSASSignatureValues.identifier &&\n    !(dataLakeSASSignatureValues.permissions && dataLakeSASSignatureValues.expiresOn)\n  ) {\n    throw new RangeError(\n      \"Must provide 'permissions' and 'expiresOn' for DataLake SAS generation when 'identifier' is not provided.\"\n    );\n  }\n\n  const version = dataLakeSASSignatureValues.version\n    ? dataLakeSASSignatureValues.version\n    : SERVICE_VERSION;\n\n  dataLakeSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(\n    dataLakeSASSignatureValues,\n    version\n  );\n\n  let resource: string = \"c\";\n  if (dataLakeSASSignatureValues.pathName) {\n    resource = \"b\";\n  }\n\n  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n  let verifiedPermissions: string | undefined;\n  if (dataLakeSASSignatureValues.permissions) {\n    if (dataLakeSASSignatureValues.pathName) {\n      verifiedPermissions = DataLakeSASPermissions.parse(\n        dataLakeSASSignatureValues.permissions.toString()\n      ).toString();\n    } else {\n      verifiedPermissions = FileSystemSASPermissions.parse(\n        dataLakeSASSignatureValues.permissions.toString()\n      ).toString();\n    }\n  }\n\n  // Signature is generated on the un-url-encoded values.\n  const stringToSign = [\n    verifiedPermissions ? verifiedPermissions : \"\",\n    dataLakeSASSignatureValues.startsOn\n      ? truncatedISO8061Date(dataLakeSASSignatureValues.startsOn, false)\n      : \"\",\n    dataLakeSASSignatureValues.expiresOn\n      ? truncatedISO8061Date(dataLakeSASSignatureValues.expiresOn, false)\n      : \"\",\n    getCanonicalName(\n      sharedKeyCredential.accountName,\n      dataLakeSASSignatureValues.fileSystemName,\n      dataLakeSASSignatureValues.pathName\n    ),\n    dataLakeSASSignatureValues.identifier,\n    dataLakeSASSignatureValues.ipRange ? ipRangeToString(dataLakeSASSignatureValues.ipRange) : \"\",\n    dataLakeSASSignatureValues.protocol ? dataLakeSASSignatureValues.protocol : \"\",\n    version,\n    dataLakeSASSignatureValues.cacheControl ? dataLakeSASSignatureValues.cacheControl : \"\",\n    dataLakeSASSignatureValues.contentDisposition\n      ? dataLakeSASSignatureValues.contentDisposition\n      : \"\",\n    dataLakeSASSignatureValues.contentEncoding ? dataLakeSASSignatureValues.contentEncoding : \"\",\n    dataLakeSASSignatureValues.contentLanguage ? dataLakeSASSignatureValues.contentLanguage : \"\",\n    dataLakeSASSignatureValues.contentType ? dataLakeSASSignatureValues.contentType : \"\"\n  ].join(\"\\n\");\n\n  const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n\n  return new SASQueryParameters(\n    version,\n    signature,\n    verifiedPermissions,\n    undefined,\n    undefined,\n    dataLakeSASSignatureValues.protocol,\n    dataLakeSASSignatureValues.startsOn,\n    dataLakeSASSignatureValues.expiresOn,\n    dataLakeSASSignatureValues.ipRange,\n    dataLakeSASSignatureValues.identifier,\n    resource,\n    dataLakeSASSignatureValues.cacheControl,\n    dataLakeSASSignatureValues.contentDisposition,\n    dataLakeSASSignatureValues.contentEncoding,\n    dataLakeSASSignatureValues.contentLanguage,\n    dataLakeSASSignatureValues.contentType\n  );\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * @param dataLakeSASSignatureValues -\n * @param sharedKeyCredential -\n */\nfunction generateBlobSASQueryParameters20181109(\n  dataLakeSASSignatureValues: DataLakeSASSignatureValues,\n  sharedKeyCredential: StorageSharedKeyCredential\n): SASQueryParameters {\n  if (\n    !dataLakeSASSignatureValues.identifier &&\n    !(dataLakeSASSignatureValues.permissions && dataLakeSASSignatureValues.expiresOn)\n  ) {\n    throw new RangeError(\n      \"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.\"\n    );\n  }\n\n  const version = dataLakeSASSignatureValues.version\n    ? dataLakeSASSignatureValues.version\n    : SERVICE_VERSION;\n\n  dataLakeSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(\n    dataLakeSASSignatureValues,\n    version\n  );\n\n  let resource: string = \"c\";\n  if (dataLakeSASSignatureValues.pathName) {\n    if (dataLakeSASSignatureValues.isDirectory) {\n      resource = \"d\";\n    } else {\n      resource = \"b\";\n      if (dataLakeSASSignatureValues.snapshotTime) {\n        resource = \"bs\";\n      }\n    }\n  }\n\n  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n  let verifiedPermissions: string | undefined;\n  if (dataLakeSASSignatureValues.permissions) {\n    if (dataLakeSASSignatureValues.pathName) {\n      if (dataLakeSASSignatureValues.isDirectory) {\n        verifiedPermissions = DirectorySASPermissions.parse(\n          dataLakeSASSignatureValues.permissions.toString()\n        ).toString();\n      } else {\n        verifiedPermissions = DataLakeSASPermissions.parse(\n          dataLakeSASSignatureValues.permissions.toString()\n        ).toString();\n      }\n    } else {\n      verifiedPermissions = FileSystemSASPermissions.parse(\n        dataLakeSASSignatureValues.permissions.toString()\n      ).toString();\n    }\n  }\n\n  // Signature is generated on the un-url-encoded values.\n  const stringToSign = [\n    verifiedPermissions ? verifiedPermissions : \"\",\n    dataLakeSASSignatureValues.startsOn\n      ? truncatedISO8061Date(dataLakeSASSignatureValues.startsOn, false)\n      : \"\",\n    dataLakeSASSignatureValues.expiresOn\n      ? truncatedISO8061Date(dataLakeSASSignatureValues.expiresOn, false)\n      : \"\",\n    getCanonicalName(\n      sharedKeyCredential.accountName,\n      dataLakeSASSignatureValues.fileSystemName,\n      dataLakeSASSignatureValues.pathName\n    ),\n    dataLakeSASSignatureValues.identifier,\n    dataLakeSASSignatureValues.ipRange ? ipRangeToString(dataLakeSASSignatureValues.ipRange) : \"\",\n    dataLakeSASSignatureValues.protocol ? dataLakeSASSignatureValues.protocol : \"\",\n    version,\n    resource,\n    dataLakeSASSignatureValues.snapshotTime,\n    dataLakeSASSignatureValues.cacheControl ? dataLakeSASSignatureValues.cacheControl : \"\",\n    dataLakeSASSignatureValues.contentDisposition\n      ? dataLakeSASSignatureValues.contentDisposition\n      : \"\",\n    dataLakeSASSignatureValues.contentEncoding ? dataLakeSASSignatureValues.contentEncoding : \"\",\n    dataLakeSASSignatureValues.contentLanguage ? dataLakeSASSignatureValues.contentLanguage : \"\",\n    dataLakeSASSignatureValues.contentType ? dataLakeSASSignatureValues.contentType : \"\"\n  ].join(\"\\n\");\n\n  const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n\n  return new SASQueryParameters(\n    version,\n    signature,\n    verifiedPermissions,\n    undefined,\n    undefined,\n    dataLakeSASSignatureValues.protocol,\n    dataLakeSASSignatureValues.startsOn,\n    dataLakeSASSignatureValues.expiresOn,\n    dataLakeSASSignatureValues.ipRange,\n    dataLakeSASSignatureValues.identifier,\n    resource,\n    dataLakeSASSignatureValues.cacheControl,\n    dataLakeSASSignatureValues.contentDisposition,\n    dataLakeSASSignatureValues.contentEncoding,\n    dataLakeSASSignatureValues.contentLanguage,\n    dataLakeSASSignatureValues.contentType,\n    undefined,\n    dataLakeSASSignatureValues.directoryDepth\n  );\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn.\n *\n * WARNING: identifier will be ignored, permissions and expiresOn are required.\n *\n * @param dataLakeSASSignatureValues -\n * @param userDelegationKeyCredential -\n */\nfunction generateBlobSASQueryParametersUDK20181109(\n  dataLakeSASSignatureValues: DataLakeSASSignatureValues,\n  userDelegationKeyCredential: UserDelegationKeyCredential\n): SASQueryParameters {\n  if (!dataLakeSASSignatureValues.permissions || !dataLakeSASSignatureValues.expiresOn) {\n    throw new RangeError(\n      \"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.\"\n    );\n  }\n\n  const version = dataLakeSASSignatureValues.version\n    ? dataLakeSASSignatureValues.version\n    : SERVICE_VERSION;\n  dataLakeSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(\n    dataLakeSASSignatureValues,\n    version\n  );\n\n  let resource: string = \"c\";\n  if (dataLakeSASSignatureValues.pathName) {\n    if (dataLakeSASSignatureValues.isDirectory) {\n      resource = \"d\";\n    } else {\n      resource = \"b\";\n      if (dataLakeSASSignatureValues.snapshotTime) {\n        resource = \"bs\";\n      }\n    }\n  }\n\n  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n  let verifiedPermissions: string | undefined;\n  if (dataLakeSASSignatureValues.permissions) {\n    if (dataLakeSASSignatureValues.pathName) {\n      if (dataLakeSASSignatureValues.isDirectory) {\n        verifiedPermissions = DirectorySASPermissions.parse(\n          dataLakeSASSignatureValues.permissions.toString()\n        ).toString();\n      } else {\n        verifiedPermissions = DataLakeSASPermissions.parse(\n          dataLakeSASSignatureValues.permissions.toString()\n        ).toString();\n      }\n    } else {\n      verifiedPermissions = FileSystemSASPermissions.parse(\n        dataLakeSASSignatureValues.permissions.toString()\n      ).toString();\n    }\n  }\n\n  // Signature is generated on the un-url-encoded values.\n  const stringToSign = [\n    verifiedPermissions ? verifiedPermissions : \"\",\n    dataLakeSASSignatureValues.startsOn\n      ? truncatedISO8061Date(dataLakeSASSignatureValues.startsOn, false)\n      : \"\",\n    dataLakeSASSignatureValues.expiresOn\n      ? truncatedISO8061Date(dataLakeSASSignatureValues.expiresOn, false)\n      : \"\",\n    getCanonicalName(\n      userDelegationKeyCredential.accountName,\n      dataLakeSASSignatureValues.fileSystemName,\n      dataLakeSASSignatureValues.pathName\n    ),\n    userDelegationKeyCredential.userDelegationKey.signedObjectId,\n    userDelegationKeyCredential.userDelegationKey.signedTenantId,\n    userDelegationKeyCredential.userDelegationKey.signedStartsOn\n      ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false)\n      : \"\",\n    userDelegationKeyCredential.userDelegationKey.signedExpiresOn\n      ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false)\n      : \"\",\n    userDelegationKeyCredential.userDelegationKey.signedService,\n    userDelegationKeyCredential.userDelegationKey.signedVersion,\n    dataLakeSASSignatureValues.ipRange ? ipRangeToString(dataLakeSASSignatureValues.ipRange) : \"\",\n    dataLakeSASSignatureValues.protocol ? dataLakeSASSignatureValues.protocol : \"\",\n    version,\n    resource,\n    dataLakeSASSignatureValues.snapshotTime,\n    dataLakeSASSignatureValues.cacheControl,\n    dataLakeSASSignatureValues.contentDisposition,\n    dataLakeSASSignatureValues.contentEncoding,\n    dataLakeSASSignatureValues.contentLanguage,\n    dataLakeSASSignatureValues.contentType\n  ].join(\"\\n\");\n\n  const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);\n\n  return new SASQueryParameters(\n    version,\n    signature,\n    verifiedPermissions,\n    undefined,\n    undefined,\n    dataLakeSASSignatureValues.protocol,\n    dataLakeSASSignatureValues.startsOn,\n    dataLakeSASSignatureValues.expiresOn,\n    dataLakeSASSignatureValues.ipRange,\n    dataLakeSASSignatureValues.identifier,\n    resource,\n    dataLakeSASSignatureValues.cacheControl,\n    dataLakeSASSignatureValues.contentDisposition,\n    dataLakeSASSignatureValues.contentEncoding,\n    dataLakeSASSignatureValues.contentLanguage,\n    dataLakeSASSignatureValues.contentType,\n    userDelegationKeyCredential.userDelegationKey,\n    dataLakeSASSignatureValues.directoryDepth,\n    dataLakeSASSignatureValues.preauthorizedAgentObjectId,\n    dataLakeSASSignatureValues.agentObjectId,\n    dataLakeSASSignatureValues.correlationId\n  );\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2020-02-10.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn.\n *\n * WARNING: identifier will be ignored, permissions and expiresOn are required.\n *\n * @param dataLakeSASSignatureValues -\n * @param userDelegationKeyCredential -\n */\nfunction generateBlobSASQueryParametersUDK20200210(\n  dataLakeSASSignatureValues: DataLakeSASSignatureValues,\n  userDelegationKeyCredential: UserDelegationKeyCredential\n): SASQueryParameters {\n  if (!dataLakeSASSignatureValues.permissions || !dataLakeSASSignatureValues.expiresOn) {\n    throw new RangeError(\n      \"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.\"\n    );\n  }\n\n  const version = dataLakeSASSignatureValues.version\n    ? dataLakeSASSignatureValues.version\n    : SERVICE_VERSION;\n  dataLakeSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(\n    dataLakeSASSignatureValues,\n    version\n  );\n\n  let resource: string = \"c\";\n  if (dataLakeSASSignatureValues.pathName) {\n    if (dataLakeSASSignatureValues.isDirectory) {\n      resource = \"d\";\n    } else {\n      resource = \"b\";\n      if (dataLakeSASSignatureValues.snapshotTime) {\n        resource = \"bs\";\n      }\n    }\n  }\n\n  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n  let verifiedPermissions: string | undefined;\n  if (dataLakeSASSignatureValues.permissions) {\n    if (dataLakeSASSignatureValues.pathName) {\n      if (dataLakeSASSignatureValues.isDirectory) {\n        verifiedPermissions = DirectorySASPermissions.parse(\n          dataLakeSASSignatureValues.permissions.toString()\n        ).toString();\n      } else {\n        verifiedPermissions = DataLakeSASPermissions.parse(\n          dataLakeSASSignatureValues.permissions.toString()\n        ).toString();\n      }\n    } else {\n      verifiedPermissions = FileSystemSASPermissions.parse(\n        dataLakeSASSignatureValues.permissions.toString()\n      ).toString();\n    }\n  }\n\n  // Signature is generated on the un-url-encoded values.\n  const stringToSign = [\n    verifiedPermissions ? verifiedPermissions : \"\",\n    dataLakeSASSignatureValues.startsOn\n      ? truncatedISO8061Date(dataLakeSASSignatureValues.startsOn, false)\n      : \"\",\n    dataLakeSASSignatureValues.expiresOn\n      ? truncatedISO8061Date(dataLakeSASSignatureValues.expiresOn, false)\n      : \"\",\n    getCanonicalName(\n      userDelegationKeyCredential.accountName,\n      dataLakeSASSignatureValues.fileSystemName,\n      dataLakeSASSignatureValues.pathName\n    ),\n    userDelegationKeyCredential.userDelegationKey.signedObjectId,\n    userDelegationKeyCredential.userDelegationKey.signedTenantId,\n    userDelegationKeyCredential.userDelegationKey.signedStartsOn\n      ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false)\n      : \"\",\n    userDelegationKeyCredential.userDelegationKey.signedExpiresOn\n      ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false)\n      : \"\",\n    userDelegationKeyCredential.userDelegationKey.signedService,\n    userDelegationKeyCredential.userDelegationKey.signedVersion,\n    dataLakeSASSignatureValues.preauthorizedAgentObjectId,\n    dataLakeSASSignatureValues.agentObjectId,\n    dataLakeSASSignatureValues.correlationId,\n    dataLakeSASSignatureValues.ipRange ? ipRangeToString(dataLakeSASSignatureValues.ipRange) : \"\",\n    dataLakeSASSignatureValues.protocol ? dataLakeSASSignatureValues.protocol : \"\",\n    version,\n    resource,\n    dataLakeSASSignatureValues.snapshotTime,\n    dataLakeSASSignatureValues.cacheControl,\n    dataLakeSASSignatureValues.contentDisposition,\n    dataLakeSASSignatureValues.contentEncoding,\n    dataLakeSASSignatureValues.contentLanguage,\n    dataLakeSASSignatureValues.contentType\n  ].join(\"\\n\");\n\n  const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);\n\n  return new SASQueryParameters(\n    version,\n    signature,\n    verifiedPermissions,\n    undefined,\n    undefined,\n    dataLakeSASSignatureValues.protocol,\n    dataLakeSASSignatureValues.startsOn,\n    dataLakeSASSignatureValues.expiresOn,\n    dataLakeSASSignatureValues.ipRange,\n    dataLakeSASSignatureValues.identifier,\n    resource,\n    dataLakeSASSignatureValues.cacheControl,\n    dataLakeSASSignatureValues.contentDisposition,\n    dataLakeSASSignatureValues.contentEncoding,\n    dataLakeSASSignatureValues.contentLanguage,\n    dataLakeSASSignatureValues.contentType,\n    userDelegationKeyCredential.userDelegationKey,\n    dataLakeSASSignatureValues.directoryDepth,\n    dataLakeSASSignatureValues.preauthorizedAgentObjectId,\n    dataLakeSASSignatureValues.agentObjectId,\n    dataLakeSASSignatureValues.correlationId\n  );\n}\n\nfunction getCanonicalName(accountName: string, containerName: string, blobName?: string): string {\n  // FileSystem: \"/blob/account/fileSystemName\"\n  // File:       \"/blob/account/fileSystemName/fileName\"\n  const elements: string[] = [`/blob/${accountName}/${containerName}`];\n  if (blobName) {\n    elements.push(`/${blobName}`);\n  }\n  return elements.join(\"\");\n}\n\nfunction SASSignatureValuesSanityCheckAndAutofill(\n  dataLakeSASSignatureValues: DataLakeSASSignatureValues,\n  version: string\n): DataLakeSASSignatureValues {\n  if (\n    version < \"2020-02-10\" &&\n    (dataLakeSASSignatureValues.isDirectory || dataLakeSASSignatureValues.directoryDepth)\n  ) {\n    throw RangeError(\"'version' must be >= '2020-02-10' to support directory SAS.\");\n  }\n  if (dataLakeSASSignatureValues.isDirectory && dataLakeSASSignatureValues.pathName === undefined) {\n    throw RangeError(\"Must provide 'pathName' when 'isDirectory' is true.\");\n  }\n  if (\n    dataLakeSASSignatureValues.directoryDepth !== undefined &&\n    (!Number.isInteger(dataLakeSASSignatureValues.directoryDepth) ||\n      dataLakeSASSignatureValues.directoryDepth < 0)\n  ) {\n    throw RangeError(\"'directoryDepth' must be a non-negative interger.\");\n  }\n  if (\n    dataLakeSASSignatureValues.isDirectory &&\n    dataLakeSASSignatureValues.directoryDepth === undefined\n  ) {\n    // calculate directoryDepth from pathName\n    if (dataLakeSASSignatureValues.pathName === \"/\") {\n      dataLakeSASSignatureValues.directoryDepth = 0;\n    } else {\n      dataLakeSASSignatureValues.directoryDepth = dataLakeSASSignatureValues.pathName\n        ?.split(\"/\")\n        .filter((x) => x !== \"\").length;\n    }\n  }\n\n  if (\n    version < \"2020-02-10\" &&\n    dataLakeSASSignatureValues.permissions &&\n    (dataLakeSASSignatureValues.permissions.move ||\n      dataLakeSASSignatureValues.permissions.execute ||\n      dataLakeSASSignatureValues.permissions.manageOwnership ||\n      dataLakeSASSignatureValues.permissions.manageAccessControl)\n  ) {\n    throw RangeError(\"'version' must be >= '2020-02-10' when providing m, e, o or p permission.\");\n  }\n\n  if (\n    version < \"2020-02-10\" &&\n    (dataLakeSASSignatureValues.preauthorizedAgentObjectId ||\n      dataLakeSASSignatureValues.agentObjectId ||\n      dataLakeSASSignatureValues.correlationId)\n  ) {\n    throw RangeError(\n      \"'version' must be >= '2020-02-10' when providing 'preauthorizedAgentObjectId', 'agentObjectId' or 'correlationId'.\"\n    );\n  }\n  if (\n    dataLakeSASSignatureValues.preauthorizedAgentObjectId &&\n    dataLakeSASSignatureValues.agentObjectId\n  ) {\n    throw RangeError(\n      \"'preauthorizedAgentObjectId' or 'agentObjectId' shouldn't be specified at the same time.\"\n    );\n  }\n\n  if (dataLakeSASSignatureValues.snapshotTime && version < \"2018-11-09\") {\n    throw RangeError(\"'version' must be >= '2018-11-09' when provided 'snapshotTime'.\");\n  }\n  if (\n    dataLakeSASSignatureValues.pathName === undefined &&\n    dataLakeSASSignatureValues.snapshotTime\n  ) {\n    throw RangeError(\"Must provide 'blobName' when provided 'snapshotTime'.\");\n  }\n\n  return dataLakeSASSignatureValues;\n}\n"]}