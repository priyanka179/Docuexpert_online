{"version":3,"file":"DataLakeFileSystemClient.js","sourceRoot":"","sources":["../../../src/DataLakeFileSystemClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { TokenCredential } from \"@azure/core-http\";\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { ContainerClient } from \"@azure/storage-blob\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\n\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { DataLakeLeaseClient } from \"./DataLakeLeaseClient\";\nimport { FileSystem } from \"./generated/src/operations\";\nimport {\n  AccessPolicy,\n  FileSystemCreateOptions,\n  FileSystemCreateResponse,\n  FileSystemDeleteOptions,\n  FileSystemDeleteResponse,\n  FileSystemExistsOptions,\n  FileSystemGetAccessPolicyOptions,\n  FileSystemGetAccessPolicyResponse,\n  FileSystemGetPropertiesOptions,\n  FileSystemGetPropertiesResponse,\n  FileSystemSetAccessPolicyOptions,\n  FileSystemSetAccessPolicyResponse,\n  FileSystemSetMetadataOptions,\n  FileSystemSetMetadataResponse,\n  ListPathsOptions,\n  ListPathsSegmentOptions,\n  Metadata,\n  Path,\n  PublicAccessType,\n  SignedIdentifier,\n  FileSystemListPathsResponse,\n  FileSystemCreateIfNotExistsResponse,\n  FileSystemDeleteIfExistsResponse,\n  FileSystemGenerateSasUrlOptions,\n  FileSystemListDeletedPathsResponse,\n  ListDeletedPathsOptions,\n  DeletedPath,\n  FileSystemUndeletePathResponse,\n  FileSystemUndeletePathOption,\n  ListDeletedPathsSegmentOptions\n} from \"./models\";\nimport { newPipeline, Pipeline, StoragePipelineOptions } from \"./Pipeline\";\nimport { StorageClient } from \"./StorageClient\";\nimport { toContainerPublicAccessType, toPublicAccessType, toPermissions } from \"./transforms\";\nimport { convertTracingToRequestOptionsBase, createSpan } from \"./utils/tracing\";\nimport { appendToURLPath, appendToURLQuery } from \"./utils/utils.common\";\nimport { DataLakeFileClient, DataLakeDirectoryClient } from \"./clients\";\nimport { generateDataLakeSASQueryParameters } from \"./sas/DataLakeSASSignatureValues\";\nimport { DeletionIdKey, PathResultTypeConstants } from \"./utils/constants\";\nimport { PathClientInternal } from \"./utils/PathClientInternal\";\n\n/**\n * A DataLakeFileSystemClient represents a URL to the Azure Storage file system\n * allowing you to manipulate its directories and files.\n */\nexport class DataLakeFileSystemClient extends StorageClient {\n  /**\n   * fileSystemContext provided by protocol layer.\n   */\n  private fileSystemContext: FileSystem;\n\n  /**\n   * fileSystemContext provided by protocol layer.\n   */\n  private fileSystemContextToBlobEndpoint: FileSystem;\n\n  /**\n   * blobContainerClient provided by `@azure/storage-blob` package.\n   */\n  private blobContainerClient: ContainerClient;\n\n  /**\n   * Creates an instance of DataLakeFileSystemClient from url and credential.\n   *\n   * @param url - A Client string pointing to Azure Storage data lake file system, such as\n   *                     \"https://myaccount.dfs.core.windows.net/filesystem\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.dfs.core.windows.net/filesystem?sasString\".\n   * @param credential - Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  constructor(\n    url: string,\n    credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n    options?: StoragePipelineOptions\n  );\n\n  /**\n   * Creates an instance of DataLakeFileSystemClient from url and pipeline.\n   *\n   * @param url - A Client string pointing to Azure Storage data lake file system, such as\n   *                     \"https://myaccount.dfs.core.windows.net/filesystem\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.dfs.core.windows.net/filesystem?sasString\".\n   * @param pipeline - Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   */\n  constructor(url: string, pipeline: Pipeline);\n\n  constructor(\n    url: string,\n    credentialOrPipeline?:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | Pipeline,\n    // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n    options?: StoragePipelineOptions\n  ) {\n    if (credentialOrPipeline instanceof Pipeline) {\n      super(url, credentialOrPipeline);\n    } else {\n      let credential;\n      if (credentialOrPipeline === undefined) {\n        credential = new AnonymousCredential();\n      } else {\n        credential = credentialOrPipeline;\n      }\n\n      const pipeline = newPipeline(credential, options);\n      super(url, pipeline);\n    }\n\n    this.fileSystemContext = new FileSystem(this.storageClientContext);\n    this.fileSystemContextToBlobEndpoint = new FileSystem(this.storageClientContextToBlobEndpoint);\n    this.blobContainerClient = new ContainerClient(this.blobEndpointUrl, this.pipeline);\n  }\n\n  /**\n   * Name of current file system.\n   *\n   * @readonly\n   */\n  public get name(): string {\n    return this.blobContainerClient.containerName;\n  }\n\n  /**\n   * Creates a {@link DataLakeDirectoryClient} object under current file system.\n   *\n   * @param directoryName -\n   */\n  // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-subclients */\n  public getDirectoryClient(directoryName: string): DataLakeDirectoryClient {\n    return new DataLakeDirectoryClient(\n      appendToURLPath(this.url, encodeURIComponent(directoryName)),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Creates a {@link DataLakeFileClient} object under current file system.\n   *\n   * @param fileName -\n   */\n  // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-subclients */\n  public getFileClient(fileName: string): DataLakeFileClient {\n    return new DataLakeFileClient(\n      appendToURLPath(this.url, encodeURIComponent(fileName)),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Get a {@link DataLakeLeaseClient} that manages leases on the file system.\n   *\n   * @param proposeLeaseId - Optional. Initial proposed lease Id.\n   */\n  public getDataLakeLeaseClient(proposeLeaseId?: string): DataLakeLeaseClient {\n    return new DataLakeLeaseClient(this.blobContainerClient.getBlobLeaseClient(proposeLeaseId));\n  }\n\n  /**\n   * Creates a new file system under the specified account. If the file system with\n   * the same name already exists, the operation fails.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container\n   *\n   * @param options - Optional. Options when creating file system.\n   */\n  public async create(options: FileSystemCreateOptions = {}): Promise<FileSystemCreateResponse> {\n    const { span, updatedOptions } = createSpan(\"DataLakeFileSystemClient-create\", options);\n    try {\n      return await this.blobContainerClient.create({\n        ...options,\n        access: toContainerPublicAccessType(options.access),\n        tracingOptions: updatedOptions.tracingOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new file system under the specified account. If the file system with\n   * the same name already exists, it is not changed.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container\n   *\n   * @param options -\n   */\n  public async createIfNotExists(\n    options: FileSystemCreateOptions = {}\n  ): Promise<FileSystemCreateIfNotExistsResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"DataLakeFileSystemClient-createIfNotExists\",\n      options\n    );\n    try {\n      return await this.blobContainerClient.createIfNotExists({\n        ...options,\n        access: toContainerPublicAccessType(options.access),\n        tracingOptions: updatedOptions.tracingOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns true if the File system represented by this client exists; false otherwise.\n   *\n   * NOTE: use this function with care since an existing file system might be deleted by other clients or\n   * applications. Vice versa new file system with the same name might be added by other clients or\n   * applications after this function completes.\n   *\n   * @param options -\n   */\n  public async exists(options: FileSystemExistsOptions = {}): Promise<boolean> {\n    const { span, updatedOptions } = createSpan(\"DataLakeFileSystemClient-exists\", options);\n    try {\n      return await this.blobContainerClient.exists(updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Delete current file system.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container\n   *\n   * @param options - Optional. Options when deleting file system.\n   */\n  public async delete(options: FileSystemDeleteOptions = {}): Promise<FileSystemDeleteResponse> {\n    const { span, updatedOptions } = createSpan(\"DataLakeFileSystemClient-delete\", options);\n    try {\n      return await this.blobContainerClient.delete({\n        ...options,\n        tracingOptions: updatedOptions.tracingOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Delete current file system if it exists.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container\n   *\n   * @param options -\n   */\n  public async deleteIfExists(\n    options: FileSystemDeleteOptions = {}\n  ): Promise<FileSystemDeleteIfExistsResponse> {\n    const { span, updatedOptions } = createSpan(\"DataLakeFileSystemClient-deleteIfExists\", options);\n    try {\n      return await this.blobContainerClient.deleteIfExists(updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns all user-defined metadata and system properties for the specified\n   * file system.\n   *\n   * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if\n   * they originally contained uppercase characters. This differs from the metadata keys returned by\n   * the `listFileSystems` method of {@link DataLakeServiceClient} using the `includeMetadata` option, which\n   * will retain their original casing.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-properties\n   *\n   * @param options - Optional. Options when getting file system properties.\n   */\n  public async getProperties(\n    options: FileSystemGetPropertiesOptions = {}\n  ): Promise<FileSystemGetPropertiesResponse> {\n    const { span, updatedOptions } = createSpan(\"DataLakeFileSystemClient-getProperties\", options);\n    try {\n      const rawResponse = await this.blobContainerClient.getProperties({\n        ...options,\n        tracingOptions: updatedOptions.tracingOptions\n      });\n\n      // Transfer and rename blobPublicAccess to publicAccess\n      const response = rawResponse as FileSystemGetPropertiesResponse;\n\n      response.publicAccess = toPublicAccessType(rawResponse.blobPublicAccess);\n      response._response.parsedHeaders.publicAccess = response.publicAccess;\n\n      delete rawResponse.blobPublicAccess;\n      delete rawResponse._response.parsedHeaders.blobPublicAccess;\n\n      return response;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets one or more user-defined name-value pairs for the specified file system.\n   *\n   * If no option provided, or no metadata defined in the parameter, the file system\n   * metadata will be removed.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-metadata\n   *\n   * @param metadata - Replace existing metadata with this value.\n   *                              If no value provided the existing metadata will be removed.\n   * @param options - Optional. Options when setting file system metadata.\n   */\n  public async setMetadata(\n    metadata?: Metadata,\n    options: FileSystemSetMetadataOptions = {}\n  ): Promise<FileSystemSetMetadataResponse> {\n    const { span, updatedOptions } = createSpan(\"DataLakeFileSystemClient-setMetadata\", options);\n    try {\n      return await this.blobContainerClient.setMetadata(metadata, {\n        ...options,\n        tracingOptions: updatedOptions.tracingOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Gets the permissions for the specified file system. The permissions indicate\n   * whether file system data may be accessed publicly.\n   *\n   * WARNING: JavaScript Date will potentially lose precision when parsing startsOn and expiresOn strings.\n   * For example, new Date(\"2018-12-31T03:44:23.8827891Z\").toISOString() will get \"2018-12-31T03:44:23.882Z\".\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-acl\n   *\n   * @param options - Optional. Options when getting file system access policy.\n   */\n  public async getAccessPolicy(\n    options: FileSystemGetAccessPolicyOptions = {}\n  ): Promise<FileSystemGetAccessPolicyResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"DataLakeFileSystemClient-getAccessPolicy\",\n      options\n    );\n    try {\n      const rawResponse = await this.blobContainerClient.getAccessPolicy({\n        ...options,\n        tracingOptions: updatedOptions.tracingOptions\n      });\n\n      // Transfer and rename blobPublicAccess to publicAccess\n      const response = (rawResponse as unknown) as FileSystemGetAccessPolicyResponse;\n\n      response.publicAccess = toPublicAccessType(rawResponse.blobPublicAccess);\n      response._response.parsedHeaders.publicAccess = response.publicAccess;\n\n      delete rawResponse.blobPublicAccess;\n      delete rawResponse._response.parsedHeaders.blobPublicAccess;\n\n      return response;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets the permissions for the specified file system. The permissions indicate\n   * whether directories or files in a file system may be accessed publicly.\n   *\n   * When you set permissions for a file system, the existing permissions are replaced.\n   * If no access or containerAcl provided, the existing file system ACL will be\n   * removed.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-acl\n   *\n   * @param access - Optional. The level of public access to data in the file system.\n   * @param fileSystemAcl - Optional. Array of elements each having a unique Id and details of the access policy.\n   * @param options - Optional. Options when setting file system access policy.\n   */\n  public async setAccessPolicy(\n    access?: PublicAccessType,\n    fileSystemAcl?: SignedIdentifier<AccessPolicy>[],\n    options: FileSystemSetAccessPolicyOptions = {}\n  ): Promise<FileSystemSetAccessPolicyResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"DataLakeFileSystemClient-setAccessPolicy\",\n      options\n    );\n    try {\n      return await this.blobContainerClient.setAccessPolicy(\n        toContainerPublicAccessType(access),\n        fileSystemAcl,\n        {\n          ...options,\n          tracingOptions: updatedOptions.tracingOptions\n        }\n      );\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to list all the paths (directories and files)\n   * under the specified file system.\n   *\n   * .byPage() returns an async iterable iterator to list the paths in pages.\n   *\n   * Example using `for await` syntax:\n   *\n   * ```js\n   * // Get the fileSystemClient before you run these snippets,\n   * // Can be obtained from `serviceClient.getFileSystemClient(\"<your-filesystem-name>\");`\n   * let i = 1;\n   * for await (const path of fileSystemClient.listPaths()) {\n   *   console.log(`Path ${i++}: ${path.name}, isDirectory?: ${path.isDirectory}`);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```js\n   * let i = 1;\n   * let iter = fileSystemClient.listPaths();\n   * let pathItem = await iter.next();\n   * while (!pathItem.done) {\n   *   console.log(`Path ${i++}: ${pathItem.value.name}, isDirectory?: ${pathItem.value.isDirectory}`);\n   *   pathItem = await iter.next();\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```js\n   * // passing optional maxPageSize in the page settings\n   * let i = 1;\n   * for await (const response of fileSystemClient.listPaths().byPage({ maxPageSize: 20 })) {\n   *   for (const path of response.pathItems) {\n   *     console.log(`Path ${i++}: ${path.name}, isDirectory?: ${path.isDirectory}`);\n   *   }\n   * }\n   * ```\n   *\n   * Example using paging with a marker:\n   *\n   * ```js\n   * let i = 1;\n   * let iterator = fileSystemClient.listPaths().byPage({ maxPageSize: 2 });\n   * let response = (await iterator.next()).value;\n   *\n   * // Prints 2 path names\n   * for (const path of response.pathItems) {\n   *   console.log(`Path ${i++}: ${path.name}, isDirectory?: ${path.isDirectory}`);\n   * }\n   *\n   * // Gets next marker\n   * let marker = response.continuationToken;\n   *\n   * // Passing next marker as continuationToken\n   *\n   * iterator = fileSystemClient.listPaths().byPage({ continuationToken: marker, maxPageSize: 10 });\n   * response = (await iterator.next()).value;\n   *\n   * // Prints 10 path names\n   * for (const path of response.pathItems) {\n   *   console.log(`Path ${i++}: ${path.name}, isDirectory?: ${path.isDirectory}`);\n   * }\n   * ```\n   *\n   * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs\n   *\n   * @param options - Optional. Options when listing paths.\n   */\n  public listPaths(\n    options: ListPathsOptions = {}\n  ): PagedAsyncIterableIterator<Path, FileSystemListPathsResponse> {\n    options.path = options.path === \"\" ? undefined : options.path;\n\n    const iter = this.listItems(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: PageSettings = {}) => {\n        return this.listSegments(settings.continuationToken, {\n          maxResults: settings.maxPageSize,\n          ...options\n        });\n      }\n    };\n  }\n\n  private async *listItems(options: ListPathsSegmentOptions = {}): AsyncIterableIterator<Path> {\n    for await (const response of this.listSegments(undefined, options)) {\n      yield* response.pathItems || [];\n    }\n  }\n\n  private async *listSegments(\n    continuation?: string,\n    options: ListPathsSegmentOptions = {}\n  ): AsyncIterableIterator<FileSystemListPathsResponse> {\n    let response;\n    if (!!continuation || continuation === undefined) {\n      do {\n        response = await this.listPathsSegment(continuation, options);\n        continuation = response.continuation;\n        yield response;\n      } while (continuation);\n    }\n  }\n\n  private async listPathsSegment(\n    continuation?: string,\n    options: ListPathsSegmentOptions = {}\n  ): Promise<FileSystemListPathsResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"DataLakeFileSystemClient-listPathsSegment\",\n      options\n    );\n    try {\n      const rawResponse = await this.fileSystemContext.listPaths(options.recursive || false, {\n        continuation,\n        ...options,\n        upn: options.userPrincipalName,\n        ...convertTracingToRequestOptionsBase(updatedOptions)\n      });\n\n      const response = rawResponse as FileSystemListPathsResponse;\n      response.pathItems = [];\n      for (const path of rawResponse.paths || []) {\n        response.pathItems.push({\n          ...path,\n          permissions: toPermissions(path.permissions)\n        });\n      }\n      delete rawResponse.paths;\n\n      return response;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to list all the paths (directories and files)\n   * under the specified file system.\n   *\n   * .byPage() returns an async iterable iterator to list the paths in pages.\n   *\n   * Example using `for await` syntax:\n   *\n   * ```js\n   * // Get the fileSystemClient before you run these snippets,\n   * // Can be obtained from `serviceClient.getFileSystemClient(\"<your-filesystem-name>\");`\n   * let i = 1;\n   * for await (const deletePath of fileSystemClient.listDeletedPaths()) {\n   *   console.log(`Path ${i++}: ${deletePath.name}`);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```js\n   * let i = 1;\n   * let iter = fileSystemClient.listDeletedPaths();\n   * let deletedPathItem = await iter.next();\n   * while (!deletedPathItem.done) {\n   *   console.log(`Path ${i++}: ${deletedPathItem.value.name}`);\n   *   pathItem = await iter.next();\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```js\n   * // passing optional maxPageSize in the page settings\n   * let i = 1;\n   * for await (const response of fileSystemClient.listDeletedPaths().byPage({ maxPageSize: 20 })) {\n   *   for (const deletePath of response.pathItems) {\n   *     console.log(`Path ${i++}: ${deletePath.name}`);\n   *   }\n   * }\n   * ```\n   *\n   * Example using paging with a marker:\n   *\n   * ```js\n   * let i = 1;\n   * let iterator = fileSystemClient.listDeletedPaths().byPage({ maxPageSize: 2 });\n   * let response = (await iterator.next()).value;\n   *\n   * // Prints 2 path names\n   * for (const path of response.pathItems) {\n   *   console.log(`Path ${i++}: ${path.name}}`);\n   * }\n   *\n   * // Gets next marker\n   * let marker = response.continuationToken;\n   *\n   * // Passing next marker as continuationToken\n   *\n   * iterator = fileSystemClient.listDeletedPaths().byPage({ continuationToken: marker, maxPageSize: 10 });\n   * response = (await iterator.next()).value;\n   *\n   * // Prints 10 path names\n   * for (const deletePath of response.deletedPathItems) {\n   *   console.log(`Path ${i++}: ${deletePath.name}`);\n   * }\n   * ```\n   *\n   * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs\n   *\n   * @param options - Optional. Options when listing deleted paths.\n   */\n  public listDeletedPaths(\n    options: ListDeletedPathsOptions = {}\n  ): PagedAsyncIterableIterator<DeletedPath, FileSystemListDeletedPathsResponse> {\n    const iter = this.listDeletedItems(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: PageSettings = {}) => {\n        return this.listDeletedSegments(settings.continuationToken, {\n          maxResults: settings.maxPageSize,\n          ...options\n        });\n      }\n    };\n  }\n  private async *listDeletedItems(\n    options: ListDeletedPathsOptions = {}\n  ): AsyncIterableIterator<DeletedPath> {\n    for await (const response of this.listDeletedSegments(undefined, options)) {\n      yield* response.pathItems || [];\n    }\n  }\n\n  private async *listDeletedSegments(\n    continuation?: string,\n    options: ListDeletedPathsSegmentOptions = {}\n  ): AsyncIterableIterator<FileSystemListDeletedPathsResponse> {\n    let response;\n    if (!!continuation || continuation === undefined) {\n      do {\n        response = await this.listDeletedPathsSegment(continuation, options);\n        continuation = response.continuation;\n        yield response;\n      } while (continuation);\n    }\n  }\n\n  private async listDeletedPathsSegment(\n    continuation?: string,\n    options: ListDeletedPathsSegmentOptions = {}\n  ): Promise<FileSystemListDeletedPathsResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"DataLakeFileSystemClient-listDeletedPathsSegment\",\n      options\n    );\n    try {\n      const rawResponse = await this.fileSystemContextToBlobEndpoint.listBlobHierarchySegment({\n        marker: continuation,\n        ...options,\n        prefix: options.prefix === \"\" ? undefined : options.prefix,\n        ...convertTracingToRequestOptionsBase(updatedOptions)\n      });\n\n      const response = rawResponse as FileSystemListDeletedPathsResponse;\n      response.pathItems = [];\n      for (const path of rawResponse.segment.blobItems || []) {\n        response.pathItems.push({\n          name: path.name,\n          deletionId: path.deletionId,\n          deletedOn: path.properties.deletedTime,\n          remainingRetentionDays: path.properties.remainingRetentionDays\n        });\n      }\n\n      if (!(response.nextMarker === undefined || response.nextMarker === \"\")) {\n        response.continuation = response.nextMarker;\n      }\n\n      return response;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Restores a soft deleted path.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/undelete-blob\n   *\n   * @param deletedPath - Required.  The path of the deleted path.\n   *\n   * @param deletionId - Required.  The deletion ID associated with the soft deleted path.\n   *\n   */\n\n  public async undeletePath(\n    deletedPath: string,\n    deletionId: string,\n    options: FileSystemUndeletePathOption = {}\n  ): Promise<FileSystemUndeletePathResponse> {\n    const { span, updatedOptions } = createSpan(\"DataLakeFileSystemClient-undeletePath\", options);\n    try {\n      const pathClient = new PathClientInternal(\n        appendToURLPath(this.blobEndpointUrl, encodeURIComponent(deletedPath)),\n        this.pipeline\n      );\n\n      const rawResponse = await pathClient.blobPathContext.undelete({\n        undeleteSource: \"?\" + DeletionIdKey + \"=\" + deletionId,\n        ...options,\n        tracingOptions: updatedOptions.tracingOptions\n      });\n\n      if (rawResponse.resourceType === PathResultTypeConstants.DirectoryResourceType) {\n        return {\n          pathClient: this.getDirectoryClient(deletedPath),\n          ...rawResponse\n        };\n      } else {\n        return {\n          pathClient: this.getFileClient(deletedPath),\n          ...rawResponse\n        };\n      }\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Only available for DataLakeFileSystemClient constructed with a shared key credential.\n   *\n   * Generates a Service Shared Access Signature (SAS) URI based on the client properties\n   * and parameters passed in. The SAS is signed by the shared key credential of the client.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n   *\n   * @param options - Optional parameters.\n   * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n   */\n  public generateSasUrl(options: FileSystemGenerateSasUrlOptions): Promise<string> {\n    return new Promise((resolve) => {\n      if (!(this.credential instanceof StorageSharedKeyCredential)) {\n        throw RangeError(\n          \"Can only generate the SAS when the client is initialized with a shared key credential\"\n        );\n      }\n\n      const sas = generateDataLakeSASQueryParameters(\n        {\n          fileSystemName: this.name,\n          ...options\n        },\n        this.credential\n      ).toString();\n\n      resolve(appendToURLQuery(this.url, sas));\n    });\n  }\n}\n"]}