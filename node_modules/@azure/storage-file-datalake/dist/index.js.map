{"version":3,"file":"index.js","sources":["../src/policies/CredentialPolicy.ts","../src/policies/AnonymousCredentialPolicy.ts","../src/credentials/Credential.ts","../src/credentials/AnonymousCredential.ts","../src/utils/constants.ts","../src/utils/utils.common.ts","../src/policies/StorageSharedKeyCredentialPolicy.ts","../src/credentials/StorageSharedKeyCredential.ts","../src/utils/tracing.ts","../src/DataLakeLeaseClient.ts","../src/generated/src/models/mappers.ts","../src/generated/src/models/parameters.ts","../src/generated/src/operations/fileSystem.ts","../src/generated/src/operations/path.ts","../src/log.ts","../src/policies/StorageBrowserPolicy.ts","../src/StorageBrowserPolicyFactory.ts","../src/policies/StorageRetryPolicy.ts","../src/StorageRetryPolicyFactory.ts","../src/policies/TelemetryPolicy.ts","../src/TelemetryPolicyFactory.ts","../src/utils/cache.ts","../src/Pipeline.ts","../src/generated/src/storageClientContext.ts","../src/transforms.ts","../src/StorageClient.ts","../../storage-common/src/BuffersStream.ts","../../storage-common/src/PooledBuffer.ts","../../storage-common/src/BufferScheduler.ts","../src/credentials/UserDelegationKeyCredential.ts","../src/sas/DataLakeSASPermissions.ts","../src/sas/FileSystemSASPermissions.ts","../src/sas/SasIPRange.ts","../src/sas/SASQueryParameters.ts","../src/sas/DirectorySASPermissions.ts","../src/sas/DataLakeSASSignatureValues.ts","../src/utils/Batch.ts","../src/utils/DataLakeAclChangeFailedError.ts","../src/utils/utils.node.ts","../src/clients.ts","../src/utils/PathClientInternal.ts","../src/DataLakeFileSystemClient.ts","../src/sas/AccountSASPermissions.ts","../src/sas/AccountSASResourceTypes.ts","../src/sas/AccountSASServices.ts","../src/sas/AccountSASSignatureValues.ts","../src/DataLakeServiceClient.ts","../src/models.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { BaseRequestPolicy, HttpOperationResponse, WebResource } from \"@azure/core-http\";\n\n/**\n * Credential policy used to sign HTTP(S) requests before sending. This is an\n * abstract class.\n */\nexport abstract class CredentialPolicy extends BaseRequestPolicy {\n  /**\n   * Sends out request.\n   *\n   * @param request -\n   */\n  public sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(this.signRequest(request));\n  }\n\n  /**\n   * Child classes must implement this method with request signing. This method\n   * will be executed in {@link sendRequest}.\n   *\n   * @param request -\n   */\n  protected signRequest(request: WebResource): WebResource {\n    // Child classes must override this method with request signing. This method\n    // will be executed in sendRequest().\n    return request;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { RequestPolicy, RequestPolicyOptions } from \"@azure/core-http\";\n\nimport { CredentialPolicy } from \"./CredentialPolicy\";\n\n/**\n * AnonymousCredentialPolicy is used with HTTP(S) requests that read public resources\n * or for use with Shared Access Signatures (SAS).\n */\nexport class AnonymousCredentialPolicy extends CredentialPolicy {\n  /**\n   * Creates an instance of AnonymousCredentialPolicy.\n   * @param nextPolicy -\n   * @param options -\n   */\n\n  // The base class has a protected constructor. Adding a public one to enable constructing of this class.\n  /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"@azure/core-http\";\nimport { CredentialPolicy } from \"../policies/CredentialPolicy\";\n\n/**\n * Credential is an abstract class for Azure Storage HTTP requests signing. This\n * class will host an credentialPolicyCreator factory which generates CredentialPolicy.\n */\nexport abstract class Credential implements RequestPolicyFactory {\n  /**\n   * Creates a RequestPolicy object.\n   *\n   * @param _nextPolicy -\n   * @param _options -\n   */\n  public create(_nextPolicy: RequestPolicy, _options: RequestPolicyOptions): RequestPolicy {\n    throw new Error(\"Method should be implemented in children classes.\");\n  }\n}\n\n/**\n * A factory function that creates a new CredentialPolicy that uses the provided nextPolicy.\n */\nexport type CredentialPolicyCreator = (\n  nextPolicy: RequestPolicy,\n  options: RequestPolicyOptions\n) => CredentialPolicy;\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { RequestPolicy, RequestPolicyOptions } from \"@azure/core-http\";\n\nimport { AnonymousCredentialPolicy } from \"../policies/AnonymousCredentialPolicy\";\nimport { Credential } from \"./Credential\";\n\n/**\n * AnonymousCredential provides a credentialPolicyCreator member used to create\n * AnonymousCredentialPolicy objects. AnonymousCredentialPolicy is used with\n * HTTP(S) requests that read public resources or for use with Shared Access\n * Signatures (SAS).\n */\nexport class AnonymousCredential extends Credential {\n  /**\n   * Creates an {@link AnonymousCredentialPolicy} object.\n   *\n   * @param nextPolicy -\n   * @param options -\n   */\n  public create(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions\n  ): AnonymousCredentialPolicy {\n    return new AnonymousCredentialPolicy(nextPolicy, options);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport const SDK_VERSION: string = \"12.7.0\";\nexport const SERVICE_VERSION: string = \"2020-10-02\";\n\nexport const KB: number = 1024;\nexport const MB: number = KB * 1024;\nexport const GB: number = MB * 1024;\nexport const TB: number = GB * 1024;\n\nexport const DEFAULT_HIGH_LEVEL_CONCURRENCY: number = 5;\nexport const FILE_MAX_SINGLE_UPLOAD_THRESHOLD: number = 100 * MB;\nexport const FILE_UPLOAD_MAX_CHUNK_SIZE: number = 4000 * MB;\nexport const FILE_UPLOAD_DEFAULT_CHUNK_SIZE: number = 8 * MB;\nexport const BLOCK_BLOB_MAX_BLOCKS: number = 50000;\nexport const FILE_MAX_SIZE_BYTES: number = BLOCK_BLOB_MAX_BLOCKS * FILE_UPLOAD_MAX_CHUNK_SIZE;\n\nexport const StorageOAuthScopes: string | string[] = \"https://storage.azure.com/.default\";\n\nexport const StorageDataLakeLoggingAllowedHeaderNames = [\n  \"Access-Control-Allow-Origin\",\n  \"Cache-Control\",\n  \"Content-Length\",\n  \"Content-Type\",\n  \"Date\",\n  \"Request-Id\",\n  \"traceparent\",\n  \"Transfer-Encoding\",\n  \"User-Agent\",\n  \"x-ms-client-request-id\",\n  \"x-ms-date\",\n  \"x-ms-error-code\",\n  \"x-ms-request-id\",\n  \"x-ms-return-client-request-id\",\n  \"x-ms-version\",\n  \"Accept-Ranges\",\n  \"Content-Disposition\",\n  \"Content-Encoding\",\n  \"Content-Language\",\n  \"Content-MD5\",\n  \"Content-Range\",\n  \"ETag\",\n  \"Last-Modified\",\n  \"Server\",\n  \"Vary\",\n  \"x-ms-content-crc64\",\n  \"x-ms-copy-action\",\n  \"x-ms-copy-completion-time\",\n  \"x-ms-copy-id\",\n  \"x-ms-copy-progress\",\n  \"x-ms-copy-status\",\n  \"x-ms-has-immutability-policy\",\n  \"x-ms-has-legal-hold\",\n  \"x-ms-lease-state\",\n  \"x-ms-lease-status\",\n  \"x-ms-range\",\n  \"x-ms-request-server-encrypted\",\n  \"x-ms-server-encrypted\",\n  \"x-ms-snapshot\",\n  \"x-ms-source-range\",\n  \"If-Match\",\n  \"If-Modified-Since\",\n  \"If-None-Match\",\n  \"If-Unmodified-Since\",\n  \"x-ms-access-tier\",\n  \"x-ms-access-tier-change-time\",\n  \"x-ms-access-tier-inferred\",\n  \"x-ms-account-kind\",\n  \"x-ms-archive-status\",\n  \"x-ms-blob-append-offset\",\n  \"x-ms-blob-cache-control\",\n  \"x-ms-blob-committed-block-count\",\n  \"x-ms-blob-condition-appendpos\",\n  \"x-ms-blob-condition-maxsize\",\n  \"x-ms-blob-content-disposition\",\n  \"x-ms-blob-content-encoding\",\n  \"x-ms-blob-content-language\",\n  \"x-ms-blob-content-length\",\n  \"x-ms-blob-content-md5\",\n  \"x-ms-blob-content-type\",\n  \"x-ms-blob-public-access\",\n  \"x-ms-blob-sequence-number\",\n  \"x-ms-blob-type\",\n  \"x-ms-copy-destination-snapshot\",\n  \"x-ms-creation-time\",\n  \"x-ms-default-encryption-scope\",\n  \"x-ms-delete-snapshots\",\n  \"x-ms-delete-type-permanent\",\n  \"x-ms-deny-encryption-scope-override\",\n  \"x-ms-encryption-algorithm\",\n  \"x-ms-if-sequence-number-eq\",\n  \"x-ms-if-sequence-number-le\",\n  \"x-ms-if-sequence-number-lt\",\n  \"x-ms-incremental-copy\",\n  \"x-ms-lease-action\",\n  \"x-ms-lease-break-period\",\n  \"x-ms-lease-duration\",\n  \"x-ms-lease-id\",\n  \"x-ms-lease-time\",\n  \"x-ms-page-write\",\n  \"x-ms-proposed-lease-id\",\n  \"x-ms-range-get-content-md5\",\n  \"x-ms-rehydrate-priority\",\n  \"x-ms-sequence-number-action\",\n  \"x-ms-sku-name\",\n  \"x-ms-source-content-md5\",\n  \"x-ms-source-if-match\",\n  \"x-ms-source-if-modified-since\",\n  \"x-ms-source-if-none-match\",\n  \"x-ms-source-if-unmodified-since\",\n  \"x-ms-tag-count\",\n  \"x-ms-encryption-key-sha256\"\n];\n\nexport const StorageDataLakeLoggingAllowedQueryParameters = [\n  \"comp\",\n  \"maxresults\",\n  \"rscc\",\n  \"rscd\",\n  \"rsce\",\n  \"rscl\",\n  \"rsct\",\n  \"se\",\n  \"si\",\n  \"sip\",\n  \"sp\",\n  \"spr\",\n  \"sr\",\n  \"srt\",\n  \"ss\",\n  \"st\",\n  \"sv\",\n  \"include\",\n  \"marker\",\n  \"prefix\",\n  \"copyid\",\n  \"restype\",\n  \"blockid\",\n  \"blocklisttype\",\n  \"delimiter\",\n  \"prevsnapshot\",\n  \"ske\",\n  \"skoid\",\n  \"sks\",\n  \"skt\",\n  \"sktid\",\n  \"skv\",\n  \"snapshot\"\n];\n\nexport const UrlConstants = {\n  Parameters: {\n    FORCE_BROWSER_NO_CACHE: \"_\",\n    SIGNATURE: \"sig\",\n    SNAPSHOT: \"snapshot\",\n    TIMEOUT: \"timeout\"\n  }\n};\n\nexport const HttpUrlConnection = {\n  HTTP_ACCEPTED: 202,\n  HTTP_CONFLICT: 409,\n  HTTP_NOT_FOUND: 404,\n  HTTP_PRECON_FAILED: 412,\n  HTTP_RANGE_NOT_SATISFIABLE: 416\n};\n\nexport const HeaderConstants = {\n  AUTHORIZATION: \"Authorization\",\n  AUTHORIZATION_SCHEME: \"Bearer\",\n  CONTENT_ENCODING: \"Content-Encoding\",\n  CONTENT_ID: \"Content-ID\",\n  CONTENT_LANGUAGE: \"Content-Language\",\n  CONTENT_LENGTH: \"Content-Length\",\n  CONTENT_MD5: \"Content-Md5\",\n  CONTENT_TRANSFER_ENCODING: \"Content-Transfer-Encoding\",\n  CONTENT_TYPE: \"Content-Type\",\n  COOKIE: \"Cookie\",\n  DATE: \"date\",\n  IF_MATCH: \"if-match\",\n  IF_MODIFIED_SINCE: \"if-modified-since\",\n  IF_NONE_MATCH: \"if-none-match\",\n  IF_UNMODIFIED_SINCE: \"if-unmodified-since\",\n  PREFIX_FOR_STORAGE: \"x-ms-\",\n  RANGE: \"Range\",\n  USER_AGENT: \"User-Agent\",\n  X_MS_CLIENT_REQUEST_ID: \"x-ms-client-request-id\",\n  X_MS_COPY_SOURCE: \"x-ms-copy-source\",\n  X_MS_DATE: \"x-ms-date\",\n  X_MS_ERROR_CODE: \"x-ms-error-code\",\n  X_MS_VERSION: \"x-ms-version\"\n};\n\nexport const DevelopmentConnectionString = `DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;`;\n\n// Mapping pairs to transform url from dfs endpoint to blob endpoint\n// Customize this value to add more mapping patterns\nexport const ToBlobEndpointHostMappings = [\n  [\"dfs.preprod.core.windows.net\", \"blob.preprod.core.windows.net\"],\n  [\"dfs.core.windows.net\", \"blob.core.windows.net\"],\n  [\"dfs.core.chinacloudapi.cn\", \"blob.core.chinacloudapi.cn\"],\n  [\"dfs.core.usgovcloudapi.net\", \"blob.core.usgovcloudapi.net\"],\n  [\"dfs.core.cloudapi.de\", \"blob.core.cloudapi.de\"],\n  [\"dfs.core.microsoft.scloud\", \"blob.core.microsoft.scloud\"],\n  [\"dfs.core.eaglex.ic.gov\", \"blob.core.eaglex.ic.gov\"]\n];\n\n// Mapping pairs to transform url from blob endpoint to dfs endpoint\n// Customize this value to add more mapping patterns\nexport const ToDfsEndpointHostMappings = [\n  [\"blob.preprod.core.windows.net\", \"dfs.preprod.core.windows.net\"],\n  [\"blob.core.windows.net\", \"dfs.core.windows.net\"],\n  [\"blob.core.chinacloudapi.cn\", \"dfs.core.chinacloudapi.cn\"],\n  [\"blob.core.usgovcloudapi.net\", \"dfs.core.usgovcloudapi.net\"],\n  [\"blob.core.cloudapi.de\", \"dfs.core.cloudapi.de\"],\n  [\"blob.core.microsoft.scloud\", \"dfs.core.microsoft.scloud\"],\n  [\"blob.core.eaglex.ic.gov\", \"dfs.core.eaglex.ic.gov\"]\n];\n\nexport const ETagAny = \"*\";\n\nexport const DeletionIdKey = \"deletionid\";\n\nexport const PathResultTypeConstants = {\n  FileResourceType: \"file\",\n  DirectoryResourceType: \"directory\"\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { HttpHeaders, isNode, URLBuilder } from \"@azure/core-http\";\n\nimport { DevelopmentConnectionString, HeaderConstants, UrlConstants } from \"./constants\";\n\n/**\n * Reserved URL characters must be properly escaped for Storage services like Blob or File.\n *\n * ## URL encode and escape strategy for JS SDKs\n *\n * When customers pass a URL string into XxxClient classes constructors, the URL string may already be URL encoded or not.\n * But before sending to Azure Storage server, the URL must be encoded. However, it's hard for a SDK to guess whether the URL\n * string has been encoded or not. We have 2 potential strategies, and chose strategy two for the XxxClient constructors.\n *\n * ### Strategy One: Assume the customer URL string is not encoded, and always encode URL string in SDK.\n *\n * This is what legacy V2 SDK does, simple and works for most of the cases.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b:\",\n *   SDK will encode it to \"http://account.blob.core.windows.net/con/b%3A\" and send to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%3A\",\n *   SDK will encode it to \"http://account.blob.core.windows.net/con/b%253A\" and send to server. A blob named \"b%3A\" will be created.\n *\n * But this strategy will make it not possible to create a blob with \"?\" in it's name. Because when customer URL string is\n * \"http://account.blob.core.windows.net/con/blob?name\", the \"?name\" will be treated as URL paramter instead of blob name.\n * If customer URL string is \"http://account.blob.core.windows.net/con/blob%3Fname\", a blob named \"blob%3Fname\" will be created.\n * V2 SDK doesn't have this issue because it doesn't allow customer pass in a full URL, it accepts a separate blob name and encodeURIComponent for it.\n * We cannot accept a SDK cannot create a blob name with \"?\". So we implement strategy two:\n *\n * ### Strategy Two: SDK doesn't assume the URL has been encoded or not. It will just escape the special characters.\n *\n * This is what V10 Blob Go SDK does. It accepts a URL type in Go, and call url.EscapedPath() to escape the special chars unescaped.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b:\",\n *   SDK will escape \":\" like \"http://account.blob.core.windows.net/con/b%3A\" and send to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%3A\",\n *   There is no special characters, so send \"http://account.blob.core.windows.net/con/b%3A\" to server. A blob named \"b:\" will be created.\n * - When customer URL string is \"http://account.blob.core.windows.net/con/b%253A\",\n *   There is no special characters, so send \"http://account.blob.core.windows.net/con/b%253A\" to server. A blob named \"b%3A\" will be created.\n *\n * This strategy gives us flexibility to create with any special characters. But \"%\" will be treated as a special characters, if the URL string\n * is not encoded, there shouldn't a \"%\" in the URL string, otherwise the URL is not a valid URL.\n * If customer needs to create a blob with \"%\" in it's blob name, use \"%25\" instead of \"%\". Just like above 3rd sample.\n * And following URL strings are invalid:\n * - \"http://account.blob.core.windows.net/con/b%\"\n * - \"http://account.blob.core.windows.net/con/b%2\"\n * - \"http://account.blob.core.windows.net/con/b%G\"\n *\n * Another special character is \"?\", use \"%2F\" to represent a blob name with \"?\" in a URL string.\n *\n * ### Strategy for containerName, blobName or other specific XXXName parameters in methods such as `containerClient.getBlobClient(blobName)`\n *\n * We will apply strategy one, and call encodeURIComponent for these parameters like blobName. Because what customers passes in is a plain name instead of a URL.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-shares--directories--files--and-metadata\n *\n * @param url -\n */\nexport function escapeURLPath(url: string): string {\n  const urlParsed = URLBuilder.parse(url);\n\n  let path = urlParsed.getPath();\n  path = path || \"/\";\n\n  path = escape(path);\n  urlParsed.setPath(path);\n\n  return urlParsed.toString();\n}\n\nexport interface ConnectionString {\n  kind: \"AccountConnString\" | \"SASConnString\";\n  url: string;\n  accountName: string;\n  accountKey?: any;\n  accountSas?: string;\n  proxyUri?: string; // Development Connection String may contain proxyUri\n}\n\nfunction getProxyUriFromDevConnString(connectionString: string): string {\n  // Development Connection String\n  // https://docs.microsoft.com/en-us/azure/storage/common/storage-configure-connection-string#connect-to-the-emulator-account-using-the-well-known-account-name-and-key\n  let proxyUri = \"\";\n  if (connectionString.search(\"DevelopmentStorageProxyUri=\") !== -1) {\n    // CONNECTION_STRING=UseDevelopmentStorage=true;DevelopmentStorageProxyUri=http://myProxyUri\n    const matchCredentials = connectionString.split(\";\");\n    for (const element of matchCredentials) {\n      if (element.trim().startsWith(\"DevelopmentStorageProxyUri=\")) {\n        proxyUri = element.trim().match(\"DevelopmentStorageProxyUri=(.*)\")![1];\n      }\n    }\n  }\n  return proxyUri;\n}\n\nexport function getValueInConnString(\n  connectionString: string,\n  argument:\n    | \"BlobEndpoint\"\n    | \"AccountName\"\n    | \"AccountKey\"\n    | \"DefaultEndpointsProtocol\"\n    | \"EndpointSuffix\"\n    | \"SharedAccessSignature\"\n): string {\n  const elements = connectionString.split(\";\");\n  for (const element of elements) {\n    if (element.trim().startsWith(argument)) {\n      return element.trim().match(argument + \"=(.*)\")![1];\n    }\n  }\n  return \"\";\n}\n\n/**\n * Extracts the parts of an Azure Storage account connection string.\n *\n * @param connectionString - Connection string.\n * @returns String key value pairs of the storage account's url and credentials.\n */\nexport function extractConnectionStringParts(connectionString: string): ConnectionString {\n  let proxyUri = \"\";\n\n  if (connectionString.startsWith(\"UseDevelopmentStorage=true\")) {\n    // Development connection string\n    proxyUri = getProxyUriFromDevConnString(connectionString);\n    connectionString = DevelopmentConnectionString;\n  }\n\n  // Matching BlobEndpoint in the Account connection string\n  let blobEndpoint = getValueInConnString(connectionString, \"BlobEndpoint\");\n  // Slicing off '/' at the end if exists\n  // (The methods that use `extractConnectionStringParts` expect the url to not have `/` at the end)\n  blobEndpoint = blobEndpoint.endsWith(\"/\") ? blobEndpoint.slice(0, -1) : blobEndpoint;\n\n  if (\n    connectionString.search(\"DefaultEndpointsProtocol=\") !== -1 &&\n    connectionString.search(\"AccountKey=\") !== -1\n  ) {\n    // Account connection string\n\n    let defaultEndpointsProtocol = \"\";\n    let accountName = \"\";\n    let accountKey = Buffer.from(\"accountKey\", \"base64\");\n    let endpointSuffix = \"\";\n\n    // Get account name and key\n    accountName = getValueInConnString(connectionString, \"AccountName\");\n    accountKey = Buffer.from(getValueInConnString(connectionString, \"AccountKey\"), \"base64\");\n\n    if (!blobEndpoint) {\n      // BlobEndpoint is not present in the Account connection string\n      // Can be obtained from `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`\n\n      defaultEndpointsProtocol = getValueInConnString(connectionString, \"DefaultEndpointsProtocol\");\n      const protocol = defaultEndpointsProtocol!.toLowerCase();\n      if (protocol !== \"https\" && protocol !== \"http\") {\n        throw new Error(\n          \"Invalid DefaultEndpointsProtocol in the provided Connection String. Expecting 'https' or 'http'\"\n        );\n      }\n\n      endpointSuffix = getValueInConnString(connectionString, \"EndpointSuffix\");\n      if (!endpointSuffix) {\n        throw new Error(\"Invalid EndpointSuffix in the provided Connection String\");\n      }\n      blobEndpoint = `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;\n    }\n\n    if (!accountName) {\n      throw new Error(\"Invalid AccountName in the provided Connection String\");\n    } else if (accountKey.length === 0) {\n      throw new Error(\"Invalid AccountKey in the provided Connection String\");\n    }\n\n    return {\n      kind: \"AccountConnString\",\n      url: blobEndpoint,\n      accountName,\n      accountKey,\n      proxyUri\n    };\n  } else {\n    // SAS connection string\n\n    const accountSas = getValueInConnString(connectionString, \"SharedAccessSignature\");\n    const accountName = getAccountNameFromUrl(blobEndpoint);\n    if (!blobEndpoint) {\n      throw new Error(\"Invalid BlobEndpoint in the provided SAS Connection String\");\n    } else if (!accountSas) {\n      throw new Error(\"Invalid SharedAccessSignature in the provided SAS Connection String\");\n    }\n\n    return { kind: \"SASConnString\", url: blobEndpoint, accountName, accountSas };\n  }\n}\n\n/**\n * Internal escape method implemented Strategy Two mentioned in escapeURL() description.\n *\n * @param text -\n */\nfunction escape(text: string): string {\n  return encodeURIComponent(text)\n    .replace(/%2F/g, \"/\") // Don't escape for \"/\"\n    .replace(/'/g, \"%27\") // Escape for \"'\"\n    .replace(/\\+/g, \"%20\")\n    .replace(/%25/g, \"%\"); // Revert encoded \"%\"\n}\n\n/**\n * Append a string to URL path. Will remove duplicated \"/\" in front of the string\n * when URL path ends with a \"/\".\n *\n * @param url - Source URL string\n * @param name - String to be appended to URL\n * @returns An updated URL string\n */\nexport function appendToURLPath(url: string, name: string): string {\n  const urlParsed = URLBuilder.parse(url);\n\n  let path = urlParsed.getPath();\n  path = path ? (path.endsWith(\"/\") ? `${path}${name}` : `${path}/${name}`) : name;\n  urlParsed.setPath(path);\n\n  return urlParsed.toString();\n}\n\n/**\n * Append a string to URL query.\n *\n * @param url - Source URL string.\n * @param queryParts - String to be appended to the URL query.\n * @returns An updated URL string.\n */\nexport function appendToURLQuery(url: string, queryParts: string): string {\n  const urlParsed = URLBuilder.parse(url);\n\n  let query = urlParsed.getQuery();\n  if (query) {\n    query += \"&\" + queryParts;\n  } else {\n    query = queryParts;\n  }\n\n  urlParsed.setQuery(query);\n  return urlParsed.toString();\n}\n\n/**\n * Set URL parameter name and value. If name exists in URL parameters, old value\n * will be replaced by name key. If not provide value, the parameter will be deleted.\n *\n * @param url - Source URL string\n * @param name - Parameter name\n * @param value - Parameter value\n * @returns An updated URL string\n */\nexport function setURLParameter(url: string, name: string, value?: string): string {\n  const urlParsed = URLBuilder.parse(url);\n  urlParsed.setQueryParameter(name, value);\n  return urlParsed.toString();\n}\n\n/**\n * Get URL parameter by name.\n *\n * @param url -\n * @param name -\n */\nexport function getURLParameter(url: string, name: string): string | string[] | undefined {\n  const urlParsed = URLBuilder.parse(url);\n  return urlParsed.getQueryParameterValue(name);\n}\n\n/**\n * Set URL host.\n *\n * @param url - Source URL string\n * @param host - New host string\n * @returns An updated URL string\n */\nexport function setURLHost(url: string, host: string): string {\n  const urlParsed = URLBuilder.parse(url);\n  urlParsed.setHost(host);\n  return urlParsed.toString();\n}\n\n/**\n * Get URL path from an URL string.\n *\n * @param url - Source URL string\n */\nexport function getURLPath(url: string): string | undefined {\n  const urlParsed = URLBuilder.parse(url);\n  return urlParsed.getPath();\n}\n\n/**\n * Set URL path.\n *\n * @param url -\n * @param path -\n */\nexport function setURLPath(url: string, path?: string): string {\n  const urlParsed = URLBuilder.parse(url);\n  urlParsed.setPath(path);\n  return urlParsed.toString();\n}\n\n/**\n * Get URL scheme from an URL string.\n *\n * @param url - Source URL string\n */\nexport function getURLScheme(url: string): string | undefined {\n  const urlParsed = URLBuilder.parse(url);\n  return urlParsed.getScheme();\n}\n\n/**\n * Get URL path and query from an URL string.\n *\n * @param url - Source URL string\n */\nexport function getURLPathAndQuery(url: string): string | undefined {\n  const urlParsed = URLBuilder.parse(url);\n  const pathString = urlParsed.getPath();\n  if (!pathString) {\n    throw new RangeError(\"Invalid url without valid path.\");\n  }\n\n  let queryString = urlParsed.getQuery() || \"\";\n  queryString = queryString.trim();\n  if (queryString !== \"\") {\n    queryString = queryString.startsWith(\"?\") ? queryString : `?${queryString}`; // Ensure query string start with '?'\n  }\n\n  return `${pathString}${queryString}`;\n}\n\n/**\n * Get URL query key value pairs from an URL string.\n *\n * @param url -\n */\nexport function getURLQueries(url: string): { [key: string]: string } {\n  let queryString = URLBuilder.parse(url).getQuery();\n  if (!queryString) {\n    return {};\n  }\n\n  queryString = queryString.trim();\n  queryString = queryString.startsWith(\"?\") ? queryString.substr(1) : queryString;\n\n  let querySubStrings: string[] = queryString.split(\"&\");\n  querySubStrings = querySubStrings.filter((value: string) => {\n    const indexOfEqual = value.indexOf(\"=\");\n    const lastIndexOfEqual = value.lastIndexOf(\"=\");\n    return (\n      indexOfEqual > 0 && indexOfEqual === lastIndexOfEqual && lastIndexOfEqual < value.length - 1\n    );\n  });\n\n  const queries: { [key: string]: string } = {};\n  for (const querySubString of querySubStrings) {\n    const splitResults = querySubString.split(\"=\");\n    const key: string = splitResults[0];\n    const value: string = splitResults[1];\n    queries[key] = value;\n  }\n\n  return queries;\n}\n\n/**\n * Get URL query string.\n *\n * @param url -\n */\nexport function getURLQueryString(url: string): string | undefined {\n  const urlParsed = URLBuilder.parse(url);\n  return urlParsed.getQuery();\n}\n\n/**\n * Set URL query string.\n *\n * @param url -\n * @param queryString -\n */\nexport function setURLQueries(url: string, queryString: string): string {\n  const urlParsed = URLBuilder.parse(url);\n  urlParsed.setQuery(queryString);\n  return urlParsed.toString();\n}\n\n/**\n * Rounds a date off to seconds.\n *\n * @param date -\n * @param withMilliseconds - If true, YYYY-MM-DDThh:mm:ss.fffffffZ will be returned;\n *                                          If false, YYYY-MM-DDThh:mm:ssZ will be returned.\n * @returns Date string in ISO8061 format, with or without 7 milliseconds component\n */\nexport function truncatedISO8061Date(date: Date, withMilliseconds: boolean = true): string {\n  // Date.toISOString() will return like \"2018-10-29T06:34:36.139Z\"\n  const dateString = date.toISOString();\n\n  return withMilliseconds\n    ? dateString.substring(0, dateString.length - 1) + \"0000\" + \"Z\"\n    : dateString.substring(0, dateString.length - 5) + \"Z\";\n}\n\n/**\n * Base64 encode.\n *\n * @param content -\n */\nexport function base64encode(content: string): string {\n  return !isNode ? btoa(content) : Buffer.from(content).toString(\"base64\");\n}\n\n/**\n * Base64 decode.\n *\n * @param encodedString -\n */\nexport function base64decode(encodedString: string): string {\n  return !isNode ? atob(encodedString) : Buffer.from(encodedString, \"base64\").toString();\n}\n\n/**\n * Generate a 64 bytes base64 block ID string.\n *\n * @param blockIndex -\n */\nexport function generateBlockID(blockIDPrefix: string, blockIndex: number): string {\n  // To generate a 64 bytes base64 string, source string should be 48\n  const maxSourceStringLength = 48;\n\n  // A blob can have a maximum of 100,000 uncommitted blocks at any given time\n  const maxBlockIndexLength = 6;\n\n  const maxAllowedBlockIDPrefixLength = maxSourceStringLength - maxBlockIndexLength;\n\n  if (blockIDPrefix.length > maxAllowedBlockIDPrefixLength) {\n    blockIDPrefix = blockIDPrefix.slice(0, maxAllowedBlockIDPrefixLength);\n  }\n  const res =\n    blockIDPrefix +\n    blockIndex.toString().padStart(maxSourceStringLength - blockIDPrefix.length, \"0\");\n  return base64encode(res);\n}\n\n/**\n * Delay specified time interval.\n *\n * @param timeInMs -\n * @param aborter -\n * @param abortError -\n */\nexport async function delay(\n  timeInMs: number,\n  aborter?: AbortSignalLike,\n  abortError?: Error\n): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    /* eslint-disable-next-line prefer-const*/\n    let timeout: any;\n\n    const abortHandler = () => {\n      if (timeout !== undefined) {\n        clearTimeout(timeout);\n      }\n      reject(abortError);\n    };\n\n    const resolveHandler = () => {\n      if (aborter !== undefined) {\n        aborter.removeEventListener(\"abort\", abortHandler);\n      }\n      resolve();\n    };\n\n    timeout = setTimeout(resolveHandler, timeInMs);\n    if (aborter !== undefined) {\n      aborter.addEventListener(\"abort\", abortHandler);\n    }\n  });\n}\n\nexport function sanitizeURL(url: string): string {\n  let safeURL: string = url;\n  if (getURLParameter(safeURL, UrlConstants.Parameters.SIGNATURE)) {\n    safeURL = setURLParameter(safeURL, UrlConstants.Parameters.SIGNATURE, \"*****\");\n  }\n\n  return safeURL;\n}\n\nexport function sanitizeHeaders(originalHeader: HttpHeaders): HttpHeaders {\n  const headers: HttpHeaders = new HttpHeaders();\n  for (const header of originalHeader.headersArray()) {\n    if (header.name.toLowerCase() === HeaderConstants.AUTHORIZATION.toLowerCase()) {\n      headers.set(header.name, \"*****\");\n    } else if (header.name.toLowerCase() === HeaderConstants.X_MS_COPY_SOURCE) {\n      headers.set(header.name, sanitizeURL(header.value));\n    } else {\n      headers.set(header.name, header.value);\n    }\n  }\n\n  return headers;\n}\n/**\n * If two strings are equal when compared case insensitive.\n *\n * @param str1 -\n * @param str2 -\n */\nexport function iEqual(str1: string, str2: string): boolean {\n  return str1.toLocaleLowerCase() === str2.toLocaleLowerCase();\n}\n\n/**\n * Extracts account name from the blobEndpointUrl\n * @param blobEndpointUrl - blobEndpointUrl to extract the account name from\n * @returns account name\n */\nexport function getAccountNameFromUrl(blobEndpointUrl: string): string {\n  const parsedUrl: URLBuilder = URLBuilder.parse(blobEndpointUrl);\n  let accountName;\n  try {\n    if (parsedUrl.getHost()!.split(\".\")[1] === \"blob\") {\n      // `${defaultEndpointsProtocol}://${accountName}.blob.${endpointSuffix}`;\n      accountName = parsedUrl.getHost()!.split(\".\")[0];\n    } else if (isIpEndpointStyle(parsedUrl)) {\n      // IPv4/IPv6 address hosts... Example - http://192.0.0.10:10001/devstoreaccount1/\n      // Single word domain without a [dot] in the endpoint... Example - http://localhost:10001/devstoreaccount1/\n      // .getPath() -> /devstoreaccount1/\n      accountName = parsedUrl.getPath()!.split(\"/\")[1];\n    } else {\n      // Custom domain case: \"https://customdomain.com/containername/blob\".\n      accountName = \"\";\n    }\n\n    return accountName;\n  } catch (error) {\n    throw new Error(\"Unable to extract accountName with provided information.\");\n  }\n}\n\nexport function isIpEndpointStyle(parsedUrl: URLBuilder): boolean {\n  if (parsedUrl.getHost() === undefined) {\n    return false;\n  }\n\n  const host =\n    parsedUrl.getHost()! + (parsedUrl.getPort() === undefined ? \"\" : \":\" + parsedUrl.getPort());\n\n  // Case 1: Ipv6, use a broad regex to find out candidates whose host contains two ':'.\n  // Case 2: localhost(:port), use broad regex to match port part.\n  // Case 3: Ipv4, use broad regex which just check if host contains Ipv4.\n  // For valid host please refer to https://man7.org/linux/man-pages/man7/hostname.7.html.\n  return /^.*:.*:.*$|^localhost(:[0-9]+)?$|^(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])(\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])){3}(:[0-9]+)?$/.test(\n    host\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { RequestPolicy, RequestPolicyOptions, WebResource } from \"@azure/core-http\";\n\nimport { StorageSharedKeyCredential } from \"../credentials/StorageSharedKeyCredential\";\nimport { HeaderConstants } from \"../utils/constants\";\nimport { getURLPath, getURLQueries } from \"../utils/utils.common\";\nimport { CredentialPolicy } from \"./CredentialPolicy\";\n\n/**\n * StorageSharedKeyCredentialPolicy is a policy used to sign HTTP request with a shared key.\n */\nexport class StorageSharedKeyCredentialPolicy extends CredentialPolicy {\n  /**\n   * Reference to StorageSharedKeyCredential which generates StorageSharedKeyCredentialPolicy\n   */\n  private readonly factory: StorageSharedKeyCredential;\n\n  /**\n   * Creates an instance of StorageSharedKeyCredentialPolicy.\n   * @param nextPolicy -\n   * @param options -\n   * @param factory -\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    factory: StorageSharedKeyCredential\n  ) {\n    super(nextPolicy, options);\n    this.factory = factory;\n  }\n\n  /**\n   * Signs request.\n   *\n   * @param request -\n   */\n  protected signRequest(request: WebResource): WebResource {\n    request.headers.set(HeaderConstants.X_MS_DATE, new Date().toUTCString());\n\n    if (request.body && typeof request.body === \"string\" && request.body.length > 0) {\n      request.headers.set(HeaderConstants.CONTENT_LENGTH, Buffer.byteLength(request.body));\n    }\n\n    const stringToSign: string =\n      [\n        request.method.toUpperCase(),\n        this.getHeaderValueToSign(request, HeaderConstants.CONTENT_LANGUAGE),\n        this.getHeaderValueToSign(request, HeaderConstants.CONTENT_ENCODING),\n        this.getHeaderValueToSign(request, HeaderConstants.CONTENT_LENGTH),\n        this.getHeaderValueToSign(request, HeaderConstants.CONTENT_MD5),\n        this.getHeaderValueToSign(request, HeaderConstants.CONTENT_TYPE),\n        this.getHeaderValueToSign(request, HeaderConstants.DATE),\n        this.getHeaderValueToSign(request, HeaderConstants.IF_MODIFIED_SINCE),\n        this.getHeaderValueToSign(request, HeaderConstants.IF_MATCH),\n        this.getHeaderValueToSign(request, HeaderConstants.IF_NONE_MATCH),\n        this.getHeaderValueToSign(request, HeaderConstants.IF_UNMODIFIED_SINCE),\n        this.getHeaderValueToSign(request, HeaderConstants.RANGE)\n      ].join(\"\\n\") +\n      \"\\n\" +\n      this.getCanonicalizedHeadersString(request) +\n      this.getCanonicalizedResourceString(request);\n\n    const signature: string = this.factory.computeHMACSHA256(stringToSign);\n    request.headers.set(\n      HeaderConstants.AUTHORIZATION,\n      `SharedKey ${this.factory.accountName}:${signature}`\n    );\n\n    // Workaround for node-fetch which will set content-type for dfs append data operations based on Patch\n    if (typeof request.body !== \"function\" && !request.headers.get(HeaderConstants.CONTENT_TYPE)) {\n      request.headers.set(HeaderConstants.CONTENT_TYPE, \"\");\n    }\n\n    // console.log(`[URL]:${request.url}`);\n    // console.log(`[HEADERS]:${request.headers.toString()}`);\n    // console.log(`[STRING TO SIGN]:${JSON.stringify(stringToSign)}`);\n    // console.log(`[KEY]: ${request.headers.get(HeaderConstants.AUTHORIZATION)}`);\n    return request;\n  }\n\n  /**\n   * Retrieve header value according to shared key sign rules.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/authenticate-with-shared-key\n   *\n   * @param request -\n   * @param headerName -\n   */\n  private getHeaderValueToSign(request: WebResource, headerName: string): string {\n    const value = request.headers.get(headerName);\n\n    if (!value) {\n      return \"\";\n    }\n\n    // When using version 2015-02-21 or later, if Content-Length is zero, then\n    // set the Content-Length part of the StringToSign to an empty string.\n    // https://docs.microsoft.com/en-us/rest/api/storageservices/authenticate-with-shared-key\n    if (headerName === HeaderConstants.CONTENT_LENGTH && value === \"0\") {\n      return \"\";\n    }\n\n    return value;\n  }\n\n  /**\n   * To construct the CanonicalizedHeaders portion of the signature string, follow these steps:\n   * 1. Retrieve all headers for the resource that begin with x-ms-, including the x-ms-date header.\n   * 2. Convert each HTTP header name to lowercase.\n   * 3. Sort the headers lexicographically by header name, in ascending order.\n   *    Each header may appear only once in the string.\n   * 4. Replace any linear whitespace in the header value with a single space.\n   * 5. Trim any whitespace around the colon in the header.\n   * 6. Finally, append a new-line character to each canonicalized header in the resulting list.\n   *    Construct the CanonicalizedHeaders string by concatenating all headers in this list into a single string.\n   *\n   * @param request -\n   */\n  private getCanonicalizedHeadersString(request: WebResource): string {\n    let headersArray = request.headers.headersArray().filter((value) => {\n      return value.name.toLowerCase().startsWith(HeaderConstants.PREFIX_FOR_STORAGE);\n    });\n\n    headersArray.sort((a, b): number => {\n      return a.name.toLowerCase().localeCompare(b.name.toLowerCase());\n    });\n\n    // Remove duplicate headers\n    headersArray = headersArray.filter((value, index, array) => {\n      if (index > 0 && value.name.toLowerCase() === array[index - 1].name.toLowerCase()) {\n        return false;\n      }\n      return true;\n    });\n\n    let canonicalizedHeadersStringToSign: string = \"\";\n    headersArray.forEach((header) => {\n      canonicalizedHeadersStringToSign += `${header.name\n        .toLowerCase()\n        .trimRight()}:${header.value.trimLeft()}\\n`;\n    });\n\n    return canonicalizedHeadersStringToSign;\n  }\n\n  /**\n   * Retrieves the webResource canonicalized resource string.\n   *\n   * @param request -\n   */\n  private getCanonicalizedResourceString(request: WebResource): string {\n    const path = getURLPath(request.url) || \"/\";\n\n    let canonicalizedResourceString: string = \"\";\n    canonicalizedResourceString += `/${this.factory.accountName}${path}`;\n\n    const queries = getURLQueries(request.url);\n    const lowercaseQueries: { [key: string]: string } = {};\n    if (queries) {\n      const queryKeys: string[] = [];\n      for (const key in queries) {\n        if (Object.prototype.hasOwnProperty.call(queries, key)) {\n          const lowercaseKey = key.toLowerCase();\n          lowercaseQueries[lowercaseKey] = queries[key];\n          queryKeys.push(lowercaseKey);\n        }\n      }\n\n      queryKeys.sort();\n      for (const key of queryKeys) {\n        canonicalizedResourceString += `\\n${key}:${decodeURIComponent(lowercaseQueries[key])}`;\n      }\n    }\n\n    return canonicalizedResourceString;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createHmac } from \"crypto\";\nimport { RequestPolicy, RequestPolicyOptions } from \"@azure/core-http\";\n\nimport { StorageSharedKeyCredentialPolicy } from \"../policies/StorageSharedKeyCredentialPolicy\";\nimport { Credential } from \"./Credential\";\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * StorageSharedKeyCredential for account key authorization of Azure Storage service.\n */\nexport class StorageSharedKeyCredential extends Credential {\n  /**\n   * Azure Storage account name; readonly.\n   */\n  public readonly accountName: string;\n\n  /**\n   * Azure Storage account key; readonly.\n   */\n  private readonly accountKey: Buffer;\n\n  /**\n   * Creates an instance of StorageSharedKeyCredential.\n   * @param accountName -\n   * @param accountKey -\n   */\n  constructor(accountName: string, accountKey: string) {\n    super();\n    this.accountName = accountName;\n    this.accountKey = Buffer.from(accountKey, \"base64\");\n  }\n\n  /**\n   * Creates a StorageSharedKeyCredentialPolicy object.\n   *\n   * @param nextPolicy -\n   * @param options -\n   */\n  public create(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions\n  ): StorageSharedKeyCredentialPolicy {\n    return new StorageSharedKeyCredentialPolicy(nextPolicy, options, this);\n  }\n\n  /**\n   * Generates a hash signature for an HTTP request or for a SAS.\n   *\n   * @param stringToSign -\n   */\n  public computeHMACSHA256(stringToSign: string): string {\n    return createHmac(\"sha256\", this.accountKey)\n      .update(stringToSign, \"utf8\")\n      .digest(\"base64\");\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { OperationOptions, RequestOptionsBase } from \"@azure/core-http\";\nimport { createSpanFunction } from \"@azure/core-tracing\";\n\n/**\n * Creates a span using the global tracer.\n * @internal\n */\nexport const createSpan = createSpanFunction({\n  packagePrefix: \"Azure.Storage.DataLake\",\n  namespace: \"Microsoft.Storage\"\n});\n\n/**\n * @internal\n *\n * Adapt the tracing options from OperationOptions to what they need to be for\n * RequestOptionsBase (when we update to later OpenTelemetry versions this is now\n * two separate fields, not just one).\n */\nexport function convertTracingToRequestOptionsBase(\n  options?: OperationOptions\n): Pick<RequestOptionsBase, \"spanOptions\" | \"tracingContext\"> {\n  return {\n    // By passing spanOptions if they exist at runtime, we're backwards compatible with @azure/core-tracing@preview.13 and earlier.\n    spanOptions: (options?.tracingOptions as any)?.spanOptions,\n    tracingContext: options?.tracingOptions?.tracingContext\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BlobLeaseClient } from \"@azure/storage-blob\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\n\nimport { Lease, LeaseOperationOptions, LeaseOperationResponse } from \"./models\";\nimport { createSpan } from \"./utils/tracing\";\n\nexport class DataLakeLeaseClient {\n  public get leaseId(): string {\n    return this.client.leaseId;\n  }\n\n  public get url(): string {\n    return this.client.url;\n  }\n\n  constructor(private readonly client: BlobLeaseClient) {}\n\n  public async acquireLease(\n    duration: number,\n    options: LeaseOperationOptions = {}\n  ): Promise<LeaseOperationResponse> {\n    options.conditions = options.conditions || {};\n    const { span, updatedOptions } = createSpan(\"DataLakeLeaseClient-acquireLease\", options);\n    try {\n      return await this.client.acquireLease(duration, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  public async changeLease(\n    proposedLeaseId: string,\n    options: LeaseOperationOptions = {}\n  ): Promise<LeaseOperationResponse> {\n    options.conditions = options.conditions || {};\n    const { span, updatedOptions } = createSpan(\"DataLakeLeaseClient-changeLease\", options);\n    try {\n      return await this.client.changeLease(proposedLeaseId, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  public async releaseLease(options: LeaseOperationOptions = {}): Promise<LeaseOperationResponse> {\n    options.conditions = options.conditions || {};\n    const { span, updatedOptions } = createSpan(\"DataLakeLeaseClient-releaseLease\", options);\n    try {\n      return await this.client.releaseLease(updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  public async renewLease(options: LeaseOperationOptions = {}): Promise<Lease> {\n    options.conditions = options.conditions || {};\n    const { span, updatedOptions } = createSpan(\"DataLakeLeaseClient-renewLease\", options);\n    try {\n      return await this.client.renewLease(updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  public async breakLease(\n    breakPeriod: number,\n    options: LeaseOperationOptions = {}\n  ): Promise<LeaseOperationResponse> {\n    options.conditions = options.conditions || {};\n    const { span, updatedOptions } = createSpan(\"DataLakeLeaseClient-renewLease\", options);\n    try {\n      return await this.client.breakLease(breakPeriod, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\nexport const FileSystemList: coreHttp.CompositeMapper = {\n  serializedName: \"FileSystemList\",\n  type: {\n    name: \"Composite\",\n    className: \"FileSystemList\",\n    modelProperties: {\n      filesystems: {\n        serializedName: \"filesystems\",\n        xmlName: \"filesystems\",\n        xmlElementName: \"FileSystem\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"FileSystem\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const FileSystem: coreHttp.CompositeMapper = {\n  serializedName: \"FileSystem\",\n  type: {\n    name: \"Composite\",\n    className: \"FileSystem\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        xmlName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"lastModified\",\n        xmlName: \"lastModified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      etag: {\n        serializedName: \"eTag\",\n        xmlName: \"eTag\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const StorageError: coreHttp.CompositeMapper = {\n  serializedName: \"StorageError\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageError\",\n    modelProperties: {\n      error: {\n        serializedName: \"error\",\n        xmlName: \"error\",\n        type: {\n          name: \"Composite\",\n          className: \"StorageErrorError\"\n        }\n      },\n      code: {\n        serializedName: \"Code\",\n        xmlName: \"Code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const StorageErrorError: coreHttp.CompositeMapper = {\n  serializedName: \"StorageErrorError\",\n  type: {\n    name: \"Composite\",\n    className: \"StorageErrorError\",\n    modelProperties: {\n      code: {\n        serializedName: \"Code\",\n        xmlName: \"Code\",\n        type: {\n          name: \"String\"\n        }\n      },\n      message: {\n        serializedName: \"Message\",\n        xmlName: \"Message\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PathList: coreHttp.CompositeMapper = {\n  serializedName: \"PathList\",\n  type: {\n    name: \"Composite\",\n    className: \"PathList\",\n    modelProperties: {\n      paths: {\n        serializedName: \"paths\",\n        xmlName: \"paths\",\n        xmlElementName: \"Path\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Path\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const Path: coreHttp.CompositeMapper = {\n  serializedName: \"Path\",\n  type: {\n    name: \"Composite\",\n    className: \"Path\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        xmlName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      isDirectory: {\n        serializedName: \"isDirectory\",\n        xmlName: \"isDirectory\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      lastModified: {\n        serializedName: \"lastModified\",\n        xmlName: \"lastModified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      etag: {\n        serializedName: \"eTag\",\n        xmlName: \"eTag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentLength: {\n        serializedName: \"contentLength\",\n        xmlName: \"contentLength\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      owner: {\n        serializedName: \"owner\",\n        xmlName: \"owner\",\n        type: {\n          name: \"String\"\n        }\n      },\n      group: {\n        serializedName: \"group\",\n        xmlName: \"group\",\n        type: {\n          name: \"String\"\n        }\n      },\n      permissions: {\n        serializedName: \"permissions\",\n        xmlName: \"permissions\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ListBlobsHierarchySegmentResponse: coreHttp.CompositeMapper = {\n  serializedName: \"ListBlobsHierarchySegmentResponse\",\n  xmlName: \"EnumerationResults\",\n  type: {\n    name: \"Composite\",\n    className: \"ListBlobsHierarchySegmentResponse\",\n    modelProperties: {\n      serviceEndpoint: {\n        serializedName: \"ServiceEndpoint\",\n        required: true,\n        xmlName: \"ServiceEndpoint\",\n        xmlIsAttribute: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      containerName: {\n        serializedName: \"ContainerName\",\n        required: true,\n        xmlName: \"ContainerName\",\n        xmlIsAttribute: true,\n        type: {\n          name: \"String\"\n        }\n      },\n      prefix: {\n        serializedName: \"Prefix\",\n        xmlName: \"Prefix\",\n        type: {\n          name: \"String\"\n        }\n      },\n      marker: {\n        serializedName: \"Marker\",\n        xmlName: \"Marker\",\n        type: {\n          name: \"String\"\n        }\n      },\n      maxResults: {\n        serializedName: \"MaxResults\",\n        xmlName: \"MaxResults\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      delimiter: {\n        serializedName: \"Delimiter\",\n        xmlName: \"Delimiter\",\n        type: {\n          name: \"String\"\n        }\n      },\n      segment: {\n        serializedName: \"Segment\",\n        xmlName: \"Blobs\",\n        type: {\n          name: \"Composite\",\n          className: \"BlobHierarchyListSegment\"\n        }\n      },\n      nextMarker: {\n        serializedName: \"NextMarker\",\n        xmlName: \"NextMarker\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobHierarchyListSegment: coreHttp.CompositeMapper = {\n  serializedName: \"BlobHierarchyListSegment\",\n  xmlName: \"Blobs\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobHierarchyListSegment\",\n    modelProperties: {\n      blobPrefixes: {\n        serializedName: \"BlobPrefixes\",\n        xmlName: \"BlobPrefixes\",\n        xmlElementName: \"BlobPrefix\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"BlobPrefix\"\n            }\n          }\n        }\n      },\n      blobItems: {\n        serializedName: \"BlobItems\",\n        required: true,\n        xmlName: \"BlobItems\",\n        xmlElementName: \"Blob\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"BlobItemModel\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const BlobPrefix: coreHttp.CompositeMapper = {\n  serializedName: \"BlobPrefix\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobPrefix\",\n    modelProperties: {\n      name: {\n        serializedName: \"Name\",\n        required: true,\n        xmlName: \"Name\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobItemModel: coreHttp.CompositeMapper = {\n  serializedName: \"BlobItemModel\",\n  xmlName: \"Blob\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobItemModel\",\n    modelProperties: {\n      name: {\n        serializedName: \"Name\",\n        required: true,\n        xmlName: \"Name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deleted: {\n        serializedName: \"Deleted\",\n        required: true,\n        xmlName: \"Deleted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      snapshot: {\n        serializedName: \"Snapshot\",\n        required: true,\n        xmlName: \"Snapshot\",\n        type: {\n          name: \"String\"\n        }\n      },\n      versionId: {\n        serializedName: \"VersionId\",\n        xmlName: \"VersionId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      isCurrentVersion: {\n        serializedName: \"IsCurrentVersion\",\n        xmlName: \"IsCurrentVersion\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      properties: {\n        serializedName: \"Properties\",\n        xmlName: \"Properties\",\n        type: {\n          name: \"Composite\",\n          className: \"BlobPropertiesModel\"\n        }\n      },\n      deletionId: {\n        serializedName: \"DeletionId\",\n        xmlName: \"DeletionId\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const BlobPropertiesModel: coreHttp.CompositeMapper = {\n  serializedName: \"BlobPropertiesModel\",\n  xmlName: \"Properties\",\n  type: {\n    name: \"Composite\",\n    className: \"BlobPropertiesModel\",\n    modelProperties: {\n      creationTime: {\n        serializedName: \"Creation-Time\",\n        xmlName: \"Creation-Time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      lastModified: {\n        serializedName: \"Last-Modified\",\n        required: true,\n        xmlName: \"Last-Modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      etag: {\n        serializedName: \"Etag\",\n        required: true,\n        xmlName: \"Etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentLength: {\n        serializedName: \"Content-Length\",\n        xmlName: \"Content-Length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      contentType: {\n        serializedName: \"Content-Type\",\n        xmlName: \"Content-Type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentEncoding: {\n        serializedName: \"Content-Encoding\",\n        xmlName: \"Content-Encoding\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentLanguage: {\n        serializedName: \"Content-Language\",\n        xmlName: \"Content-Language\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"Content-MD5\",\n        xmlName: \"Content-MD5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      contentDisposition: {\n        serializedName: \"Content-Disposition\",\n        xmlName: \"Content-Disposition\",\n        type: {\n          name: \"String\"\n        }\n      },\n      cacheControl: {\n        serializedName: \"Cache-Control\",\n        xmlName: \"Cache-Control\",\n        type: {\n          name: \"String\"\n        }\n      },\n      blobSequenceNumber: {\n        serializedName: \"x-ms-blob-sequence-number\",\n        xmlName: \"x-ms-blob-sequence-number\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      copyId: {\n        serializedName: \"CopyId\",\n        xmlName: \"CopyId\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copySource: {\n        serializedName: \"CopySource\",\n        xmlName: \"CopySource\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyProgress: {\n        serializedName: \"CopyProgress\",\n        xmlName: \"CopyProgress\",\n        type: {\n          name: \"String\"\n        }\n      },\n      copyCompletionTime: {\n        serializedName: \"CopyCompletionTime\",\n        xmlName: \"CopyCompletionTime\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      copyStatusDescription: {\n        serializedName: \"CopyStatusDescription\",\n        xmlName: \"CopyStatusDescription\",\n        type: {\n          name: \"String\"\n        }\n      },\n      serverEncrypted: {\n        serializedName: \"ServerEncrypted\",\n        xmlName: \"ServerEncrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      incrementalCopy: {\n        serializedName: \"IncrementalCopy\",\n        xmlName: \"IncrementalCopy\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      destinationSnapshot: {\n        serializedName: \"DestinationSnapshot\",\n        xmlName: \"DestinationSnapshot\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deletedTime: {\n        serializedName: \"DeletedTime\",\n        xmlName: \"DeletedTime\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      remainingRetentionDays: {\n        serializedName: \"RemainingRetentionDays\",\n        xmlName: \"RemainingRetentionDays\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      accessTierInferred: {\n        serializedName: \"AccessTierInferred\",\n        xmlName: \"AccessTierInferred\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      customerProvidedKeySha256: {\n        serializedName: \"CustomerProvidedKeySha256\",\n        xmlName: \"CustomerProvidedKeySha256\",\n        type: {\n          name: \"String\"\n        }\n      },\n      encryptionScope: {\n        serializedName: \"EncryptionScope\",\n        xmlName: \"EncryptionScope\",\n        type: {\n          name: \"String\"\n        }\n      },\n      accessTierChangeTime: {\n        serializedName: \"AccessTierChangeTime\",\n        xmlName: \"AccessTierChangeTime\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      tagCount: {\n        serializedName: \"TagCount\",\n        xmlName: \"TagCount\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      expiresOn: {\n        serializedName: \"Expiry-Time\",\n        xmlName: \"Expiry-Time\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      sealed: {\n        serializedName: \"Sealed\",\n        xmlName: \"Sealed\",\n        type: {\n          name: \"Boolean\"\n        }\n      },\n      lastAccessedOn: {\n        serializedName: \"LastAccessTime\",\n        xmlName: \"LastAccessTime\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      }\n    }\n  }\n};\n\nexport const SetAccessControlRecursiveResponse: coreHttp.CompositeMapper = {\n  serializedName: \"SetAccessControlRecursiveResponse\",\n  type: {\n    name: \"Composite\",\n    className: \"SetAccessControlRecursiveResponse\",\n    modelProperties: {\n      directoriesSuccessful: {\n        serializedName: \"directoriesSuccessful\",\n        xmlName: \"directoriesSuccessful\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      filesSuccessful: {\n        serializedName: \"filesSuccessful\",\n        xmlName: \"filesSuccessful\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      failureCount: {\n        serializedName: \"failureCount\",\n        xmlName: \"failureCount\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      failedEntries: {\n        serializedName: \"failedEntries\",\n        xmlName: \"failedEntries\",\n        xmlElementName: \"AclFailedEntry\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"AclFailedEntry\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const AclFailedEntry: coreHttp.CompositeMapper = {\n  serializedName: \"AclFailedEntry\",\n  type: {\n    name: \"Composite\",\n    className: \"AclFailedEntry\",\n    modelProperties: {\n      name: {\n        serializedName: \"name\",\n        xmlName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      type: {\n        serializedName: \"type\",\n        xmlName: \"type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorMessage: {\n        serializedName: \"errorMessage\",\n        xmlName: \"errorMessage\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceListFileSystemsHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Service_listFileSystemsHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceListFileSystemsHeaders\",\n    modelProperties: {\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        constraints: {\n          Pattern: new RegExp(\n            \"^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$\"\n          )\n        },\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      continuation: {\n        serializedName: \"x-ms-continuation\",\n        xmlName: \"x-ms-continuation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentType: {\n        serializedName: \"content-type\",\n        xmlName: \"content-type\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const ServiceListFileSystemsExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Service_listFileSystemsExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"ServiceListFileSystemsExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FileSystemCreateHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"FileSystem_createHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"FileSystemCreateHeaders\",\n    modelProperties: {\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        constraints: {\n          Pattern: new RegExp(\n            \"^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$\"\n          )\n        },\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      namespaceEnabled: {\n        serializedName: \"x-ms-namespace-enabled\",\n        xmlName: \"x-ms-namespace-enabled\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FileSystemCreateExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"FileSystem_createExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"FileSystemCreateExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FileSystemSetPropertiesHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"FileSystem_setPropertiesHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"FileSystemSetPropertiesHeaders\",\n    modelProperties: {\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        constraints: {\n          Pattern: new RegExp(\n            \"^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$\"\n          )\n        },\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FileSystemSetPropertiesExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"FileSystem_setPropertiesExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"FileSystemSetPropertiesExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FileSystemGetPropertiesHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"FileSystem_getPropertiesHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"FileSystemGetPropertiesHeaders\",\n    modelProperties: {\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        constraints: {\n          Pattern: new RegExp(\n            \"^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$\"\n          )\n        },\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      properties: {\n        serializedName: \"x-ms-properties\",\n        xmlName: \"x-ms-properties\",\n        type: {\n          name: \"String\"\n        }\n      },\n      namespaceEnabled: {\n        serializedName: \"x-ms-namespace-enabled\",\n        xmlName: \"x-ms-namespace-enabled\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FileSystemGetPropertiesExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"FileSystem_getPropertiesExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"FileSystemGetPropertiesExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FileSystemDeleteHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"FileSystem_deleteHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"FileSystemDeleteHeaders\",\n    modelProperties: {\n      requestId: {\n        constraints: {\n          Pattern: new RegExp(\n            \"^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$\"\n          )\n        },\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      }\n    }\n  }\n};\n\nexport const FileSystemDeleteExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"FileSystem_deleteExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"FileSystemDeleteExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FileSystemListPathsHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"FileSystem_listPathsHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"FileSystemListPathsHeaders\",\n    modelProperties: {\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        constraints: {\n          Pattern: new RegExp(\n            \"^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$\"\n          )\n        },\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      continuation: {\n        serializedName: \"x-ms-continuation\",\n        xmlName: \"x-ms-continuation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FileSystemListPathsExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"FileSystem_listPathsExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"FileSystemListPathsExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FileSystemListBlobHierarchySegmentHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"FileSystem_listBlobHierarchySegmentHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"FileSystemListBlobHierarchySegmentHeaders\",\n    modelProperties: {\n      contentType: {\n        serializedName: \"content-type\",\n        xmlName: \"content-type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const FileSystemListBlobHierarchySegmentExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"FileSystem_listBlobHierarchySegmentExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"FileSystemListBlobHierarchySegmentExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PathCreateHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Path_createHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PathCreateHeaders\",\n    modelProperties: {\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        constraints: {\n          Pattern: new RegExp(\n            \"^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$\"\n          )\n        },\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      continuation: {\n        serializedName: \"x-ms-continuation\",\n        xmlName: \"x-ms-continuation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentLength: {\n        serializedName: \"content-length\",\n        xmlName: \"content-length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PathCreateExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Path_createExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PathCreateExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PathUpdateHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Path_updateHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PathUpdateHeaders\",\n    modelProperties: {\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      acceptRanges: {\n        serializedName: \"accept-ranges\",\n        xmlName: \"accept-ranges\",\n        type: {\n          name: \"String\"\n        }\n      },\n      cacheControl: {\n        serializedName: \"cache-control\",\n        xmlName: \"cache-control\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentDisposition: {\n        serializedName: \"content-disposition\",\n        xmlName: \"content-disposition\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentEncoding: {\n        serializedName: \"content-encoding\",\n        xmlName: \"content-encoding\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentLanguage: {\n        serializedName: \"content-language\",\n        xmlName: \"content-language\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentLength: {\n        serializedName: \"content-length\",\n        xmlName: \"content-length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      contentRange: {\n        serializedName: \"content-range\",\n        xmlName: \"content-range\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentType: {\n        serializedName: \"content-type\",\n        xmlName: \"content-type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        xmlName: \"content-md5\",\n        type: {\n          name: \"String\"\n        }\n      },\n      properties: {\n        serializedName: \"x-ms-properties\",\n        xmlName: \"x-ms-properties\",\n        type: {\n          name: \"String\"\n        }\n      },\n      xMsContinuation: {\n        serializedName: \"x-ms-continuation\",\n        xmlName: \"x-ms-continuation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        constraints: {\n          Pattern: new RegExp(\n            \"^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$\"\n          )\n        },\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PathUpdateExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Path_updateExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PathUpdateExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PathLeaseHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Path_leaseHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PathLeaseHeaders\",\n    modelProperties: {\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        constraints: {\n          Pattern: new RegExp(\n            \"^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$\"\n          )\n        },\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      leaseId: {\n        constraints: {\n          Pattern: new RegExp(\n            \"^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$\"\n          )\n        },\n        serializedName: \"x-ms-lease-id\",\n        xmlName: \"x-ms-lease-id\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PathLeaseExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Path_leaseExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PathLeaseExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PathReadHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Path_readHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PathReadHeaders\",\n    modelProperties: {\n      acceptRanges: {\n        serializedName: \"accept-ranges\",\n        xmlName: \"accept-ranges\",\n        type: {\n          name: \"String\"\n        }\n      },\n      cacheControl: {\n        serializedName: \"cache-control\",\n        xmlName: \"cache-control\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentDisposition: {\n        serializedName: \"content-disposition\",\n        xmlName: \"content-disposition\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentEncoding: {\n        serializedName: \"content-encoding\",\n        xmlName: \"content-encoding\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentLanguage: {\n        serializedName: \"content-language\",\n        xmlName: \"content-language\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentLength: {\n        serializedName: \"content-length\",\n        xmlName: \"content-length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      contentRange: {\n        serializedName: \"content-range\",\n        xmlName: \"content-range\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentType: {\n        serializedName: \"content-type\",\n        xmlName: \"content-type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        xmlName: \"content-md5\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        constraints: {\n          Pattern: new RegExp(\n            \"^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$\"\n          )\n        },\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      resourceType: {\n        serializedName: \"x-ms-resource-type\",\n        xmlName: \"x-ms-resource-type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      properties: {\n        serializedName: \"x-ms-properties\",\n        xmlName: \"x-ms-properties\",\n        type: {\n          name: \"String\"\n        }\n      },\n      leaseDuration: {\n        serializedName: \"x-ms-lease-duration\",\n        xmlName: \"x-ms-lease-duration\",\n        type: {\n          name: \"String\"\n        }\n      },\n      leaseState: {\n        serializedName: \"x-ms-lease-state\",\n        xmlName: \"x-ms-lease-state\",\n        type: {\n          name: \"String\"\n        }\n      },\n      leaseStatus: {\n        serializedName: \"x-ms-lease-status\",\n        xmlName: \"x-ms-lease-status\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PathReadExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Path_readExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PathReadExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PathGetPropertiesHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Path_getPropertiesHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PathGetPropertiesHeaders\",\n    modelProperties: {\n      acceptRanges: {\n        serializedName: \"accept-ranges\",\n        xmlName: \"accept-ranges\",\n        type: {\n          name: \"String\"\n        }\n      },\n      cacheControl: {\n        serializedName: \"cache-control\",\n        xmlName: \"cache-control\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentDisposition: {\n        serializedName: \"content-disposition\",\n        xmlName: \"content-disposition\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentEncoding: {\n        serializedName: \"content-encoding\",\n        xmlName: \"content-encoding\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentLanguage: {\n        serializedName: \"content-language\",\n        xmlName: \"content-language\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentLength: {\n        serializedName: \"content-length\",\n        xmlName: \"content-length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      contentRange: {\n        serializedName: \"content-range\",\n        xmlName: \"content-range\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentType: {\n        serializedName: \"content-type\",\n        xmlName: \"content-type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        xmlName: \"content-md5\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        constraints: {\n          Pattern: new RegExp(\n            \"^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$\"\n          )\n        },\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      resourceType: {\n        serializedName: \"x-ms-resource-type\",\n        xmlName: \"x-ms-resource-type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      properties: {\n        serializedName: \"x-ms-properties\",\n        xmlName: \"x-ms-properties\",\n        type: {\n          name: \"String\"\n        }\n      },\n      owner: {\n        serializedName: \"x-ms-owner\",\n        xmlName: \"x-ms-owner\",\n        type: {\n          name: \"String\"\n        }\n      },\n      group: {\n        serializedName: \"x-ms-group\",\n        xmlName: \"x-ms-group\",\n        type: {\n          name: \"String\"\n        }\n      },\n      permissions: {\n        serializedName: \"x-ms-permissions\",\n        xmlName: \"x-ms-permissions\",\n        type: {\n          name: \"String\"\n        }\n      },\n      acl: {\n        serializedName: \"x-ms-acl\",\n        xmlName: \"x-ms-acl\",\n        type: {\n          name: \"String\"\n        }\n      },\n      leaseDuration: {\n        serializedName: \"x-ms-lease-duration\",\n        xmlName: \"x-ms-lease-duration\",\n        type: {\n          name: \"String\"\n        }\n      },\n      leaseState: {\n        serializedName: \"x-ms-lease-state\",\n        xmlName: \"x-ms-lease-state\",\n        type: {\n          name: \"String\"\n        }\n      },\n      leaseStatus: {\n        serializedName: \"x-ms-lease-status\",\n        xmlName: \"x-ms-lease-status\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PathGetPropertiesExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Path_getPropertiesExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PathGetPropertiesExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PathDeleteHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Path_deleteHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PathDeleteHeaders\",\n    modelProperties: {\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        constraints: {\n          Pattern: new RegExp(\n            \"^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$\"\n          )\n        },\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      continuation: {\n        serializedName: \"x-ms-continuation\",\n        xmlName: \"x-ms-continuation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      deletionId: {\n        serializedName: \"x-ms-deletion-id\",\n        xmlName: \"x-ms-deletion-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PathDeleteExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Path_deleteExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PathDeleteExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PathSetAccessControlHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Path_setAccessControlHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PathSetAccessControlHeaders\",\n    modelProperties: {\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PathSetAccessControlExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Path_setAccessControlExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PathSetAccessControlExceptionHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PathSetAccessControlRecursiveHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Path_setAccessControlRecursiveHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PathSetAccessControlRecursiveHeaders\",\n    modelProperties: {\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      continuation: {\n        serializedName: \"x-ms-continuation\",\n        xmlName: \"x-ms-continuation\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PathSetAccessControlRecursiveExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Path_setAccessControlRecursiveExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PathSetAccessControlRecursiveExceptionHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PathFlushDataHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Path_flushDataHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PathFlushDataHeaders\",\n    modelProperties: {\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      contentLength: {\n        serializedName: \"content-length\",\n        xmlName: \"content-length\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        constraints: {\n          Pattern: new RegExp(\n            \"^[{(]?[0-9a-f]{8}[-]?([0-9a-f]{4}[-]?){3}[0-9a-f]{12}[)}]?$\"\n          )\n        },\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PathFlushDataExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Path_flushDataExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PathFlushDataExceptionHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PathAppendDataHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Path_appendDataHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PathAppendDataHeaders\",\n    modelProperties: {\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      contentMD5: {\n        serializedName: \"content-md5\",\n        xmlName: \"content-md5\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      xMsContentCrc64: {\n        serializedName: \"x-ms-content-crc64\",\n        xmlName: \"x-ms-content-crc64\",\n        type: {\n          name: \"ByteArray\"\n        }\n      },\n      isServerEncrypted: {\n        serializedName: \"x-ms-request-server-encrypted\",\n        xmlName: \"x-ms-request-server-encrypted\",\n        type: {\n          name: \"Boolean\"\n        }\n      }\n    }\n  }\n};\n\nexport const PathAppendDataExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Path_appendDataExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PathAppendDataExceptionHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PathSetExpiryHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Path_setExpiryHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PathSetExpiryHeaders\",\n    modelProperties: {\n      etag: {\n        serializedName: \"etag\",\n        xmlName: \"etag\",\n        type: {\n          name: \"String\"\n        }\n      },\n      lastModified: {\n        serializedName: \"last-modified\",\n        xmlName: \"last-modified\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      },\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PathSetExpiryExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Path_setExpiryExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PathSetExpiryExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const PathUndeleteHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Path_undeleteHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PathUndeleteHeaders\",\n    modelProperties: {\n      clientRequestId: {\n        serializedName: \"x-ms-client-request-id\",\n        xmlName: \"x-ms-client-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      requestId: {\n        serializedName: \"x-ms-request-id\",\n        xmlName: \"x-ms-request-id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      resourceType: {\n        serializedName: \"x-ms-resource-type\",\n        xmlName: \"x-ms-resource-type\",\n        type: {\n          name: \"String\"\n        }\n      },\n      version: {\n        serializedName: \"x-ms-version\",\n        xmlName: \"x-ms-version\",\n        type: {\n          name: \"String\"\n        }\n      },\n      date: {\n        serializedName: \"date\",\n        xmlName: \"date\",\n        type: {\n          name: \"DateTimeRfc1123\"\n        }\n      }\n    }\n  }\n};\n\nexport const PathUndeleteExceptionHeaders: coreHttp.CompositeMapper = {\n  serializedName: \"Path_undeleteExceptionHeaders\",\n  type: {\n    name: \"Composite\",\n    className: \"PathUndeleteExceptionHeaders\",\n    modelProperties: {\n      errorCode: {\n        serializedName: \"x-ms-error-code\",\n        xmlName: \"x-ms-error-code\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport {\n  OperationParameter,\n  OperationURLParameter,\n  OperationQueryParameter,\n  QueryCollectionFormat\n} from \"@azure/core-http\";\n\nexport const accept: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const url: OperationURLParameter = {\n  parameterPath: \"url\",\n  mapper: {\n    serializedName: \"url\",\n    required: true,\n    xmlName: \"url\",\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\n\nexport const resource: OperationQueryParameter = {\n  parameterPath: \"resource\",\n  mapper: {\n    defaultValue: \"account\",\n    isConstant: true,\n    serializedName: \"resource\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const prefix: OperationQueryParameter = {\n  parameterPath: [\"options\", \"prefix\"],\n  mapper: {\n    serializedName: \"prefix\",\n    xmlName: \"prefix\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const continuation: OperationQueryParameter = {\n  parameterPath: [\"options\", \"continuation\"],\n  mapper: {\n    serializedName: \"continuation\",\n    xmlName: \"continuation\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const maxResults: OperationQueryParameter = {\n  parameterPath: [\"options\", \"maxResults\"],\n  mapper: {\n    constraints: {\n      InclusiveMinimum: 1\n    },\n    serializedName: \"maxResults\",\n    xmlName: \"maxResults\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const requestId: OperationParameter = {\n  parameterPath: [\"options\", \"requestId\"],\n  mapper: {\n    serializedName: \"x-ms-client-request-id\",\n    xmlName: \"x-ms-client-request-id\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const timeout: OperationQueryParameter = {\n  parameterPath: [\"options\", \"timeout\"],\n  mapper: {\n    constraints: {\n      InclusiveMinimum: 0\n    },\n    serializedName: \"timeout\",\n    xmlName: \"timeout\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const version: OperationParameter = {\n  parameterPath: \"version\",\n  mapper: {\n    defaultValue: \"2020-10-02\",\n    isConstant: true,\n    serializedName: \"x-ms-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const resource1: OperationQueryParameter = {\n  parameterPath: \"resource\",\n  mapper: {\n    defaultValue: \"filesystem\",\n    isConstant: true,\n    serializedName: \"resource\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const properties: OperationParameter = {\n  parameterPath: [\"options\", \"properties\"],\n  mapper: {\n    serializedName: \"x-ms-properties\",\n    xmlName: \"x-ms-properties\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const ifModifiedSince: OperationParameter = {\n  parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifModifiedSince\"],\n  mapper: {\n    serializedName: \"If-Modified-Since\",\n    xmlName: \"If-Modified-Since\",\n    type: {\n      name: \"DateTimeRfc1123\"\n    }\n  }\n};\n\nexport const ifUnmodifiedSince: OperationParameter = {\n  parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifUnmodifiedSince\"],\n  mapper: {\n    serializedName: \"If-Unmodified-Since\",\n    xmlName: \"If-Unmodified-Since\",\n    type: {\n      name: \"DateTimeRfc1123\"\n    }\n  }\n};\n\nexport const path: OperationQueryParameter = {\n  parameterPath: [\"options\", \"path\"],\n  mapper: {\n    serializedName: \"directory\",\n    xmlName: \"directory\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const recursive: OperationQueryParameter = {\n  parameterPath: \"recursive\",\n  mapper: {\n    serializedName: \"recursive\",\n    required: true,\n    xmlName: \"recursive\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n\nexport const upn: OperationQueryParameter = {\n  parameterPath: [\"options\", \"upn\"],\n  mapper: {\n    serializedName: \"upn\",\n    xmlName: \"upn\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n\nexport const accept1: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/xml\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const restype: OperationQueryParameter = {\n  parameterPath: \"restype\",\n  mapper: {\n    defaultValue: \"container\",\n    isConstant: true,\n    serializedName: \"restype\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const comp: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"list\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const delimiter: OperationQueryParameter = {\n  parameterPath: [\"options\", \"delimiter\"],\n  mapper: {\n    serializedName: \"delimiter\",\n    xmlName: \"delimiter\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const marker: OperationQueryParameter = {\n  parameterPath: [\"options\", \"marker\"],\n  mapper: {\n    serializedName: \"marker\",\n    xmlName: \"marker\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const include: OperationQueryParameter = {\n  parameterPath: [\"options\", \"include\"],\n  mapper: {\n    serializedName: \"include\",\n    xmlName: \"include\",\n    xmlElementName: \"ListBlobsIncludeItem\",\n    type: {\n      name: \"Sequence\",\n      element: {\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"copy\",\n            \"deleted\",\n            \"metadata\",\n            \"snapshots\",\n            \"uncommittedblobs\",\n            \"versions\",\n            \"tags\"\n          ]\n        }\n      }\n    }\n  },\n  collectionFormat: QueryCollectionFormat.Csv\n};\n\nexport const showonly: OperationQueryParameter = {\n  parameterPath: [\"options\", \"showonly\"],\n  mapper: {\n    defaultValue: \"deleted\",\n    isConstant: true,\n    serializedName: \"showonly\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const resource2: OperationQueryParameter = {\n  parameterPath: [\"options\", \"resource\"],\n  mapper: {\n    serializedName: \"resource\",\n    xmlName: \"resource\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"directory\", \"file\"]\n    }\n  }\n};\n\nexport const mode: OperationQueryParameter = {\n  parameterPath: [\"options\", \"mode\"],\n  mapper: {\n    serializedName: \"mode\",\n    xmlName: \"mode\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"legacy\", \"posix\"]\n    }\n  }\n};\n\nexport const cacheControl: OperationParameter = {\n  parameterPath: [\"options\", \"pathHttpHeaders\", \"cacheControl\"],\n  mapper: {\n    serializedName: \"x-ms-cache-control\",\n    xmlName: \"x-ms-cache-control\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const contentEncoding: OperationParameter = {\n  parameterPath: [\"options\", \"pathHttpHeaders\", \"contentEncoding\"],\n  mapper: {\n    serializedName: \"x-ms-content-encoding\",\n    xmlName: \"x-ms-content-encoding\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const contentLanguage: OperationParameter = {\n  parameterPath: [\"options\", \"pathHttpHeaders\", \"contentLanguage\"],\n  mapper: {\n    serializedName: \"x-ms-content-language\",\n    xmlName: \"x-ms-content-language\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const contentDisposition: OperationParameter = {\n  parameterPath: [\"options\", \"pathHttpHeaders\", \"contentDisposition\"],\n  mapper: {\n    serializedName: \"x-ms-content-disposition\",\n    xmlName: \"x-ms-content-disposition\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const contentType: OperationParameter = {\n  parameterPath: [\"options\", \"pathHttpHeaders\", \"contentType\"],\n  mapper: {\n    serializedName: \"x-ms-content-type\",\n    xmlName: \"x-ms-content-type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const renameSource: OperationParameter = {\n  parameterPath: [\"options\", \"renameSource\"],\n  mapper: {\n    serializedName: \"x-ms-rename-source\",\n    xmlName: \"x-ms-rename-source\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const leaseId: OperationParameter = {\n  parameterPath: [\"options\", \"leaseAccessConditions\", \"leaseId\"],\n  mapper: {\n    serializedName: \"x-ms-lease-id\",\n    xmlName: \"x-ms-lease-id\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const sourceLeaseId: OperationParameter = {\n  parameterPath: [\"options\", \"sourceLeaseId\"],\n  mapper: {\n    serializedName: \"x-ms-source-lease-id\",\n    xmlName: \"x-ms-source-lease-id\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const permissions: OperationParameter = {\n  parameterPath: [\"options\", \"permissions\"],\n  mapper: {\n    serializedName: \"x-ms-permissions\",\n    xmlName: \"x-ms-permissions\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const umask: OperationParameter = {\n  parameterPath: [\"options\", \"umask\"],\n  mapper: {\n    serializedName: \"x-ms-umask\",\n    xmlName: \"x-ms-umask\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const ifMatch: OperationParameter = {\n  parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifMatch\"],\n  mapper: {\n    serializedName: \"If-Match\",\n    xmlName: \"If-Match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const ifNoneMatch: OperationParameter = {\n  parameterPath: [\"options\", \"modifiedAccessConditions\", \"ifNoneMatch\"],\n  mapper: {\n    serializedName: \"If-None-Match\",\n    xmlName: \"If-None-Match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const sourceIfMatch: OperationParameter = {\n  parameterPath: [\"options\", \"sourceModifiedAccessConditions\", \"sourceIfMatch\"],\n  mapper: {\n    serializedName: \"x-ms-source-if-match\",\n    xmlName: \"x-ms-source-if-match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const sourceIfNoneMatch: OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"sourceModifiedAccessConditions\",\n    \"sourceIfNoneMatch\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-source-if-none-match\",\n    xmlName: \"x-ms-source-if-none-match\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const sourceIfModifiedSince: OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"sourceModifiedAccessConditions\",\n    \"sourceIfModifiedSince\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-source-if-modified-since\",\n    xmlName: \"x-ms-source-if-modified-since\",\n    type: {\n      name: \"DateTimeRfc1123\"\n    }\n  }\n};\n\nexport const sourceIfUnmodifiedSince: OperationParameter = {\n  parameterPath: [\n    \"options\",\n    \"sourceModifiedAccessConditions\",\n    \"sourceIfUnmodifiedSince\"\n  ],\n  mapper: {\n    serializedName: \"x-ms-source-if-unmodified-since\",\n    xmlName: \"x-ms-source-if-unmodified-since\",\n    type: {\n      name: \"DateTimeRfc1123\"\n    }\n  }\n};\n\nexport const contentType1: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/octet-stream\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const body: OperationParameter = {\n  parameterPath: \"body\",\n  mapper: {\n    serializedName: \"body\",\n    required: true,\n    xmlName: \"body\",\n    type: {\n      name: \"Stream\"\n    }\n  }\n};\n\nexport const accept2: OperationParameter = {\n  parameterPath: \"accept\",\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Accept\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const action: OperationQueryParameter = {\n  parameterPath: \"action\",\n  mapper: {\n    serializedName: \"action\",\n    required: true,\n    xmlName: \"action\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\n        \"append\",\n        \"flush\",\n        \"setProperties\",\n        \"setAccessControl\",\n        \"setAccessControlRecursive\"\n      ]\n    }\n  }\n};\n\nexport const maxRecords: OperationQueryParameter = {\n  parameterPath: [\"options\", \"maxRecords\"],\n  mapper: {\n    constraints: {\n      InclusiveMinimum: 1\n    },\n    serializedName: \"maxRecords\",\n    xmlName: \"maxRecords\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const mode1: OperationQueryParameter = {\n  parameterPath: \"mode\",\n  mapper: {\n    serializedName: \"mode\",\n    required: true,\n    xmlName: \"mode\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"set\", \"modify\", \"remove\"]\n    }\n  }\n};\n\nexport const forceFlag: OperationQueryParameter = {\n  parameterPath: [\"options\", \"forceFlag\"],\n  mapper: {\n    serializedName: \"forceFlag\",\n    xmlName: \"forceFlag\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n\nexport const position: OperationQueryParameter = {\n  parameterPath: [\"options\", \"position\"],\n  mapper: {\n    serializedName: \"position\",\n    xmlName: \"position\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const retainUncommittedData: OperationQueryParameter = {\n  parameterPath: [\"options\", \"retainUncommittedData\"],\n  mapper: {\n    serializedName: \"retainUncommittedData\",\n    xmlName: \"retainUncommittedData\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n\nexport const close: OperationQueryParameter = {\n  parameterPath: [\"options\", \"close\"],\n  mapper: {\n    serializedName: \"close\",\n    xmlName: \"close\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n\nexport const contentLength: OperationParameter = {\n  parameterPath: [\"options\", \"contentLength\"],\n  mapper: {\n    constraints: {\n      InclusiveMinimum: 0\n    },\n    serializedName: \"Content-Length\",\n    xmlName: \"Content-Length\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const contentMD5: OperationParameter = {\n  parameterPath: [\"options\", \"pathHttpHeaders\", \"contentMD5\"],\n  mapper: {\n    serializedName: \"x-ms-content-md5\",\n    xmlName: \"x-ms-content-md5\",\n    type: {\n      name: \"ByteArray\"\n    }\n  }\n};\n\nexport const owner: OperationParameter = {\n  parameterPath: [\"options\", \"owner\"],\n  mapper: {\n    serializedName: \"x-ms-owner\",\n    xmlName: \"x-ms-owner\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const group: OperationParameter = {\n  parameterPath: [\"options\", \"group\"],\n  mapper: {\n    serializedName: \"x-ms-group\",\n    xmlName: \"x-ms-group\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const acl: OperationParameter = {\n  parameterPath: [\"options\", \"acl\"],\n  mapper: {\n    serializedName: \"x-ms-acl\",\n    xmlName: \"x-ms-acl\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const xMsLeaseAction: OperationParameter = {\n  parameterPath: \"xMsLeaseAction\",\n  mapper: {\n    serializedName: \"x-ms-lease-action\",\n    required: true,\n    xmlName: \"x-ms-lease-action\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"acquire\", \"break\", \"change\", \"renew\", \"release\"]\n    }\n  }\n};\n\nexport const xMsLeaseDuration: OperationParameter = {\n  parameterPath: [\"options\", \"xMsLeaseDuration\"],\n  mapper: {\n    serializedName: \"x-ms-lease-duration\",\n    xmlName: \"x-ms-lease-duration\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const xMsLeaseBreakPeriod: OperationParameter = {\n  parameterPath: [\"options\", \"xMsLeaseBreakPeriod\"],\n  mapper: {\n    serializedName: \"x-ms-lease-break-period\",\n    xmlName: \"x-ms-lease-break-period\",\n    type: {\n      name: \"Number\"\n    }\n  }\n};\n\nexport const proposedLeaseId: OperationParameter = {\n  parameterPath: [\"options\", \"proposedLeaseId\"],\n  mapper: {\n    serializedName: \"x-ms-proposed-lease-id\",\n    xmlName: \"x-ms-proposed-lease-id\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const range: OperationParameter = {\n  parameterPath: [\"options\", \"range\"],\n  mapper: {\n    serializedName: \"Range\",\n    xmlName: \"Range\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const xMsRangeGetContentMd5: OperationParameter = {\n  parameterPath: [\"options\", \"xMsRangeGetContentMd5\"],\n  mapper: {\n    serializedName: \"x-ms-range-get-content-md5\",\n    xmlName: \"x-ms-range-get-content-md5\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n\nexport const action1: OperationQueryParameter = {\n  parameterPath: [\"options\", \"action\"],\n  mapper: {\n    serializedName: \"action\",\n    xmlName: \"action\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\"getAccessControl\", \"getStatus\"]\n    }\n  }\n};\n\nexport const recursive1: OperationQueryParameter = {\n  parameterPath: [\"options\", \"recursive\"],\n  mapper: {\n    serializedName: \"recursive\",\n    xmlName: \"recursive\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\n\nexport const action2: OperationQueryParameter = {\n  parameterPath: \"action\",\n  mapper: {\n    defaultValue: \"setAccessControl\",\n    isConstant: true,\n    serializedName: \"action\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const action3: OperationQueryParameter = {\n  parameterPath: \"action\",\n  mapper: {\n    defaultValue: \"setAccessControlRecursive\",\n    isConstant: true,\n    serializedName: \"action\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const action4: OperationQueryParameter = {\n  parameterPath: \"action\",\n  mapper: {\n    defaultValue: \"flush\",\n    isConstant: true,\n    serializedName: \"action\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const contentType2: OperationParameter = {\n  parameterPath: [\"options\", \"contentType\"],\n  mapper: {\n    defaultValue: \"application/json\",\n    isConstant: true,\n    serializedName: \"Content-Type\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const action5: OperationQueryParameter = {\n  parameterPath: \"action\",\n  mapper: {\n    defaultValue: \"append\",\n    isConstant: true,\n    serializedName: \"action\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const transactionalContentHash: OperationParameter = {\n  parameterPath: [\"options\", \"pathHttpHeaders\", \"transactionalContentHash\"],\n  mapper: {\n    serializedName: \"Content-MD5\",\n    xmlName: \"Content-MD5\",\n    type: {\n      name: \"ByteArray\"\n    }\n  }\n};\n\nexport const transactionalContentCrc64: OperationParameter = {\n  parameterPath: [\"options\", \"transactionalContentCrc64\"],\n  mapper: {\n    serializedName: \"x-ms-content-crc64\",\n    xmlName: \"x-ms-content-crc64\",\n    type: {\n      name: \"ByteArray\"\n    }\n  }\n};\n\nexport const comp1: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"expiry\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const expiryOptions: OperationParameter = {\n  parameterPath: \"expiryOptions\",\n  mapper: {\n    serializedName: \"x-ms-expiry-option\",\n    required: true,\n    xmlName: \"x-ms-expiry-option\",\n    type: {\n      name: \"Enum\",\n      allowedValues: [\n        \"NeverExpire\",\n        \"RelativeToCreation\",\n        \"RelativeToNow\",\n        \"Absolute\"\n      ]\n    }\n  }\n};\n\nexport const expiresOn: OperationParameter = {\n  parameterPath: [\"options\", \"expiresOn\"],\n  mapper: {\n    serializedName: \"x-ms-expiry-time\",\n    xmlName: \"x-ms-expiry-time\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const comp2: OperationQueryParameter = {\n  parameterPath: \"comp\",\n  mapper: {\n    defaultValue: \"undelete\",\n    isConstant: true,\n    serializedName: \"comp\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n\nexport const undeleteSource: OperationParameter = {\n  parameterPath: [\"options\", \"undeleteSource\"],\n  mapper: {\n    serializedName: \"x-ms-undelete-source\",\n    xmlName: \"x-ms-undelete-source\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\nimport {\n  FileSystemCreateOptionalParams,\n  FileSystemCreateResponse,\n  FileSystemSetPropertiesOptionalParams,\n  FileSystemSetPropertiesResponse,\n  FileSystemGetPropertiesOptionalParams,\n  FileSystemGetPropertiesResponse,\n  FileSystemDeleteOptionalParams,\n  FileSystemDeleteResponse,\n  FileSystemListPathsOptionalParams,\n  FileSystemListPathsResponse,\n  FileSystemListBlobHierarchySegmentOptionalParams,\n  FileSystemListBlobHierarchySegmentResponse\n} from \"../models\";\n\n/** Class representing a FileSystem. */\nexport class FileSystem {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Initialize a new instance of the class FileSystem class.\n   * @param client Reference to the service client\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Create a FileSystem rooted at the specified location. If the FileSystem already exists, the\n   * operation fails.  This operation does not support conditional HTTP requests.\n   * @param options The options parameters.\n   */\n  create(\n    options?: FileSystemCreateOptionalParams\n  ): Promise<FileSystemCreateResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      createOperationSpec\n    ) as Promise<FileSystemCreateResponse>;\n  }\n\n  /**\n   * Set properties for the FileSystem.  This operation supports conditional HTTP requests.  For more\n   * information, see [Specifying Conditional Headers for Blob Service\n   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).\n   * @param options The options parameters.\n   */\n  setProperties(\n    options?: FileSystemSetPropertiesOptionalParams\n  ): Promise<FileSystemSetPropertiesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setPropertiesOperationSpec\n    ) as Promise<FileSystemSetPropertiesResponse>;\n  }\n\n  /**\n   * All system and user-defined filesystem properties are specified in the response headers.\n   * @param options The options parameters.\n   */\n  getProperties(\n    options?: FileSystemGetPropertiesOptionalParams\n  ): Promise<FileSystemGetPropertiesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getPropertiesOperationSpec\n    ) as Promise<FileSystemGetPropertiesResponse>;\n  }\n\n  /**\n   * Marks the FileSystem for deletion.  When a FileSystem is deleted, a FileSystem with the same\n   * identifier cannot be created for at least 30 seconds. While the filesystem is being deleted,\n   * attempts to create a filesystem with the same identifier will fail with status code 409 (Conflict),\n   * with the service returning additional error information indicating that the filesystem is being\n   * deleted. All other operations, including operations on any files or directories within the\n   * filesystem, will fail with status code 404 (Not Found) while the filesystem is being deleted. This\n   * operation supports conditional HTTP requests.  For more information, see [Specifying Conditional\n   * Headers for Blob Service\n   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).\n   * @param options The options parameters.\n   */\n  delete(\n    options?: FileSystemDeleteOptionalParams\n  ): Promise<FileSystemDeleteResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      deleteOperationSpec\n    ) as Promise<FileSystemDeleteResponse>;\n  }\n\n  /**\n   * List FileSystem paths and their properties.\n   * @param recursive Required\n   * @param options The options parameters.\n   */\n  listPaths(\n    recursive: boolean,\n    options?: FileSystemListPathsOptionalParams\n  ): Promise<FileSystemListPathsResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      recursive,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      listPathsOperationSpec\n    ) as Promise<FileSystemListPathsResponse>;\n  }\n\n  /**\n   * The List Blobs operation returns a list of the blobs under the specified container\n   * @param options The options parameters.\n   */\n  listBlobHierarchySegment(\n    options?: FileSystemListBlobHierarchySegmentOptionalParams\n  ): Promise<FileSystemListBlobHierarchySegmentResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      listBlobHierarchySegmentOperationSpec\n    ) as Promise<FileSystemListBlobHierarchySegmentResponse>;\n  }\n}\n// Operation Specifications\nconst xmlSerializer = new coreHttp.Serializer(Mappers, /* isXml */ true);\n\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst createOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{filesystem}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.FileSystemCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileSystemCreateExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeout, Parameters.resource1],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.requestId,\n    Parameters.version,\n    Parameters.properties\n  ],\n  serializer\n};\nconst setPropertiesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{filesystem}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      headersMapper: Mappers.FileSystemSetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileSystemSetPropertiesExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeout, Parameters.resource1],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.requestId,\n    Parameters.version,\n    Parameters.properties,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince\n  ],\n  serializer\n};\nconst getPropertiesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{filesystem}\",\n  httpMethod: \"HEAD\",\n  responses: {\n    200: {\n      headersMapper: Mappers.FileSystemGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileSystemGetPropertiesExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeout, Parameters.resource1],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.requestId,\n    Parameters.version\n  ],\n  serializer\n};\nconst deleteOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{filesystem}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    202: {\n      headersMapper: Mappers.FileSystemDeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileSystemDeleteExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeout, Parameters.resource1],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.requestId,\n    Parameters.version,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince\n  ],\n  serializer\n};\nconst listPathsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{filesystem}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PathList,\n      headersMapper: Mappers.FileSystemListPathsHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileSystemListPathsExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.continuation,\n    Parameters.maxResults,\n    Parameters.timeout,\n    Parameters.resource1,\n    Parameters.path,\n    Parameters.recursive,\n    Parameters.upn\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.requestId,\n    Parameters.version\n  ],\n  serializer\n};\nconst listBlobHierarchySegmentOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{filesystem}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ListBlobsHierarchySegmentResponse,\n      headersMapper: Mappers.FileSystemListBlobHierarchySegmentHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.FileSystemListBlobHierarchySegmentExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.prefix,\n    Parameters.maxResults,\n    Parameters.timeout,\n    Parameters.restype,\n    Parameters.comp,\n    Parameters.delimiter,\n    Parameters.marker,\n    Parameters.include,\n    Parameters.showonly\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.requestId,\n    Parameters.version,\n    Parameters.accept1\n  ],\n  isXML: true,\n  serializer: xmlSerializer\n};\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Mappers from \"../models/mappers\";\nimport * as Parameters from \"../models/parameters\";\nimport { StorageClientContext } from \"../storageClientContext\";\nimport {\n  PathCreateOptionalParams,\n  PathCreateResponse,\n  PathUpdateAction,\n  PathSetAccessControlRecursiveMode,\n  PathUpdateOptionalParams,\n  PathUpdateResponse,\n  PathLeaseAction,\n  PathLeaseOptionalParams,\n  PathLeaseResponse,\n  PathReadOptionalParams,\n  PathReadResponse,\n  PathGetPropertiesOptionalParams,\n  PathGetPropertiesResponse,\n  PathDeleteOptionalParams,\n  PathDeleteResponse,\n  PathSetAccessControlOptionalParams,\n  PathSetAccessControlResponse,\n  PathSetAccessControlRecursiveOptionalParams,\n  PathSetAccessControlRecursiveResponse,\n  PathFlushDataOptionalParams,\n  PathFlushDataResponse,\n  PathAppendDataOptionalParams,\n  PathAppendDataResponse,\n  PathExpiryOptions,\n  PathSetExpiryOptionalParams,\n  PathSetExpiryResponse,\n  PathUndeleteOptionalParams,\n  PathUndeleteResponse\n} from \"../models\";\n\n/** Class representing a Path. */\nexport class Path {\n  private readonly client: StorageClientContext;\n\n  /**\n   * Initialize a new instance of the class Path class.\n   * @param client Reference to the service client\n   */\n  constructor(client: StorageClientContext) {\n    this.client = client;\n  }\n\n  /**\n   * Create or rename a file or directory.    By default, the destination is overwritten and if the\n   * destination already exists and has a lease the lease is broken.  This operation supports conditional\n   * HTTP requests.  For more information, see [Specifying Conditional Headers for Blob Service\n   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).\n   *  To fail if the destination already exists, use a conditional request with If-None-Match: \"*\".\n   * @param options The options parameters.\n   */\n  create(options?: PathCreateOptionalParams): Promise<PathCreateResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      createOperationSpec\n    ) as Promise<PathCreateResponse>;\n  }\n\n  /**\n   * Uploads data to be appended to a file, flushes (writes) previously uploaded data to a file, sets\n   * properties for a file or directory, or sets access control for a file or directory. Data can only be\n   * appended to a file. Concurrent writes to the same file using multiple clients are not supported.\n   * This operation supports conditional HTTP requests. For more information, see [Specifying Conditional\n   * Headers for Blob Service\n   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).\n   * @param action The action must be \"append\" to upload data to be appended to a file, \"flush\" to flush\n   *               previously uploaded data to a file, \"setProperties\" to set the properties of a file or directory,\n   *               \"setAccessControl\" to set the owner, group, permissions, or access control list for a file or\n   *               directory, or  \"setAccessControlRecursive\" to set the access control list for a directory\n   *               recursively. Note that Hierarchical Namespace must be enabled for the account in order to use access\n   *               control.  Also note that the Access Control List (ACL) includes permissions for the owner, owning\n   *               group, and others, so the x-ms-permissions and x-ms-acl request headers are mutually exclusive.\n   * @param mode Mode \"set\" sets POSIX access control rights on files and directories, \"modify\" modifies\n   *             one or more POSIX access control rights  that pre-exist on files and directories, \"remove\" removes\n   *             one or more POSIX access control rights  that were present earlier on files and directories\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  update(\n    action: PathUpdateAction,\n    mode: PathSetAccessControlRecursiveMode,\n    body: coreHttp.HttpRequestBody,\n    options?: PathUpdateOptionalParams\n  ): Promise<PathUpdateResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      action,\n      mode,\n      body,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      updateOperationSpec\n    ) as Promise<PathUpdateResponse>;\n  }\n\n  /**\n   * Create and manage a lease to restrict write and delete access to the path. This operation supports\n   * conditional HTTP requests.  For more information, see [Specifying Conditional Headers for Blob\n   * Service\n   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).\n   * @param xMsLeaseAction There are five lease actions: \"acquire\", \"break\", \"change\", \"renew\", and\n   *                       \"release\". Use \"acquire\" and specify the \"x-ms-proposed-lease-id\" and \"x-ms-lease-duration\" to\n   *                       acquire a new lease. Use \"break\" to break an existing lease. When a lease is broken, the lease break\n   *                       period is allowed to elapse, during which time no lease operation except break and release can be\n   *                       performed on the file. When a lease is successfully broken, the response indicates the interval in\n   *                       seconds until a new lease can be acquired. Use \"change\" and specify the current lease ID in\n   *                       \"x-ms-lease-id\" and the new lease ID in \"x-ms-proposed-lease-id\" to change the lease ID of an active\n   *                       lease. Use \"renew\" and specify the \"x-ms-lease-id\" to renew an existing lease. Use \"release\" and\n   *                       specify the \"x-ms-lease-id\" to release a lease.\n   * @param options The options parameters.\n   */\n  lease(\n    xMsLeaseAction: PathLeaseAction,\n    options?: PathLeaseOptionalParams\n  ): Promise<PathLeaseResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      xMsLeaseAction,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      leaseOperationSpec\n    ) as Promise<PathLeaseResponse>;\n  }\n\n  /**\n   * Read the contents of a file.  For read operations, range requests are supported. This operation\n   * supports conditional HTTP requests.  For more information, see [Specifying Conditional Headers for\n   * Blob Service\n   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).\n   * @param options The options parameters.\n   */\n  read(options?: PathReadOptionalParams): Promise<PathReadResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      readOperationSpec\n    ) as Promise<PathReadResponse>;\n  }\n\n  /**\n   * Get Properties returns all system and user defined properties for a path. Get Status returns all\n   * system defined properties for a path. Get Access Control List returns the access control list for a\n   * path. This operation supports conditional HTTP requests.  For more information, see [Specifying\n   * Conditional Headers for Blob Service\n   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).\n   * @param options The options parameters.\n   */\n  getProperties(\n    options?: PathGetPropertiesOptionalParams\n  ): Promise<PathGetPropertiesResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      getPropertiesOperationSpec\n    ) as Promise<PathGetPropertiesResponse>;\n  }\n\n  /**\n   * Delete the file or directory. This operation supports conditional HTTP requests.  For more\n   * information, see [Specifying Conditional Headers for Blob Service\n   * Operations](https://docs.microsoft.com/en-us/rest/api/storageservices/specifying-conditional-headers-for-blob-service-operations).\n   * @param options The options parameters.\n   */\n  delete(options?: PathDeleteOptionalParams): Promise<PathDeleteResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      deleteOperationSpec\n    ) as Promise<PathDeleteResponse>;\n  }\n\n  /**\n   * Set the owner, group, permissions, or access control list for a path.\n   * @param options The options parameters.\n   */\n  setAccessControl(\n    options?: PathSetAccessControlOptionalParams\n  ): Promise<PathSetAccessControlResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setAccessControlOperationSpec\n    ) as Promise<PathSetAccessControlResponse>;\n  }\n\n  /**\n   * Set the access control list for a path and sub-paths.\n   * @param mode Mode \"set\" sets POSIX access control rights on files and directories, \"modify\" modifies\n   *             one or more POSIX access control rights  that pre-exist on files and directories, \"remove\" removes\n   *             one or more POSIX access control rights  that were present earlier on files and directories\n   * @param options The options parameters.\n   */\n  setAccessControlRecursive(\n    mode: PathSetAccessControlRecursiveMode,\n    options?: PathSetAccessControlRecursiveOptionalParams\n  ): Promise<PathSetAccessControlRecursiveResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      mode,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setAccessControlRecursiveOperationSpec\n    ) as Promise<PathSetAccessControlRecursiveResponse>;\n  }\n\n  /**\n   * Set the owner, group, permissions, or access control list for a path.\n   * @param options The options parameters.\n   */\n  flushData(\n    options?: PathFlushDataOptionalParams\n  ): Promise<PathFlushDataResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      flushDataOperationSpec\n    ) as Promise<PathFlushDataResponse>;\n  }\n\n  /**\n   * Append data to the file.\n   * @param body Initial data\n   * @param options The options parameters.\n   */\n  appendData(\n    body: coreHttp.HttpRequestBody,\n    options?: PathAppendDataOptionalParams\n  ): Promise<PathAppendDataResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      body,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      appendDataOperationSpec\n    ) as Promise<PathAppendDataResponse>;\n  }\n\n  /**\n   * Sets the time a blob will expire and be deleted.\n   * @param expiryOptions Required. Indicates mode of the expiry time\n   * @param options The options parameters.\n   */\n  setExpiry(\n    expiryOptions: PathExpiryOptions,\n    options?: PathSetExpiryOptionalParams\n  ): Promise<PathSetExpiryResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      expiryOptions,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      setExpiryOperationSpec\n    ) as Promise<PathSetExpiryResponse>;\n  }\n\n  /**\n   * Undelete a path that was previously soft deleted\n   * @param options The options parameters.\n   */\n  undelete(\n    options?: PathUndeleteOptionalParams\n  ): Promise<PathUndeleteResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.client.sendOperationRequest(\n      operationArguments,\n      undeleteOperationSpec\n    ) as Promise<PathUndeleteResponse>;\n  }\n}\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst createOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{filesystem}/{path}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      headersMapper: Mappers.PathCreateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PathCreateExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.continuation,\n    Parameters.timeout,\n    Parameters.resource2,\n    Parameters.mode\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.requestId,\n    Parameters.version,\n    Parameters.properties,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.cacheControl,\n    Parameters.contentEncoding,\n    Parameters.contentLanguage,\n    Parameters.contentDisposition,\n    Parameters.contentType,\n    Parameters.renameSource,\n    Parameters.leaseId,\n    Parameters.sourceLeaseId,\n    Parameters.permissions,\n    Parameters.umask,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.sourceIfMatch,\n    Parameters.sourceIfNoneMatch,\n    Parameters.sourceIfModifiedSince,\n    Parameters.sourceIfUnmodifiedSince\n  ],\n  serializer\n};\nconst updateOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{filesystem}/{path}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SetAccessControlRecursiveResponse,\n      headersMapper: Mappers.PathUpdateHeaders\n    },\n    202: {\n      headersMapper: Mappers.PathUpdateHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PathUpdateExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body,\n  queryParameters: [\n    Parameters.continuation,\n    Parameters.timeout,\n    Parameters.action,\n    Parameters.maxRecords,\n    Parameters.mode1,\n    Parameters.forceFlag,\n    Parameters.position,\n    Parameters.retainUncommittedData,\n    Parameters.close\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.requestId,\n    Parameters.version,\n    Parameters.properties,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.cacheControl,\n    Parameters.contentEncoding,\n    Parameters.contentLanguage,\n    Parameters.contentDisposition,\n    Parameters.contentType,\n    Parameters.leaseId,\n    Parameters.permissions,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.contentType1,\n    Parameters.accept2,\n    Parameters.contentLength,\n    Parameters.contentMD5,\n    Parameters.owner,\n    Parameters.group,\n    Parameters.acl\n  ],\n  mediaType: \"binary\",\n  serializer\n};\nconst leaseOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{filesystem}/{path}\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      headersMapper: Mappers.PathLeaseHeaders\n    },\n    201: {\n      headersMapper: Mappers.PathLeaseHeaders\n    },\n    202: {\n      headersMapper: Mappers.PathLeaseHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PathLeaseExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeout],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.requestId,\n    Parameters.version,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.leaseId,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.xMsLeaseAction,\n    Parameters.xMsLeaseDuration,\n    Parameters.xMsLeaseBreakPeriod,\n    Parameters.proposedLeaseId\n  ],\n  serializer\n};\nconst readOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{filesystem}/{path}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.PathReadHeaders\n    },\n    206: {\n      bodyMapper: {\n        type: { name: \"Stream\" },\n        serializedName: \"parsedResponse\"\n      },\n      headersMapper: Mappers.PathReadHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PathReadExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeout],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.requestId,\n    Parameters.version,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.leaseId,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.range,\n    Parameters.xMsRangeGetContentMd5\n  ],\n  serializer\n};\nconst getPropertiesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{filesystem}/{path}\",\n  httpMethod: \"HEAD\",\n  responses: {\n    200: {\n      headersMapper: Mappers.PathGetPropertiesHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PathGetPropertiesExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeout, Parameters.upn, Parameters.action1],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.requestId,\n    Parameters.version,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.leaseId,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  serializer\n};\nconst deleteOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{filesystem}/{path}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {\n      headersMapper: Mappers.PathDeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PathDeleteExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.continuation,\n    Parameters.timeout,\n    Parameters.recursive1\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.requestId,\n    Parameters.version,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.leaseId,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch\n  ],\n  serializer\n};\nconst setAccessControlOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{filesystem}/{path}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      headersMapper: Mappers.PathSetAccessControlHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PathSetAccessControlExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeout, Parameters.action2],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.requestId,\n    Parameters.version,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.leaseId,\n    Parameters.permissions,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.owner,\n    Parameters.group,\n    Parameters.acl\n  ],\n  serializer\n};\nconst setAccessControlRecursiveOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{filesystem}/{path}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SetAccessControlRecursiveResponse,\n      headersMapper: Mappers.PathSetAccessControlRecursiveHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PathSetAccessControlRecursiveExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.continuation,\n    Parameters.timeout,\n    Parameters.maxRecords,\n    Parameters.mode1,\n    Parameters.forceFlag,\n    Parameters.action3\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.requestId,\n    Parameters.version,\n    Parameters.acl\n  ],\n  serializer\n};\nconst flushDataOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{filesystem}/{path}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    200: {\n      headersMapper: Mappers.PathFlushDataHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PathFlushDataExceptionHeaders\n    }\n  },\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.position,\n    Parameters.retainUncommittedData,\n    Parameters.close,\n    Parameters.action4\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.requestId,\n    Parameters.version,\n    Parameters.ifModifiedSince,\n    Parameters.ifUnmodifiedSince,\n    Parameters.cacheControl,\n    Parameters.contentEncoding,\n    Parameters.contentLanguage,\n    Parameters.contentDisposition,\n    Parameters.contentType,\n    Parameters.leaseId,\n    Parameters.ifMatch,\n    Parameters.ifNoneMatch,\n    Parameters.contentLength,\n    Parameters.contentMD5\n  ],\n  serializer\n};\nconst appendDataOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{filesystem}/{path}\",\n  httpMethod: \"PATCH\",\n  responses: {\n    202: {\n      headersMapper: Mappers.PathAppendDataHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PathAppendDataExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body,\n  queryParameters: [\n    Parameters.timeout,\n    Parameters.position,\n    Parameters.action5\n  ],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.requestId,\n    Parameters.version,\n    Parameters.leaseId,\n    Parameters.accept2,\n    Parameters.contentLength,\n    Parameters.contentType2,\n    Parameters.transactionalContentHash,\n    Parameters.transactionalContentCrc64\n  ],\n  mediaType: \"binary\",\n  serializer\n};\nconst setExpiryOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{filesystem}/{path}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.PathSetExpiryHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PathSetExpiryExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeout, Parameters.comp1],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.requestId,\n    Parameters.version,\n    Parameters.expiryOptions,\n    Parameters.expiresOn\n  ],\n  serializer\n};\nconst undeleteOperationSpec: coreHttp.OperationSpec = {\n  path: \"/{filesystem}/{path}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      headersMapper: Mappers.PathUndeleteHeaders\n    },\n    default: {\n      bodyMapper: Mappers.StorageError,\n      headersMapper: Mappers.PathUndeleteExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.timeout, Parameters.comp2],\n  urlParameters: [Parameters.url],\n  headerParameters: [\n    Parameters.accept,\n    Parameters.requestId,\n    Parameters.version,\n    Parameters.undeleteSource\n  ],\n  serializer\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createClientLogger } from \"@azure/logger\";\n\n/**\n * The `@azure/logger` configuration for this package.\n */\nexport const logger = createClientLogger(\"storage-file-datalake\");\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport {\n  BaseRequestPolicy,\n  HttpOperationResponse,\n  isNode,\n  RequestPolicy,\n  RequestPolicyOptions,\n  WebResource\n} from \"@azure/core-http\";\n\nimport { HeaderConstants, UrlConstants } from \"../utils/constants\";\nimport { setURLParameter } from \"../utils/utils.common\";\n\n/**\n * StorageBrowserPolicy will handle differences between Node.js and browser runtime, including:\n *\n * 1. Browsers cache GET/HEAD requests by adding conditional headers such as 'IF_MODIFIED_SINCE'.\n * StorageBrowserPolicy is a policy used to add a timestamp query to GET/HEAD request URL\n * thus avoid the browser cache.\n *\n * 2. Remove cookie header for security\n *\n * 3. Remove content-length header to avoid browsers warning\n */\nexport class StorageBrowserPolicy extends BaseRequestPolicy {\n  /**\n   * Creates an instance of StorageBrowserPolicy.\n   * @param nextPolicy -\n   * @param options -\n   */\n\n  // The base class has a protected constructor. Adding a public one to enable constructing of this class.\n  /* eslint-disable-next-line @typescript-eslint/no-useless-constructor*/\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions) {\n    super(nextPolicy, options);\n  }\n\n  /**\n   * Sends out request.\n   *\n   * @param request -\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    if (isNode) {\n      return this._nextPolicy.sendRequest(request);\n    }\n\n    if (request.method.toUpperCase() === \"GET\" || request.method.toUpperCase() === \"HEAD\") {\n      request.url = setURLParameter(\n        request.url,\n        UrlConstants.Parameters.FORCE_BROWSER_NO_CACHE,\n        new Date().getTime().toString()\n      );\n    }\n\n    request.headers.remove(HeaderConstants.COOKIE);\n\n    // According to XHR standards, content-length should be fully controlled by browsers\n    request.headers.remove(HeaderConstants.CONTENT_LENGTH);\n\n    // DFS flush file API requires content-length=0, workaround to force browsers add content-length header\n    if (request.method === \"PATCH\" && request.body === undefined) {\n      request.body = \"\";\n    }\n\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"@azure/core-http\";\nimport { StorageBrowserPolicy } from \"./policies/StorageBrowserPolicy\";\nexport { StorageBrowserPolicy };\n\n/**\n * StorageBrowserPolicyFactory is a factory class helping generating StorageBrowserPolicy objects.\n */\nexport class StorageBrowserPolicyFactory implements RequestPolicyFactory {\n  /**\n   * Creates a StorageBrowserPolicyFactory object.\n   *\n   * @param nextPolicy -\n   * @param options -\n   */\n  public create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): StorageBrowserPolicy {\n    return new StorageBrowserPolicy(nextPolicy, options);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AbortError } from \"@azure/abort-controller\";\nimport {\n  AbortSignalLike,\n  BaseRequestPolicy,\n  HttpOperationResponse,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n  RestError,\n  WebResource\n} from \"@azure/core-http\";\n\nimport { StorageRetryOptions } from \"../StorageRetryPolicyFactory\";\nimport { UrlConstants } from \"../utils/constants\";\nimport { delay, setURLHost, setURLParameter } from \"../utils/utils.common\";\nimport { logger } from \"../log\";\n\n/**\n * A factory method used to generated a RetryPolicy factory.\n *\n * @param retryOptions -\n */\nexport function NewRetryPolicyFactory(retryOptions?: StorageRetryOptions): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions): StorageRetryPolicy => {\n      return new StorageRetryPolicy(nextPolicy, options, retryOptions);\n    }\n  };\n}\n\n/**\n * RetryPolicy types.\n */\nexport enum StorageRetryPolicyType {\n  /**\n   * Exponential retry. Retry time delay grows exponentially.\n   */\n  EXPONENTIAL,\n  /**\n   * Linear retry. Retry time delay grows linearly.\n   */\n  FIXED\n}\n\n// Default values of StorageRetryOptions\nconst DEFAULT_RETRY_OPTIONS: StorageRetryOptions = {\n  maxRetryDelayInMs: 120 * 1000,\n  maxTries: 4,\n  retryDelayInMs: 4 * 1000,\n  retryPolicyType: StorageRetryPolicyType.EXPONENTIAL,\n  secondaryHost: \"\",\n  tryTimeoutInMs: undefined // Use server side default timeout strategy\n};\n\nconst RETRY_ABORT_ERROR = new AbortError(\"The operation was aborted.\");\n\n/**\n * Retry policy with exponential retry and linear retry implemented.\n */\nexport class StorageRetryPolicy extends BaseRequestPolicy {\n  /**\n   * RetryOptions.\n   */\n  private readonly retryOptions: StorageRetryOptions;\n\n  /**\n   * Creates an instance of RetryPolicy.\n   *\n   * @param nextPolicy -\n   * @param options -\n   * @param retryOptions -\n   */\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    retryOptions: StorageRetryOptions = DEFAULT_RETRY_OPTIONS\n  ) {\n    super(nextPolicy, options);\n\n    // Initialize retry options\n    this.retryOptions = {\n      retryPolicyType: retryOptions.retryPolicyType\n        ? retryOptions.retryPolicyType\n        : DEFAULT_RETRY_OPTIONS.retryPolicyType,\n\n      maxTries:\n        retryOptions.maxTries && retryOptions.maxTries >= 1\n          ? Math.floor(retryOptions.maxTries)\n          : DEFAULT_RETRY_OPTIONS.maxTries,\n\n      tryTimeoutInMs:\n        retryOptions.tryTimeoutInMs && retryOptions.tryTimeoutInMs >= 0\n          ? retryOptions.tryTimeoutInMs\n          : DEFAULT_RETRY_OPTIONS.tryTimeoutInMs,\n\n      retryDelayInMs:\n        retryOptions.retryDelayInMs && retryOptions.retryDelayInMs >= 0\n          ? Math.min(\n              retryOptions.retryDelayInMs,\n              retryOptions.maxRetryDelayInMs\n                ? retryOptions.maxRetryDelayInMs\n                : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs!\n            )\n          : DEFAULT_RETRY_OPTIONS.retryDelayInMs,\n\n      maxRetryDelayInMs:\n        retryOptions.maxRetryDelayInMs && retryOptions.maxRetryDelayInMs >= 0\n          ? retryOptions.maxRetryDelayInMs\n          : DEFAULT_RETRY_OPTIONS.maxRetryDelayInMs,\n\n      secondaryHost: retryOptions.secondaryHost\n        ? retryOptions.secondaryHost\n        : DEFAULT_RETRY_OPTIONS.secondaryHost\n    };\n  }\n\n  /**\n   * Sends request.\n   *\n   * @param request -\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    return this.attemptSendRequest(request, false, 1);\n  }\n\n  /**\n   * Decide and perform next retry. Won't mutate request parameter.\n   *\n   * @param request -\n   * @param secondaryHas404 -  If attempt was against the secondary & it returned a StatusNotFound (404), then\n   *                                   the resource was not found. This may be due to replication delay. So, in this\n   *                                   case, we'll never try the secondary again for this operation.\n   * @param attempt -           How many retries has been attempted to performed, starting from 1, which includes\n   *                                   the attempt will be performed by this method call.\n   */\n  protected async attemptSendRequest(\n    request: WebResource,\n    secondaryHas404: boolean,\n    attempt: number\n  ): Promise<HttpOperationResponse> {\n    const newRequest: WebResource = request.clone();\n\n    const isPrimaryRetry =\n      secondaryHas404 ||\n      !this.retryOptions.secondaryHost ||\n      !(request.method === \"GET\" || request.method === \"HEAD\" || request.method === \"OPTIONS\") ||\n      attempt % 2 === 1;\n\n    if (!isPrimaryRetry) {\n      newRequest.url = setURLHost(newRequest.url, this.retryOptions.secondaryHost!);\n    }\n\n    // Set the server-side timeout query parameter \"timeout=[seconds]\"\n    if (this.retryOptions.tryTimeoutInMs) {\n      newRequest.url = setURLParameter(\n        newRequest.url,\n        UrlConstants.Parameters.TIMEOUT,\n        Math.floor(this.retryOptions.tryTimeoutInMs! / 1000).toString()\n      );\n    }\n\n    let response: HttpOperationResponse | undefined;\n    try {\n      logger.info(`RetryPolicy: =====> Try=${attempt} ${isPrimaryRetry ? \"Primary\" : \"Secondary\"}`);\n      response = await this._nextPolicy.sendRequest(newRequest);\n      if (!this.shouldRetry(isPrimaryRetry, attempt, response)) {\n        return response;\n      }\n\n      secondaryHas404 = secondaryHas404 || (!isPrimaryRetry && response.status === 404);\n    } catch (err) {\n      logger.error(`RetryPolicy: Caught error, message: ${err.message}, code: ${err.code}`);\n      if (!this.shouldRetry(isPrimaryRetry, attempt, response, err)) {\n        throw err;\n      }\n    }\n\n    await this.delay(isPrimaryRetry, attempt, request.abortSignal);\n    return this.attemptSendRequest(request, secondaryHas404, ++attempt);\n  }\n\n  /**\n   * Decide whether to retry according to last HTTP response and retry counters.\n   *\n   * @param isPrimaryRetry -\n   * @param attempt -\n   * @param response -\n   * @param err -\n   */\n  protected shouldRetry(\n    isPrimaryRetry: boolean,\n    attempt: number,\n    response?: HttpOperationResponse,\n    err?: RestError\n  ): boolean {\n    if (attempt >= this.retryOptions.maxTries!) {\n      logger.info(\n        `RetryPolicy: Attempt(s) ${attempt} >= maxTries ${this.retryOptions\n          .maxTries!}, no further try.`\n      );\n      return false;\n    }\n\n    // Handle network failures, you may need to customize the list when you implement\n    // your own http client\n    const retriableErrors = [\n      \"ETIMEDOUT\",\n      \"ESOCKETTIMEDOUT\",\n      \"ECONNREFUSED\",\n      \"ECONNRESET\",\n      \"ENOENT\",\n      \"ENOTFOUND\",\n      \"TIMEOUT\",\n      \"EPIPE\",\n      \"REQUEST_SEND_ERROR\" // For default xhr based http client provided in ms-rest-js\n    ];\n    if (err) {\n      for (const retriableError of retriableErrors) {\n        if (\n          err.name.toUpperCase().includes(retriableError) ||\n          err.message.toUpperCase().includes(retriableError) ||\n          (err.code && err.code.toString().toUpperCase() === retriableError)\n        ) {\n          logger.info(`RetryPolicy: Network error ${retriableError} found, will retry.`);\n          return true;\n        }\n      }\n    }\n\n    // If attempt was against the secondary & it returned a StatusNotFound (404), then\n    // the resource was not found. This may be due to replication delay. So, in this\n    // case, we'll never try the secondary again for this operation.\n    if (response || err) {\n      const statusCode = response ? response.status : err ? err.statusCode : 0;\n      if (!isPrimaryRetry && statusCode === 404) {\n        logger.info(`RetryPolicy: Secondary access with 404, will retry.`);\n        return true;\n      }\n\n      // Server internal error or server timeout\n      if (statusCode === 503 || statusCode === 500) {\n        logger.info(`RetryPolicy: Will retry for status code ${statusCode}.`);\n        return true;\n      }\n    }\n\n    if (err?.code === \"PARSE_ERROR\" && err?.message.startsWith(`Error \"Error: Unclosed root tag`)) {\n      logger.info(\n        \"RetryPolicy: Incomplete XML response likely due to service timeout, will retry.\"\n      );\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Delay a calculated time between retries.\n   *\n   * @param isPrimaryRetry -\n   * @param attempt -\n   * @param abortSignal -\n   */\n  private async delay(isPrimaryRetry: boolean, attempt: number, abortSignal?: AbortSignalLike) {\n    let delayTimeInMs: number = 0;\n\n    if (isPrimaryRetry) {\n      switch (this.retryOptions.retryPolicyType) {\n        case StorageRetryPolicyType.EXPONENTIAL:\n          delayTimeInMs = Math.min(\n            (Math.pow(2, attempt - 1) - 1) * this.retryOptions.retryDelayInMs!,\n            this.retryOptions.maxRetryDelayInMs!\n          );\n          break;\n        case StorageRetryPolicyType.FIXED:\n          delayTimeInMs = this.retryOptions.retryDelayInMs!;\n          break;\n      }\n    } else {\n      delayTimeInMs = Math.random() * 1000;\n    }\n\n    logger.info(`RetryPolicy: Delay for ${delayTimeInMs}ms`);\n    return delay(delayTimeInMs, abortSignal, RETRY_ABORT_ERROR);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { RequestPolicy, RequestPolicyFactory, RequestPolicyOptions } from \"@azure/core-http\";\nimport { StorageRetryPolicy, StorageRetryPolicyType } from \"./policies/StorageRetryPolicy\";\n\nexport { StorageRetryPolicyType, StorageRetryPolicy };\n\n/**\n * Storage Blob retry options interface.\n */\nexport interface StorageRetryOptions {\n  /**\n   * Optional. StorageRetryPolicyType, default is exponential retry policy.\n   */\n  readonly retryPolicyType?: StorageRetryPolicyType;\n\n  /**\n   * Optional. Max try number of attempts, default is 4.\n   * A value of 1 means 1 try and no retries.\n   * A value smaller than 1 means default retry number of attempts.\n   */\n  readonly maxTries?: number;\n\n  /**\n   * Optional. Indicates the maximum time in ms allowed for any single try of an HTTP request.\n   * A value of zero or undefined means no default timeout on SDK client, Azure\n   * Storage server's default timeout policy will be used.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/setting-timeouts-for-blob-service-operations\n   */\n  readonly tryTimeoutInMs?: number;\n\n  /**\n   * Optional. Specifies the amount of delay to use before retrying an operation (default is 4s or 4 * 1000ms).\n   * The delay increases (exponentially or linearly) with each retry up to a maximum specified by\n   * maxRetryDelayInMs. If you specify 0, then you must also specify 0 for maxRetryDelayInMs.\n   */\n  readonly retryDelayInMs?: number;\n\n  /**\n   * Optional. Specifies the maximum delay allowed before retrying an operation (default is 120s or 120 * 1000ms).\n   * If you specify 0, then you must also specify 0 for retryDelayInMs.\n   */\n  readonly maxRetryDelayInMs?: number;\n\n  /**\n   * If a secondaryHost is specified, retries will be tried against this host. If secondaryHost is undefined\n   * (the default) then operations are not retried against another host.\n   *\n   * NOTE: Before setting this field, make sure you understand the issues around\n   * reading stale and potentially-inconsistent data at\n   * {@link https://docs.microsoft.com/en-us/azure/storage/common/storage-designing-ha-apps-with-ragrs}\n   */\n  readonly secondaryHost?: string;\n}\n\n/**\n * StorageRetryPolicyFactory is a factory class helping generating {@link StorageRetryPolicy} objects.\n */\nexport class StorageRetryPolicyFactory implements RequestPolicyFactory {\n  private retryOptions?: StorageRetryOptions;\n\n  /**\n   * Creates an instance of StorageRetryPolicyFactory.\n   * @param retryOptions -\n   */\n  constructor(retryOptions?: StorageRetryOptions) {\n    this.retryOptions = retryOptions;\n  }\n\n  /**\n   * Creates a StorageRetryPolicy object.\n   *\n   * @param nextPolicy -\n   * @param options -\n   */\n  public create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): StorageRetryPolicy {\n    return new StorageRetryPolicy(nextPolicy, options, this.retryOptions);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  HttpHeaders,\n  HttpOperationResponse,\n  isNode,\n  RequestPolicy,\n  RequestPolicyOptions,\n  WebResource\n} from \"@azure/core-http\";\n\nimport { HeaderConstants } from \"../utils/constants\";\n\n/**\n * TelemetryPolicy is a policy used to tag user-agent header for every requests.\n */\nexport class TelemetryPolicy extends BaseRequestPolicy {\n  /**\n   * Telemetry string.\n   */\n  public readonly telemetry: string;\n\n  /**\n   * Creates an instance of TelemetryPolicy.\n   * @param nextPolicy -\n   * @param options -\n   * @param telemetry -\n   */\n  constructor(nextPolicy: RequestPolicy, options: RequestPolicyOptions, telemetry: string) {\n    super(nextPolicy, options);\n    this.telemetry = telemetry;\n  }\n\n  /**\n   * Sends out request.\n   *\n   * @param request -\n   */\n  public async sendRequest(request: WebResource): Promise<HttpOperationResponse> {\n    if (isNode) {\n      if (!request.headers) {\n        request.headers = new HttpHeaders();\n      }\n      if (!request.headers.get(HeaderConstants.USER_AGENT)) {\n        request.headers.set(HeaderConstants.USER_AGENT, this.telemetry);\n      }\n    }\n\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  isNode,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n  UserAgentOptions\n} from \"@azure/core-http\";\nimport * as os from \"os\";\n\nimport { TelemetryPolicy } from \"./policies/TelemetryPolicy\";\nimport { SDK_VERSION } from \"./utils/constants\";\n\n/**\n * TelemetryPolicyFactory is a factory class helping generating {@link TelemetryPolicy} objects.\n */\nexport class TelemetryPolicyFactory implements RequestPolicyFactory {\n  /**\n   * @internal\n   */\n  public readonly telemetryString: string;\n\n  /**\n   * Creates an instance of TelemetryPolicyFactory.\n   * @param telemetry -\n   */\n  constructor(telemetry?: UserAgentOptions) {\n    const userAgentInfo: string[] = [];\n\n    if (isNode) {\n      if (telemetry) {\n        const telemetryString = telemetry.userAgentPrefix || \"\";\n        if (telemetryString.length > 0 && userAgentInfo.indexOf(telemetryString) === -1) {\n          userAgentInfo.push(telemetryString);\n        }\n      }\n\n      // e.g. azsdk-js-storagedatalake/10.0.0\n      const libInfo = `azsdk-js-storagedatalake/${SDK_VERSION}`;\n      if (userAgentInfo.indexOf(libInfo) === -1) {\n        userAgentInfo.push(libInfo);\n      }\n\n      // e.g. (NODE-VERSION 4.9.1; Windows_NT 10.0.16299)\n      const runtimeInfo = `(NODE-VERSION ${process.version}; ${os.type()} ${os.release()})`;\n      if (userAgentInfo.indexOf(runtimeInfo) === -1) {\n        userAgentInfo.push(runtimeInfo);\n      }\n    }\n\n    this.telemetryString = userAgentInfo.join(\" \");\n  }\n\n  /**\n   * Creates a TelemetryPolicy object.\n   *\n   * @param nextPolicy -\n   * @param options -\n   */\n  public create(nextPolicy: RequestPolicy, options: RequestPolicyOptions): TelemetryPolicy {\n    return new TelemetryPolicy(nextPolicy, options, this.telemetryString);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { DefaultHttpClient } from \"@azure/core-http\";\nimport { IHttpClient } from \"../Pipeline\";\n\nconst _defaultHttpClient = new DefaultHttpClient();\n\nexport function getCachedDefaultHttpClient(): IHttpClient {\n  return _defaultHttpClient;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  bearerTokenAuthenticationPolicy,\n  deserializationPolicy,\n  disableResponseDecompressionPolicy,\n  generateClientRequestIdPolicy,\n  HttpClient as IHttpClient,\n  HttpHeaders,\n  HttpOperationResponse,\n  HttpRequestBody,\n  isNode,\n  isTokenCredential,\n  KeepAliveOptions,\n  keepAlivePolicy,\n  logPolicy,\n  ProxyOptions,\n  proxyPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n  ServiceClientOptions,\n  TokenCredential,\n  tracingPolicy,\n  UserAgentOptions,\n  WebResource\n} from \"@azure/core-http\";\n\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { logger } from \"./log\";\nimport { StorageBrowserPolicyFactory } from \"./StorageBrowserPolicyFactory\";\nimport { StorageRetryOptions, StorageRetryPolicyFactory } from \"./StorageRetryPolicyFactory\";\nimport { TelemetryPolicyFactory } from \"./TelemetryPolicyFactory\";\nimport {\n  StorageDataLakeLoggingAllowedHeaderNames,\n  StorageDataLakeLoggingAllowedQueryParameters,\n  StorageOAuthScopes\n} from \"./utils/constants\";\nimport { getCachedDefaultHttpClient } from \"./utils/cache\";\n\n// Export following interfaces and types for customers who want to implement their\n// own RequestPolicy or HTTPClient\nexport {\n  BaseRequestPolicy,\n  StorageOAuthScopes,\n  deserializationPolicy,\n  IHttpClient,\n  HttpHeaders,\n  HttpRequestBody,\n  HttpOperationResponse,\n  WebResource,\n  RequestPolicyFactory,\n  RequestPolicy,\n  RequestPolicyOptions\n};\n\n/**\n * Option interface for Pipeline constructor.\n */\nexport interface PipelineOptions {\n  /**\n   * Optional. Configures the HTTP client to send requests and receive responses.\n   */\n  httpClient?: IHttpClient;\n}\n\n/**\n * A Pipeline class containing HTTP request policies.\n * You can create a default Pipeline by calling {@link newPipeline}.\n * Or you can create a Pipeline with your own policies by the constructor of Pipeline.\n *\n * Refer to {@link newPipeline} and provided policies before implementing your\n * customized Pipeline.\n */\nexport class Pipeline {\n  /**\n   * A list of chained request policy factories.\n   */\n  public readonly factories: RequestPolicyFactory[];\n  /**\n   * Configures pipeline logger and HTTP client.\n   */\n  public readonly options: PipelineOptions;\n\n  /**\n   * Creates an instance of Pipeline. Customize HTTPClient by implementing IHttpClient interface.\n   *\n   * @param factories -\n   * @param options -\n   */\n  constructor(factories: RequestPolicyFactory[], options: PipelineOptions = {}) {\n    this.factories = factories;\n    // when options.httpClient is not specified, passing in a DefaultHttpClient instance to\n    // avoid each client creating its own http client.\n    this.options = {\n      ...options,\n      httpClient: options.httpClient || getCachedDefaultHttpClient()\n    };\n  }\n\n  /**\n   * Transfer Pipeline object to ServiceClientOptions object which is required by\n   * ServiceClient constructor.\n   *\n   * @returns The ServiceClientOptions object from this Pipeline.\n   */\n  public toServiceClientOptions(): ServiceClientOptions {\n    return {\n      httpClient: this.options.httpClient,\n      requestPolicyFactories: this.factories\n    };\n  }\n}\n\n/**\n * Options interface for the {@link newPipeline} function.\n */\nexport interface StoragePipelineOptions {\n  /**\n   * Options to configure a proxy for outgoing requests.\n   */\n  proxyOptions?: ProxyOptions;\n  /**\n   * Options for adding user agent details to outgoing requests.\n   */\n  userAgentOptions?: UserAgentOptions;\n  /**\n   * Configures the built-in retry policy behavior.\n   */\n  retryOptions?: StorageRetryOptions;\n  /**\n   * Keep alive configurations. Default keep-alive is enabled.\n   */\n  keepAliveOptions?: KeepAliveOptions;\n\n  /**\n   * Configures the HTTP client to send requests and receive responses.\n   */\n  httpClient?: IHttpClient;\n}\n\n/**\n * Creates a new Pipeline object with Credential provided.\n *\n * @param credential -  Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n * @param pipelineOptions - Optional. Options.\n * @returns A new Pipeline object.\n */\nexport function newPipeline(\n  credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n  pipelineOptions: StoragePipelineOptions = {}\n): Pipeline {\n  if (credential === undefined) {\n    credential = new AnonymousCredential();\n  }\n  // Order is important. Closer to the API at the top & closer to the network at the bottom.\n  // The credential's policy factory must appear close to the wire so it can sign any\n  // changes made by other factories (like UniqueRequestIDPolicyFactory)\n\n  const telemetryPolicy = new TelemetryPolicyFactory(pipelineOptions.userAgentOptions);\n  const factories: RequestPolicyFactory[] = [\n    tracingPolicy({ userAgent: telemetryPolicy.telemetryString }),\n    keepAlivePolicy(pipelineOptions.keepAliveOptions),\n    telemetryPolicy,\n    generateClientRequestIdPolicy(),\n    new StorageBrowserPolicyFactory(),\n    new StorageRetryPolicyFactory(pipelineOptions.retryOptions), // Retry policy should be above any policy that throws retryable errors\n    deserializationPolicy(), // Default deserializationPolicy is provided by protocol layer\n    logPolicy({\n      logger: logger.info,\n      allowedHeaderNames: StorageDataLakeLoggingAllowedHeaderNames,\n      allowedQueryParameters: StorageDataLakeLoggingAllowedQueryParameters\n    })\n  ];\n\n  if (isNode) {\n    // policies only available in Node.js runtime, not in browsers\n    factories.push(proxyPolicy(pipelineOptions.proxyOptions));\n    factories.push(disableResponseDecompressionPolicy());\n  }\n  factories.push(\n    isTokenCredential(credential)\n      ? attachCredential(\n          bearerTokenAuthenticationPolicy(credential, StorageOAuthScopes),\n          credential\n        )\n      : credential\n  );\n\n  return new Pipeline(factories, pipelineOptions);\n}\n\n/**\n * Attach a TokenCredential to an object.\n *\n * @param thing -\n * @param credential -\n */\nfunction attachCredential<T>(thing: T, credential: TokenCredential): T {\n  (thing as any).credential = credential;\n  return thing;\n}\n","/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport { StorageClientOptionalParams } from \"./models\";\n\nconst packageName = \"azure-storage-datalake\";\nconst packageVersion = \"12.7.0\";\n\nexport class StorageClientContext extends coreHttp.ServiceClient {\n  url: string;\n  version: string;\n  resource: string;\n\n  /**\n   * Initializes a new instance of the StorageClientContext class.\n   * @param url The URL of the service account, container, or blob that is the target of the desired\n   *            operation.\n   * @param options The parameter options\n   */\n  constructor(url: string, options?: StorageClientOptionalParams) {\n    if (url === undefined) {\n      throw new Error(\"'url' cannot be null\");\n    }\n\n    // Initializing default values for options\n    if (!options) {\n      options = {};\n    }\n\n    if (!options.userAgent) {\n      const defaultUserAgent = coreHttp.getDefaultUserAgentValue();\n      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;\n    }\n\n    super(undefined, options);\n\n    this.requestContentType = \"application/json; charset=utf-8\";\n\n    this.baseUri = options.endpoint || \"{url}\";\n\n    // Parameter assignments\n    this.url = url;\n\n    // Assigning values to Constant parameters\n    this.version = options.version || \"2020-10-02\";\n    this.resource = options.resource || \"filesystem\";\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { URLBuilder } from \"@azure/core-http\";\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { ContainerItem, PublicAccessType as ContainerPublicAccessType } from \"@azure/storage-blob\";\n\nimport { AclFailedEntry, PathGetPropertiesResponse } from \"./generated/src/models\";\nimport {\n  AccessControlChangeError,\n  FileSystemItem,\n  Metadata,\n  PathAccessControlItem,\n  PathGetAccessControlResponse,\n  PathPermissions,\n  PublicAccessType,\n  RemovePathAccessControlItem,\n  RolePermissions,\n  ServiceListContainersSegmentResponse,\n  ServiceListFileSystemsSegmentResponse\n} from \"./models\";\nimport { ToBlobEndpointHostMappings, ToDfsEndpointHostMappings } from \"./utils/constants\";\nimport { base64encode } from \"./utils/utils.common\";\n\n/**\n * Get a blob endpoint URL from incoming blob or dfs endpoint URLs.\n * Only handle known host name pair patterns, add more patterns into ToBlobEndpointHostMappings in constants.ts.\n *\n * Expected input and outputs:\n * http://account.blob.core.windows.net     - http://account.blob.core.windows.net\n * http://account.dfs.core.windows.net      - http://account.blob.core.windows.net\n * http://127.0.0.1:10000                   - http://127.0.0.1:10000\n * http://account.blob.core.windows.net/abc - http://account.blob.core.windows.net/abc\n * http://account.dfs.core.windows.net/abc  - http://account.blob.core.windows.net/abc\n * http://127.0.0.1:10000/abc               - http://127.0.0.1:10000/abc\n *\n * @param url -\n */\nexport function toBlobEndpointUrl(url: string): string {\n  const urlParsed = URLBuilder.parse(url);\n\n  let host = urlParsed.getHost();\n  if (host === undefined) {\n    throw RangeError(`toBlobEndpointUrl() parameter url ${url} doesn't include valid host.`);\n  }\n\n  for (const mapping of ToBlobEndpointHostMappings) {\n    if (host.includes(mapping[0])) {\n      host = host.replace(mapping[0], mapping[1]);\n      break;\n    }\n  }\n\n  urlParsed.setHost(host);\n  return urlParsed.toString();\n}\n\n/**\n * Get a dfs endpoint URL from incoming blob or dfs endpoint URLs.\n * Only handle known host name pair patterns, add more patterns into ToDfsEndpointHostMappings in constants.ts.\n *\n * Expected input and outputs:\n * http://account.blob.core.windows.net     - http://account.dfs.core.windows.net\n * http://account.dfs.core.windows.net      - http://account.dfs.core.windows.net\n * http://127.0.0.1:10000                   - http://127.0.0.1:10000\n * http://account.blob.core.windows.net/abc - http://account.dfs.core.windows.net/abc\n * http://account.dfs.core.windows.net/abc  - http://account.dfs.core.windows.net/abc\n * http://127.0.0.1:10000/abc               - http://127.0.0.1:10000/abc\n *\n * @param url -\n */\nexport function toDfsEndpointUrl(url: string): string {\n  const urlParsed = URLBuilder.parse(url);\n\n  let host = urlParsed.getHost();\n  if (host === undefined) {\n    throw RangeError(`toDfsEndpointUrl() parameter url ${url} doesn't include valid host.`);\n  }\n\n  for (const mapping of ToDfsEndpointHostMappings) {\n    if (host.includes(mapping[0])) {\n      host = host.replace(mapping[0], mapping[1]);\n      break;\n    }\n  }\n\n  urlParsed.setHost(host);\n  return urlParsed.toString();\n}\n\nfunction toFileSystemAsyncIterableIterator(\n  iter: AsyncIterableIterator<ServiceListContainersSegmentResponse>\n): AsyncIterableIterator<ServiceListFileSystemsSegmentResponse> {\n  return {\n    async next() {\n      const rawResult = await iter.next();\n      if (rawResult.value) {\n        rawResult.value.fileSystemItems = rawResult.value.containerItems.map(\n          (val: ContainerItem): FileSystemItem => {\n            return {\n              ...val,\n              versionId: val.version,\n              properties: {\n                ...val.properties,\n                publicAccess: toPublicAccessType(val.properties.publicAccess)\n              }\n            };\n          }\n        );\n      }\n      return rawResult as any;\n    },\n    [Symbol.asyncIterator]() {\n      return this;\n    }\n  };\n}\n\nexport function toFileSystemPagedAsyncIterableIterator(\n  iter: PagedAsyncIterableIterator<ContainerItem, ServiceListContainersSegmentResponse>\n): PagedAsyncIterableIterator<FileSystemItem, ServiceListFileSystemsSegmentResponse> {\n  return {\n    async next(): Promise<{ done?: boolean; value: FileSystemItem }> {\n      const rawResult = await iter.next();\n      const result = rawResult as { done?: boolean; value: FileSystemItem };\n      if (result.value) {\n        result.value.properties.publicAccess = toPublicAccessType(\n          rawResult.value.properties.publicAccess\n        );\n        result.value.versionId = rawResult.value.version;\n      }\n      return result;\n    },\n    [Symbol.asyncIterator](): PagedAsyncIterableIterator<\n      FileSystemItem,\n      ServiceListFileSystemsSegmentResponse\n    > {\n      return this;\n    },\n    byPage(\n      settings: PageSettings = {}\n    ): AsyncIterableIterator<ServiceListFileSystemsSegmentResponse> {\n      return toFileSystemAsyncIterableIterator(iter.byPage(settings));\n    }\n  };\n}\n\nexport function toContainerPublicAccessType(\n  publicAccessType?: PublicAccessType\n): ContainerPublicAccessType | undefined {\n  if (!publicAccessType) {\n    return undefined;\n  }\n\n  switch (publicAccessType) {\n    case \"filesystem\":\n      return \"container\";\n    case \"file\":\n      return \"blob\";\n    default:\n      throw TypeError(\n        `toContainerPublicAccessType() parameter ${publicAccessType} is not recognized.`\n      );\n  }\n}\n\nexport function toPublicAccessType(\n  containerPublicAccessType?: ContainerPublicAccessType\n): PublicAccessType | undefined {\n  if (!containerPublicAccessType) {\n    return undefined;\n  }\n\n  switch (containerPublicAccessType) {\n    case \"container\":\n      return \"filesystem\";\n    case \"blob\":\n      return \"file\";\n    default:\n      throw TypeError(\n        `toPublicAccessType() parameter ${containerPublicAccessType} is not recognized.`\n      );\n  }\n}\n\nexport function toProperties(metadata?: Metadata): string | undefined {\n  if (metadata === undefined) {\n    return undefined;\n  }\n\n  const properties = [];\n  for (const key in metadata) {\n    if (Object.prototype.hasOwnProperty.call(metadata, key)) {\n      const value = metadata[key];\n      properties.push(`${key}=${base64encode(value)}`);\n    }\n  }\n\n  return properties.join(\",\");\n}\n\nexport function toPathGetAccessControlResponse(\n  response: PathGetPropertiesResponse\n): PathGetAccessControlResponse {\n  return {\n    ...response,\n    _response: response._response,\n    permissions: toPermissions(response.permissions),\n    acl: toAcl(response.acl)\n  };\n}\n\nexport function toRolePermissions(\n  permissionsString: string,\n  allowStickyBit: boolean = false\n): RolePermissions {\n  const error = new RangeError(\n    `toRolePermissions() Invalid role permissions string ${permissionsString}`\n  );\n  if (permissionsString.length !== 3) {\n    throw error;\n  }\n\n  permissionsString = permissionsString.toLowerCase();\n\n  let read = false;\n  if (permissionsString[0] === \"r\") {\n    read = true;\n  } else if (permissionsString[0] !== \"-\") {\n    throw error;\n  }\n\n  let write = false;\n  if (permissionsString[1] === \"w\") {\n    write = true;\n  } else if (permissionsString[1] !== \"-\") {\n    throw error;\n  }\n\n  let execute = false;\n  if (permissionsString[2] === \"x\") {\n    execute = true;\n  } else if (allowStickyBit) {\n    if (permissionsString[2] === \"t\") {\n      execute = true;\n    } else if (permissionsString[2] !== \"-\") {\n      throw error;\n    }\n  } else if (permissionsString[2] !== \"-\") {\n    throw error;\n  }\n\n  return { read, write, execute };\n}\n\nexport function toPermissions(permissionsString?: string): PathPermissions | undefined {\n  if (permissionsString === undefined || permissionsString === \"\" || permissionsString === null) {\n    return undefined;\n  }\n\n  if (permissionsString.length !== 9 && permissionsString.length !== 10) {\n    throw RangeError(`toPermissions() Invalid permissions string ${permissionsString}`);\n  }\n\n  // Case insensitive\n  permissionsString = permissionsString.toLowerCase();\n\n  let stickyBit = false;\n  if (permissionsString[8] === \"t\") {\n    stickyBit = true;\n  }\n\n  let extendedAcls = false;\n  if (permissionsString.length === 10) {\n    if (permissionsString[9] === \"+\") {\n      extendedAcls = true;\n    } else {\n      throw RangeError(\n        `toPermissions() Invalid extendedAcls bit ${permissionsString[9]} in permissions string ${permissionsString}`\n      );\n    }\n  }\n\n  const owner = toRolePermissions(permissionsString.substr(0, 3), false);\n  const group = toRolePermissions(permissionsString.substr(3, 3), false);\n  const other = toRolePermissions(permissionsString.substr(6, 3), true);\n\n  return {\n    owner,\n    group,\n    other,\n    stickyBit,\n    extendedAcls\n  };\n}\n\nexport function toAccessControlItem(aclItemString: string): PathAccessControlItem {\n  const error = new RangeError(\n    `toAccessControlItem() Parameter access control item string ${aclItemString} is not valid.`\n  );\n  if (aclItemString === \"\") {\n    throw error;\n  }\n\n  aclItemString = aclItemString.toLowerCase();\n\n  const parts = aclItemString.split(\":\");\n  if (parts.length < 3 || parts.length > 4) {\n    throw error;\n  }\n\n  let defaultScope = false;\n  let index = 0;\n  if (parts.length === 4) {\n    if (parts[index] !== \"default\") {\n      throw error;\n    }\n    defaultScope = true;\n    index++;\n  }\n\n  const accessControlType = parts[index++];\n  if (\n    accessControlType !== \"user\" &&\n    accessControlType !== \"group\" &&\n    accessControlType !== \"mask\" &&\n    accessControlType !== \"other\"\n  ) {\n    throw error;\n  }\n\n  const entityId = parts[index++];\n  const permissions = toRolePermissions(parts[index++]);\n\n  return {\n    defaultScope,\n    accessControlType,\n    entityId,\n    permissions\n  };\n}\n\nexport function toRemoveAccessControlItem(aclItemString: string): RemovePathAccessControlItem {\n  const error = new RangeError(\n    `toAccessControlItem() Parameter access control item string \"${aclItemString}\" is not valid.`\n  );\n  if (aclItemString === \"\") {\n    throw error;\n  }\n\n  aclItemString = aclItemString.toLowerCase();\n\n  const parts = aclItemString.split(\":\");\n  if (parts.length < 1 || parts.length > 3) {\n    throw error;\n  }\n\n  if (parts.length === 3) {\n    if (parts[0] !== \"default\") {\n      throw error;\n    }\n  }\n\n  let defaultScope = false;\n  let index = 0;\n  if (parts[index] === \"default\") {\n    defaultScope = true;\n    index++;\n  }\n\n  const accessControlType = parts[index++];\n  if (\n    accessControlType !== \"user\" &&\n    accessControlType !== \"group\" &&\n    accessControlType !== \"mask\" &&\n    accessControlType !== \"other\"\n  ) {\n    throw error;\n  }\n\n  const entityId = parts[index++];\n\n  return {\n    defaultScope,\n    accessControlType,\n    entityId\n  };\n}\n\nexport function toAcl(aclString?: string): PathAccessControlItem[] {\n  if (aclString === undefined || aclString === \"\" || aclString === null) {\n    return [];\n  }\n\n  const acls = [];\n  const aclParts = aclString.split(\",\");\n  for (const aclPart of aclParts) {\n    acls.push(toAccessControlItem(aclPart));\n  }\n\n  return acls;\n}\n\nexport function toRemoveAcl(aclString?: string): RemovePathAccessControlItem[] {\n  if (aclString === undefined || aclString === \"\" || aclString === null) {\n    return [];\n  }\n\n  const acls = [];\n  const aclParts = aclString.split(\",\");\n  for (const aclPart of aclParts) {\n    acls.push(toRemoveAccessControlItem(aclPart));\n  }\n\n  return acls;\n}\n\nexport function toAccessControlItemString(item: PathAccessControlItem): string {\n  const entityIdString = item.entityId !== undefined ? `:${item.entityId}` : \"\";\n  const permissionsString =\n    item.permissions !== undefined ? `:${toRolePermissionsString(item.permissions)}` : \"\";\n  return `${item.defaultScope ? \"default:\" : \"\"}${\n    item.accessControlType\n  }${entityIdString}${permissionsString}`;\n}\n\nexport function toAclString(acl: PathAccessControlItem[]): string {\n  return acl.map(toAccessControlItemString).join(\",\");\n}\n\nexport function toRolePermissionsString(p: RolePermissions, stickyBit: boolean = false): string {\n  return `${p.read ? \"r\" : \"-\"}${p.write ? \"w\" : \"-\"}${stickyBit ? \"t\" : p.execute ? \"x\" : \"-\"}`;\n}\n\nexport function toPermissionsString(permissions: PathPermissions): string {\n  return `${toRolePermissionsString(permissions.owner)}${toRolePermissionsString(\n    permissions.group\n  )}${toRolePermissionsString(permissions.other, permissions.stickyBit)}${\n    permissions.extendedAcls ? \"+\" : \"\"\n  }`;\n}\n\nexport function toAccessControlChangeFailureArray(\n  aclFailedEntries: AclFailedEntry[] = []\n): AccessControlChangeError[] {\n  return aclFailedEntries.map((aclFailedEntry: AclFailedEntry) => {\n    return {\n      name: aclFailedEntry.name || \"\",\n      isDirectory: (aclFailedEntry.type || \"\").toLowerCase() === \"directory\",\n      message: aclFailedEntry.errorMessage || \"\"\n    };\n  });\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { isNode, isTokenCredential, TokenCredential } from \"@azure/core-http\";\nimport { OperationTracingOptions } from \"@azure/core-tracing\";\n\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { StorageClientContext } from \"./generated/src/storageClientContext\";\nimport { Pipeline } from \"./Pipeline\";\nimport { toBlobEndpointUrl, toDfsEndpointUrl } from \"./transforms\";\nimport { escapeURLPath, getAccountNameFromUrl, getURLScheme, iEqual } from \"./utils/utils.common\";\n\n/**\n * An interface for options common to every remote operation.\n */\nexport interface CommonOptions {\n  /**\n   * Options to configure spans created when tracing is enabled.\n   */\n  tracingOptions?: OperationTracingOptions;\n}\n\n/**\n * A StorageClient represents a based URL class for {@link BlobServiceClient}, {@link ContainerClient}\n * and etc.\n */\nexport abstract class StorageClient {\n  /**\n   * Encoded URL string value.\n   */\n  public readonly url: string;\n\n  public readonly accountName: string;\n\n  /**\n   * Encoded URL string value for corresponding blob endpoint.\n   */\n  protected readonly blobEndpointUrl: string;\n\n  /**\n   * Encoded URL string value for corresponding dfs endpoint.\n   */\n  protected readonly dfsEndpointUrl: string;\n\n  /**\n   * Request policy pipeline.\n   *\n   * @internal\n   */\n  protected readonly pipeline: Pipeline;\n\n  /**\n   * Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   */\n  public readonly credential: StorageSharedKeyCredential | AnonymousCredential | TokenCredential;\n\n  /**\n   * StorageClient is a reference to protocol layer operations entry, which is\n   * generated by AutoRest generator.\n   */\n  protected readonly storageClientContext: StorageClientContext;\n\n  /**\n   * storageClientContextWithBlobEndpoint is a reference to protocol layer operations entry, which is\n   * generated by AutoRest generator, with its url pointing to the Blob endpoint.\n   */\n  protected readonly storageClientContextToBlobEndpoint: StorageClientContext;\n\n  /**\n   */\n  protected readonly isHttps: boolean;\n\n  /**\n   * Creates an instance of StorageClient.\n   * @param url - url to resource\n   * @param pipeline - request policy pipeline.\n   */\n  protected constructor(url: string, pipeline: Pipeline) {\n    // URL should be encoded and only once, protocol layer shouldn't encode URL again\n    this.url = escapeURLPath(url);\n    this.blobEndpointUrl = toBlobEndpointUrl(this.url);\n    this.dfsEndpointUrl = toDfsEndpointUrl(this.url);\n    this.accountName = getAccountNameFromUrl(this.blobEndpointUrl);\n    this.pipeline = pipeline;\n    this.storageClientContext = new StorageClientContext(\n      this.dfsEndpointUrl,\n      pipeline.toServiceClientOptions()\n    );\n    this.storageClientContextToBlobEndpoint = new StorageClientContext(\n      this.blobEndpointUrl,\n      pipeline.toServiceClientOptions()\n    );\n\n    this.isHttps = iEqual(getURLScheme(this.url) || \"\", \"https\");\n\n    this.credential = new AnonymousCredential();\n    for (const factory of this.pipeline.factories) {\n      if (\n        (isNode && factory instanceof StorageSharedKeyCredential) ||\n        factory instanceof AnonymousCredential\n      ) {\n        this.credential = factory;\n      } else if (isTokenCredential((factory as any).credential)) {\n        // Only works if the factory has been attached a \"credential\" property.\n        // We do that in newPipeline() when using TokenCredential.\n        this.credential = (factory as any).credential;\n      }\n    }\n\n    // Override protocol layer's default content-type\n    const storageClientContext = this.storageClientContext as any;\n    storageClientContext.requestContentType = undefined;\n    const storageClientContextWithBlobEndpoint = this.storageClientContextToBlobEndpoint as any;\n    storageClientContextWithBlobEndpoint.requestContentType = undefined;\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Readable, ReadableOptions } from \"stream\";\n\n/**\n * Options to configure the BuffersStream.\n */\nexport interface BuffersStreamOptions extends ReadableOptions {}\n\n/**\n * This class generates a readable stream from the data in an array of buffers.\n */\nexport class BuffersStream extends Readable {\n  /**\n   * The offset of data to be read in the current buffer.\n   */\n  private byteOffsetInCurrentBuffer: number;\n\n  /**\n   * The index of buffer to be read in the array of buffers.\n   */\n  private bufferIndex: number;\n\n  /**\n   * The total length of data already read.\n   */\n  private pushedBytesLength: number;\n\n  /**\n   * Creates an instance of BuffersStream that will emit the data\n   * contained in the array of buffers.\n   *\n   * @param buffers - Array of buffers containing the data\n   * @param byteLength - The total length of data contained in the buffers\n   */\n  constructor(\n    private buffers: Buffer[],\n    private byteLength: number,\n    options?: BuffersStreamOptions\n  ) {\n    super(options);\n    this.byteOffsetInCurrentBuffer = 0;\n    this.bufferIndex = 0;\n    this.pushedBytesLength = 0;\n\n    // check byteLength is no larger than buffers[] total length\n    let buffersLength = 0;\n    for (const buf of this.buffers) {\n      buffersLength += buf.byteLength;\n    }\n    if (buffersLength < this.byteLength) {\n      throw new Error(\"Data size shouldn't be larger than the total length of buffers.\");\n    }\n  }\n\n  /**\n   * Internal _read() that will be called when the stream wants to pull more data in.\n   *\n   * @param size - Optional. The size of data to be read\n   */\n  public _read(size?: number) {\n    if (this.pushedBytesLength >= this.byteLength) {\n      this.push(null);\n    }\n\n    if (!size) {\n      size = this.readableHighWaterMark;\n    }\n\n    const outBuffers: Buffer[] = [];\n    let i = 0;\n    while (i < size && this.pushedBytesLength < this.byteLength) {\n      // The last buffer may be longer than the data it contains.\n      const remainingDataInAllBuffers = this.byteLength - this.pushedBytesLength;\n      const remainingCapacityInThisBuffer =\n        this.buffers[this.bufferIndex].byteLength - this.byteOffsetInCurrentBuffer;\n      const remaining = Math.min(remainingCapacityInThisBuffer, remainingDataInAllBuffers);\n      if (remaining > size - i) {\n        // chunkSize = size - i\n        const end = this.byteOffsetInCurrentBuffer + size - i;\n        outBuffers.push(this.buffers[this.bufferIndex].slice(this.byteOffsetInCurrentBuffer, end));\n        this.pushedBytesLength += size - i;\n        this.byteOffsetInCurrentBuffer = end;\n        i = size;\n        break;\n      } else {\n        // chunkSize = remaining\n        const end = this.byteOffsetInCurrentBuffer + remaining;\n        outBuffers.push(this.buffers[this.bufferIndex].slice(this.byteOffsetInCurrentBuffer, end));\n        if (remaining === remainingCapacityInThisBuffer) {\n          // this.buffers[this.bufferIndex] used up, shift to next one\n          this.byteOffsetInCurrentBuffer = 0;\n          this.bufferIndex++;\n        } else {\n          this.byteOffsetInCurrentBuffer = end;\n        }\n        this.pushedBytesLength += remaining;\n        i += remaining;\n      }\n    }\n\n    if (outBuffers.length > 1) {\n      this.push(Buffer.concat(outBuffers));\n    } else if (outBuffers.length === 1) {\n      this.push(outBuffers[0]);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { BuffersStream } from \"./BuffersStream\";\nimport { Readable } from \"stream\";\n\n/**\n * maxBufferLength is max size of each buffer in the pooled buffers.\n */\n// Can't use import as Typescript doesn't recognize \"buffer\".\nconst maxBufferLength = require(\"buffer\").constants.MAX_LENGTH;\n\n/**\n * This class provides a buffer container which conceptually has no hard size limit.\n * It accepts a capacity, an array of input buffers and the total length of input data.\n * It will allocate an internal \"buffer\" of the capacity and fill the data in the input buffers\n * into the internal \"buffer\" serially with respect to the total length.\n * Then by calling PooledBuffer.getReadableStream(), you can get a readable stream\n * assembled from all the data in the internal \"buffer\".\n */\nexport class PooledBuffer {\n  /**\n   * Internal buffers used to keep the data.\n   * Each buffer has a length of the maxBufferLength except last one.\n   */\n  private buffers: Buffer[] = [];\n\n  /**\n   * The total size of internal buffers.\n   */\n  private readonly capacity: number;\n\n  /**\n   * The total size of data contained in internal buffers.\n   */\n  private _size: number;\n\n  /**\n   * The size of the data contained in the pooled buffers.\n   */\n  public get size(): number {\n    return this._size;\n  }\n\n  /**\n   * Creates an instance of PooledBuffer with given capacity.\n   * Internal buffers are allocated but contains no data.\n   * Users may call the {@link PooledBuffer.fill} method to fill this\n   * pooled buffer with data.\n   *\n   * @param capacity - Total capacity of the internal buffers\n   */\n  constructor(capacity: number);\n\n  /**\n   * Creates an instance of PooledBuffer with given capacity.\n   * Internal buffers are allocated and filled with data in the input buffers serially\n   * with respect to the total length.\n   *\n   * @param capacity - Total capacity of the internal buffers\n   * @param buffers - Input buffers containing the data to be filled in the pooled buffer\n   * @param totalLength - Total length of the data to be filled in.\n   */\n  constructor(capacity: number, buffers: Buffer[], totalLength: number);\n  constructor(capacity: number, buffers?: Buffer[], totalLength?: number) {\n    this.capacity = capacity;\n    this._size = 0;\n\n    // allocate\n    const bufferNum = Math.ceil(capacity / maxBufferLength);\n    for (let i = 0; i < bufferNum; i++) {\n      let len = i === bufferNum - 1 ? capacity % maxBufferLength : maxBufferLength;\n      if (len === 0) {\n        len = maxBufferLength;\n      }\n      this.buffers.push(Buffer.allocUnsafe(len));\n    }\n\n    if (buffers) {\n      this.fill(buffers, totalLength!);\n    }\n  }\n\n  /**\n   * Fill the internal buffers with data in the input buffers serially\n   * with respect to the total length and the total capacity of the internal buffers.\n   * Data copied will be shift out of the input buffers.\n   *\n   * @param buffers - Input buffers containing the data to be filled in the pooled buffer\n   * @param totalLength - Total length of the data to be filled in.\n   *\n   */\n  public fill(buffers: Buffer[], totalLength: number) {\n    this._size = Math.min(this.capacity, totalLength);\n\n    let i = 0,\n      j = 0,\n      targetOffset = 0,\n      sourceOffset = 0,\n      totalCopiedNum = 0;\n    while (totalCopiedNum < this._size) {\n      const source = buffers[i];\n      const target = this.buffers[j];\n      const copiedNum = source.copy(target, targetOffset, sourceOffset);\n\n      totalCopiedNum += copiedNum;\n      sourceOffset += copiedNum;\n      targetOffset += copiedNum;\n      if (sourceOffset === source.length) {\n        i++;\n        sourceOffset = 0;\n      }\n      if (targetOffset === target.length) {\n        j++;\n        targetOffset = 0;\n      }\n    }\n\n    // clear copied from source buffers\n    buffers.splice(0, i);\n    if (buffers.length > 0) {\n      buffers[0] = buffers[0].slice(sourceOffset);\n    }\n  }\n\n  /**\n   * Get the readable stream assembled from all the data in the internal buffers.\n   *\n   */\n  public getReadableStream(): Readable {\n    return new BuffersStream(this.buffers, this.size);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { EventEmitter } from \"events\";\nimport { Readable } from \"stream\";\nimport { PooledBuffer } from \"./PooledBuffer\";\n\n/**\n * OutgoingHandler is an async function triggered by BufferScheduler.\n */\nexport declare type OutgoingHandler = (\n  body: () => NodeJS.ReadableStream,\n  length: number,\n  offset?: number\n) => Promise<any>;\n\n/**\n * This class accepts a Node.js Readable stream as input, and keeps reading data\n * from the stream into the internal buffer structure, until it reaches maxBuffers.\n * Every available buffer will try to trigger outgoingHandler.\n *\n * The internal buffer structure includes an incoming buffer array, and a outgoing\n * buffer array. The incoming buffer array includes the \"empty\" buffers can be filled\n * with new incoming data. The outgoing array includes the filled buffers to be\n * handled by outgoingHandler. Every above buffer size is defined by parameter bufferSize.\n *\n * NUM_OF_ALL_BUFFERS = BUFFERS_IN_INCOMING + BUFFERS_IN_OUTGOING + BUFFERS_UNDER_HANDLING\n *\n * NUM_OF_ALL_BUFFERS lesser than or equal to maxBuffers\n *\n * PERFORMANCE IMPROVEMENT TIPS:\n * 1. Input stream highWaterMark is better to set a same value with bufferSize\n *    parameter, which will avoid Buffer.concat() operations.\n * 2. concurrency should set a smaller value than maxBuffers, which is helpful to\n *    reduce the possibility when a outgoing handler waits for the stream data.\n *    in this situation, outgoing handlers are blocked.\n *    Outgoing queue shouldn't be empty.\n */\nexport class BufferScheduler {\n  /**\n   * Size of buffers in incoming and outgoing queues. This class will try to align\n   * data read from Readable stream into buffer chunks with bufferSize defined.\n   */\n  private readonly bufferSize: number;\n\n  /**\n   * How many buffers can be created or maintained.\n   */\n  private readonly maxBuffers: number;\n\n  /**\n   * A Node.js Readable stream.\n   */\n  private readonly readable: Readable;\n\n  /**\n   * OutgoingHandler is an async function triggered by BufferScheduler when there\n   * are available buffers in outgoing array.\n   */\n  private readonly outgoingHandler: OutgoingHandler;\n\n  /**\n   * An internal event emitter.\n   */\n  private readonly emitter: EventEmitter = new EventEmitter();\n\n  /**\n   * Concurrency of executing outgoingHandlers. (0 lesser than concurrency lesser than or equal to maxBuffers)\n   */\n  private readonly concurrency: number;\n\n  /**\n   * An internal offset marker to track data offset in bytes of next outgoingHandler.\n   */\n  private offset: number = 0;\n\n  /**\n   * An internal marker to track whether stream is end.\n   */\n  private isStreamEnd: boolean = false;\n\n  /**\n   * An internal marker to track whether stream or outgoingHandler returns error.\n   */\n  private isError: boolean = false;\n\n  /**\n   * How many handlers are executing.\n   */\n  private executingOutgoingHandlers: number = 0;\n\n  /**\n   * Encoding of the input Readable stream which has string data type instead of Buffer.\n   */\n  private encoding?: BufferEncoding;\n\n  /**\n   * How many buffers have been allocated.\n   */\n  private numBuffers: number = 0;\n\n  /**\n   * Because this class doesn't know how much data every time stream pops, which\n   * is defined by highWaterMarker of the stream. So BufferScheduler will cache\n   * data received from the stream, when data in unresolvedDataArray exceeds the\n   * blockSize defined, it will try to concat a blockSize of buffer, fill into available\n   * buffers from incoming and push to outgoing array.\n   */\n  private unresolvedDataArray: Buffer[] = [];\n\n  /**\n   * How much data consisted in unresolvedDataArray.\n   */\n  private unresolvedLength: number = 0;\n\n  /**\n   * The array includes all the available buffers can be used to fill data from stream.\n   */\n  private incoming: PooledBuffer[] = [];\n\n  /**\n   * The array (queue) includes all the buffers filled from stream data.\n   */\n  private outgoing: PooledBuffer[] = [];\n\n  /**\n   * Creates an instance of BufferScheduler.\n   *\n   * @param readable - A Node.js Readable stream\n   * @param bufferSize - Buffer size of every maintained buffer\n   * @param maxBuffers - How many buffers can be allocated\n   * @param outgoingHandler - An async function scheduled to be\n   *                                          triggered when a buffer fully filled\n   *                                          with stream data\n   * @param concurrency - Concurrency of executing outgoingHandlers (>0)\n   * @param encoding - [Optional] Encoding of Readable stream when it's a string stream\n   */\n  constructor(\n    readable: Readable,\n    bufferSize: number,\n    maxBuffers: number,\n    outgoingHandler: OutgoingHandler,\n    concurrency: number,\n    encoding?: BufferEncoding\n  ) {\n    if (bufferSize <= 0) {\n      throw new RangeError(`bufferSize must be larger than 0, current is ${bufferSize}`);\n    }\n\n    if (maxBuffers <= 0) {\n      throw new RangeError(`maxBuffers must be larger than 0, current is ${maxBuffers}`);\n    }\n\n    if (concurrency <= 0) {\n      throw new RangeError(`concurrency must be larger than 0, current is ${concurrency}`);\n    }\n\n    this.bufferSize = bufferSize;\n    this.maxBuffers = maxBuffers;\n    this.readable = readable;\n    this.outgoingHandler = outgoingHandler;\n    this.concurrency = concurrency;\n    this.encoding = encoding;\n  }\n\n  /**\n   * Start the scheduler, will return error when stream of any of the outgoingHandlers\n   * returns error.\n   *\n   */\n  public async do(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      this.readable.on(\"data\", (data) => {\n        data = typeof data === \"string\" ? Buffer.from(data, this.encoding) : data;\n        this.appendUnresolvedData(data);\n\n        if (!this.resolveData()) {\n          this.readable.pause();\n        }\n      });\n\n      this.readable.on(\"error\", (err) => {\n        this.emitter.emit(\"error\", err);\n      });\n\n      this.readable.on(\"end\", () => {\n        this.isStreamEnd = true;\n        this.emitter.emit(\"checkEnd\");\n      });\n\n      this.emitter.on(\"error\", (err) => {\n        this.isError = true;\n        this.readable.pause();\n        reject(err);\n      });\n\n      this.emitter.on(\"checkEnd\", () => {\n        if (this.outgoing.length > 0) {\n          this.triggerOutgoingHandlers();\n          return;\n        }\n\n        if (this.isStreamEnd && this.executingOutgoingHandlers === 0) {\n          if (this.unresolvedLength > 0 && this.unresolvedLength < this.bufferSize) {\n            const buffer = this.shiftBufferFromUnresolvedDataArray();\n            this.outgoingHandler(() => buffer.getReadableStream(), buffer.size, this.offset)\n              .then(resolve)\n              .catch(reject);\n          } else if (this.unresolvedLength >= this.bufferSize) {\n            return;\n          } else {\n            resolve();\n          }\n        }\n      });\n    });\n  }\n\n  /**\n   * Insert a new data into unresolved array.\n   *\n   * @param data -\n   */\n  private appendUnresolvedData(data: Buffer) {\n    this.unresolvedDataArray.push(data);\n    this.unresolvedLength += data.length;\n  }\n\n  /**\n   * Try to shift a buffer with size in blockSize. The buffer returned may be less\n   * than blockSize when data in unresolvedDataArray is less than bufferSize.\n   *\n   */\n  private shiftBufferFromUnresolvedDataArray(buffer?: PooledBuffer): PooledBuffer {\n    if (!buffer) {\n      buffer = new PooledBuffer(this.bufferSize, this.unresolvedDataArray, this.unresolvedLength);\n    } else {\n      buffer.fill(this.unresolvedDataArray, this.unresolvedLength);\n    }\n\n    this.unresolvedLength -= buffer.size;\n    return buffer;\n  }\n\n  /**\n   * Resolve data in unresolvedDataArray. For every buffer with size in blockSize\n   * shifted, it will try to get (or allocate a buffer) from incoming, and fill it,\n   * then push it into outgoing to be handled by outgoing handler.\n   *\n   * Return false when available buffers in incoming are not enough, else true.\n   *\n   * @returns Return false when buffers in incoming are not enough, else true.\n   */\n  private resolveData(): boolean {\n    while (this.unresolvedLength >= this.bufferSize) {\n      let buffer: PooledBuffer;\n\n      if (this.incoming.length > 0) {\n        buffer = this.incoming.shift()!;\n        this.shiftBufferFromUnresolvedDataArray(buffer);\n      } else {\n        if (this.numBuffers < this.maxBuffers) {\n          buffer = this.shiftBufferFromUnresolvedDataArray();\n          this.numBuffers++;\n        } else {\n          // No available buffer, wait for buffer returned\n          return false;\n        }\n      }\n\n      this.outgoing.push(buffer);\n      this.triggerOutgoingHandlers();\n    }\n    return true;\n  }\n\n  /**\n   * Try to trigger a outgoing handler for every buffer in outgoing. Stop when\n   * concurrency reaches.\n   */\n  private async triggerOutgoingHandlers() {\n    let buffer: PooledBuffer | undefined;\n    do {\n      if (this.executingOutgoingHandlers >= this.concurrency) {\n        return;\n      }\n\n      buffer = this.outgoing.shift();\n      if (buffer) {\n        this.triggerOutgoingHandler(buffer);\n      }\n    } while (buffer);\n  }\n\n  /**\n   * Trigger a outgoing handler for a buffer shifted from outgoing.\n   *\n   * @param buffer -\n   */\n  private async triggerOutgoingHandler(buffer: PooledBuffer): Promise<any> {\n    const bufferLength = buffer.size;\n\n    this.executingOutgoingHandlers++;\n    this.offset += bufferLength;\n\n    try {\n      await this.outgoingHandler(\n        () => buffer.getReadableStream(),\n        bufferLength,\n        this.offset - bufferLength\n      );\n    } catch (err) {\n      this.emitter.emit(\"error\", err);\n      return;\n    }\n\n    this.executingOutgoingHandlers--;\n    this.reuseBuffer(buffer);\n    this.emitter.emit(\"checkEnd\");\n  }\n\n  /**\n   * Return buffer used by outgoing handler into incoming.\n   *\n   * @param buffer -\n   */\n  private reuseBuffer(buffer: PooledBuffer) {\n    this.incoming.push(buffer);\n    if (!this.isError && this.resolveData() && !this.isStreamEnd) {\n      this.readable.resume();\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { UserDelegationKey } from \"../models\";\nimport { createHmac } from \"crypto\";\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * UserDelegationKeyCredential is only used for generation of user delegation SAS.\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-user-delegation-sas\n */\nexport class UserDelegationKeyCredential {\n  /**\n   * Azure Storage account name; readonly.\n   */\n  public readonly accountName: string;\n\n  /**\n   * Azure Storage user delegation key; readonly.\n   */\n  public readonly userDelegationKey: UserDelegationKey;\n\n  /**\n   * Key value in Buffer type.\n   */\n  private readonly key: Buffer;\n\n  /**\n   * Creates an instance of UserDelegationKeyCredential.\n   * @param accountName -\n   * @param userDelegationKey -\n   */\n  constructor(accountName: string, userDelegationKey: UserDelegationKey) {\n    this.accountName = accountName;\n    this.userDelegationKey = userDelegationKey;\n    this.key = Buffer.from(userDelegationKey.value, \"base64\");\n  }\n\n  /**\n   * Generates a hash signature for an HTTP request or for a SAS.\n   *\n   * @param stringToSign -\n   */\n  public computeHMACSHA256(stringToSign: string): string {\n    // console.log(`stringToSign: ${JSON.stringify(stringToSign)}`);\n\n    return createHmac(\"sha256\", this.key)\n      .update(stringToSign, \"utf8\")\n      .digest(\"base64\");\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS. Setting\n * a value to true means that any SAS which uses these permissions will grant permissions for that operation. Once all\n * the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link DataLakeSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class DataLakeSASPermissions {\n  /**\n   * Creates a {@link DataLakeSASPermissions} from the specified permissions string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid permission.\n   *\n   * @param permissions -\n   */\n  public static parse(permissions: string): DataLakeSASPermissions {\n    const blobSASPermissions = new DataLakeSASPermissions();\n\n    for (const char of permissions) {\n      switch (char) {\n        case \"r\":\n          blobSASPermissions.read = true;\n          break;\n        case \"a\":\n          blobSASPermissions.add = true;\n          break;\n        case \"c\":\n          blobSASPermissions.create = true;\n          break;\n        case \"w\":\n          blobSASPermissions.write = true;\n          break;\n        case \"d\":\n          blobSASPermissions.delete = true;\n          break;\n        case \"m\":\n          blobSASPermissions.move = true;\n          break;\n        case \"e\":\n          blobSASPermissions.execute = true;\n          break;\n        case \"o\":\n          blobSASPermissions.manageOwnership = true;\n          break;\n        case \"p\":\n          blobSASPermissions.manageAccessControl = true;\n          break;\n        default:\n          throw new RangeError(`Invalid permission: ${char}`);\n      }\n    }\n\n    return blobSASPermissions;\n  }\n\n  /**\n   * Specifies Read access granted.\n   */\n  public read: boolean = false;\n\n  /**\n   * Specifies Add access granted.\n   */\n  public add: boolean = false;\n\n  /**\n   * Specifies Create access granted.\n   */\n  public create: boolean = false;\n\n  /**\n   * Specifies Write access granted.\n   */\n  public write: boolean = false;\n\n  /**\n   * Specifies Delete access granted.\n   */\n  public delete: boolean = false;\n\n  /**\n   * Specifies Move access granted.\n   */\n  public move: boolean = false;\n\n  /**\n   * Specifies Execute access granted.\n   */\n  public execute: boolean = false;\n\n  /**\n   * Specifies Ownership access granted, which allows the caller to set owner, owning group,\n   * or act as the owner when renaming or deleting a blob (file or directory) within a folder\n   * that has the sticky bit set.\n   */\n  public manageOwnership: boolean = false;\n\n  /**\n   * Specifies Permission access granted, which allows the caller to set permissions and\n   * POSIX ACLs on blobs (files and directories).\n   */\n  public manageAccessControl: boolean = false;\n\n  /**\n   * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n   * order accepted by the service.\n   *\n   * @returns A string which represents the DataLakeSASPermissions\n   */\n  public toString(): string {\n    const permissions: string[] = [];\n    if (this.read) {\n      permissions.push(\"r\");\n    }\n    if (this.add) {\n      permissions.push(\"a\");\n    }\n    if (this.create) {\n      permissions.push(\"c\");\n    }\n    if (this.write) {\n      permissions.push(\"w\");\n    }\n    if (this.delete) {\n      permissions.push(\"d\");\n    }\n    if (this.move) {\n      permissions.push(\"m\");\n    }\n    if (this.execute) {\n      permissions.push(\"e\");\n    }\n    if (this.manageOwnership) {\n      permissions.push(\"o\");\n    }\n    if (this.manageAccessControl) {\n      permissions.push(\"p\");\n    }\n    return permissions.join(\"\");\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a container.\n * Setting a value to true means that any SAS which uses these permissions will grant permissions for that operation.\n * Once all the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link DataLakeSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class FileSystemSASPermissions {\n  /**\n   * Creates an {@link FileSystemSASPermissions} from the specified permissions string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid permission.\n   *\n   * @param permissions -\n   */\n  public static parse(permissions: string): FileSystemSASPermissions {\n    const containerSASPermissions = new FileSystemSASPermissions();\n\n    for (const char of permissions) {\n      switch (char) {\n        case \"r\":\n          containerSASPermissions.read = true;\n          break;\n        case \"a\":\n          containerSASPermissions.add = true;\n          break;\n        case \"c\":\n          containerSASPermissions.create = true;\n          break;\n        case \"w\":\n          containerSASPermissions.write = true;\n          break;\n        case \"d\":\n          containerSASPermissions.delete = true;\n          break;\n        case \"l\":\n          containerSASPermissions.list = true;\n          break;\n        case \"m\":\n          containerSASPermissions.move = true;\n          break;\n        case \"e\":\n          containerSASPermissions.execute = true;\n          break;\n        case \"o\":\n          containerSASPermissions.manageOwnership = true;\n          break;\n        case \"p\":\n          containerSASPermissions.manageAccessControl = true;\n          break;\n        default:\n          throw new RangeError(`Invalid permission ${char}`);\n      }\n    }\n\n    return containerSASPermissions;\n  }\n\n  /**\n   * Specifies Read access granted.\n   */\n  public read: boolean = false;\n\n  /**\n   * Specifies Add access granted.\n   */\n  public add: boolean = false;\n\n  /**\n   * Specifies Create access granted.\n   */\n  public create: boolean = false;\n\n  /**\n   * Specifies Write access granted.\n   */\n  public write: boolean = false;\n\n  /**\n   * Specifies Delete access granted.\n   */\n  public delete: boolean = false;\n\n  /**\n   * Specifies List access granted.\n   */\n  public list: boolean = false;\n\n  /**\n   * Specifies Move access granted.\n   */\n  public move: boolean = false;\n\n  /**\n   * Specifies Execute access granted.\n   */\n  public execute: boolean = false;\n\n  /**\n   * Specifies Ownership access granted, which allows the caller to set owner, owning group,\n   * or act as the owner when renaming or deleting a blob (file or directory) within a folder\n   * that has the sticky bit set.\n   */\n  public manageOwnership: boolean = false;\n\n  /**\n   * Specifies Permission access granted, which allows the caller to set permissions and\n   * POSIX ACLs on blobs (files and directories).\n   */\n  public manageAccessControl: boolean = false;\n\n  /**\n   * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n   * order accepted by the service.\n   *\n   * The order of the characters should be as specified here to ensure correctness.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n   *\n   */\n  public toString(): string {\n    const permissions: string[] = [];\n    if (this.read) {\n      permissions.push(\"r\");\n    }\n    if (this.add) {\n      permissions.push(\"a\");\n    }\n    if (this.create) {\n      permissions.push(\"c\");\n    }\n    if (this.write) {\n      permissions.push(\"w\");\n    }\n    if (this.delete) {\n      permissions.push(\"d\");\n    }\n    if (this.list) {\n      permissions.push(\"l\");\n    }\n    if (this.move) {\n      permissions.push(\"m\");\n    }\n    if (this.execute) {\n      permissions.push(\"e\");\n    }\n    if (this.manageOwnership) {\n      permissions.push(\"o\");\n    }\n    if (this.manageAccessControl) {\n      permissions.push(\"p\");\n    }\n    return permissions.join(\"\");\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Allowed IP range for a SAS.\n */\nexport interface SasIPRange {\n  /**\n   * Starting IP address in the IP range.\n   * If end IP doesn't provide, start IP will the only IP allowed.\n   */\n  start: string;\n  /**\n   * Optional. IP address that ends the IP range.\n   * If not provided, start IP will the only IP allowed.\n   */\n  end?: string;\n}\n\n/**\n * Generate SasIPRange format string. For example:\n *\n * \"8.8.8.8\" or \"1.1.1.1-255.255.255.255\"\n *\n * @param ipRange -\n */\nexport function ipRangeToString(ipRange: SasIPRange): string {\n  return ipRange.end ? `${ipRange.start}-${ipRange.end}` : ipRange.start;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { UserDelegationKey } from \"../models\";\nimport { ipRangeToString, SasIPRange } from \"./SasIPRange\";\nimport { truncatedISO8061Date } from \"../utils/utils.common\";\n\n/**\n * Protocols for generated SAS.\n */\nexport enum SASProtocol {\n  /**\n   * Protocol that allows HTTPS only\n   */\n  Https = \"https\",\n\n  /**\n   * Protocol that allows both HTTPS and HTTP\n   */\n  HttpsAndHttp = \"https,http\"\n}\n\n/**\n * Options to construct {@link SASQueryParameters}.\n */\nexport interface SASQueryParametersOptions {\n  /**\n   * Optional only when identifier is provided.\n   * Please refer to {@link AccountSASPermissions}, {@link BlobSASPermissions}, or {@link ContainerSASPermissions} for\n   * more details.\n   */\n  permissions?: string;\n  /**\n   * Optional. The storage services being accessed (only for Account SAS). Please refer to {@link AccountSASServices}\n   * for more details.\n   */\n  services?: string;\n  /**\n   * Optional. The storage resource types being accessed (only for Account SAS). Please refer to\n   * {@link AccountSASResourceTypes} for more details.\n   */\n  resourceTypes?: string;\n  /**\n   * Optional. The allowed HTTP protocol(s).\n   */\n  protocol?: SASProtocol;\n  /**\n   * Optional. The start time for this SAS token.\n   */\n  startsOn?: Date;\n  /**\n   * Optional only when identifier is provided. The expiry time for this SAS token.\n   */\n  expiresOn?: Date;\n  /**\n   * Optional. IP ranges allowed in this SAS.\n   */\n  ipRange?: SasIPRange;\n  /**\n   * Optional. The signed identifier (only for {@link BlobSASSignatureValues}).\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/establishing-a-stored-access-policy\n   */\n  identifier?: string;\n  /**\n   * Optional. Specifies which resources are accessible via the SAS (only for {@link BlobSASSignatureValues}).\n   * @see https://docs.microsoft.com/rest/api/storageservices/create-service-sas#specifying-the-signed-resource-blob-service-only\n   */\n  resource?: string;\n  /**\n   * Value for cache-control header in Blob/File Service SAS.\n   */\n  cacheControl?: string;\n  /**\n   * Value for content-disposition header in Blob/File Service SAS.\n   */\n  contentDisposition?: string;\n  /**\n   * Value for content-encoding header in Blob/File Service SAS.\n   */\n  contentEncoding?: string;\n  /**\n   * Value for content-length header in Blob/File Service SAS.\n   */\n  contentLanguage?: string;\n  /**\n   * Value for content-type header in Blob/File Service SAS.\n   */\n  contentType?: string;\n  /**\n   * User delegation key properties.\n   */\n  userDelegationKey?: UserDelegationKey;\n  /**\n   * Indicate the depth of the directory specified in the canonicalizedresource field of the string-to-sign.\n   * The depth of the directory is the number of directories beneath the root folder.\n   */\n  directoryDepth?: number;\n  /**\n   * Authorized AAD Object ID in GUID format. The AAD Object ID of a user authorized by the owner of the User Delegation Key\n   * to perform the action granted by the SAS. The Azure Storage service will ensure that the owner of the user delegation key\n   * has the required permissions before granting access but no additional permission check for the user specified in\n   * this value will be performed. This cannot be used in conjuction with {@link signedUnauthorizedUserObjectId}.\n   * This is only used for User Delegation SAS.\n   */\n  preauthorizedAgentObjectId?: string;\n  /**\n   * Unauthorized AAD Object ID in GUID format. The AAD Object ID of a user that is assumed to be unauthorized by the owner of the User Delegation Key.\n   * The Azure Storage Service will perform an additional POSIX ACL check to determine if the user is authorized to perform the requested operation.\n   * This cannot be used in conjuction with {@link signedAuthorizedUserObjectId}. This is only used for User Delegation SAS.\n   */\n  agentObjectId?: string;\n  /**\n   * A GUID value that will be logged in the storage diagnostic logs and can be used to correlate SAS generation with storage resource access.\n   * This is only used for User Delegation SAS.\n   */\n  correlationId?: string;\n}\n\n/**\n * Represents the components that make up an Azure Storage SAS' query parameters. This type is not constructed directly\n * by the user; it is only generated by the {@link AccountSASSignatureValues} and {@link BlobSASSignatureValues}\n * types. Once generated, it can be encoded into a {@link String} and appended to a URL directly (though caution should\n * be taken here in case there are existing query parameters, which might affect the appropriate means of appending\n * these query parameters).\n *\n * NOTE: Instances of this class are immutable.\n */\nexport class SASQueryParameters {\n  /**\n   * The storage API version.\n   */\n  public readonly version: string;\n\n  /**\n   * Optional. The allowed HTTP protocol(s).\n   */\n  public readonly protocol?: SASProtocol;\n\n  /**\n   * Optional. The start time for this SAS token.\n   */\n  public readonly startsOn?: Date;\n\n  /**\n   * Optional only when identifier is provided. The expiry time for this SAS token.\n   */\n  public readonly expiresOn?: Date;\n\n  /**\n   * Optional only when identifier is provided.\n   * Please refer to {@link AccountSASPermissions}, {@link BlobSASPermissions}, or {@link ContainerSASPermissions} for\n   * more details.\n   */\n  public readonly permissions?: string;\n\n  /**\n   * Optional. The storage services being accessed (only for Account SAS). Please refer to {@link AccountSASServices}\n   * for more details.\n   */\n  public readonly services?: string;\n\n  /**\n   * Optional. The storage resource types being accessed (only for Account SAS). Please refer to\n   * {@link AccountSASResourceTypes} for more details.\n   */\n  public readonly resourceTypes?: string;\n\n  /**\n   * Optional. The signed identifier (only for {@link BlobSASSignatureValues}).\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/establishing-a-stored-access-policy\n   */\n  public readonly identifier?: string;\n\n  /**\n   * Optional. Specifies which resources are accessible via the SAS (only for {@link BlobSASSignatureValues}).\n   * @see https://docs.microsoft.com/rest/api/storageservices/create-service-sas#specifying-the-signed-resource-blob-service-only\n   */\n  public readonly resource?: string;\n\n  /**\n   * The signature for the SAS token.\n   */\n  public readonly signature: string;\n\n  /**\n   * Value for cache-control header in Blob/File Service SAS.\n   */\n  public readonly cacheControl?: string;\n\n  /**\n   * Value for content-disposition header in Blob/File Service SAS.\n   */\n  public readonly contentDisposition?: string;\n\n  /**\n   * Value for content-encoding header in Blob/File Service SAS.\n   */\n  public readonly contentEncoding?: string;\n\n  /**\n   * Value for content-length header in Blob/File Service SAS.\n   */\n  public readonly contentLanguage?: string;\n\n  /**\n   * Value for content-type header in Blob/File Service SAS.\n   */\n  public readonly contentType?: string;\n\n  /**\n   * Inner value of getter ipRange.\n   */\n  private readonly ipRangeInner?: SasIPRange;\n\n  /**\n   * The Azure Active Directory object ID in GUID format.\n   * Property of user delegation key.\n   */\n  private readonly signedOid?: string;\n\n  /**\n   * The Azure Active Directory tenant ID in GUID format.\n   * Property of user delegation key.\n   */\n  private readonly signedTenantId?: string;\n\n  /**\n   * The date-time the key is active.\n   * Property of user delegation key.\n   */\n  private readonly signedStartsOn?: Date;\n\n  /**\n   * The date-time the key expires.\n   * Property of user delegation key.\n   */\n  private readonly signedExpiresOn?: Date;\n\n  /**\n   * Abbreviation of the Azure Storage service that accepts the user delegation key.\n   * Property of user delegation key.\n   */\n  private readonly signedService?: string;\n\n  /**\n   * The service version that created the user delegation key.\n   * Property of user delegation key.\n   */\n  private readonly signedVersion?: string;\n\n  /**\n   * Indicate the depth of the directory specified in the canonicalizedresource field of the string-to-sign.\n   * The depth of the directory is the number of directories beneath the root folder.\n   */\n  public readonly directoryDepth?: number;\n\n  /**\n   * Authorized AAD Object ID in GUID format. The AAD Object ID of a user authorized by the owner of the User Delegation Key\n   * to perform the action granted by the SAS. The Azure Storage service will ensure that the owner of the user delegation key\n   * has the required permissions before granting access but no additional permission check for the user specified in\n   * this value will be performed. This cannot be used in conjuction with {@link signedUnauthorizedUserObjectId}.\n   * This is only used for User Delegation SAS.\n   */\n  public readonly preauthorizedAgentObjectId?: string;\n\n  /**\n   * Unauthorized AAD Object ID in GUID format. The AAD Object ID of a user that is assumed to be unauthorized by the owner of the User Delegation Key.\n   * The Azure Storage Service will perform an additional POSIX ACL check to determine if the user is authorized to perform the requested operation.\n   * This cannot be used in conjuction with {@link signedAuthorizedUserObjectId}.\n   * This is only used for User Delegation SAS.\n   */\n  public readonly agentObjectId?: string;\n\n  /**\n   * A GUID value that will be logged in the storage diagnostic logs and can be used to correlate SAS generation with storage resource access.\n   * This is only used for User Delegation SAS.\n   */\n  public readonly correlationId?: string;\n\n  /**\n   * Optional. IP range allowed for this SAS.\n   *\n   * @readonly\n   */\n  public get ipRange(): SasIPRange | undefined {\n    if (this.ipRangeInner) {\n      return {\n        end: this.ipRangeInner.end,\n        start: this.ipRangeInner.start\n      };\n    }\n    return undefined;\n  }\n\n  /**\n   * Creates an instance of SASQueryParameters.\n   *\n   * @param version - Representing the storage version\n   * @param signature - Representing the signature for the SAS token\n   * @param permissions - Representing the storage permissions\n   * @param services - Representing the storage services being accessed (only for Account SAS)\n   * @param resourceTypes - Representing the storage resource types being accessed (only for Account SAS)\n   * @param protocol - Representing the allowed HTTP protocol(s)\n   * @param startsOn - Representing the start time for this SAS token\n   * @param expiresOn - Representing the expiry time for this SAS token\n   * @param ipRange - Representing the range of valid IP addresses for this SAS token\n   * @param identifier - Representing the signed identifier (only for Service SAS)\n   * @param resource - Representing the storage container or blob (only for Service SAS)\n   * @param cacheControl - Representing the cache-control header (only for Blob/File Service SAS)\n   * @param contentDisposition - Representing the content-disposition header (only for Blob/File Service SAS)\n   * @param contentEncoding - Representing the content-encoding header (only for Blob/File Service SAS)\n   * @param contentLanguage - Representing the content-language header (only for Blob/File Service SAS)\n   * @param contentType - Representing the content-type header (only for Blob/File Service SAS)\n   * @param userDelegationKey - Representing the user delegation key properties\n   * @param preauthorizedAgentObjectId - Representing the authorized AAD Object ID (only for User Delegation SAS)\n   * @param agentObjectId - Representing the unauthorized AAD Object ID (only for User Delegation SAS)\n   * @param correlationId - Representing the correlation ID (only for User Delegation SAS)\n   */\n  constructor(\n    version: string,\n    signature: string,\n    permissions?: string,\n    services?: string,\n    resourceTypes?: string,\n    protocol?: SASProtocol,\n    startsOn?: Date,\n    expiresOn?: Date,\n    ipRange?: SasIPRange,\n    identifier?: string,\n    resource?: string,\n    cacheControl?: string,\n    contentDisposition?: string,\n    contentEncoding?: string,\n    contentLanguage?: string,\n    contentType?: string,\n    userDelegationKey?: UserDelegationKey,\n    directoryDepth?: number,\n    preauthorizedAgentObjectId?: string,\n    agentObjectId?: string,\n    correlationId?: string\n  );\n\n  /**\n   * Creates an instance of SASQueryParameters.\n   *\n   * @param version - Representing the storage version\n   * @param signature - Representing the signature for the SAS token\n   * @param options - Optional. Options to construct the SASQueryParameters.\n   */\n  constructor(version: string, signature: string, options?: SASQueryParametersOptions);\n\n  constructor(\n    version: string,\n    signature: string,\n    permissionsOrOptions?: string | SASQueryParametersOptions,\n    services?: string,\n    resourceTypes?: string,\n    protocol?: SASProtocol,\n    startsOn?: Date,\n    expiresOn?: Date,\n    ipRange?: SasIPRange,\n    identifier?: string,\n    resource?: string,\n    cacheControl?: string,\n    contentDisposition?: string,\n    contentEncoding?: string,\n    contentLanguage?: string,\n    contentType?: string,\n    userDelegationKey?: UserDelegationKey,\n    directoryDepth?: number,\n    preauthorizedAgentObjectId?: string,\n    agentObjectId?: string,\n    correlationId?: string\n  ) {\n    this.version = version;\n    this.signature = signature;\n\n    if (permissionsOrOptions !== undefined && typeof permissionsOrOptions !== \"string\") {\n      // SASQueryParametersOptions\n      const options = permissionsOrOptions;\n      this.services = options.services;\n      this.resourceTypes = options.resourceTypes;\n      this.expiresOn = options.expiresOn;\n      this.permissions = options.permissions;\n      this.protocol = options.protocol;\n      this.startsOn = options.startsOn;\n      this.ipRangeInner = options.ipRange;\n      this.identifier = options.identifier;\n      this.resource = options.resource;\n      this.cacheControl = options.cacheControl;\n      this.contentDisposition = options.contentDisposition;\n      this.contentEncoding = options.contentEncoding;\n      this.contentLanguage = options.contentLanguage;\n      this.contentType = options.contentType;\n      this.directoryDepth = options.directoryDepth;\n      this.preauthorizedAgentObjectId = options.preauthorizedAgentObjectId;\n      this.agentObjectId = options.agentObjectId;\n      this.correlationId = options.correlationId;\n\n      if (options.userDelegationKey) {\n        this.signedOid = options.userDelegationKey.signedObjectId;\n        this.signedTenantId = options.userDelegationKey.signedTenantId;\n        this.signedStartsOn = options.userDelegationKey.signedStartsOn;\n        this.signedExpiresOn = options.userDelegationKey.signedExpiresOn;\n        this.signedService = options.userDelegationKey.signedService;\n        this.signedVersion = options.userDelegationKey.signedVersion;\n      }\n    } else {\n      this.services = services;\n      this.resourceTypes = resourceTypes;\n      this.expiresOn = expiresOn;\n      this.permissions = permissionsOrOptions;\n      this.protocol = protocol;\n      this.startsOn = startsOn;\n      this.ipRangeInner = ipRange;\n      this.identifier = identifier;\n      this.resource = resource;\n      this.cacheControl = cacheControl;\n      this.contentDisposition = contentDisposition;\n      this.contentEncoding = contentEncoding;\n      this.contentLanguage = contentLanguage;\n      this.contentType = contentType;\n      this.directoryDepth = directoryDepth;\n      this.preauthorizedAgentObjectId = preauthorizedAgentObjectId;\n      this.agentObjectId = agentObjectId;\n      this.correlationId = correlationId;\n\n      if (userDelegationKey) {\n        this.signedOid = userDelegationKey.signedObjectId;\n        this.signedTenantId = userDelegationKey.signedTenantId;\n        this.signedStartsOn = userDelegationKey.signedStartsOn;\n        this.signedExpiresOn = userDelegationKey.signedExpiresOn;\n        this.signedService = userDelegationKey.signedService;\n        this.signedVersion = userDelegationKey.signedVersion;\n      }\n    }\n  }\n\n  /**\n   * Encodes all SAS query parameters into a string that can be appended to a URL.\n   *\n   */\n  public toString(): string {\n    const params: string[] = [\n      \"sv\",\n      \"ss\",\n      \"srt\",\n      \"spr\",\n      \"st\",\n      \"se\",\n      \"sip\",\n      \"si\",\n      \"skoid\", // Signed object ID\n      \"sktid\", // Signed tenant ID\n      \"skt\", // Signed key start time\n      \"ske\", // Signed key expiry time\n      \"sks\", // Signed key service\n      \"skv\", // Signed key version\n      \"sr\",\n      \"sp\",\n      \"sig\",\n      \"rscc\",\n      \"rscd\",\n      \"rsce\",\n      \"rscl\",\n      \"rsct\",\n      \"sdd\",\n      \"saoid\",\n      \"suoid\",\n      \"scid\"\n    ];\n    const queries: string[] = [];\n\n    for (const param of params) {\n      switch (param) {\n        case \"sv\":\n          this.tryAppendQueryParameter(queries, param, this.version);\n          break;\n        case \"ss\":\n          this.tryAppendQueryParameter(queries, param, this.services);\n          break;\n        case \"srt\":\n          this.tryAppendQueryParameter(queries, param, this.resourceTypes);\n          break;\n        case \"spr\":\n          this.tryAppendQueryParameter(queries, param, this.protocol);\n          break;\n        case \"st\":\n          this.tryAppendQueryParameter(\n            queries,\n            param,\n            this.startsOn ? truncatedISO8061Date(this.startsOn, false) : undefined\n          );\n          break;\n        case \"se\":\n          this.tryAppendQueryParameter(\n            queries,\n            param,\n            this.expiresOn ? truncatedISO8061Date(this.expiresOn, false) : undefined\n          );\n          break;\n        case \"sip\":\n          this.tryAppendQueryParameter(\n            queries,\n            param,\n            this.ipRange ? ipRangeToString(this.ipRange) : undefined\n          );\n          break;\n        case \"si\":\n          this.tryAppendQueryParameter(queries, param, this.identifier);\n          break;\n        case \"skoid\": // Signed object ID\n          this.tryAppendQueryParameter(queries, param, this.signedOid);\n          break;\n        case \"sktid\": // Signed tenant ID\n          this.tryAppendQueryParameter(queries, param, this.signedTenantId);\n          break;\n        case \"skt\": // Signed key start time\n          this.tryAppendQueryParameter(\n            queries,\n            param,\n            this.signedStartsOn ? truncatedISO8061Date(this.signedStartsOn, false) : undefined\n          );\n          break;\n        case \"ske\": // Signed key expiry time\n          this.tryAppendQueryParameter(\n            queries,\n            param,\n            this.signedExpiresOn ? truncatedISO8061Date(this.signedExpiresOn, false) : undefined\n          );\n          break;\n        case \"sks\": // Signed key service\n          this.tryAppendQueryParameter(queries, param, this.signedService);\n          break;\n        case \"skv\": // Signed key version\n          this.tryAppendQueryParameter(queries, param, this.signedVersion);\n          break;\n        case \"sr\":\n          this.tryAppendQueryParameter(queries, param, this.resource);\n          break;\n        case \"sp\":\n          this.tryAppendQueryParameter(queries, param, this.permissions);\n          break;\n        case \"sig\":\n          this.tryAppendQueryParameter(queries, param, this.signature);\n          break;\n        case \"rscc\":\n          this.tryAppendQueryParameter(queries, param, this.cacheControl);\n          break;\n        case \"rscd\":\n          this.tryAppendQueryParameter(queries, param, this.contentDisposition);\n          break;\n        case \"rsce\":\n          this.tryAppendQueryParameter(queries, param, this.contentEncoding);\n          break;\n        case \"rscl\":\n          this.tryAppendQueryParameter(queries, param, this.contentLanguage);\n          break;\n        case \"rsct\":\n          this.tryAppendQueryParameter(queries, param, this.contentType);\n          break;\n        case \"sdd\":\n          this.tryAppendQueryParameter(queries, param, this.directoryDepth?.toString());\n          break;\n        case \"saoid\":\n          this.tryAppendQueryParameter(queries, param, this.preauthorizedAgentObjectId);\n          break;\n        case \"suoid\":\n          this.tryAppendQueryParameter(queries, param, this.agentObjectId);\n          break;\n        case \"scid\":\n          this.tryAppendQueryParameter(queries, param, this.correlationId);\n          break;\n      }\n    }\n    return queries.join(\"&\");\n  }\n\n  /**\n   * A private helper method used to filter and append query key/value pairs into an array.\n   *\n   * @param queries -\n   * @param key -\n   * @param value -\n   */\n  private tryAppendQueryParameter(queries: string[], key: string, value?: string): void {\n    if (!value) {\n      return;\n    }\n\n    key = encodeURIComponent(key);\n    value = encodeURIComponent(value);\n    if (key.length > 0 && value.length > 0) {\n      queries.push(`${key}=${value}`);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * This is a helper class to construct a string representing the permissions granted by a ServiceSAS to a directory.\n * Setting a value to true means that any SAS which uses these permissions will grant permissions for that operation.\n * Once all the values are set, this should be serialized with toString and set as the permissions field on a\n * {@link DataLakeSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class DirectorySASPermissions {\n  /**\n   * Creates an {@link DirectorySASPermissions} from the specified permissions string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid permission.\n   *\n   * @param permissions -\n   */\n  public static parse(permissions: string): DirectorySASPermissions {\n    const directorySASPermissions = new DirectorySASPermissions();\n\n    for (const char of permissions) {\n      switch (char) {\n        case \"r\":\n          directorySASPermissions.read = true;\n          break;\n        case \"a\":\n          directorySASPermissions.add = true;\n          break;\n        case \"c\":\n          directorySASPermissions.create = true;\n          break;\n        case \"w\":\n          directorySASPermissions.write = true;\n          break;\n        case \"d\":\n          directorySASPermissions.delete = true;\n          break;\n        case \"l\":\n          directorySASPermissions.list = true;\n          break;\n        case \"m\":\n          directorySASPermissions.move = true;\n          break;\n        case \"e\":\n          directorySASPermissions.execute = true;\n          break;\n        case \"o\":\n          directorySASPermissions.manageOwnership = true;\n          break;\n        case \"p\":\n          directorySASPermissions.manageAccessControl = true;\n          break;\n        default:\n          throw new RangeError(`Invalid permission ${char}`);\n      }\n    }\n\n    return directorySASPermissions;\n  }\n\n  /**\n   * Specifies Read access granted.\n   */\n  public read: boolean = false;\n\n  /**\n   * Specifies Add access granted.\n   */\n  public add: boolean = false;\n\n  /**\n   * Specifies Create access granted.\n   */\n  public create: boolean = false;\n\n  /**\n   * Specifies Write access granted.\n   */\n  public write: boolean = false;\n\n  /**\n   * Specifies Delete access granted.\n   */\n  public delete: boolean = false;\n\n  /**\n   * Specifies List access granted.\n   */\n  public list: boolean = false;\n\n  /**\n   * Specifies Move access granted.\n   */\n  public move: boolean = false;\n\n  /**\n   * Specifies Execute access granted.\n   */\n  public execute: boolean = false;\n\n  /**\n   * Specifies Ownership access granted, which allows the caller to set owner, owning group,\n   * or act as the owner when renaming or deleting a blob (file or directory) within a folder\n   * that has the sticky bit set.\n   */\n  public manageOwnership: boolean = false;\n\n  /**\n   * Specifies Permission access granted, which allows the caller to set permissions and\n   * POSIX ACLs on blobs (files and directories).\n   */\n  public manageAccessControl: boolean = false;\n\n  /**\n   * Converts the given permissions to a string. Using this method will guarantee the permissions are in an\n   * order accepted by the service.\n   *\n   * The order of the characters should be as specified here to ensure correctness.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n   *\n   */\n  public toString(): string {\n    const permissions: string[] = [];\n    if (this.read) {\n      permissions.push(\"r\");\n    }\n    if (this.add) {\n      permissions.push(\"a\");\n    }\n    if (this.create) {\n      permissions.push(\"c\");\n    }\n    if (this.write) {\n      permissions.push(\"w\");\n    }\n    if (this.delete) {\n      permissions.push(\"d\");\n    }\n    if (this.list) {\n      permissions.push(\"l\");\n    }\n    if (this.move) {\n      permissions.push(\"m\");\n    }\n    if (this.execute) {\n      permissions.push(\"e\");\n    }\n    if (this.manageOwnership) {\n      permissions.push(\"o\");\n    }\n    if (this.manageAccessControl) {\n      permissions.push(\"p\");\n    }\n    return permissions.join(\"\");\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { StorageSharedKeyCredential } from \"../credentials/StorageSharedKeyCredential\";\nimport { UserDelegationKeyCredential } from \"../credentials/UserDelegationKeyCredential\";\nimport { DataLakeSASPermissions } from \"./DataLakeSASPermissions\";\nimport { FileSystemSASPermissions } from \"./FileSystemSASPermissions\";\nimport { UserDelegationKey } from \"../models\";\nimport { ipRangeToString, SasIPRange } from \"./SasIPRange\";\nimport { SASProtocol, SASQueryParameters } from \"./SASQueryParameters\";\nimport { SERVICE_VERSION } from \"../utils/constants\";\nimport { truncatedISO8061Date } from \"../utils/utils.common\";\nimport { DirectorySASPermissions } from \"./DirectorySASPermissions\";\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * DataLakeSASSignatureValues is used to help generating Blob and DataLake service SAS tokens for containers, blobs, filesystem, directories and files.\n */\nexport interface DataLakeSASSignatureValues {\n  /**\n   * The version of the service this SAS will target. If not specified, it will default to the version targeted by the\n   * library.\n   */\n  version?: string;\n\n  /**\n   * Optional. SAS protocols, HTTPS only or HTTPSandHTTP\n   */\n  protocol?: SASProtocol;\n\n  /**\n   * Optional. When the SAS will take effect.\n   */\n  startsOn?: Date;\n\n  /**\n   * Optional only when identifier is provided. The time after which the SAS will no longer work.\n   */\n  expiresOn?: Date;\n\n  /**\n   * Optional only when identifier is provided.\n   * Please refer to {@link FileSystemSASPermissions}, {@link DirectorySASPermissions} or {@link DataLakeSASPermissions} depending on the resource\n   * being accessed for help constructing the permissions string.\n   */\n  permissions?: DataLakeSASPermissions | DirectorySASPermissions | FileSystemSASPermissions;\n\n  /**\n   * Optional. IP ranges allowed in this SAS.\n   */\n  ipRange?: SasIPRange;\n\n  /**\n   * The name of the file system the SAS user may access.\n   */\n  fileSystemName: string;\n\n  /**\n   * Optional. The path name of the directory or file SAS user may access. Required if snapshotTime is provided.\n   */\n  pathName?: string;\n\n  /**\n   * Optional. Beginning in version 2020-02-10, this value defines whether or not the {@link pathName} is a directory.\n   * If this value is set to true, the Path is a Directory for a Directory SAS. If set to false or default, the Path\n   * is a File Path for a File Path SAS.\n   */\n  isDirectory?: boolean;\n\n  /**\n   * Optional. Beginning in version 2020-02-10, indicate the depth of the directory specified in the canonicalizedresource field of the string-to-sign.\n   * The depth of the directory is the number of directories beneath the root folder.\n   */\n  directoryDepth?: number;\n\n  /**\n   * Optional. Beginning in version 2020-02-10, specifies the Authorized AAD Object Id in GUID format. The AAD Object ID of a user\n   * authorized by the owner of the user delegation key to perform the action granted by the SAS. The Azure Storage service will\n   * ensure that the owner of the user delegation key has the required permissions before granting access but no additional permission\n   * check for the user specified in this value will be performed. This cannot be used in conjuction with {@link agentObjectId}.\n   * This is only used for User Delegation SAS.\n   */\n  preauthorizedAgentObjectId?: string;\n\n  /**\n   * Optional. Beginning in version 2020-02-10, specifies the Unauthorized AAD Object Id in GUID format. The AAD Object Id of a user that is assumed\n   * to be unauthorized by the owner of the user delegation key. The Azure Storage Service will perform an additional POSIX ACL check to determine\n   * if the user is authorized to perform the requested operation. This cannot be used in conjuction with {@link preauthorizedAgentObjectId}.\n   * This is only used for User Delegation SAS.\n   */\n  agentObjectId?: string;\n\n  /**\n   * Optional. Beginning in version 2020-02-10, this is a GUID value that will be logged in the storage diagnostic logs and can be used to\n   * correlate SAS generation with storage resource access. This is only used for User Delegation SAS.\n   */\n  correlationId?: string;\n\n  /**\n   * Optional. Snapshot timestamp string the SAS user may access. Only supported from API version 2018-11-09.\n   */\n  snapshotTime?: string;\n\n  /**\n   * Optional. The name of the access policy on the file system this SAS references if any.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/establishing-a-stored-access-policy\n   */\n  identifier?: string;\n\n  /**\n   * Optional. The cache-control header for the SAS.\n   */\n  cacheControl?: string;\n\n  /**\n   * Optional. The content-disposition header for the SAS.\n   */\n  contentDisposition?: string;\n\n  /**\n   * Optional. The content-encoding header for the SAS.\n   */\n  contentEncoding?: string;\n\n  /**\n   * Optional. The content-language header for the SAS.\n   */\n  contentLanguage?: string;\n\n  /**\n   * Optional. The content-type header for the SAS.\n   */\n  contentType?: string;\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * Fill in the required details before running the following snippets.\n * @example\n * ```js\n * // Generate service level SAS for a file system\n * const containerSAS = generateDataLakeSASQueryParameters({\n *     fileSystemName, // Required\n *     permissions: ContainerSASPermissions.parse(\"racwdl\"), // Required\n *     startsOn: new Date(), // Optional\n *     expiresOn: new Date(new Date().valueOf() + 86400), // Required. Date type\n *     ipRange: { start: \"0.0.0.0\", end: \"255.255.255.255\" }, // Optional\n *     protocol: SASProtocol.HttpsAndHttp, // Optional\n *     version: \"2016-05-31\" // Optional\n *   },\n *   sharedKeyCredential // StorageSharedKeyCredential - `new StorageSharedKeyCredential(account, accountKey)`\n * ).toString();\n * ```\n *\n * // Fill in the required details before running the snippet.\n * @example\n * ```js\n * // Generate service level SAS for a file\n * const fileSAS = generateDataLakeSASQueryParameters({\n *     fileSystemName, // Required\n *     fileName, // Required\n *     permissions: DataLakeSASPermissions.parse(\"racwd\"), // Required\n *     startsOn: new Date(), // Optional\n *     expiresOn: new Date(new Date().valueOf() + 86400), // Required. Date type\n *     cacheControl: \"cache-control-override\", // Optional\n *     contentDisposition: \"content-disposition-override\", // Optional\n *     contentEncoding: \"content-encoding-override\", // Optional\n *     contentLanguage: \"content-language-override\", // Optional\n *     contentType: \"content-type-override\", // Optional\n *     ipRange: { start: \"0.0.0.0\", end: \"255.255.255.255\" }, // Optional\n *     protocol: SASProtocol.HttpsAndHttp, // Optional\n *     version: \"2016-05-31\" // Optional\n *   },\n *   sharedKeyCredential // StorageSharedKeyCredential - `new StorageSharedKeyCredential(account, accountKey)`\n * ).toString();\n * ```\n *\n * @param dataLakeSASSignatureValues -\n * @param sharedKeyCredential -\n */\nexport function generateDataLakeSASQueryParameters(\n  dataLakeSASSignatureValues: DataLakeSASSignatureValues,\n  sharedKeyCredential: StorageSharedKeyCredential\n): SASQueryParameters;\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Creates an instance of SASQueryParameters.\n * WARNING: identifier will be ignored when generating user delegation SAS, permissions and expiresOn are required.\n *\n * @example\n * ```js\n * // Generate user delegation SAS for a file system\n * const userDelegationKey = await dataLakeServiceClient.getUserDelegationKey(startsOn, expiresOn);\n * const fileSystemSAS = generateDataLakeSASQueryParameters({\n *     fileSystemName, // Required\n *     permissions: FileSystemSASPermissions.parse(\"racwdl\"), // Required\n *     startsOn, // Optional. Date type\n *     expiresOn, // Required. Date type\n *     ipRange: { start: \"0.0.0.0\", end: \"255.255.255.255\" }, // Optional\n *     protocol: SASProtocol.HttpsAndHttp, // Optional\n *     version: \"2018-11-09\" // Must greater than or equal to 2018-11-09 to generate user delegation SAS\n *   },\n *   userDelegationKey, // UserDelegationKey\n *   accountName\n * ).toString();\n * ```\n *\n * @param dataLakeSASSignatureValues -\n * @param userDelegationKey - Return value of `blobServiceClient.getUserDelegationKey()`\n * @param accountName -\n */\nexport function generateDataLakeSASQueryParameters(\n  dataLakeSASSignatureValues: DataLakeSASSignatureValues,\n  userDelegationKey: UserDelegationKey,\n  accountName: string\n): SASQueryParameters;\n\nexport function generateDataLakeSASQueryParameters(\n  dataLakeSASSignatureValues: DataLakeSASSignatureValues,\n  sharedKeyCredentialOrUserDelegationKey: StorageSharedKeyCredential | UserDelegationKey,\n  accountName?: string\n): SASQueryParameters {\n  const version = dataLakeSASSignatureValues.version\n    ? dataLakeSASSignatureValues.version\n    : SERVICE_VERSION;\n\n  const sharedKeyCredential =\n    sharedKeyCredentialOrUserDelegationKey instanceof StorageSharedKeyCredential\n      ? sharedKeyCredentialOrUserDelegationKey\n      : undefined;\n  let userDelegationKeyCredential: UserDelegationKeyCredential | undefined;\n\n  if (sharedKeyCredential === undefined && accountName !== undefined) {\n    userDelegationKeyCredential = new UserDelegationKeyCredential(\n      accountName,\n      sharedKeyCredentialOrUserDelegationKey as UserDelegationKey\n    );\n  }\n\n  if (sharedKeyCredential === undefined && userDelegationKeyCredential === undefined) {\n    throw TypeError(\"Invalid sharedKeyCredential, userDelegationKey or accountName.\");\n  }\n\n  // Version 2018-11-09 adds support for the signed resource and signed blob snapshot time fields.\n  // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas#constructing-the-signature-string\n  if (version >= \"2018-11-09\") {\n    if (sharedKeyCredential !== undefined) {\n      return generateBlobSASQueryParameters20181109(\n        dataLakeSASSignatureValues,\n        sharedKeyCredential\n      );\n    } else {\n      // Version 2020-02-10 delegation SAS signature construction includes preauthorizedAgentObjectId, agentObjectId, correlationId.\n      if (version >= \"2020-02-10\") {\n        return generateBlobSASQueryParametersUDK20200210(\n          dataLakeSASSignatureValues,\n          userDelegationKeyCredential!\n        );\n      } else {\n        return generateBlobSASQueryParametersUDK20181109(\n          dataLakeSASSignatureValues,\n          userDelegationKeyCredential!\n        );\n      }\n    }\n  }\n\n  if (version >= \"2015-04-05\") {\n    if (sharedKeyCredential !== undefined) {\n      return generateBlobSASQueryParameters20150405(\n        dataLakeSASSignatureValues,\n        sharedKeyCredential\n      );\n    } else {\n      throw new RangeError(\n        \"'version' must be >= '2018-11-09' when generating user delegation SAS using user delegation key.\"\n      );\n    }\n  }\n\n  throw new RangeError(\"'version' must be >= '2015-04-05'.\");\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2015-04-05 AND BEFORE 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * @param dataLakeSASSignatureValues -\n * @param sharedKeyCredential -\n */\nfunction generateBlobSASQueryParameters20150405(\n  dataLakeSASSignatureValues: DataLakeSASSignatureValues,\n  sharedKeyCredential: StorageSharedKeyCredential\n): SASQueryParameters {\n  if (\n    !dataLakeSASSignatureValues.identifier &&\n    !(dataLakeSASSignatureValues.permissions && dataLakeSASSignatureValues.expiresOn)\n  ) {\n    throw new RangeError(\n      \"Must provide 'permissions' and 'expiresOn' for DataLake SAS generation when 'identifier' is not provided.\"\n    );\n  }\n\n  const version = dataLakeSASSignatureValues.version\n    ? dataLakeSASSignatureValues.version\n    : SERVICE_VERSION;\n\n  dataLakeSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(\n    dataLakeSASSignatureValues,\n    version\n  );\n\n  let resource: string = \"c\";\n  if (dataLakeSASSignatureValues.pathName) {\n    resource = \"b\";\n  }\n\n  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n  let verifiedPermissions: string | undefined;\n  if (dataLakeSASSignatureValues.permissions) {\n    if (dataLakeSASSignatureValues.pathName) {\n      verifiedPermissions = DataLakeSASPermissions.parse(\n        dataLakeSASSignatureValues.permissions.toString()\n      ).toString();\n    } else {\n      verifiedPermissions = FileSystemSASPermissions.parse(\n        dataLakeSASSignatureValues.permissions.toString()\n      ).toString();\n    }\n  }\n\n  // Signature is generated on the un-url-encoded values.\n  const stringToSign = [\n    verifiedPermissions ? verifiedPermissions : \"\",\n    dataLakeSASSignatureValues.startsOn\n      ? truncatedISO8061Date(dataLakeSASSignatureValues.startsOn, false)\n      : \"\",\n    dataLakeSASSignatureValues.expiresOn\n      ? truncatedISO8061Date(dataLakeSASSignatureValues.expiresOn, false)\n      : \"\",\n    getCanonicalName(\n      sharedKeyCredential.accountName,\n      dataLakeSASSignatureValues.fileSystemName,\n      dataLakeSASSignatureValues.pathName\n    ),\n    dataLakeSASSignatureValues.identifier,\n    dataLakeSASSignatureValues.ipRange ? ipRangeToString(dataLakeSASSignatureValues.ipRange) : \"\",\n    dataLakeSASSignatureValues.protocol ? dataLakeSASSignatureValues.protocol : \"\",\n    version,\n    dataLakeSASSignatureValues.cacheControl ? dataLakeSASSignatureValues.cacheControl : \"\",\n    dataLakeSASSignatureValues.contentDisposition\n      ? dataLakeSASSignatureValues.contentDisposition\n      : \"\",\n    dataLakeSASSignatureValues.contentEncoding ? dataLakeSASSignatureValues.contentEncoding : \"\",\n    dataLakeSASSignatureValues.contentLanguage ? dataLakeSASSignatureValues.contentLanguage : \"\",\n    dataLakeSASSignatureValues.contentType ? dataLakeSASSignatureValues.contentType : \"\"\n  ].join(\"\\n\");\n\n  const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n\n  return new SASQueryParameters(\n    version,\n    signature,\n    verifiedPermissions,\n    undefined,\n    undefined,\n    dataLakeSASSignatureValues.protocol,\n    dataLakeSASSignatureValues.startsOn,\n    dataLakeSASSignatureValues.expiresOn,\n    dataLakeSASSignatureValues.ipRange,\n    dataLakeSASSignatureValues.identifier,\n    resource,\n    dataLakeSASSignatureValues.cacheControl,\n    dataLakeSASSignatureValues.contentDisposition,\n    dataLakeSASSignatureValues.contentEncoding,\n    dataLakeSASSignatureValues.contentLanguage,\n    dataLakeSASSignatureValues.contentType\n  );\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn and identifier.\n *\n * WARNING: When identifier is not provided, permissions and expiresOn are required.\n * You MUST assign value to identifier or expiresOn & permissions manually if you initial with\n * this constructor.\n *\n * @param dataLakeSASSignatureValues -\n * @param sharedKeyCredential -\n */\nfunction generateBlobSASQueryParameters20181109(\n  dataLakeSASSignatureValues: DataLakeSASSignatureValues,\n  sharedKeyCredential: StorageSharedKeyCredential\n): SASQueryParameters {\n  if (\n    !dataLakeSASSignatureValues.identifier &&\n    !(dataLakeSASSignatureValues.permissions && dataLakeSASSignatureValues.expiresOn)\n  ) {\n    throw new RangeError(\n      \"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when 'identifier' is not provided.\"\n    );\n  }\n\n  const version = dataLakeSASSignatureValues.version\n    ? dataLakeSASSignatureValues.version\n    : SERVICE_VERSION;\n\n  dataLakeSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(\n    dataLakeSASSignatureValues,\n    version\n  );\n\n  let resource: string = \"c\";\n  if (dataLakeSASSignatureValues.pathName) {\n    if (dataLakeSASSignatureValues.isDirectory) {\n      resource = \"d\";\n    } else {\n      resource = \"b\";\n      if (dataLakeSASSignatureValues.snapshotTime) {\n        resource = \"bs\";\n      }\n    }\n  }\n\n  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n  let verifiedPermissions: string | undefined;\n  if (dataLakeSASSignatureValues.permissions) {\n    if (dataLakeSASSignatureValues.pathName) {\n      if (dataLakeSASSignatureValues.isDirectory) {\n        verifiedPermissions = DirectorySASPermissions.parse(\n          dataLakeSASSignatureValues.permissions.toString()\n        ).toString();\n      } else {\n        verifiedPermissions = DataLakeSASPermissions.parse(\n          dataLakeSASSignatureValues.permissions.toString()\n        ).toString();\n      }\n    } else {\n      verifiedPermissions = FileSystemSASPermissions.parse(\n        dataLakeSASSignatureValues.permissions.toString()\n      ).toString();\n    }\n  }\n\n  // Signature is generated on the un-url-encoded values.\n  const stringToSign = [\n    verifiedPermissions ? verifiedPermissions : \"\",\n    dataLakeSASSignatureValues.startsOn\n      ? truncatedISO8061Date(dataLakeSASSignatureValues.startsOn, false)\n      : \"\",\n    dataLakeSASSignatureValues.expiresOn\n      ? truncatedISO8061Date(dataLakeSASSignatureValues.expiresOn, false)\n      : \"\",\n    getCanonicalName(\n      sharedKeyCredential.accountName,\n      dataLakeSASSignatureValues.fileSystemName,\n      dataLakeSASSignatureValues.pathName\n    ),\n    dataLakeSASSignatureValues.identifier,\n    dataLakeSASSignatureValues.ipRange ? ipRangeToString(dataLakeSASSignatureValues.ipRange) : \"\",\n    dataLakeSASSignatureValues.protocol ? dataLakeSASSignatureValues.protocol : \"\",\n    version,\n    resource,\n    dataLakeSASSignatureValues.snapshotTime,\n    dataLakeSASSignatureValues.cacheControl ? dataLakeSASSignatureValues.cacheControl : \"\",\n    dataLakeSASSignatureValues.contentDisposition\n      ? dataLakeSASSignatureValues.contentDisposition\n      : \"\",\n    dataLakeSASSignatureValues.contentEncoding ? dataLakeSASSignatureValues.contentEncoding : \"\",\n    dataLakeSASSignatureValues.contentLanguage ? dataLakeSASSignatureValues.contentLanguage : \"\",\n    dataLakeSASSignatureValues.contentType ? dataLakeSASSignatureValues.contentType : \"\"\n  ].join(\"\\n\");\n\n  const signature = sharedKeyCredential.computeHMACSHA256(stringToSign);\n\n  return new SASQueryParameters(\n    version,\n    signature,\n    verifiedPermissions,\n    undefined,\n    undefined,\n    dataLakeSASSignatureValues.protocol,\n    dataLakeSASSignatureValues.startsOn,\n    dataLakeSASSignatureValues.expiresOn,\n    dataLakeSASSignatureValues.ipRange,\n    dataLakeSASSignatureValues.identifier,\n    resource,\n    dataLakeSASSignatureValues.cacheControl,\n    dataLakeSASSignatureValues.contentDisposition,\n    dataLakeSASSignatureValues.contentEncoding,\n    dataLakeSASSignatureValues.contentLanguage,\n    dataLakeSASSignatureValues.contentType,\n    undefined,\n    dataLakeSASSignatureValues.directoryDepth\n  );\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2018-11-09.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn.\n *\n * WARNING: identifier will be ignored, permissions and expiresOn are required.\n *\n * @param dataLakeSASSignatureValues -\n * @param userDelegationKeyCredential -\n */\nfunction generateBlobSASQueryParametersUDK20181109(\n  dataLakeSASSignatureValues: DataLakeSASSignatureValues,\n  userDelegationKeyCredential: UserDelegationKeyCredential\n): SASQueryParameters {\n  if (!dataLakeSASSignatureValues.permissions || !dataLakeSASSignatureValues.expiresOn) {\n    throw new RangeError(\n      \"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.\"\n    );\n  }\n\n  const version = dataLakeSASSignatureValues.version\n    ? dataLakeSASSignatureValues.version\n    : SERVICE_VERSION;\n  dataLakeSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(\n    dataLakeSASSignatureValues,\n    version\n  );\n\n  let resource: string = \"c\";\n  if (dataLakeSASSignatureValues.pathName) {\n    if (dataLakeSASSignatureValues.isDirectory) {\n      resource = \"d\";\n    } else {\n      resource = \"b\";\n      if (dataLakeSASSignatureValues.snapshotTime) {\n        resource = \"bs\";\n      }\n    }\n  }\n\n  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n  let verifiedPermissions: string | undefined;\n  if (dataLakeSASSignatureValues.permissions) {\n    if (dataLakeSASSignatureValues.pathName) {\n      if (dataLakeSASSignatureValues.isDirectory) {\n        verifiedPermissions = DirectorySASPermissions.parse(\n          dataLakeSASSignatureValues.permissions.toString()\n        ).toString();\n      } else {\n        verifiedPermissions = DataLakeSASPermissions.parse(\n          dataLakeSASSignatureValues.permissions.toString()\n        ).toString();\n      }\n    } else {\n      verifiedPermissions = FileSystemSASPermissions.parse(\n        dataLakeSASSignatureValues.permissions.toString()\n      ).toString();\n    }\n  }\n\n  // Signature is generated on the un-url-encoded values.\n  const stringToSign = [\n    verifiedPermissions ? verifiedPermissions : \"\",\n    dataLakeSASSignatureValues.startsOn\n      ? truncatedISO8061Date(dataLakeSASSignatureValues.startsOn, false)\n      : \"\",\n    dataLakeSASSignatureValues.expiresOn\n      ? truncatedISO8061Date(dataLakeSASSignatureValues.expiresOn, false)\n      : \"\",\n    getCanonicalName(\n      userDelegationKeyCredential.accountName,\n      dataLakeSASSignatureValues.fileSystemName,\n      dataLakeSASSignatureValues.pathName\n    ),\n    userDelegationKeyCredential.userDelegationKey.signedObjectId,\n    userDelegationKeyCredential.userDelegationKey.signedTenantId,\n    userDelegationKeyCredential.userDelegationKey.signedStartsOn\n      ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false)\n      : \"\",\n    userDelegationKeyCredential.userDelegationKey.signedExpiresOn\n      ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false)\n      : \"\",\n    userDelegationKeyCredential.userDelegationKey.signedService,\n    userDelegationKeyCredential.userDelegationKey.signedVersion,\n    dataLakeSASSignatureValues.ipRange ? ipRangeToString(dataLakeSASSignatureValues.ipRange) : \"\",\n    dataLakeSASSignatureValues.protocol ? dataLakeSASSignatureValues.protocol : \"\",\n    version,\n    resource,\n    dataLakeSASSignatureValues.snapshotTime,\n    dataLakeSASSignatureValues.cacheControl,\n    dataLakeSASSignatureValues.contentDisposition,\n    dataLakeSASSignatureValues.contentEncoding,\n    dataLakeSASSignatureValues.contentLanguage,\n    dataLakeSASSignatureValues.contentType\n  ].join(\"\\n\");\n\n  const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);\n\n  return new SASQueryParameters(\n    version,\n    signature,\n    verifiedPermissions,\n    undefined,\n    undefined,\n    dataLakeSASSignatureValues.protocol,\n    dataLakeSASSignatureValues.startsOn,\n    dataLakeSASSignatureValues.expiresOn,\n    dataLakeSASSignatureValues.ipRange,\n    dataLakeSASSignatureValues.identifier,\n    resource,\n    dataLakeSASSignatureValues.cacheControl,\n    dataLakeSASSignatureValues.contentDisposition,\n    dataLakeSASSignatureValues.contentEncoding,\n    dataLakeSASSignatureValues.contentLanguage,\n    dataLakeSASSignatureValues.contentType,\n    userDelegationKeyCredential.userDelegationKey,\n    dataLakeSASSignatureValues.directoryDepth,\n    dataLakeSASSignatureValues.preauthorizedAgentObjectId,\n    dataLakeSASSignatureValues.agentObjectId,\n    dataLakeSASSignatureValues.correlationId\n  );\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n * IMPLEMENTATION FOR API VERSION FROM 2020-02-10.\n *\n * Creates an instance of SASQueryParameters.\n *\n * Only accepts required settings needed to create a SAS. For optional settings please\n * set corresponding properties directly, such as permissions, startsOn.\n *\n * WARNING: identifier will be ignored, permissions and expiresOn are required.\n *\n * @param dataLakeSASSignatureValues -\n * @param userDelegationKeyCredential -\n */\nfunction generateBlobSASQueryParametersUDK20200210(\n  dataLakeSASSignatureValues: DataLakeSASSignatureValues,\n  userDelegationKeyCredential: UserDelegationKeyCredential\n): SASQueryParameters {\n  if (!dataLakeSASSignatureValues.permissions || !dataLakeSASSignatureValues.expiresOn) {\n    throw new RangeError(\n      \"Must provide 'permissions' and 'expiresOn' for Blob SAS generation when generating user delegation SAS.\"\n    );\n  }\n\n  const version = dataLakeSASSignatureValues.version\n    ? dataLakeSASSignatureValues.version\n    : SERVICE_VERSION;\n  dataLakeSASSignatureValues = SASSignatureValuesSanityCheckAndAutofill(\n    dataLakeSASSignatureValues,\n    version\n  );\n\n  let resource: string = \"c\";\n  if (dataLakeSASSignatureValues.pathName) {\n    if (dataLakeSASSignatureValues.isDirectory) {\n      resource = \"d\";\n    } else {\n      resource = \"b\";\n      if (dataLakeSASSignatureValues.snapshotTime) {\n        resource = \"bs\";\n      }\n    }\n  }\n\n  // Calling parse and toString guarantees the proper ordering and throws on invalid characters.\n  let verifiedPermissions: string | undefined;\n  if (dataLakeSASSignatureValues.permissions) {\n    if (dataLakeSASSignatureValues.pathName) {\n      if (dataLakeSASSignatureValues.isDirectory) {\n        verifiedPermissions = DirectorySASPermissions.parse(\n          dataLakeSASSignatureValues.permissions.toString()\n        ).toString();\n      } else {\n        verifiedPermissions = DataLakeSASPermissions.parse(\n          dataLakeSASSignatureValues.permissions.toString()\n        ).toString();\n      }\n    } else {\n      verifiedPermissions = FileSystemSASPermissions.parse(\n        dataLakeSASSignatureValues.permissions.toString()\n      ).toString();\n    }\n  }\n\n  // Signature is generated on the un-url-encoded values.\n  const stringToSign = [\n    verifiedPermissions ? verifiedPermissions : \"\",\n    dataLakeSASSignatureValues.startsOn\n      ? truncatedISO8061Date(dataLakeSASSignatureValues.startsOn, false)\n      : \"\",\n    dataLakeSASSignatureValues.expiresOn\n      ? truncatedISO8061Date(dataLakeSASSignatureValues.expiresOn, false)\n      : \"\",\n    getCanonicalName(\n      userDelegationKeyCredential.accountName,\n      dataLakeSASSignatureValues.fileSystemName,\n      dataLakeSASSignatureValues.pathName\n    ),\n    userDelegationKeyCredential.userDelegationKey.signedObjectId,\n    userDelegationKeyCredential.userDelegationKey.signedTenantId,\n    userDelegationKeyCredential.userDelegationKey.signedStartsOn\n      ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedStartsOn, false)\n      : \"\",\n    userDelegationKeyCredential.userDelegationKey.signedExpiresOn\n      ? truncatedISO8061Date(userDelegationKeyCredential.userDelegationKey.signedExpiresOn, false)\n      : \"\",\n    userDelegationKeyCredential.userDelegationKey.signedService,\n    userDelegationKeyCredential.userDelegationKey.signedVersion,\n    dataLakeSASSignatureValues.preauthorizedAgentObjectId,\n    dataLakeSASSignatureValues.agentObjectId,\n    dataLakeSASSignatureValues.correlationId,\n    dataLakeSASSignatureValues.ipRange ? ipRangeToString(dataLakeSASSignatureValues.ipRange) : \"\",\n    dataLakeSASSignatureValues.protocol ? dataLakeSASSignatureValues.protocol : \"\",\n    version,\n    resource,\n    dataLakeSASSignatureValues.snapshotTime,\n    dataLakeSASSignatureValues.cacheControl,\n    dataLakeSASSignatureValues.contentDisposition,\n    dataLakeSASSignatureValues.contentEncoding,\n    dataLakeSASSignatureValues.contentLanguage,\n    dataLakeSASSignatureValues.contentType\n  ].join(\"\\n\");\n\n  const signature = userDelegationKeyCredential.computeHMACSHA256(stringToSign);\n\n  return new SASQueryParameters(\n    version,\n    signature,\n    verifiedPermissions,\n    undefined,\n    undefined,\n    dataLakeSASSignatureValues.protocol,\n    dataLakeSASSignatureValues.startsOn,\n    dataLakeSASSignatureValues.expiresOn,\n    dataLakeSASSignatureValues.ipRange,\n    dataLakeSASSignatureValues.identifier,\n    resource,\n    dataLakeSASSignatureValues.cacheControl,\n    dataLakeSASSignatureValues.contentDisposition,\n    dataLakeSASSignatureValues.contentEncoding,\n    dataLakeSASSignatureValues.contentLanguage,\n    dataLakeSASSignatureValues.contentType,\n    userDelegationKeyCredential.userDelegationKey,\n    dataLakeSASSignatureValues.directoryDepth,\n    dataLakeSASSignatureValues.preauthorizedAgentObjectId,\n    dataLakeSASSignatureValues.agentObjectId,\n    dataLakeSASSignatureValues.correlationId\n  );\n}\n\nfunction getCanonicalName(accountName: string, containerName: string, blobName?: string): string {\n  // FileSystem: \"/blob/account/fileSystemName\"\n  // File:       \"/blob/account/fileSystemName/fileName\"\n  const elements: string[] = [`/blob/${accountName}/${containerName}`];\n  if (blobName) {\n    elements.push(`/${blobName}`);\n  }\n  return elements.join(\"\");\n}\n\nfunction SASSignatureValuesSanityCheckAndAutofill(\n  dataLakeSASSignatureValues: DataLakeSASSignatureValues,\n  version: string\n): DataLakeSASSignatureValues {\n  if (\n    version < \"2020-02-10\" &&\n    (dataLakeSASSignatureValues.isDirectory || dataLakeSASSignatureValues.directoryDepth)\n  ) {\n    throw RangeError(\"'version' must be >= '2020-02-10' to support directory SAS.\");\n  }\n  if (dataLakeSASSignatureValues.isDirectory && dataLakeSASSignatureValues.pathName === undefined) {\n    throw RangeError(\"Must provide 'pathName' when 'isDirectory' is true.\");\n  }\n  if (\n    dataLakeSASSignatureValues.directoryDepth !== undefined &&\n    (!Number.isInteger(dataLakeSASSignatureValues.directoryDepth) ||\n      dataLakeSASSignatureValues.directoryDepth < 0)\n  ) {\n    throw RangeError(\"'directoryDepth' must be a non-negative interger.\");\n  }\n  if (\n    dataLakeSASSignatureValues.isDirectory &&\n    dataLakeSASSignatureValues.directoryDepth === undefined\n  ) {\n    // calculate directoryDepth from pathName\n    if (dataLakeSASSignatureValues.pathName === \"/\") {\n      dataLakeSASSignatureValues.directoryDepth = 0;\n    } else {\n      dataLakeSASSignatureValues.directoryDepth = dataLakeSASSignatureValues.pathName\n        ?.split(\"/\")\n        .filter((x) => x !== \"\").length;\n    }\n  }\n\n  if (\n    version < \"2020-02-10\" &&\n    dataLakeSASSignatureValues.permissions &&\n    (dataLakeSASSignatureValues.permissions.move ||\n      dataLakeSASSignatureValues.permissions.execute ||\n      dataLakeSASSignatureValues.permissions.manageOwnership ||\n      dataLakeSASSignatureValues.permissions.manageAccessControl)\n  ) {\n    throw RangeError(\"'version' must be >= '2020-02-10' when providing m, e, o or p permission.\");\n  }\n\n  if (\n    version < \"2020-02-10\" &&\n    (dataLakeSASSignatureValues.preauthorizedAgentObjectId ||\n      dataLakeSASSignatureValues.agentObjectId ||\n      dataLakeSASSignatureValues.correlationId)\n  ) {\n    throw RangeError(\n      \"'version' must be >= '2020-02-10' when providing 'preauthorizedAgentObjectId', 'agentObjectId' or 'correlationId'.\"\n    );\n  }\n  if (\n    dataLakeSASSignatureValues.preauthorizedAgentObjectId &&\n    dataLakeSASSignatureValues.agentObjectId\n  ) {\n    throw RangeError(\n      \"'preauthorizedAgentObjectId' or 'agentObjectId' shouldn't be specified at the same time.\"\n    );\n  }\n\n  if (dataLakeSASSignatureValues.snapshotTime && version < \"2018-11-09\") {\n    throw RangeError(\"'version' must be >= '2018-11-09' when provided 'snapshotTime'.\");\n  }\n  if (\n    dataLakeSASSignatureValues.pathName === undefined &&\n    dataLakeSASSignatureValues.snapshotTime\n  ) {\n    throw RangeError(\"Must provide 'blobName' when provided 'snapshotTime'.\");\n  }\n\n  return dataLakeSASSignatureValues;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// In browser, during webpack or browserify bundling, this module will be replaced by 'events'\n// https://github.com/Gozala/events\nimport { EventEmitter } from \"events\";\n\n/**\n * Operation is an async function to be executed and managed by Batch.\n */\nexport declare type Operation = () => Promise<any>;\n\n/**\n * States for Batch.\n */\nenum BatchStates {\n  Good,\n  Error\n}\n\n/**\n * Batch provides basic parallel execution with concurrency limits.\n * Will stop execute left operations when one of the executed operation throws an error.\n * But Batch cannot cancel ongoing operations, you need to cancel them by yourself.\n */\nexport class Batch {\n  /**\n   * Concurrency. Must be lager than 0.\n   */\n  private concurrency: number;\n\n  /**\n   * Number of active operations under execution.\n   */\n  private actives: number = 0;\n\n  /**\n   * Number of completed operations under execution.\n   */\n  private completed: number = 0;\n\n  /**\n   * Offset of next operation to be executed.\n   */\n  private offset: number = 0;\n\n  /**\n   * Operation array to be executed.\n   */\n  private operations: Operation[] = [];\n\n  /**\n   * States of Batch. When an error happens, state will turn into error.\n   * Batch will stop execute left operations.\n   */\n  private state: BatchStates = BatchStates.Good;\n\n  /**\n   * A private emitter used to pass events inside this class.\n   */\n  private emitter: EventEmitter;\n\n  /**\n   * Creates an instance of Batch.\n   * @param concurrency -\n   */\n  public constructor(concurrency: number = 5) {\n    if (concurrency < 1) {\n      throw new RangeError(\"concurrency must be larger than 0\");\n    }\n    this.concurrency = concurrency;\n    this.emitter = new EventEmitter();\n  }\n\n  /**\n   * Add a operation into queue.\n   *\n   * @param operation -\n   */\n  public addOperation(operation: Operation): void {\n    this.operations.push(async () => {\n      try {\n        this.actives++;\n        await operation();\n        this.actives--;\n        this.completed++;\n        this.parallelExecute();\n      } catch (error) {\n        this.emitter.emit(\"error\", error);\n      }\n    });\n  }\n\n  /**\n   * Start execute operations in the queue.\n   *\n   */\n  public async do(): Promise<void> {\n    if (this.operations.length === 0) {\n      return Promise.resolve();\n    }\n    this.parallelExecute();\n\n    return new Promise<void>((resolve, reject) => {\n      this.emitter.on(\"finish\", resolve);\n\n      this.emitter.on(\"error\", (error) => {\n        this.state = BatchStates.Error;\n        reject(error);\n      });\n    });\n  }\n\n  /**\n   * Get next operation to be executed. Return null when reaching ends.\n   *\n   */\n  private nextOperation(): Operation | null {\n    if (this.offset < this.operations.length) {\n      return this.operations[this.offset++];\n    }\n    return null;\n  }\n\n  /**\n   * Start execute operations. One one the most important difference between\n   * this method with do() is that do() wraps as an sync method.\n   *\n   */\n  private parallelExecute(): void {\n    if (this.state === BatchStates.Error) {\n      return;\n    }\n\n    if (this.completed >= this.operations.length) {\n      this.emitter.emit(\"finish\");\n      return;\n    }\n\n    while (this.actives < this.concurrency) {\n      const operation = this.nextOperation();\n      if (operation) {\n        operation();\n      } else {\n        return;\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { RestError } from \"@azure/core-http\";\n\n/**\n * An error thrown when an operation is interrupted and can be continued later on.\n */\nexport class DataLakeAclChangeFailedError extends Error {\n  /**\n   * Continuation token to continue next batch of operations.\n   */\n  public continuationToken?: string;\n\n  /**\n   * Internal error.\n   */\n  public innerError: RestError | Error;\n\n  constructor(error: RestError | Error, continuationToken?: string) {\n    super(error.message);\n    this.name = \"DataLakeAclChangeFailedError\";\n    this.innerError = error;\n    this.continuationToken = continuationToken;\n    Object.setPrototypeOf(this, DataLakeAclChangeFailedError.prototype);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport * as fs from \"fs\";\nimport * as util from \"util\";\n\n/**\n * Reads a readable stream into buffer. Fill the buffer from offset to end.\n *\n * @param stream - A Node.js Readable stream\n * @param buffer - Buffer to be filled, length must greater than or equal to offset\n * @param offset - From which position in the buffer to be filled, inclusive\n * @param end - To which position in the buffer to be filled, exclusive\n * @param encoding - Encoding of the Readable stream\n */\nexport async function streamToBuffer(\n  stream: NodeJS.ReadableStream,\n  buffer: Buffer,\n  offset: number,\n  end: number,\n  encoding?: BufferEncoding\n): Promise<void> {\n  let pos = 0; // Position in stream\n  const count = end - offset; // Total amount of data needed in stream\n\n  return new Promise<void>((resolve, reject) => {\n    stream.on(\"readable\", () => {\n      if (pos >= count) {\n        resolve();\n        return;\n      }\n\n      let chunk = stream.read();\n      if (!chunk) {\n        return;\n      }\n      if (typeof chunk === \"string\") {\n        chunk = Buffer.from(chunk, encoding);\n      }\n\n      // How much data needed in this chunk\n      const chunkLength = pos + chunk.length > count ? count - pos : chunk.length;\n\n      buffer.fill(chunk.slice(0, chunkLength), offset + pos, offset + pos + chunkLength);\n      pos += chunkLength;\n    });\n\n    stream.on(\"end\", () => {\n      if (pos < count) {\n        reject(\n          new Error(\n            `Stream drains before getting enough data needed. Data read: ${pos}, data need: ${count}`\n          )\n        );\n      }\n      resolve();\n    });\n\n    stream.on(\"error\", reject);\n  });\n}\n\n/**\n * Reads a readable stream into buffer entirely.\n *\n * @param stream - A Node.js Readable stream\n * @param buffer - Buffer to be filled, length must greater than or equal to offset\n * @param encoding - Encoding of the Readable stream\n * @returns with the count of bytes read.\n * @throws `RangeError` If buffer size is not big enough.\n */\nexport async function streamToBuffer2(\n  stream: NodeJS.ReadableStream,\n  buffer: Buffer,\n  encoding?: BufferEncoding\n): Promise<number> {\n  let pos = 0; // Position in stream\n  const bufferSize = buffer.length;\n\n  return new Promise<number>((resolve, reject) => {\n    stream.on(\"readable\", () => {\n      let chunk = stream.read();\n      if (!chunk) {\n        return;\n      }\n      if (typeof chunk === \"string\") {\n        chunk = Buffer.from(chunk, encoding);\n      }\n\n      if (pos + chunk.length > bufferSize) {\n        reject(new Error(`Stream exceeds buffer size. Buffer size: ${bufferSize}`));\n        return;\n      }\n\n      buffer.fill(chunk, pos, pos + chunk.length);\n      pos += chunk.length;\n    });\n\n    stream.on(\"end\", () => {\n      resolve(pos);\n    });\n\n    stream.on(\"error\", reject);\n  });\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Promisified version of fs.stat().\n */\nexport const fsStat = util.promisify(fs.stat);\n\nexport const fsCreateReadStream = fs.createReadStream;\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { HttpRequestBody, isNode, TokenCredential } from \"@azure/core-http\";\nimport { BlobClient, BlockBlobClient } from \"@azure/storage-blob\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { Readable } from \"stream\";\n\nimport { BufferScheduler } from \"../../storage-common/src\";\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { DataLakeLeaseClient } from \"./DataLakeLeaseClient\";\nimport { Path } from \"./generated/src/operations\";\nimport {\n  AccessControlChanges,\n  DirectoryCreateIfNotExistsOptions,\n  DirectoryCreateIfNotExistsResponse,\n  DirectoryCreateOptions,\n  DirectoryCreateResponse,\n  DirectoryGenerateSasUrlOptions,\n  FileAppendOptions,\n  FileAppendResponse,\n  FileCreateIfNotExistsOptions,\n  FileCreateIfNotExistsResponse,\n  FileCreateOptions,\n  FileCreateResponse,\n  FileExpiryMode,\n  FileFlushOptions,\n  FileFlushResponse,\n  FileGenerateSasUrlOptions,\n  FileParallelUploadOptions,\n  FileQueryOptions,\n  FileReadOptions,\n  FileReadResponse,\n  FileReadToBufferOptions,\n  FileSetExpiryOptions,\n  FileSetExpiryResponse,\n  FileUploadResponse,\n  Metadata,\n  PathAccessControlItem,\n  PathChangeAccessControlRecursiveOptions,\n  PathChangeAccessControlRecursiveResponse,\n  PathCreateIfNotExistsOptions,\n  PathCreateIfNotExistsResponse,\n  PathCreateOptions,\n  PathCreateResponse,\n  PathDeleteIfExistsResponse,\n  PathDeleteOptions,\n  PathDeleteResponse,\n  PathExistsOptions,\n  PathGetAccessControlOptions,\n  PathGetAccessControlResponse,\n  PathGetPropertiesOptions,\n  PathGetPropertiesResponse,\n  PathHttpHeaders,\n  PathMoveOptions,\n  PathMoveResponse,\n  PathPermissions,\n  PathResourceTypeModel,\n  PathSetAccessControlOptions,\n  PathSetAccessControlResponse,\n  PathSetHttpHeadersOptions,\n  PathSetHttpHeadersResponse,\n  PathSetMetadataOptions,\n  PathSetMetadataResponse,\n  PathSetPermissionsOptions,\n  PathSetPermissionsResponse,\n  RemovePathAccessControlItem\n} from \"./models\";\nimport { PathSetAccessControlRecursiveMode } from \"./models.internal\";\nimport { newPipeline, Pipeline, StoragePipelineOptions } from \"./Pipeline\";\nimport { generateDataLakeSASQueryParameters } from \"./sas/DataLakeSASSignatureValues\";\nimport { StorageClient } from \"./StorageClient\";\nimport {\n  toAccessControlChangeFailureArray,\n  toAclString,\n  toPathGetAccessControlResponse,\n  toPermissionsString,\n  toProperties\n} from \"./transforms\";\nimport { Batch } from \"./utils/Batch\";\nimport {\n  BLOCK_BLOB_MAX_BLOCKS,\n  DEFAULT_HIGH_LEVEL_CONCURRENCY,\n  ETagAny,\n  FILE_MAX_SINGLE_UPLOAD_THRESHOLD,\n  FILE_MAX_SIZE_BYTES,\n  FILE_UPLOAD_DEFAULT_CHUNK_SIZE,\n  FILE_UPLOAD_MAX_CHUNK_SIZE\n} from \"./utils/constants\";\nimport { DataLakeAclChangeFailedError } from \"./utils/DataLakeAclChangeFailedError\";\nimport { convertTracingToRequestOptionsBase, createSpan } from \"./utils/tracing\";\nimport {\n  appendToURLPath,\n  appendToURLQuery,\n  getURLPathAndQuery,\n  setURLPath,\n  setURLQueries\n} from \"./utils/utils.common\";\nimport { fsCreateReadStream, fsStat } from \"./utils/utils.node\";\n\n/**\n * A DataLakePathClient represents a URL to the Azure Storage path (directory or file).\n */\nexport class DataLakePathClient extends StorageClient {\n  /**\n   * pathContext provided by protocol layer.\n   */\n  private pathContext: Path;\n\n  /**\n   * blobClient provided by `@azure/storage-blob` package.\n   */\n  private blobClient: BlobClient;\n\n  /**\n   * SetAccessControlRecursiveInternal operation sets the Access Control on a path and sub paths.\n   *\n   * @param mode - Mode \\\"set\\\" sets POSIX access control rights on files and directories,\n   *                                                 Mode \\\"modify\\\" modifies one or more POSIX access control rights that pre-exist on files and directories,\n   *                                                 Mode \\\"remove\\\" removes one or more POSIX access control rights that were present earlier on files and directories.\n   * @param acl - The POSIX access control list for the file or directory.\n   * @param options - Optional. Options\n   */\n  private async setAccessControlRecursiveInternal(\n    mode: PathSetAccessControlRecursiveMode,\n    acl: PathAccessControlItem[] | RemovePathAccessControlItem[],\n    options: PathChangeAccessControlRecursiveOptions = {}\n  ): Promise<PathChangeAccessControlRecursiveResponse> {\n    if (options.maxBatches !== undefined && options.maxBatches < 1) {\n      throw RangeError(`Options maxBatches must be larger than 0.`);\n    }\n\n    if (options.batchSize !== undefined && options.batchSize < 1) {\n      throw RangeError(`Options batchSize must be larger than 0.`);\n    }\n\n    const { span, updatedOptions } = createSpan(\n      `DataLakePathClient-setAccessControlRecursiveInternal`,\n      options\n    );\n\n    const result: PathChangeAccessControlRecursiveResponse = {\n      counters: {\n        failedChangesCount: 0,\n        changedDirectoriesCount: 0,\n        changedFilesCount: 0\n      },\n      continuationToken: undefined\n    };\n\n    try {\n      let continuationToken = options.continuationToken;\n      let batchCounter = 0;\n      let reachMaxBatches = false;\n      do {\n        let response;\n        try {\n          response = await this.pathContext.setAccessControlRecursive(mode, {\n            ...options,\n            acl: toAclString(acl as PathAccessControlItem[]),\n            maxRecords: options.batchSize,\n            continuation: continuationToken,\n            forceFlag: options.continueOnFailure,\n            ...convertTracingToRequestOptionsBase(updatedOptions)\n          });\n        } catch (e) {\n          throw new DataLakeAclChangeFailedError(e, continuationToken);\n        }\n\n        batchCounter++;\n        continuationToken = response.continuation;\n\n        // Update result\n        result.continuationToken = continuationToken;\n        result.counters.failedChangesCount += response.failureCount || 0;\n        result.counters.changedDirectoriesCount += response.directoriesSuccessful || 0;\n        result.counters.changedFilesCount += response.filesSuccessful || 0;\n\n        // Progress event call back\n        if (options.onProgress) {\n          const progress: AccessControlChanges = {\n            batchFailures: toAccessControlChangeFailureArray(response.failedEntries),\n            batchCounters: {\n              failedChangesCount: response.failureCount || 0,\n              changedDirectoriesCount: response.directoriesSuccessful || 0,\n              changedFilesCount: response.filesSuccessful || 0\n            },\n            aggregateCounters: result.counters,\n            continuationToken: continuationToken\n          };\n          options.onProgress(progress);\n        }\n\n        reachMaxBatches =\n          options.maxBatches === undefined ? false : batchCounter >= options.maxBatches;\n      } while (continuationToken && !reachMaxBatches);\n\n      return result;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates an instance of DataLakePathClient from url and credential.\n   *\n   * @param url - A Client string pointing to Azure Storage data lake path (directory or file), such as\n   *                     \"https://myaccount.dfs.core.windows.net/filesystem/directory\" or \"https://myaccount.dfs.core.windows.net/filesystem/file\".\n   *                     You can append a SAS if using AnonymousCredential, such as \"https://myaccount.dfs.core.windows.net/filesystem/directory?sasString\".\n   * @param credential - Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  public constructor(\n    url: string,\n    credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n    options?: StoragePipelineOptions\n  );\n\n  /**\n   * Creates an instance of DataLakePathClient from url and pipeline.\n   *\n   * @param url - A Client string pointing to Azure Storage data lake path (directory or file), such as\n   *                     \"https://myaccount.dfs.core.windows.net/filesystem/directory\" or \"https://myaccount.dfs.core.windows.net/filesystem/file\".\n   *                     You can append a SAS if using AnonymousCredential, such as \"https://myaccount.dfs.core.windows.net/filesystem/directory?sasString\".\n   * @param pipeline - Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   */\n  public constructor(url: string, pipeline: Pipeline);\n\n  public constructor(\n    url: string,\n    credentialOrPipeline?:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | Pipeline,\n    // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n    options?: StoragePipelineOptions\n  ) {\n    if (credentialOrPipeline instanceof Pipeline) {\n      super(url, credentialOrPipeline);\n    } else {\n      let credential;\n      if (credentialOrPipeline === undefined) {\n        credential = new AnonymousCredential();\n      } else {\n        credential = credentialOrPipeline;\n      }\n\n      const pipeline = newPipeline(credential, options);\n      super(url, pipeline);\n    }\n\n    this.pathContext = new Path(this.storageClientContext);\n    this.blobClient = new BlobClient(this.blobEndpointUrl, this.pipeline);\n  }\n\n  /**\n   * Name of current file system.\n   *\n   * @readonly\n   */\n  public get fileSystemName(): string {\n    return this.blobClient.containerName;\n  }\n\n  /**\n   * Name of current path (directory or file).\n   *\n   * @readonly\n   */\n  public get name(): string {\n    return this.blobClient.name;\n  }\n\n  /**\n   * Convert current DataLakePathClient to DataLakeDirectoryClient if current path is a directory.\n   *\n   */\n  // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-subclients */\n  public toDirectoryClient(): DataLakeDirectoryClient {\n    return new DataLakeDirectoryClient(this.dfsEndpointUrl, this.pipeline);\n  }\n\n  /**\n   * Convert current DataLakePathClient to DataLakeFileClient if current path is a file.\n   *\n   */\n  // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-subclients */\n  public toFileClient(): DataLakeFileClient {\n    return new DataLakeFileClient(this.dfsEndpointUrl, this.pipeline);\n  }\n\n  /**\n   * Get a {@link DataLakeLeaseClient} that manages leases on the path (directory or file).\n   *\n   * @param proposeLeaseId - Optional. Initial proposed lease Id.\n   */\n  public getDataLakeLeaseClient(proposeLeaseId?: string): DataLakeLeaseClient {\n    return new DataLakeLeaseClient(this.blobClient.getBlobLeaseClient(proposeLeaseId));\n  }\n\n  /**\n   * Create a directory or path.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create\n   *\n   * @param resourceType - Resource type, \"directory\" or \"file\".\n   * @param options - Optional. Options when creating path.\n   */\n  public async create(\n    resourceType: PathResourceTypeModel,\n    options: PathCreateOptions = {}\n  ): Promise<PathCreateResponse> {\n    options.conditions = options.conditions || {};\n    const { span, updatedOptions } = createSpan(\"DataLakePathClient-create\", options);\n    try {\n      return await this.pathContext.create({\n        ...options,\n        resource: resourceType,\n        leaseAccessConditions: options.conditions,\n        modifiedAccessConditions: options.conditions,\n        properties: toProperties(options.metadata),\n        ...convertTracingToRequestOptionsBase(updatedOptions)\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Create a directory or file. If the resource already exists, it is not changed.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create\n   *\n   * @param resourceType - Resource type, \"directory\" or \"file\".\n   * @param options -\n   */\n  public async createIfNotExists(\n    resourceType: PathResourceTypeModel,\n    options: PathCreateIfNotExistsOptions = {}\n  ): Promise<PathCreateIfNotExistsResponse> {\n    const { span, updatedOptions } = createSpan(\"DataLakePathClient-createIfNotExists\", options);\n    try {\n      const conditions = { ifNoneMatch: ETagAny };\n      const res = await this.create(resourceType, {\n        ...options,\n        conditions,\n        tracingOptions: updatedOptions.tracingOptions\n      });\n      return {\n        succeeded: true,\n        ...res\n      };\n    } catch (e) {\n      if (e.details?.errorCode === \"PathAlreadyExists\") {\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message: \"Expected exception when creating a blob only if it does not already exist.\"\n        });\n        return {\n          succeeded: false,\n          ...e.response?.parsedHeaders,\n          _response: e.response\n        };\n      }\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns true if the Data Lake file represented by this client exists; false otherwise.\n   *\n   * NOTE: use this function with care since an existing file might be deleted by other clients or\n   * applications. Vice versa new files might be added by other clients or applications after this\n   * function completes.\n   *\n   * @param options - options to Exists operation.\n   */\n  public async exists(options: PathExistsOptions = {}): Promise<boolean> {\n    const { span, updatedOptions } = createSpan(\"DataLakeFileClient-exists\", options);\n    try {\n      return await this.blobClient.exists(updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Delete current path (directory or file).\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete\n   *\n   * @param recursive - Required and valid only when the resource is a directory. If \"true\", all paths beneath the directory will be deleted.\n   * @param options - Optional. Options when deleting path.\n   */\n  public async delete(\n    recursive?: boolean,\n    options: PathDeleteOptions = {}\n  ): Promise<PathDeleteResponse> {\n    options.conditions = options.conditions || {};\n    const { span, updatedOptions } = createSpan(\"DataLakePathClient-delete\", options);\n    try {\n      let continuation;\n      let response;\n\n      // How to handle long delete loop?\n      do {\n        response = await this.pathContext.delete({\n          continuation,\n          recursive,\n          leaseAccessConditions: options.conditions,\n          modifiedAccessConditions: options.conditions,\n          ...convertTracingToRequestOptionsBase(updatedOptions),\n          abortSignal: options.abortSignal\n        });\n        continuation = response.continuation;\n      } while (continuation !== undefined && continuation !== \"\");\n\n      return response;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Delete current path (directory or file) if it exists.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/delete\n   *\n   * @param recursive - Required and valid only when the resource is a directory. If \"true\", all paths beneath the directory will be deleted.\n   * @param options -\n   */\n  public async deleteIfExists(\n    recursive?: boolean,\n    options: PathDeleteOptions = {}\n  ): Promise<PathDeleteIfExistsResponse> {\n    options.conditions = options.conditions || {};\n    const { span, updatedOptions } = createSpan(\"DataLakePathClient-deleteIfExists\", options);\n    try {\n      const res = await this.delete(recursive, updatedOptions);\n      return {\n        succeeded: true,\n        ...res\n      };\n    } catch (e) {\n      if (e.details?.errorCode === \"PathNotFound\") {\n        span.setStatus({\n          code: SpanStatusCode.ERROR,\n          message: \"Expected exception when deleting a directory or file only if it exists.\"\n        });\n        return {\n          succeeded: false,\n          ...e.response?.parsedHeaders,\n          _response: e.response\n        };\n      }\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns the access control data for a path (directory of file).\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/getproperties\n   *\n   * @param options - Optional. Options when getting file access control.\n   */\n  public async getAccessControl(\n    options: PathGetAccessControlOptions = {}\n  ): Promise<PathGetAccessControlResponse> {\n    options.conditions = options.conditions || {};\n    const { span, updatedOptions } = createSpan(\"DataLakePathClient-getAccessControl\", options);\n    try {\n      const response = await this.pathContext.getProperties({\n        action: \"getAccessControl\",\n        upn: options.userPrincipalName,\n        leaseAccessConditions: options.conditions,\n        modifiedAccessConditions: options.conditions,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n        abortSignal: options.abortSignal\n      });\n      return toPathGetAccessControlResponse(response);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Set the access control data for a path (directory of file).\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update\n   *\n   * @param acl - The POSIX access control list for the file or directory.\n   * @param options - Optional. Options when setting path access control.\n   */\n  public async setAccessControl(\n    acl: PathAccessControlItem[],\n    options: PathSetAccessControlOptions = {}\n  ): Promise<PathSetAccessControlResponse> {\n    options.conditions = options.conditions || {};\n    const { span, updatedOptions } = createSpan(\"DataLakePathClient-setAccessControl\", options);\n    try {\n      return await this.pathContext.setAccessControl({\n        ...options,\n        acl: toAclString(acl),\n        leaseAccessConditions: options.conditions,\n        modifiedAccessConditions: options.conditions,\n        ...convertTracingToRequestOptionsBase(updatedOptions)\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets the Access Control on a path and sub paths.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update\n   *\n   * @param acl - The POSIX access control list for the file or directory.\n   * @param options - Optional. Options\n   */\n  public async setAccessControlRecursive(\n    acl: PathAccessControlItem[],\n    options: PathChangeAccessControlRecursiveOptions = {}\n  ): Promise<PathChangeAccessControlRecursiveResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"DataLakePathClient-setAccessControlRecursive\",\n      options\n    );\n    try {\n      return this.setAccessControlRecursiveInternal(\"set\", acl, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Modifies the Access Control on a path and sub paths.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update\n   *\n   * @param acl - The POSIX access control list for the file or directory.\n   * @param options - Optional. Options\n   */\n  public async updateAccessControlRecursive(\n    acl: PathAccessControlItem[],\n    options: PathChangeAccessControlRecursiveOptions = {}\n  ): Promise<PathChangeAccessControlRecursiveResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"DataLakePathClient-updateAccessControlRecursive\",\n      options\n    );\n    try {\n      return this.setAccessControlRecursiveInternal(\"modify\", acl, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Removes the Access Control on a path and sub paths.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update\n   *\n   * @param acl - The POSIX access control list for the file or directory.\n   * @param options - Optional. Options\n   */\n  public async removeAccessControlRecursive(\n    acl: RemovePathAccessControlItem[],\n    options: PathChangeAccessControlRecursiveOptions = {}\n  ): Promise<PathChangeAccessControlRecursiveResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"DataLakePathClient-removeAccessControlRecursive\",\n      options\n    );\n    try {\n      return this.setAccessControlRecursiveInternal(\"remove\", acl, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets the file permissions on a path.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update\n   *\n   * @param permissions - The POSIX access permissions for the file owner, the file owning group, and others.\n   * @param options - Optional. Options when setting path permissions.\n   */\n  public async setPermissions(\n    permissions: PathPermissions,\n    options: PathSetPermissionsOptions = {}\n  ): Promise<PathSetPermissionsResponse> {\n    options.conditions = options.conditions || {};\n    const { span, updatedOptions } = createSpan(\"DataLakePathClient-setPermissions\", options);\n    try {\n      return await this.pathContext.setAccessControl({\n        ...options,\n        permissions: toPermissionsString(permissions),\n        leaseAccessConditions: options.conditions,\n        modifiedAccessConditions: options.conditions,\n        ...convertTracingToRequestOptionsBase(updatedOptions)\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns all user-defined metadata, standard HTTP properties, and system properties\n   * for the path (directory or file).\n   *\n   * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if\n   * they originally contained uppercase characters. This differs from the metadata keys returned by\n   * the methods of {@link DataLakeFileSystemClient} that list paths using the `includeMetadata` option, which\n   * will retain their original casing.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-properties\n   *\n   * @param options - Optional. Options when getting path properties.\n   */\n  public async getProperties(\n    options: PathGetPropertiesOptions = {}\n  ): Promise<PathGetPropertiesResponse> {\n    const { span, updatedOptions } = createSpan(\"DataLakePathClient-getProperties\", options);\n    try {\n      return await this.blobClient.getProperties({\n        ...options,\n        customerProvidedKey: undefined, // Doesn't support customer provided key in data lake package yet\n        tracingOptions: updatedOptions.tracingOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets system properties on the path (directory or file).\n   *\n   * If no value provided, or no value provided for the specified blob HTTP headers,\n   * these blob HTTP headers without a value will be cleared.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-properties\n   *\n   * @param httpHeaders -\n   * @param options -\n   */\n  public async setHttpHeaders(\n    httpHeaders: PathHttpHeaders,\n    options: PathSetHttpHeadersOptions = {}\n  ): Promise<PathSetHttpHeadersResponse> {\n    const { span, updatedOptions } = createSpan(\"DataLakePathClient-setHttpHeaders\", options);\n    try {\n      return await this.blobClient.setHTTPHeaders(\n        {\n          blobCacheControl: httpHeaders.cacheControl,\n          blobContentType: httpHeaders.contentType,\n          blobContentMD5: httpHeaders.contentMD5,\n          blobContentEncoding: httpHeaders.contentEncoding,\n          blobContentLanguage: httpHeaders.contentLanguage,\n          blobContentDisposition: httpHeaders.contentDisposition\n        },\n        updatedOptions\n      );\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets user-defined metadata for the specified path (directory of file) as one or more name-value pairs.\n   *\n   * If no option provided, or no metadata defined in the parameter, the path\n   * metadata will be removed.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-metadata\n   *\n   * @param metadata - Optional. Replace existing metadata with this value.\n   *                              If no value provided the existing metadata will be removed.\n   * @param options - Optional. Options when setting path metadata.\n   */\n  public async setMetadata(\n    metadata?: Metadata,\n    options: PathSetMetadataOptions = {}\n  ): Promise<PathSetMetadataResponse> {\n    const { span, updatedOptions } = createSpan(\"DataLakePathClient-setMetadata\", options);\n    try {\n      return await this.blobClient.setMetadata(metadata, {\n        ...options,\n        customerProvidedKey: undefined, // Doesn't support customer provided key in data lake package yet\n        tracingOptions: updatedOptions.tracingOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Move directory or file within same file system.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create\n   *\n   * @param destinationPath - Destination directory path like \"directory\" or file path \"directory/file\".\n   *                                 If the destinationPath is authenticated with SAS, add the SAS to the destination path like \"directory/file?sasToken\".\n   * @param options - Optional. Options when moving directory or file.\n   */\n  public async move(destinationPath: string, options?: PathMoveOptions): Promise<PathMoveResponse>;\n\n  /**\n   * Move directory or file to another file system.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create\n   *\n   * @param destinationFileSystem - Destination file system like \"filesystem\".\n   * @param destinationPath - Destination directory path like \"directory\" or file path \"directory/file\"\n   *                                 If the destinationPath is authenticated with SAS, add the SAS to the destination path like \"directory/file?sasToken\".\n   * @param options - Optional. Options when moving directory or file.\n   */\n  public async move(\n    destinationFileSystem: string,\n    destinationPath: string,\n    options?: PathMoveOptions\n  ): Promise<PathMoveResponse>;\n\n  public async move(\n    destinationPathOrFileSystem: string,\n    destinationPathOrOptions?: string | PathMoveOptions,\n    options?: PathMoveOptions\n  ): Promise<PathMoveResponse> {\n    let destinationFileSystem = this.fileSystemName;\n    let destinationPath = destinationPathOrFileSystem;\n\n    if (typeof destinationPathOrOptions === \"string\") {\n      destinationFileSystem = destinationPathOrFileSystem;\n      destinationPath = destinationPathOrOptions;\n      options = options || {};\n    } else {\n      options = destinationPathOrOptions || {};\n    }\n\n    options.conditions = options.conditions || {};\n    options.destinationConditions = options.destinationConditions || {};\n\n    const { span, updatedOptions } = createSpan(\"DataLakePathClient-move\", options);\n\n    const renameSource = getURLPathAndQuery(this.dfsEndpointUrl);\n\n    const split: string[] = destinationPath.split(\"?\");\n    let destinationUrl: string;\n    if (split.length === 2) {\n      const renameDestination = `/${destinationFileSystem}/${split[0]}`;\n      destinationUrl = setURLPath(this.dfsEndpointUrl, renameDestination);\n      destinationUrl = setURLQueries(destinationUrl, split[1]);\n    } else if (split.length === 1) {\n      const renameDestination = `/${destinationFileSystem}/${destinationPath}`;\n      destinationUrl = setURLPath(this.dfsEndpointUrl, renameDestination);\n    } else {\n      throw new RangeError(\"Destination path should not contain more than one query string\");\n    }\n\n    const destPathClient = new DataLakePathClient(destinationUrl, this.pipeline);\n\n    try {\n      return await destPathClient.pathContext.create({\n        mode: \"legacy\", // By default\n        renameSource,\n        sourceLeaseId: options.conditions.leaseId,\n        leaseAccessConditions: options.destinationConditions,\n        sourceModifiedAccessConditions: {\n          sourceIfMatch: options.conditions.ifMatch,\n          sourceIfNoneMatch: options.conditions.ifNoneMatch,\n          sourceIfModifiedSince: options.conditions.ifModifiedSince,\n          sourceIfUnmodifiedSince: options.conditions.ifUnmodifiedSince\n        },\n        modifiedAccessConditions: options.destinationConditions,\n        ...convertTracingToRequestOptionsBase(updatedOptions),\n        abortSignal: options.abortSignal\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n\n/**\n * A DataLakeDirectoryClient represents a URL to the Azure Storage directory.\n */\nexport class DataLakeDirectoryClient extends DataLakePathClient {\n  // https://stackoverflow.com/questions/50729485/override-method-with-different-argument-types-in-extended-class-typescript\n  /**\n   * Create a directory.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create\n   *\n   * @param resourceType - Resource type, must be \"directory\" for DataLakeDirectoryClient.\n   * @param options - Optional. Options when creating directory.\n   */\n  public async create(\n    resourceType: PathResourceTypeModel,\n    options?: PathCreateOptions\n  ): Promise<PathCreateResponse>;\n\n  /**\n   * Create a directory.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create\n   *\n   * @param options - Optional. Options when creating directory.\n   */\n  public async create(options?: DirectoryCreateOptions): Promise<DirectoryCreateResponse>;\n\n  public async create(\n    resourceTypeOrOptions?: PathResourceTypeModel | PathCreateOptions,\n    options: PathCreateOptions = {}\n  ): Promise<PathCreateResponse> {\n    if (resourceTypeOrOptions === \"directory\") {\n      return super.create(resourceTypeOrOptions as PathResourceTypeModel, options);\n    }\n\n    if (resourceTypeOrOptions === \"file\") {\n      throw TypeError(\n        `DataLakeDirectoryClient:create() resourceType cannot be ${resourceTypeOrOptions}. Refer to DataLakeFileClient for file creation.`\n      );\n    }\n\n    options = resourceTypeOrOptions || {};\n    options.conditions = options.conditions || {};\n    const { span, updatedOptions } = createSpan(\"DataLakeDirectoryClient-create\", options);\n    try {\n      return await super.create(\"directory\", {\n        ...options,\n        tracingOptions: {\n          ...options.tracingOptions,\n          ...convertTracingToRequestOptionsBase(updatedOptions)\n        }\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Create a directory if it doesn't already exists.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create\n   *\n   * @param resourceType - Resource type, must be \"directory\" for DataLakeDirectoryClient.\n   * @param options -\n   */\n  public async createIfNotExists(\n    resourceType: PathResourceTypeModel,\n    options?: PathCreateIfNotExistsOptions\n  ): Promise<PathCreateIfNotExistsResponse>;\n\n  /**\n   * Create a directory if it doesn't already exists.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create\n   *\n   * @param options -\n   */\n  public async createIfNotExists(\n    options?: DirectoryCreateIfNotExistsOptions\n  ): Promise<DirectoryCreateIfNotExistsResponse>;\n\n  public async createIfNotExists(\n    resourceTypeOrOptions?: PathResourceTypeModel | PathCreateIfNotExistsOptions,\n    options: PathCreateIfNotExistsOptions = {}\n  ): Promise<PathCreateIfNotExistsResponse> {\n    if (resourceTypeOrOptions === \"file\") {\n      throw TypeError(\n        `DataLakeDirectoryClient:createIfNotExists() resourceType cannot be ${resourceTypeOrOptions}. Refer to DataLakeFileClient for file creation.`\n      );\n    }\n\n    if (resourceTypeOrOptions !== \"directory\") {\n      options = resourceTypeOrOptions || {};\n    }\n\n    const { span, updatedOptions } = createSpan(\n      \"DataLakeDirectoryClient-createIfNotExists\",\n      options\n    );\n    try {\n      return await super.createIfNotExists(\"directory\", {\n        ...options,\n        tracingOptions: {\n          ...options.tracingOptions,\n          ...convertTracingToRequestOptionsBase(updatedOptions)\n        }\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a {@link DataLakeDirectoryClient} object under current directory.\n   *\n   * @param subdirectoryName - Subdirectory name.\n   */\n  public getSubdirectoryClient(subdirectoryName: string): DataLakeDirectoryClient {\n    return new DataLakeDirectoryClient(\n      appendToURLPath(this.url, encodeURIComponent(subdirectoryName)),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Creates a {@link DataLakeFileClient} object under current directory.\n   *\n   * @param fileName -\n   */\n  // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-subclients */\n  public getFileClient(fileName: string): DataLakeFileClient {\n    return new DataLakeFileClient(\n      appendToURLPath(this.url, encodeURIComponent(fileName)),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Only available for clients constructed with a shared key credential.\n   *\n   * Generates a Service Shared Access Signature (SAS) URI based on the client properties\n   * and parameters passed in. The SAS is signed by the shared key credential of the client.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n   *\n   * @param options - Optional parameters.\n   * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n   */\n  public generateSasUrl(options: DirectoryGenerateSasUrlOptions): Promise<string> {\n    return new Promise((resolve) => {\n      if (!(this.credential instanceof StorageSharedKeyCredential)) {\n        throw RangeError(\n          \"Can only generate the SAS when the client is initialized with a shared key credential\"\n        );\n      }\n\n      const sas = generateDataLakeSASQueryParameters(\n        {\n          fileSystemName: this.fileSystemName,\n          pathName: this.name,\n          isDirectory: true,\n          ...options\n        },\n        this.credential\n      ).toString();\n\n      resolve(appendToURLQuery(this.url, sas));\n    });\n  }\n}\n\n/**\n * A DataLakeFileClient represents a URL to the Azure Storage file.\n */\nexport class DataLakeFileClient extends DataLakePathClient {\n  /**\n   * pathContextInternal provided by protocol layer.\n   */\n  private pathContextInternal: Path;\n\n  /**\n   * pathContextInternal provided by protocol layer, with its url pointing to the Blob endpoint.\n   */\n  private pathContextInternalToBlobEndpoint: Path;\n\n  /**\n   * blockBlobClientInternal provided by `@azure/storage-blob` package.\n   */\n  private blockBlobClientInternal: BlockBlobClient;\n\n  /**\n   * Creates an instance of DataLakeFileClient from url and credential.\n   *\n   * @param url - A Client string pointing to Azure Storage data lake file, such as\n   *                     \"https://myaccount.dfs.core.windows.net/filesystem/file\".\n   *                     You can append a SAS if using AnonymousCredential, such as \"https://myaccount.dfs.core.windows.net/filesystem/directory/file?sasString\".\n   * @param credential - Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  public constructor(\n    url: string,\n    credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n    options?: StoragePipelineOptions\n  );\n\n  /**\n   * Creates an instance of DataLakeFileClient from url and pipeline.\n   *\n   * @param url - A Client string pointing to Azure Storage data lake file, such as\n   *                     \"https://myaccount.dfs.core.windows.net/filesystem/file\".\n   *                     You can append a SAS if using AnonymousCredential, such as \"https://myaccount.dfs.core.windows.net/filesystem/directory/file?sasString\".\n   * @param pipeline - Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   */\n  public constructor(url: string, pipeline: Pipeline);\n\n  public constructor(\n    url: string,\n    credentialOrPipeline?:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | Pipeline,\n    // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n    options?: StoragePipelineOptions\n  ) {\n    if (credentialOrPipeline instanceof Pipeline) {\n      super(url, credentialOrPipeline);\n    } else {\n      let credential;\n      if (credentialOrPipeline === undefined) {\n        credential = new AnonymousCredential();\n      } else {\n        credential = credentialOrPipeline;\n      }\n\n      const pipeline = newPipeline(credential, options);\n      super(url, pipeline);\n    }\n\n    this.pathContextInternal = new Path(this.storageClientContext);\n    this.blockBlobClientInternal = new BlockBlobClient(this.blobEndpointUrl, this.pipeline);\n    this.pathContextInternalToBlobEndpoint = new Path(this.storageClientContextToBlobEndpoint);\n  }\n\n  /**\n   * Create a file.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create\n   *\n   * @param resourceType - Resource type, must be \"file\" for DataLakeFileClient.\n   * @param options - Optional. Options when creating file.\n   */\n  public async create(\n    resourceType: PathResourceTypeModel,\n    options?: PathCreateOptions\n  ): Promise<PathCreateResponse>;\n\n  /**\n   * Create a file.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create\n   *\n   * @param options - Optional. Options when creating file.\n   */\n  public async create(options?: FileCreateOptions): Promise<FileCreateResponse>;\n\n  public async create(\n    resourceTypeOrOptions?: PathResourceTypeModel | PathCreateOptions,\n    options: PathCreateOptions = {}\n  ): Promise<PathCreateResponse> {\n    if (resourceTypeOrOptions === \"file\") {\n      return super.create(resourceTypeOrOptions as PathResourceTypeModel, options);\n    }\n\n    if (resourceTypeOrOptions === \"directory\") {\n      throw TypeError(\n        `DataLakeFileClient:create() resourceType cannot be ${resourceTypeOrOptions}. Refer to DataLakeDirectoryClient for directory creation.`\n      );\n    }\n\n    options = resourceTypeOrOptions || {};\n    options.conditions = options.conditions || {};\n    const { span, updatedOptions } = createSpan(\"DataLakeFileClient-create\", options);\n    try {\n      return await super.create(\"file\", {\n        ...options,\n        tracingOptions: {\n          ...options.tracingOptions,\n          ...convertTracingToRequestOptionsBase(updatedOptions)\n        }\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Create a file if it doesn't already exists.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create\n   *\n   * @param resourceType - Resource type, must be \"file\" for DataLakeFileClient.\n   * @param options -\n   */\n  public async createIfNotExists(\n    resourceType: PathResourceTypeModel,\n    options?: PathCreateIfNotExistsOptions\n  ): Promise<PathCreateIfNotExistsResponse>;\n\n  /**\n   * Create a file if it doesn't already exists.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create\n   *\n   * @param options - Optional. Options when creating file.\n   */\n  public async createIfNotExists(\n    options?: FileCreateIfNotExistsOptions\n  ): Promise<FileCreateIfNotExistsResponse>;\n\n  public async createIfNotExists(\n    resourceTypeOrOptions?: PathResourceTypeModel | PathCreateOptions,\n    options: PathCreateIfNotExistsOptions = {}\n  ): Promise<PathCreateIfNotExistsResponse> {\n    if (resourceTypeOrOptions === \"directory\") {\n      throw TypeError(\n        `DataLakeFileClient:createIfNotExists() resourceType cannot be ${resourceTypeOrOptions}. Refer to DataLakeDirectoryClient for directory creation.`\n      );\n    }\n\n    if (resourceTypeOrOptions !== \"file\") {\n      options = resourceTypeOrOptions || {};\n    }\n\n    const { span, updatedOptions } = createSpan(\"DataLakeFileClient-createIfNotExists\", options);\n    try {\n      return await super.createIfNotExists(\"file\", {\n        ...options,\n        tracingOptions: {\n          ...options.tracingOptions,\n          ...convertTracingToRequestOptionsBase(updatedOptions)\n        }\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Downloads a file from the service, including its metadata and properties.\n   *\n   * * In Node.js, data returns in a Readable stream readableStreamBody\n   * * In browsers, data returns in a promise contentAsBlob\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob\n   *\n   * * Example usage (Node.js):\n   *\n   * ```js\n   * // Download and convert a file to a string\n   * const downloadResponse = await fileClient.read();\n   * const downloaded = await streamToBuffer(downloadResponse.readableStreamBody);\n   * console.log(\"Downloaded file content:\", downloaded.toString());\n   *\n   * async function streamToBuffer(readableStream) {\n   *   return new Promise((resolve, reject) => {\n   *     const chunks = [];\n   *     readableStream.on(\"data\", (data) => {\n   *       chunks.push(data instanceof Buffer ? data : Buffer.from(data));\n   *     });\n   *     readableStream.on(\"end\", () => {\n   *       resolve(Buffer.concat(chunks));\n   *     });\n   *     readableStream.on(\"error\", reject);\n   *   });\n   * }\n   * ```\n   *\n   * Example usage (browser):\n   *\n   * ```js\n   * // Download and convert a file to a string\n   * const downloadResponse = await fileClient.read();\n   * const downloaded = await blobToString(await downloadResponse.contentAsBlob);\n   * console.log(\"Downloaded file content\", downloaded);\n   *\n   * async function blobToString(blob: Blob): Promise<string> {\n   *   const fileReader = new FileReader();\n   *   return new Promise<string>((resolve, reject) => {\n   *     fileReader.onloadend = (ev: any) => {\n   *       resolve(ev.target!.result);\n   *     };\n   *     fileReader.onerror = reject;\n   *     fileReader.readAsText(blob);\n   *   });\n   * }\n   * ```\n   *\n   * @param offset - Optional. Offset to read file, default value is 0.\n   * @param count - Optional. How many bytes to read, default will read from offset to the end.\n   * @param options - Optional. Options when reading file.\n   */\n  public async read(\n    offset: number = 0,\n    count?: number,\n    options: FileReadOptions = {}\n  ): Promise<FileReadResponse> {\n    const { span, updatedOptions } = createSpan(\"DataLakeFileClient-read\", options);\n    try {\n      const rawResponse = await this.blockBlobClientInternal.download(\n        offset,\n        count,\n        updatedOptions\n      );\n\n      const response = rawResponse as FileReadResponse;\n      if (!isNode && !response.contentAsBlob) {\n        response.contentAsBlob = rawResponse.blobBody;\n      }\n      response.fileContentMD5 = rawResponse.blobContentMD5;\n      response._response.parsedHeaders.fileContentMD5 =\n        rawResponse._response.parsedHeaders.blobContentMD5;\n      delete rawResponse.blobContentMD5;\n      delete rawResponse._response.parsedHeaders.blobContentMD5;\n\n      return response;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Uploads data to be appended to a file. Data can only be appended to a file.\n   * To apply perviously uploaded data to a file, call flush.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update\n   *\n   * @param body - Content to be uploaded.\n   * @param offset - Append offset in bytes.\n   * @param length - Length of content to append in bytes.\n   * @param options - Optional. Options when appending data.\n   */\n  public async append(\n    body: HttpRequestBody,\n    offset: number,\n    length: number,\n    options: FileAppendOptions = {}\n  ): Promise<FileAppendResponse> {\n    options.conditions = options.conditions || {};\n    const { span, updatedOptions } = createSpan(\"DataLakeFileClient-append\", options);\n    try {\n      return await this.pathContextInternal.appendData(body, {\n        pathHttpHeaders: {\n          contentMD5: options.transactionalContentMD5\n        },\n        abortSignal: options.abortSignal,\n        position: offset,\n        contentLength: length,\n        leaseAccessConditions: options.conditions,\n        requestOptions: {\n          onUploadProgress: options.onProgress\n        },\n        ...convertTracingToRequestOptionsBase(updatedOptions)\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Flushes (writes) previously appended data to a file.\n   *\n   * @param position - File position to flush.\n   *                          This parameter allows the caller to upload data in parallel and control the order in which it is appended to the file.\n   *                          It is required when uploading data to be appended to the file and when flushing previously uploaded data to the file.\n   *                          The value must be the position where the data is to be appended. Uploaded data is not immediately flushed, or written,\n   *                          to the file. To flush, the previously uploaded data must be contiguous, the position parameter must be specified and\n   *                          equal to the length of the file after all data has been written, and there must not be a request entity body included\n   *                          with the request.\n   * @param options - Optional. Options when flushing data.\n   */\n  public async flush(position: number, options: FileFlushOptions = {}): Promise<FileFlushResponse> {\n    options.conditions = options.conditions || {};\n    const { span, updatedOptions } = createSpan(\"DataLakeFileClient-flush\", options);\n    try {\n      return await this.pathContextInternal.flushData({\n        ...options,\n        position,\n        contentLength: 0,\n        leaseAccessConditions: options.conditions,\n        modifiedAccessConditions: options.conditions,\n        ...convertTracingToRequestOptionsBase(updatedOptions)\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  // high level functions\n\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Uploads a local file to a Data Lake file.\n   *\n   * @param filePath - Full path of the local file\n   * @param options -\n   */\n  public async uploadFile(\n    filePath: string,\n    // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n    options: FileParallelUploadOptions = {}\n  ): Promise<FileUploadResponse> {\n    const { span, updatedOptions } = createSpan(\"DataLakeFileClient-uploadFile\", options);\n    try {\n      const size = (await fsStat(filePath)).size;\n      return await this.uploadSeekableInternal(\n        (offset: number, contentSize: number) => {\n          return () =>\n            fsCreateReadStream(filePath, {\n              autoClose: true,\n              end: offset + contentSize - 1,\n              start: offset\n            });\n        },\n        size,\n        updatedOptions\n      );\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Uploads a Buffer(Node.js)/Blob/ArrayBuffer/ArrayBufferView to a File.\n   *\n   * @param data - Buffer(Node), Blob, ArrayBuffer or ArrayBufferView\n   * @param options -\n   */\n  public async upload(\n    data: Buffer | Blob | ArrayBuffer | ArrayBufferView,\n    options: FileParallelUploadOptions = {}\n  ): Promise<FileUploadResponse> {\n    const { span, updatedOptions } = createSpan(\"DataLakeFileClient-upload\", options);\n    try {\n      if (isNode) {\n        let buffer: Buffer;\n        if (data instanceof Buffer) {\n          buffer = data;\n        } else if (data instanceof ArrayBuffer) {\n          buffer = Buffer.from(data);\n        } else {\n          data = data as ArrayBufferView;\n          buffer = Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n        }\n\n        return this.uploadSeekableInternal(\n          (offset: number, size: number): Buffer => buffer.slice(offset, offset + size),\n          buffer.length,\n          updatedOptions\n        );\n      } else {\n        const browserBlob = new Blob([data]);\n        return this.uploadSeekableInternal(\n          (offset: number, size: number): Blob => browserBlob.slice(offset, offset + size),\n          browserBlob.size,\n          updatedOptions\n        );\n      }\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async uploadSeekableInternal(\n    bodyFactory: (offset: number, count: number) => HttpRequestBody,\n    size: number,\n    options: FileParallelUploadOptions = {}\n  ): Promise<FileUploadResponse> {\n    const { span, updatedOptions } = createSpan(\"DataLakeFileClient-uploadData\", options);\n    try {\n      if (size > FILE_MAX_SIZE_BYTES) {\n        throw new RangeError(`size must be <= ${FILE_MAX_SIZE_BYTES}.`);\n      }\n\n      // Create the file.\n      const createRes = this.create({\n        abortSignal: options.abortSignal,\n        metadata: options.metadata,\n        permissions: options.permissions,\n        umask: options.umask,\n        conditions: options.conditions,\n        pathHttpHeaders: options.pathHttpHeaders,\n        tracingOptions: updatedOptions.tracingOptions\n      });\n      // append() with empty data would return error, so do not continue\n      if (size === 0) {\n        return await createRes;\n      } else {\n        await createRes;\n      }\n\n      // After the File is Create, Lease ID is the only valid request parameter.\n      options.conditions = { leaseId: options.conditions?.leaseId };\n\n      if (!options.chunkSize) {\n        options.chunkSize = Math.ceil(size / BLOCK_BLOB_MAX_BLOCKS);\n        if (options.chunkSize < FILE_UPLOAD_DEFAULT_CHUNK_SIZE) {\n          options.chunkSize = FILE_UPLOAD_DEFAULT_CHUNK_SIZE;\n        }\n      }\n      if (options.chunkSize < 1 || options.chunkSize > FILE_UPLOAD_MAX_CHUNK_SIZE) {\n        throw new RangeError(`chunkSize option must be >= 1 and <= ${FILE_UPLOAD_MAX_CHUNK_SIZE}`);\n      }\n\n      if (!options.maxConcurrency) {\n        options.maxConcurrency = DEFAULT_HIGH_LEVEL_CONCURRENCY;\n      }\n      if (options.maxConcurrency <= 0) {\n        throw new RangeError(`maxConcurrency must be > 0.`);\n      }\n\n      if (!options.singleUploadThreshold) {\n        options.singleUploadThreshold = FILE_MAX_SINGLE_UPLOAD_THRESHOLD;\n      }\n      if (\n        options.singleUploadThreshold < 1 ||\n        options.singleUploadThreshold > FILE_MAX_SINGLE_UPLOAD_THRESHOLD\n      ) {\n        throw new RangeError(\n          `singleUploadThreshold option must be >= 1 and <= ${FILE_MAX_SINGLE_UPLOAD_THRESHOLD}`\n        );\n      }\n\n      // When buffer length <= singleUploadThreshold, this method will use one append/flush call to finish the upload.\n      if (size <= options.singleUploadThreshold) {\n        await this.append(bodyFactory(0, size), 0, size, {\n          abortSignal: options.abortSignal,\n          conditions: options.conditions,\n          onProgress: options.onProgress,\n          tracingOptions: updatedOptions.tracingOptions\n        });\n\n        return await this.flush(size, {\n          abortSignal: options.abortSignal,\n          conditions: options.conditions,\n          close: options.close,\n          pathHttpHeaders: options.pathHttpHeaders,\n          tracingOptions: updatedOptions.tracingOptions\n        });\n      }\n\n      const numBlocks: number = Math.floor((size - 1) / options.chunkSize) + 1;\n      if (numBlocks > BLOCK_BLOB_MAX_BLOCKS) {\n        throw new RangeError(\n          `The data's size is too big or the chunkSize is too small;` +\n            `the number of chunks must be <= ${BLOCK_BLOB_MAX_BLOCKS}`\n        );\n      }\n\n      let transferProgress: number = 0;\n      const batch = new Batch(options.maxConcurrency);\n\n      for (let i = 0; i < numBlocks; i++) {\n        batch.addOperation(\n          async (): Promise<any> => {\n            const start = options.chunkSize! * i;\n            const end = i === numBlocks - 1 ? size : start + options.chunkSize!;\n            const contentLength = end - start;\n            await this.append(bodyFactory(start, contentLength), start, contentLength, {\n              abortSignal: options.abortSignal,\n              conditions: options.conditions,\n              tracingOptions: updatedOptions.tracingOptions\n            });\n\n            transferProgress += contentLength;\n            if (options.onProgress) {\n              options.onProgress({ loadedBytes: transferProgress });\n            }\n          }\n        );\n      }\n      await batch.do();\n\n      return await this.flush(size, {\n        abortSignal: options.abortSignal,\n        conditions: options.conditions,\n        close: options.close,\n        pathHttpHeaders: options.pathHttpHeaders,\n        tracingOptions: updatedOptions.tracingOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Uploads a Node.js Readable stream into a Data Lake file.\n   * This method will try to create a file, then starts uploading chunk by chunk.\n   * Please make sure potential size of stream doesn't exceed FILE_MAX_SIZE_BYTES and\n   * potential number of chunks doesn't exceed BLOCK_BLOB_MAX_BLOCKS.\n   *\n   * PERFORMANCE IMPROVEMENT TIPS:\n   * * Input stream highWaterMark is better to set a same value with options.chunkSize\n   *   parameter, which will avoid Buffer.concat() operations.\n   *\n   * @param stream - Node.js Readable stream.\n   * @param options -\n   */\n  public async uploadStream(\n    stream: Readable,\n    options: FileParallelUploadOptions = {}\n  ): Promise<FileUploadResponse> {\n    const { span, updatedOptions } = createSpan(\"DataLakeFileClient-uploadStream\", options);\n    try {\n      // Create the file\n      await this.create({\n        abortSignal: options.abortSignal,\n        metadata: options.metadata,\n        permissions: options.permissions,\n        umask: options.umask,\n        conditions: options.conditions,\n        pathHttpHeaders: options.pathHttpHeaders,\n        tracingOptions: updatedOptions.tracingOptions\n      });\n\n      // After the File is Create, Lease ID is the only valid request parameter.\n      options.conditions = { leaseId: options.conditions?.leaseId };\n\n      if (!options.chunkSize) {\n        options.chunkSize = FILE_UPLOAD_DEFAULT_CHUNK_SIZE;\n      }\n      if (options.chunkSize < 1 || options.chunkSize > FILE_UPLOAD_MAX_CHUNK_SIZE) {\n        throw new RangeError(`chunkSize option must be >= 1 and <= ${FILE_UPLOAD_MAX_CHUNK_SIZE}`);\n      }\n      if (!options.maxConcurrency) {\n        options.maxConcurrency = DEFAULT_HIGH_LEVEL_CONCURRENCY;\n      }\n      if (options.maxConcurrency <= 0) {\n        throw new RangeError(`maxConcurrency must be > 0.`);\n      }\n\n      let transferProgress: number = 0;\n      const scheduler = new BufferScheduler(\n        stream,\n        options.chunkSize,\n        options.maxConcurrency,\n        async (body, length, offset) => {\n          await this.append(body, offset!, length, {\n            abortSignal: options.abortSignal,\n            conditions: options.conditions,\n            tracingOptions: updatedOptions.tracingOptions\n          });\n\n          // Update progress after block is successfully uploaded to server, in case of block trying\n          transferProgress += length;\n          if (options.onProgress) {\n            options.onProgress({ loadedBytes: transferProgress });\n          }\n        },\n        // concurrency should set a smaller value than maxConcurrency, which is helpful to\n        // reduce the possibility when a outgoing handler waits for stream data, in\n        // this situation, outgoing handlers are blocked.\n        // Outgoing queue shouldn't be empty.\n        Math.ceil((options.maxConcurrency / 4) * 3)\n      );\n      await scheduler.do();\n\n      return await this.flush(transferProgress, {\n        abortSignal: options.abortSignal,\n        conditions: options.conditions,\n        close: options.close,\n        pathHttpHeaders: options.pathHttpHeaders,\n        tracingOptions: updatedOptions.tracingOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Reads a Data Lake file in parallel to a buffer.\n   * Offset and count are optional, pass 0 for both to read the entire file.\n   *\n   * Warning: Buffers can only support files up to about one gigabyte on 32-bit systems or about two\n   * gigabytes on 64-bit systems due to limitations of Node.js/V8. For files larger than this size,\n   * consider {@link readToFile}.\n   *\n   * @param buffer - Buffer to be fill, must have length larger than count\n   * @param offset - From which position of the Data Lake file to read\n   * @param count - How much data to be read. Will read to the end when passing undefined\n   * @param options -\n   */\n  public async readToBuffer(\n    buffer: Buffer,\n    offset?: number,\n    count?: number,\n    options?: FileReadToBufferOptions\n  ): Promise<Buffer>;\n\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME\n   *\n   * Reads a Data Lake file in parallel to a buffer.\n   * Offset and count are optional, pass 0 for both to read the entire file\n   *\n   * Warning: Buffers can only support files up to about one gigabyte on 32-bit systems or about two\n   * gigabytes on 64-bit systems due to limitations of Node.js/V8. For files larger than this size,\n   * consider {@link readToFile}.\n   *\n   * @param offset - From which position of the Data Lake file to read(in bytes)\n   * @param count - How much data(in bytes) to be read. Will read to the end when passing undefined\n   * @param options -\n   */\n  public async readToBuffer(\n    offset?: number,\n    count?: number,\n    options?: FileReadToBufferOptions\n  ): Promise<Buffer>;\n\n  public async readToBuffer(\n    bufferOrOffset?: Buffer | number,\n    offsetOrCount?: number,\n    countOrOptions?: FileReadToBufferOptions | number,\n    optOptions: FileReadToBufferOptions = {}\n  ): Promise<Buffer> {\n    let buffer: Buffer | undefined = undefined;\n    let offset = 0;\n    let count = 0;\n    let options = optOptions;\n    if (bufferOrOffset instanceof Buffer) {\n      buffer = bufferOrOffset;\n      offset = offsetOrCount || 0;\n      count = typeof countOrOptions === \"number\" ? countOrOptions : 0;\n    } else {\n      offset = typeof bufferOrOffset === \"number\" ? bufferOrOffset : 0;\n      count = typeof offsetOrCount === \"number\" ? offsetOrCount : 0;\n      options = (countOrOptions as FileReadToBufferOptions) || {};\n    }\n    const { span, updatedOptions } = createSpan(\"DataLakeFileClient-readToBuffer\", options);\n    try {\n      if (buffer) {\n        return await this.blockBlobClientInternal.downloadToBuffer(buffer, offset, count, {\n          ...options,\n          maxRetryRequestsPerBlock: options.maxRetryRequestsPerChunk,\n          blockSize: options.chunkSize,\n          tracingOptions: updatedOptions.tracingOptions\n        });\n      } else {\n        return await this.blockBlobClientInternal.downloadToBuffer(offset, count, {\n          ...options,\n          maxRetryRequestsPerBlock: options.maxRetryRequestsPerChunk,\n          blockSize: options.chunkSize,\n          tracingOptions: updatedOptions.tracingOptions\n        });\n      }\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * ONLY AVAILABLE IN NODE.JS RUNTIME.\n   *\n   * Downloads a Data Lake file to a local file.\n   * Fails if the the given file path already exits.\n   * Offset and count are optional, pass 0 and undefined respectively to download the entire file.\n   *\n   * @param filePath -\n   * @param offset - From which position of the file to download.\n   * @param count - How much data to be downloaded. Will download to the end when passing undefined.\n   * @param options - Options to read Data Lake file.\n   * @returns The response data for file read operation,\n   *                                      but with readableStreamBody set to undefined since its\n   *                                      content is already read and written into a local file\n   *                                      at the specified path.\n   */\n  public async readToFile(\n    filePath: string,\n    offset: number = 0,\n    count?: number,\n    options: FileReadOptions = {}\n  ): Promise<FileReadResponse> {\n    const { span, updatedOptions } = createSpan(\"DataLakeFileClient-readToFile\", options);\n    try {\n      return await this.blockBlobClientInternal.downloadToFile(\n        filePath,\n        offset,\n        count,\n        updatedOptions\n      );\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Quick query for a JSON or CSV formatted file.\n   *\n   * Example usage (Node.js):\n   *\n   * ```js\n   * // Query and convert a file to a string\n   * const queryResponse = await fileClient.query(\"select * from BlobStorage\");\n   * const downloaded = (await streamToBuffer(queryResponse.readableStreamBody)).toString();\n   * console.log(\"Query file content:\", downloaded);\n   *\n   * async function streamToBuffer(readableStream) {\n   *   return new Promise((resolve, reject) => {\n   *     const chunks = [];\n   *     readableStream.on(\"data\", (data) => {\n   *       chunks.push(data instanceof Buffer ? data : Buffer.from(data));\n   *     });\n   *     readableStream.on(\"end\", () => {\n   *       resolve(Buffer.concat(chunks));\n   *     });\n   *     readableStream.on(\"error\", reject);\n   *   });\n   * }\n   * ```\n   *\n   * @param query -\n   * @param options -\n   */\n  public async query(query: string, options: FileQueryOptions = {}): Promise<FileReadResponse> {\n    const { span, updatedOptions } = createSpan(\"DataLakeFileClient-query\", options);\n\n    try {\n      const rawResponse = await this.blockBlobClientInternal.query(query, updatedOptions);\n      const response = rawResponse as FileReadResponse;\n      if (!isNode && !response.contentAsBlob) {\n        response.contentAsBlob = rawResponse.blobBody;\n      }\n      response.fileContentMD5 = rawResponse.blobContentMD5;\n      response._response.parsedHeaders.fileContentMD5 =\n        rawResponse._response.parsedHeaders.blobContentMD5;\n      delete rawResponse.blobContentMD5;\n      delete rawResponse._response.parsedHeaders.blobContentMD5;\n      return response;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets an expiry time on a file, once that time is met the file is deleted.\n   *\n   * @param mode -\n   * @param options -\n   */\n  public async setExpiry(\n    mode: FileExpiryMode,\n    options: FileSetExpiryOptions = {}\n  ): Promise<FileSetExpiryResponse> {\n    const { span, updatedOptions } = createSpan(\"DataLakeFileClient-setExpiry\", options);\n    try {\n      let expiresOn: string | undefined = undefined;\n      if (mode === \"RelativeToNow\" || mode === \"RelativeToCreation\") {\n        if (!options.timeToExpireInMs) {\n          throw new Error(`Should specify options.timeToExpireInMs when using mode ${mode}.`);\n        }\n        // MINOR: need check against <= 2**64, but JS number has the precision problem.\n        expiresOn = Math.round(options.timeToExpireInMs).toString();\n      }\n\n      if (mode === \"Absolute\") {\n        if (!options.expiresOn) {\n          throw new Error(`Should specify options.expiresOn when using mode ${mode}.`);\n        }\n        const now = new Date();\n        if (!(options.expiresOn!.getTime() > now.getTime())) {\n          throw new Error(\n            `options.expiresOn should be later than now: ${now.toUTCString()} when using mode ${mode}, but is ${options.expiresOn?.toUTCString()}`\n          );\n        }\n        expiresOn = options.expiresOn!.toUTCString();\n      }\n\n      const adaptedOptions = { ...options, expiresOn };\n      return await this.pathContextInternalToBlobEndpoint.setExpiry(mode, {\n        ...adaptedOptions,\n        tracingOptions: updatedOptions.tracingOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Only available for clients constructed with a shared key credential.\n   *\n   * Generates a Service Shared Access Signature (SAS) URI based on the client properties\n   * and parameters passed in. The SAS is signed by the shared key credential of the client.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n   *\n   * @param options - Optional parameters.\n   * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n   */\n  public generateSasUrl(options: FileGenerateSasUrlOptions): Promise<string> {\n    return new Promise((resolve) => {\n      if (!(this.credential instanceof StorageSharedKeyCredential)) {\n        throw RangeError(\n          \"Can only generate the SAS when the client is initialized with a shared key credential\"\n        );\n      }\n\n      const sas = generateDataLakeSASQueryParameters(\n        {\n          fileSystemName: this.fileSystemName,\n          pathName: this.name,\n          ...options\n        },\n        this.credential\n      ).toString();\n\n      resolve(appendToURLQuery(this.url, sas));\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { DataLakePathClient } from \"../clients\";\nimport { Path } from \"../generated/src/operations\";\nimport { Pipeline } from \"../Pipeline\";\n\n/**\n * A PathClientInternal represents a URL to the Azure Storage path (directory or file) to\n * help to construct a path client to expose Path context with blob endpoint.\n */\nexport class PathClientInternal extends DataLakePathClient {\n  /**\n   * Path context with blob endpoint.\n   */\n  public blobPathContext: Path;\n\n  /**\n   * Creates an instance of DataLakePathClient from url and pipeline.\n   *\n   * @param url - A Client string pointing to Azure Storage data lake path (directory or file), such as\n   *                     \"https://myaccount.dfs.core.windows.net/filesystem/directory\" or \"https://myaccount.dfs.core.windows.net/filesystem/file\".\n   *                     You can append a SAS if using AnonymousCredential, such as \"https://myaccount.dfs.core.windows.net/filesystem/directory?sasString\".\n   * @param pipeline - Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   */\n  public constructor(url: string, pipeline: Pipeline) {\n    super(url, pipeline);\n    this.blobPathContext = new Path(this.storageClientContextToBlobEndpoint);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { TokenCredential } from \"@azure/core-http\";\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { ContainerClient } from \"@azure/storage-blob\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\n\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { DataLakeLeaseClient } from \"./DataLakeLeaseClient\";\nimport { FileSystem } from \"./generated/src/operations\";\nimport {\n  AccessPolicy,\n  FileSystemCreateOptions,\n  FileSystemCreateResponse,\n  FileSystemDeleteOptions,\n  FileSystemDeleteResponse,\n  FileSystemExistsOptions,\n  FileSystemGetAccessPolicyOptions,\n  FileSystemGetAccessPolicyResponse,\n  FileSystemGetPropertiesOptions,\n  FileSystemGetPropertiesResponse,\n  FileSystemSetAccessPolicyOptions,\n  FileSystemSetAccessPolicyResponse,\n  FileSystemSetMetadataOptions,\n  FileSystemSetMetadataResponse,\n  ListPathsOptions,\n  ListPathsSegmentOptions,\n  Metadata,\n  Path,\n  PublicAccessType,\n  SignedIdentifier,\n  FileSystemListPathsResponse,\n  FileSystemCreateIfNotExistsResponse,\n  FileSystemDeleteIfExistsResponse,\n  FileSystemGenerateSasUrlOptions,\n  FileSystemListDeletedPathsResponse,\n  ListDeletedPathsOptions,\n  DeletedPath,\n  FileSystemUndeletePathResponse,\n  FileSystemUndeletePathOption,\n  ListDeletedPathsSegmentOptions\n} from \"./models\";\nimport { newPipeline, Pipeline, StoragePipelineOptions } from \"./Pipeline\";\nimport { StorageClient } from \"./StorageClient\";\nimport { toContainerPublicAccessType, toPublicAccessType, toPermissions } from \"./transforms\";\nimport { convertTracingToRequestOptionsBase, createSpan } from \"./utils/tracing\";\nimport { appendToURLPath, appendToURLQuery } from \"./utils/utils.common\";\nimport { DataLakeFileClient, DataLakeDirectoryClient } from \"./clients\";\nimport { generateDataLakeSASQueryParameters } from \"./sas/DataLakeSASSignatureValues\";\nimport { DeletionIdKey, PathResultTypeConstants } from \"./utils/constants\";\nimport { PathClientInternal } from \"./utils/PathClientInternal\";\n\n/**\n * A DataLakeFileSystemClient represents a URL to the Azure Storage file system\n * allowing you to manipulate its directories and files.\n */\nexport class DataLakeFileSystemClient extends StorageClient {\n  /**\n   * fileSystemContext provided by protocol layer.\n   */\n  private fileSystemContext: FileSystem;\n\n  /**\n   * fileSystemContext provided by protocol layer.\n   */\n  private fileSystemContextToBlobEndpoint: FileSystem;\n\n  /**\n   * blobContainerClient provided by `@azure/storage-blob` package.\n   */\n  private blobContainerClient: ContainerClient;\n\n  /**\n   * Creates an instance of DataLakeFileSystemClient from url and credential.\n   *\n   * @param url - A Client string pointing to Azure Storage data lake file system, such as\n   *                     \"https://myaccount.dfs.core.windows.net/filesystem\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.dfs.core.windows.net/filesystem?sasString\".\n   * @param credential - Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  constructor(\n    url: string,\n    credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n    options?: StoragePipelineOptions\n  );\n\n  /**\n   * Creates an instance of DataLakeFileSystemClient from url and pipeline.\n   *\n   * @param url - A Client string pointing to Azure Storage data lake file system, such as\n   *                     \"https://myaccount.dfs.core.windows.net/filesystem\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.dfs.core.windows.net/filesystem?sasString\".\n   * @param pipeline - Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   */\n  constructor(url: string, pipeline: Pipeline);\n\n  constructor(\n    url: string,\n    credentialOrPipeline?:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | Pipeline,\n    // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n    options?: StoragePipelineOptions\n  ) {\n    if (credentialOrPipeline instanceof Pipeline) {\n      super(url, credentialOrPipeline);\n    } else {\n      let credential;\n      if (credentialOrPipeline === undefined) {\n        credential = new AnonymousCredential();\n      } else {\n        credential = credentialOrPipeline;\n      }\n\n      const pipeline = newPipeline(credential, options);\n      super(url, pipeline);\n    }\n\n    this.fileSystemContext = new FileSystem(this.storageClientContext);\n    this.fileSystemContextToBlobEndpoint = new FileSystem(this.storageClientContextToBlobEndpoint);\n    this.blobContainerClient = new ContainerClient(this.blobEndpointUrl, this.pipeline);\n  }\n\n  /**\n   * Name of current file system.\n   *\n   * @readonly\n   */\n  public get name(): string {\n    return this.blobContainerClient.containerName;\n  }\n\n  /**\n   * Creates a {@link DataLakeDirectoryClient} object under current file system.\n   *\n   * @param directoryName -\n   */\n  // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-subclients */\n  public getDirectoryClient(directoryName: string): DataLakeDirectoryClient {\n    return new DataLakeDirectoryClient(\n      appendToURLPath(this.url, encodeURIComponent(directoryName)),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Creates a {@link DataLakeFileClient} object under current file system.\n   *\n   * @param fileName -\n   */\n  // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-subclients */\n  public getFileClient(fileName: string): DataLakeFileClient {\n    return new DataLakeFileClient(\n      appendToURLPath(this.url, encodeURIComponent(fileName)),\n      this.pipeline\n    );\n  }\n\n  /**\n   * Get a {@link DataLakeLeaseClient} that manages leases on the file system.\n   *\n   * @param proposeLeaseId - Optional. Initial proposed lease Id.\n   */\n  public getDataLakeLeaseClient(proposeLeaseId?: string): DataLakeLeaseClient {\n    return new DataLakeLeaseClient(this.blobContainerClient.getBlobLeaseClient(proposeLeaseId));\n  }\n\n  /**\n   * Creates a new file system under the specified account. If the file system with\n   * the same name already exists, the operation fails.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container\n   *\n   * @param options - Optional. Options when creating file system.\n   */\n  public async create(options: FileSystemCreateOptions = {}): Promise<FileSystemCreateResponse> {\n    const { span, updatedOptions } = createSpan(\"DataLakeFileSystemClient-create\", options);\n    try {\n      return await this.blobContainerClient.create({\n        ...options,\n        access: toContainerPublicAccessType(options.access),\n        tracingOptions: updatedOptions.tracingOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a new file system under the specified account. If the file system with\n   * the same name already exists, it is not changed.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-container\n   *\n   * @param options -\n   */\n  public async createIfNotExists(\n    options: FileSystemCreateOptions = {}\n  ): Promise<FileSystemCreateIfNotExistsResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"DataLakeFileSystemClient-createIfNotExists\",\n      options\n    );\n    try {\n      return await this.blobContainerClient.createIfNotExists({\n        ...options,\n        access: toContainerPublicAccessType(options.access),\n        tracingOptions: updatedOptions.tracingOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns true if the File system represented by this client exists; false otherwise.\n   *\n   * NOTE: use this function with care since an existing file system might be deleted by other clients or\n   * applications. Vice versa new file system with the same name might be added by other clients or\n   * applications after this function completes.\n   *\n   * @param options -\n   */\n  public async exists(options: FileSystemExistsOptions = {}): Promise<boolean> {\n    const { span, updatedOptions } = createSpan(\"DataLakeFileSystemClient-exists\", options);\n    try {\n      return await this.blobContainerClient.exists(updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Delete current file system.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container\n   *\n   * @param options - Optional. Options when deleting file system.\n   */\n  public async delete(options: FileSystemDeleteOptions = {}): Promise<FileSystemDeleteResponse> {\n    const { span, updatedOptions } = createSpan(\"DataLakeFileSystemClient-delete\", options);\n    try {\n      return await this.blobContainerClient.delete({\n        ...options,\n        tracingOptions: updatedOptions.tracingOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Delete current file system if it exists.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container\n   *\n   * @param options -\n   */\n  public async deleteIfExists(\n    options: FileSystemDeleteOptions = {}\n  ): Promise<FileSystemDeleteIfExistsResponse> {\n    const { span, updatedOptions } = createSpan(\"DataLakeFileSystemClient-deleteIfExists\", options);\n    try {\n      return await this.blobContainerClient.deleteIfExists(updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns all user-defined metadata and system properties for the specified\n   * file system.\n   *\n   * WARNING: The `metadata` object returned in the response will have its keys in lowercase, even if\n   * they originally contained uppercase characters. This differs from the metadata keys returned by\n   * the `listFileSystems` method of {@link DataLakeServiceClient} using the `includeMetadata` option, which\n   * will retain their original casing.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-properties\n   *\n   * @param options - Optional. Options when getting file system properties.\n   */\n  public async getProperties(\n    options: FileSystemGetPropertiesOptions = {}\n  ): Promise<FileSystemGetPropertiesResponse> {\n    const { span, updatedOptions } = createSpan(\"DataLakeFileSystemClient-getProperties\", options);\n    try {\n      const rawResponse = await this.blobContainerClient.getProperties({\n        ...options,\n        tracingOptions: updatedOptions.tracingOptions\n      });\n\n      // Transfer and rename blobPublicAccess to publicAccess\n      const response = rawResponse as FileSystemGetPropertiesResponse;\n\n      response.publicAccess = toPublicAccessType(rawResponse.blobPublicAccess);\n      response._response.parsedHeaders.publicAccess = response.publicAccess;\n\n      delete rawResponse.blobPublicAccess;\n      delete rawResponse._response.parsedHeaders.blobPublicAccess;\n\n      return response;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets one or more user-defined name-value pairs for the specified file system.\n   *\n   * If no option provided, or no metadata defined in the parameter, the file system\n   * metadata will be removed.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-metadata\n   *\n   * @param metadata - Replace existing metadata with this value.\n   *                              If no value provided the existing metadata will be removed.\n   * @param options - Optional. Options when setting file system metadata.\n   */\n  public async setMetadata(\n    metadata?: Metadata,\n    options: FileSystemSetMetadataOptions = {}\n  ): Promise<FileSystemSetMetadataResponse> {\n    const { span, updatedOptions } = createSpan(\"DataLakeFileSystemClient-setMetadata\", options);\n    try {\n      return await this.blobContainerClient.setMetadata(metadata, {\n        ...options,\n        tracingOptions: updatedOptions.tracingOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Gets the permissions for the specified file system. The permissions indicate\n   * whether file system data may be accessed publicly.\n   *\n   * WARNING: JavaScript Date will potentially lose precision when parsing startsOn and expiresOn strings.\n   * For example, new Date(\"2018-12-31T03:44:23.8827891Z\").toISOString() will get \"2018-12-31T03:44:23.882Z\".\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-container-acl\n   *\n   * @param options - Optional. Options when getting file system access policy.\n   */\n  public async getAccessPolicy(\n    options: FileSystemGetAccessPolicyOptions = {}\n  ): Promise<FileSystemGetAccessPolicyResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"DataLakeFileSystemClient-getAccessPolicy\",\n      options\n    );\n    try {\n      const rawResponse = await this.blobContainerClient.getAccessPolicy({\n        ...options,\n        tracingOptions: updatedOptions.tracingOptions\n      });\n\n      // Transfer and rename blobPublicAccess to publicAccess\n      const response = (rawResponse as unknown) as FileSystemGetAccessPolicyResponse;\n\n      response.publicAccess = toPublicAccessType(rawResponse.blobPublicAccess);\n      response._response.parsedHeaders.publicAccess = response.publicAccess;\n\n      delete rawResponse.blobPublicAccess;\n      delete rawResponse._response.parsedHeaders.blobPublicAccess;\n\n      return response;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets the permissions for the specified file system. The permissions indicate\n   * whether directories or files in a file system may be accessed publicly.\n   *\n   * When you set permissions for a file system, the existing permissions are replaced.\n   * If no access or containerAcl provided, the existing file system ACL will be\n   * removed.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-container-acl\n   *\n   * @param access - Optional. The level of public access to data in the file system.\n   * @param fileSystemAcl - Optional. Array of elements each having a unique Id and details of the access policy.\n   * @param options - Optional. Options when setting file system access policy.\n   */\n  public async setAccessPolicy(\n    access?: PublicAccessType,\n    fileSystemAcl?: SignedIdentifier<AccessPolicy>[],\n    options: FileSystemSetAccessPolicyOptions = {}\n  ): Promise<FileSystemSetAccessPolicyResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"DataLakeFileSystemClient-setAccessPolicy\",\n      options\n    );\n    try {\n      return await this.blobContainerClient.setAccessPolicy(\n        toContainerPublicAccessType(access),\n        fileSystemAcl,\n        {\n          ...options,\n          tracingOptions: updatedOptions.tracingOptions\n        }\n      );\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to list all the paths (directories and files)\n   * under the specified file system.\n   *\n   * .byPage() returns an async iterable iterator to list the paths in pages.\n   *\n   * Example using `for await` syntax:\n   *\n   * ```js\n   * // Get the fileSystemClient before you run these snippets,\n   * // Can be obtained from `serviceClient.getFileSystemClient(\"<your-filesystem-name>\");`\n   * let i = 1;\n   * for await (const path of fileSystemClient.listPaths()) {\n   *   console.log(`Path ${i++}: ${path.name}, isDirectory?: ${path.isDirectory}`);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```js\n   * let i = 1;\n   * let iter = fileSystemClient.listPaths();\n   * let pathItem = await iter.next();\n   * while (!pathItem.done) {\n   *   console.log(`Path ${i++}: ${pathItem.value.name}, isDirectory?: ${pathItem.value.isDirectory}`);\n   *   pathItem = await iter.next();\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```js\n   * // passing optional maxPageSize in the page settings\n   * let i = 1;\n   * for await (const response of fileSystemClient.listPaths().byPage({ maxPageSize: 20 })) {\n   *   for (const path of response.pathItems) {\n   *     console.log(`Path ${i++}: ${path.name}, isDirectory?: ${path.isDirectory}`);\n   *   }\n   * }\n   * ```\n   *\n   * Example using paging with a marker:\n   *\n   * ```js\n   * let i = 1;\n   * let iterator = fileSystemClient.listPaths().byPage({ maxPageSize: 2 });\n   * let response = (await iterator.next()).value;\n   *\n   * // Prints 2 path names\n   * for (const path of response.pathItems) {\n   *   console.log(`Path ${i++}: ${path.name}, isDirectory?: ${path.isDirectory}`);\n   * }\n   *\n   * // Gets next marker\n   * let marker = response.continuationToken;\n   *\n   * // Passing next marker as continuationToken\n   *\n   * iterator = fileSystemClient.listPaths().byPage({ continuationToken: marker, maxPageSize: 10 });\n   * response = (await iterator.next()).value;\n   *\n   * // Prints 10 path names\n   * for (const path of response.pathItems) {\n   *   console.log(`Path ${i++}: ${path.name}, isDirectory?: ${path.isDirectory}`);\n   * }\n   * ```\n   *\n   * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs\n   *\n   * @param options - Optional. Options when listing paths.\n   */\n  public listPaths(\n    options: ListPathsOptions = {}\n  ): PagedAsyncIterableIterator<Path, FileSystemListPathsResponse> {\n    options.path = options.path === \"\" ? undefined : options.path;\n\n    const iter = this.listItems(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: PageSettings = {}) => {\n        return this.listSegments(settings.continuationToken, {\n          maxResults: settings.maxPageSize,\n          ...options\n        });\n      }\n    };\n  }\n\n  private async *listItems(options: ListPathsSegmentOptions = {}): AsyncIterableIterator<Path> {\n    for await (const response of this.listSegments(undefined, options)) {\n      yield* response.pathItems || [];\n    }\n  }\n\n  private async *listSegments(\n    continuation?: string,\n    options: ListPathsSegmentOptions = {}\n  ): AsyncIterableIterator<FileSystemListPathsResponse> {\n    let response;\n    if (!!continuation || continuation === undefined) {\n      do {\n        response = await this.listPathsSegment(continuation, options);\n        continuation = response.continuation;\n        yield response;\n      } while (continuation);\n    }\n  }\n\n  private async listPathsSegment(\n    continuation?: string,\n    options: ListPathsSegmentOptions = {}\n  ): Promise<FileSystemListPathsResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"DataLakeFileSystemClient-listPathsSegment\",\n      options\n    );\n    try {\n      const rawResponse = await this.fileSystemContext.listPaths(options.recursive || false, {\n        continuation,\n        ...options,\n        upn: options.userPrincipalName,\n        ...convertTracingToRequestOptionsBase(updatedOptions)\n      });\n\n      const response = rawResponse as FileSystemListPathsResponse;\n      response.pathItems = [];\n      for (const path of rawResponse.paths || []) {\n        response.pathItems.push({\n          ...path,\n          permissions: toPermissions(path.permissions)\n        });\n      }\n      delete rawResponse.paths;\n\n      return response;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to list all the paths (directories and files)\n   * under the specified file system.\n   *\n   * .byPage() returns an async iterable iterator to list the paths in pages.\n   *\n   * Example using `for await` syntax:\n   *\n   * ```js\n   * // Get the fileSystemClient before you run these snippets,\n   * // Can be obtained from `serviceClient.getFileSystemClient(\"<your-filesystem-name>\");`\n   * let i = 1;\n   * for await (const deletePath of fileSystemClient.listDeletedPaths()) {\n   *   console.log(`Path ${i++}: ${deletePath.name}`);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```js\n   * let i = 1;\n   * let iter = fileSystemClient.listDeletedPaths();\n   * let deletedPathItem = await iter.next();\n   * while (!deletedPathItem.done) {\n   *   console.log(`Path ${i++}: ${deletedPathItem.value.name}`);\n   *   pathItem = await iter.next();\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```js\n   * // passing optional maxPageSize in the page settings\n   * let i = 1;\n   * for await (const response of fileSystemClient.listDeletedPaths().byPage({ maxPageSize: 20 })) {\n   *   for (const deletePath of response.pathItems) {\n   *     console.log(`Path ${i++}: ${deletePath.name}`);\n   *   }\n   * }\n   * ```\n   *\n   * Example using paging with a marker:\n   *\n   * ```js\n   * let i = 1;\n   * let iterator = fileSystemClient.listDeletedPaths().byPage({ maxPageSize: 2 });\n   * let response = (await iterator.next()).value;\n   *\n   * // Prints 2 path names\n   * for (const path of response.pathItems) {\n   *   console.log(`Path ${i++}: ${path.name}}`);\n   * }\n   *\n   * // Gets next marker\n   * let marker = response.continuationToken;\n   *\n   * // Passing next marker as continuationToken\n   *\n   * iterator = fileSystemClient.listDeletedPaths().byPage({ continuationToken: marker, maxPageSize: 10 });\n   * response = (await iterator.next()).value;\n   *\n   * // Prints 10 path names\n   * for (const deletePath of response.deletedPathItems) {\n   *   console.log(`Path ${i++}: ${deletePath.name}`);\n   * }\n   * ```\n   *\n   * @see https://docs.microsoft.com/rest/api/storageservices/list-blobs\n   *\n   * @param options - Optional. Options when listing deleted paths.\n   */\n  public listDeletedPaths(\n    options: ListDeletedPathsOptions = {}\n  ): PagedAsyncIterableIterator<DeletedPath, FileSystemListDeletedPathsResponse> {\n    const iter = this.listDeletedItems(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings: PageSettings = {}) => {\n        return this.listDeletedSegments(settings.continuationToken, {\n          maxResults: settings.maxPageSize,\n          ...options\n        });\n      }\n    };\n  }\n  private async *listDeletedItems(\n    options: ListDeletedPathsOptions = {}\n  ): AsyncIterableIterator<DeletedPath> {\n    for await (const response of this.listDeletedSegments(undefined, options)) {\n      yield* response.pathItems || [];\n    }\n  }\n\n  private async *listDeletedSegments(\n    continuation?: string,\n    options: ListDeletedPathsSegmentOptions = {}\n  ): AsyncIterableIterator<FileSystemListDeletedPathsResponse> {\n    let response;\n    if (!!continuation || continuation === undefined) {\n      do {\n        response = await this.listDeletedPathsSegment(continuation, options);\n        continuation = response.continuation;\n        yield response;\n      } while (continuation);\n    }\n  }\n\n  private async listDeletedPathsSegment(\n    continuation?: string,\n    options: ListDeletedPathsSegmentOptions = {}\n  ): Promise<FileSystemListDeletedPathsResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"DataLakeFileSystemClient-listDeletedPathsSegment\",\n      options\n    );\n    try {\n      const rawResponse = await this.fileSystemContextToBlobEndpoint.listBlobHierarchySegment({\n        marker: continuation,\n        ...options,\n        prefix: options.prefix === \"\" ? undefined : options.prefix,\n        ...convertTracingToRequestOptionsBase(updatedOptions)\n      });\n\n      const response = rawResponse as FileSystemListDeletedPathsResponse;\n      response.pathItems = [];\n      for (const path of rawResponse.segment.blobItems || []) {\n        response.pathItems.push({\n          name: path.name,\n          deletionId: path.deletionId,\n          deletedOn: path.properties.deletedTime,\n          remainingRetentionDays: path.properties.remainingRetentionDays\n        });\n      }\n\n      if (!(response.nextMarker === undefined || response.nextMarker === \"\")) {\n        response.continuation = response.nextMarker;\n      }\n\n      return response;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Restores a soft deleted path.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/undelete-blob\n   *\n   * @param deletedPath - Required.  The path of the deleted path.\n   *\n   * @param deletionId - Required.  The deletion ID associated with the soft deleted path.\n   *\n   */\n\n  public async undeletePath(\n    deletedPath: string,\n    deletionId: string,\n    options: FileSystemUndeletePathOption = {}\n  ): Promise<FileSystemUndeletePathResponse> {\n    const { span, updatedOptions } = createSpan(\"DataLakeFileSystemClient-undeletePath\", options);\n    try {\n      const pathClient = new PathClientInternal(\n        appendToURLPath(this.blobEndpointUrl, encodeURIComponent(deletedPath)),\n        this.pipeline\n      );\n\n      const rawResponse = await pathClient.blobPathContext.undelete({\n        undeleteSource: \"?\" + DeletionIdKey + \"=\" + deletionId,\n        ...options,\n        tracingOptions: updatedOptions.tracingOptions\n      });\n\n      if (rawResponse.resourceType === PathResultTypeConstants.DirectoryResourceType) {\n        return {\n          pathClient: this.getDirectoryClient(deletedPath),\n          ...rawResponse\n        };\n      } else {\n        return {\n          pathClient: this.getFileClient(deletedPath),\n          ...rawResponse\n        };\n      }\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Only available for DataLakeFileSystemClient constructed with a shared key credential.\n   *\n   * Generates a Service Shared Access Signature (SAS) URI based on the client properties\n   * and parameters passed in. The SAS is signed by the shared key credential of the client.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-a-service-sas\n   *\n   * @param options - Optional parameters.\n   * @returns The SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n   */\n  public generateSasUrl(options: FileSystemGenerateSasUrlOptions): Promise<string> {\n    return new Promise((resolve) => {\n      if (!(this.credential instanceof StorageSharedKeyCredential)) {\n        throw RangeError(\n          \"Can only generate the SAS when the client is initialized with a shared key credential\"\n        );\n      }\n\n      const sas = generateDataLakeSASQueryParameters(\n        {\n          fileSystemName: this.name,\n          ...options\n        },\n        this.credential\n      ).toString();\n\n      resolve(appendToURLQuery(this.url, sas));\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the permissions granted by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant permissions for that operation. Once all the\n * values are set, this should be serialized with toString and set as the permissions field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the permissions string without this class, but\n * the order of the permissions is particular and this class guarantees correctness.\n */\nexport class AccountSASPermissions {\n  /**\n   * Parse initializes the AccountSASPermissions fields from a string.\n   *\n   * @param permissions -\n   */\n  public static parse(permissions: string): AccountSASPermissions {\n    const accountSASPermissions = new AccountSASPermissions();\n\n    for (const c of permissions) {\n      switch (c) {\n        case \"r\":\n          accountSASPermissions.read = true;\n          break;\n        case \"w\":\n          accountSASPermissions.write = true;\n          break;\n        case \"d\":\n          accountSASPermissions.delete = true;\n          break;\n        case \"l\":\n          accountSASPermissions.list = true;\n          break;\n        case \"a\":\n          accountSASPermissions.add = true;\n          break;\n        case \"c\":\n          accountSASPermissions.create = true;\n          break;\n        case \"u\":\n          accountSASPermissions.update = true;\n          break;\n        case \"p\":\n          accountSASPermissions.process = true;\n          break;\n        default:\n          throw new RangeError(`Invalid permission character: ${c}`);\n      }\n    }\n\n    return accountSASPermissions;\n  }\n\n  /**\n   * Permission to read resources and list queues and tables granted.\n   */\n  public read: boolean = false;\n\n  /**\n   * Permission to write resources granted.\n   */\n  public write: boolean = false;\n\n  /**\n   * Permission to delete blobs and files granted.\n   */\n  public delete: boolean = false;\n\n  /**\n   * Permission to list blob containers, blobs, shares, directories, and files granted.\n   */\n  public list: boolean = false;\n\n  /**\n   * Permission to add messages, table entities, and append to blobs granted.\n   */\n  public add: boolean = false;\n\n  /**\n   * Permission to create blobs and files granted.\n   */\n  public create: boolean = false;\n\n  /**\n   * Permissions to update messages and table entities granted.\n   */\n  public update: boolean = false;\n\n  /**\n   * Permission to get and delete messages granted.\n   */\n  public process: boolean = false;\n\n  /**\n   * Produces the SAS permissions string for an Azure Storage account.\n   * Call this method to set AccountSASSignatureValues Permissions field.\n   *\n   * Using this method will guarantee the resource types are in\n   * an order accepted by the service.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n   *\n   */\n  public toString(): string {\n    // The order of the characters should be as specified here to ensure correctness:\n    // https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n    // Use a string array instead of string concatenating += operator for performance\n    const permissions: string[] = [];\n    if (this.read) {\n      permissions.push(\"r\");\n    }\n    if (this.write) {\n      permissions.push(\"w\");\n    }\n    if (this.delete) {\n      permissions.push(\"d\");\n    }\n    if (this.list) {\n      permissions.push(\"l\");\n    }\n    if (this.add) {\n      permissions.push(\"a\");\n    }\n    if (this.create) {\n      permissions.push(\"c\");\n    }\n    if (this.update) {\n      permissions.push(\"u\");\n    }\n    if (this.process) {\n      permissions.push(\"p\");\n    }\n    return permissions.join(\"\");\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the resources accessible by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant access to that resource type. Once all the\n * values are set, this should be serialized with toString and set as the resources field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the resources string without this class, but\n * the order of the resources is particular and this class guarantees correctness.\n */\nexport class AccountSASResourceTypes {\n  /**\n   * Creates an {@link AccountSASResourceTypes} from the specified resource types string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid resource type.\n   *\n   * @param resourceTypes -\n   */\n  public static parse(resourceTypes: string): AccountSASResourceTypes {\n    const accountSASResourceTypes = new AccountSASResourceTypes();\n\n    for (const c of resourceTypes) {\n      switch (c) {\n        case \"s\":\n          accountSASResourceTypes.service = true;\n          break;\n        case \"c\":\n          accountSASResourceTypes.container = true;\n          break;\n        case \"o\":\n          accountSASResourceTypes.object = true;\n          break;\n        default:\n          throw new RangeError(`Invalid resource type: ${c}`);\n      }\n    }\n\n    return accountSASResourceTypes;\n  }\n\n  /**\n   * Permission to access service level APIs granted.\n   */\n  public service: boolean = false;\n\n  /**\n   * Permission to access container level APIs (Blob Containers, Tables, Queues, File Shares, File Systems) granted.\n   */\n  public container: boolean = false;\n\n  /**\n   * Permission to access object level APIs (Blobs, Table Entities, Queue Messages, Files, Directories) granted.\n   */\n  public object: boolean = false;\n\n  /**\n   * Converts the given resource types to a string.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n   *\n   */\n  public toString(): string {\n    const resourceTypes: string[] = [];\n    if (this.service) {\n      resourceTypes.push(\"s\");\n    }\n    if (this.container) {\n      resourceTypes.push(\"c\");\n    }\n    if (this.object) {\n      resourceTypes.push(\"o\");\n    }\n    return resourceTypes.join(\"\");\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * This is a helper class to construct a string representing the services accessible by an AccountSAS. Setting a value\n * to true means that any SAS which uses these permissions will grant access to that service. Once all the\n * values are set, this should be serialized with toString and set as the services field on an\n * {@link AccountSASSignatureValues} object. It is possible to construct the services string without this class, but\n * the order of the services is particular and this class guarantees correctness.\n */\nexport class AccountSASServices {\n  /**\n   * Creates an {@link AccountSASServices} from the specified services string. This method will throw an\n   * Error if it encounters a character that does not correspond to a valid service.\n   *\n   * @param services -\n   */\n  public static parse(services: string): AccountSASServices {\n    const accountSASServices = new AccountSASServices();\n\n    for (const c of services) {\n      switch (c) {\n        case \"b\":\n          accountSASServices.blob = true;\n          break;\n        case \"f\":\n          accountSASServices.file = true;\n          break;\n        case \"q\":\n          accountSASServices.queue = true;\n          break;\n        case \"t\":\n          accountSASServices.table = true;\n          break;\n        default:\n          throw new RangeError(`Invalid service character: ${c}`);\n      }\n    }\n\n    return accountSASServices;\n  }\n\n  /**\n   * Permission to access blob and data lake resources granted.\n   */\n  public blob: boolean = false;\n\n  /**\n   * Permission to access file resources granted.\n   */\n  public file: boolean = false;\n\n  /**\n   * Permission to access queue resources granted.\n   */\n  public queue: boolean = false;\n\n  /**\n   * Permission to access table resources granted.\n   */\n  public table: boolean = false;\n\n  /**\n   * Converts the given services to a string.\n   *\n   */\n  public toString(): string {\n    const services: string[] = [];\n    if (this.blob) {\n      services.push(\"b\");\n    }\n    if (this.table) {\n      services.push(\"t\");\n    }\n    if (this.queue) {\n      services.push(\"q\");\n    }\n    if (this.file) {\n      services.push(\"f\");\n    }\n    return services.join(\"\");\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccountSASPermissions } from \"./AccountSASPermissions\";\nimport { AccountSASResourceTypes } from \"./AccountSASResourceTypes\";\nimport { AccountSASServices } from \"./AccountSASServices\";\nimport { StorageSharedKeyCredential } from \"../credentials/StorageSharedKeyCredential\";\nimport { SasIPRange, ipRangeToString } from \"./SasIPRange\";\nimport { SASProtocol, SASQueryParameters } from \"./SASQueryParameters\";\nimport { SERVICE_VERSION } from \"../utils/constants\";\nimport { truncatedISO8061Date } from \"../utils/utils.common\";\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * AccountSASSignatureValues is used to generate a Shared Access Signature (SAS) for an Azure Storage account. Once\n * all the values here are set appropriately, call {@link generateAccountSASQueryParameters} to obtain a representation\n * of the SAS which can actually be applied to data lake urls. Note: that both this class and {@link SASQueryParameters}\n * exist because the former is mutable and a logical representation while the latter is immutable and used to generate\n * actual REST requests.\n *\n * @see https://docs.microsoft.com/en-us/azure/storage/common/storage-dotnet-shared-access-signature-part-1\n * for more conceptual information on SAS\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n * for descriptions of the parameters, including which are required\n */\nexport interface AccountSASSignatureValues {\n  /**\n   * If not provided, this defaults to the service version targeted by this version of the library.\n   */\n  version?: string;\n\n  /**\n   * Optional. SAS protocols allowed.\n   */\n  protocol?: SASProtocol;\n\n  /**\n   * Optional. When the SAS will take effect.\n   */\n  startsOn?: Date;\n\n  /**\n   * The time after which the SAS will no longer work.\n   */\n  expiresOn: Date;\n\n  /**\n   * Specifies which operations the SAS user may perform. Please refer to {@link AccountSASPermissions} for help\n   * constructing the permissions string.\n   */\n  permissions: AccountSASPermissions;\n\n  /**\n   * Optional. IP range allowed.\n   */\n  ipRange?: SasIPRange;\n\n  /**\n   * The values that indicate the services accessible with this SAS. Please refer to {@link AccountSASServices} to\n   * construct this value.\n   */\n  services: string;\n\n  /**\n   * The values that indicate the resource types accessible with this SAS. Please refer\n   * to {@link AccountSASResourceTypes} to construct this value.\n   */\n  resourceTypes: string;\n}\n\n/**\n * ONLY AVAILABLE IN NODE.JS RUNTIME.\n *\n * Generates a {@link SASQueryParameters} object which contains all SAS query parameters needed to make an actual\n * REST request.\n *\n * @see https://docs.microsoft.com/en-us/rest/api/storageservices/constructing-an-account-sas\n *\n * @param accountSASSignatureValues -\n * @param sharedKeyCredential -\n */\nexport function generateAccountSASQueryParameters(\n  accountSASSignatureValues: AccountSASSignatureValues,\n  sharedKeyCredential: StorageSharedKeyCredential\n): SASQueryParameters {\n  const version = accountSASSignatureValues.version\n    ? accountSASSignatureValues.version\n    : SERVICE_VERSION;\n\n  const parsedPermissions = AccountSASPermissions.parse(\n    accountSASSignatureValues.permissions.toString()\n  );\n  const parsedServices = AccountSASServices.parse(accountSASSignatureValues.services).toString();\n  const parsedResourceTypes = AccountSASResourceTypes.parse(\n    accountSASSignatureValues.resourceTypes\n  ).toString();\n\n  const stringToSign = [\n    sharedKeyCredential.accountName,\n    parsedPermissions,\n    parsedServices,\n    parsedResourceTypes,\n    accountSASSignatureValues.startsOn\n      ? truncatedISO8061Date(accountSASSignatureValues.startsOn, false)\n      : \"\",\n    truncatedISO8061Date(accountSASSignatureValues.expiresOn, false),\n    accountSASSignatureValues.ipRange ? ipRangeToString(accountSASSignatureValues.ipRange) : \"\",\n    accountSASSignatureValues.protocol ? accountSASSignatureValues.protocol : \"\",\n    version,\n    \"\" // Account SAS requires an additional newline character\n  ].join(\"\\n\");\n\n  const signature: string = sharedKeyCredential.computeHMACSHA256(stringToSign);\n\n  return new SASQueryParameters(\n    version,\n    signature,\n    parsedPermissions.toString(),\n    parsedServices,\n    parsedResourceTypes,\n    accountSASSignatureValues.protocol,\n    accountSASSignatureValues.startsOn,\n    accountSASSignatureValues.expiresOn,\n    accountSASSignatureValues.ipRange\n  );\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport \"@azure/core-paging\";\n\nimport { getDefaultProxySettings, isNode, TokenCredential } from \"@azure/core-http\";\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport {\n  BlobServiceClient,\n  ServiceGetPropertiesOptions,\n  ServiceSetPropertiesOptions,\n  ServiceSetPropertiesResponse\n} from \"@azure/storage-blob\";\n\nimport { AnonymousCredential } from \"./credentials/AnonymousCredential\";\nimport { StorageSharedKeyCredential } from \"./credentials/StorageSharedKeyCredential\";\nimport { DataLakeFileSystemClient } from \"./DataLakeFileSystemClient\";\nimport {\n  FileSystemItem,\n  FileSystemRenameResponse,\n  ServiceGenerateAccountSasUrlOptions,\n  ServiceListFileSystemsOptions,\n  ServiceListFileSystemsSegmentResponse,\n  ServiceRenameFileSystemOptions,\n  ServiceUndeleteFileSystemOptions,\n  FileSystemUndeleteResponse\n} from \"./models\";\nimport { Pipeline, StoragePipelineOptions, newPipeline } from \"./Pipeline\";\nimport { StorageClient } from \"./StorageClient\";\nimport {\n  appendToURLPath,\n  appendToURLQuery,\n  extractConnectionStringParts\n} from \"./utils/utils.common\";\nimport { createSpan } from \"./utils/tracing\";\nimport { toDfsEndpointUrl, toFileSystemPagedAsyncIterableIterator } from \"./transforms\";\nimport { ServiceGetUserDelegationKeyOptions, ServiceGetUserDelegationKeyResponse } from \"./models\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { AccountSASPermissions } from \"./sas/AccountSASPermissions\";\nimport { generateAccountSASQueryParameters } from \"./sas/AccountSASSignatureValues\";\nimport { AccountSASServices } from \"./sas/AccountSASServices\";\nimport { DataLakeServiceGetPropertiesResponse, DataLakeServiceProperties } from \"./index\";\n\n/**\n * DataLakeServiceClient allows you to manipulate Azure\n * Data Lake service resources and file systems. The storage account provides\n * the top-level namespace for the Data Lake service.\n */\nexport class DataLakeServiceClient extends StorageClient {\n  // private serviceContext: Service;\n\n  /**\n   * blobServiceClient provided by `@azure/storage-blob` package.\n   */\n  private blobServiceClient: BlobServiceClient;\n\n  /**\n   *\n   * Creates an instance of DataLakeServiceClient from connection string.\n   *\n   * @param connectionString - Account connection string or a SAS connection string of an Azure storage account.\n   *                                  [ Note - Account connection string can only be used in NODE.JS runtime. ]\n   *                                  Account connection string example -\n   *                                  `DefaultEndpointsProtocol=https;AccountName=myaccount;AccountKey=accountKey;EndpointSuffix=core.windows.net`\n   *                                  SAS connection string example -\n   *                                  `BlobEndpoint=https://myaccount.blob.core.windows.net/;QueueEndpoint=https://myaccount.queue.core.windows.net/;FileEndpoint=https://myaccount.file.core.windows.net/;TableEndpoint=https://myaccount.table.core.windows.net/;SharedAccessSignature=sasString`\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n  public static fromConnectionString(\n    connectionString: string,\n    // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n    options?: StoragePipelineOptions\n  ): DataLakeServiceClient {\n    options = options || {};\n    const extractedCreds = extractConnectionStringParts(connectionString);\n    if (extractedCreds.kind === \"AccountConnString\") {\n      if (isNode) {\n        const sharedKeyCredential = new StorageSharedKeyCredential(\n          extractedCreds.accountName!,\n          extractedCreds.accountKey\n        );\n        options.proxyOptions = getDefaultProxySettings(extractedCreds.proxyUri);\n        const pipeline = newPipeline(sharedKeyCredential, options);\n        return new DataLakeServiceClient(toDfsEndpointUrl(extractedCreds.url), pipeline);\n      } else {\n        throw new Error(\"Account connection string is only supported in Node.js environment\");\n      }\n    } else if (extractedCreds.kind === \"SASConnString\") {\n      const pipeline = newPipeline(new AnonymousCredential(), options);\n      return new DataLakeServiceClient(\n        toDfsEndpointUrl(extractedCreds.url) + \"?\" + extractedCreds.accountSas,\n        pipeline\n      );\n    } else {\n      throw new Error(\n        \"Connection string must be either an Account connection string or a SAS connection string\"\n      );\n    }\n  }\n\n  /**\n   * Creates an instance of DataLakeServiceClient from url.\n   *\n   * @param url - A Client string pointing to Azure Storage data lake service, such as\n   *                     \"https://myaccount.dfs.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.dfs.core.windows.net?sasString\".\n   * @param credential - Such as AnonymousCredential, StorageSharedKeyCredential or any credential from the `@azure/identity` package to authenticate requests to the service. You can also provide an object that implements the TokenCredential interface. If not specified, AnonymousCredential is used.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  public constructor(\n    url: string,\n    credential?: StorageSharedKeyCredential | AnonymousCredential | TokenCredential,\n    // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n    options?: StoragePipelineOptions\n  );\n\n  /**\n   * Creates an instance of DataLakeServiceClient from url and pipeline.\n   *\n   * @param url - A Client string pointing to Azure Storage data lake service, such as\n   *                     \"https://myaccount.dfs.core.windows.net\". You can append a SAS\n   *                     if using AnonymousCredential, such as \"https://myaccount.dfs.core.windows.net?sasString\".\n   * @param pipeline - Call newPipeline() to create a default\n   *                            pipeline, or provide a customized pipeline.\n   */\n  public constructor(url: string, pipeline: Pipeline);\n\n  public constructor(\n    url: string,\n    credentialOrPipeline?:\n      | StorageSharedKeyCredential\n      | AnonymousCredential\n      | TokenCredential\n      | Pipeline,\n    // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n    /* eslint-disable-next-line @azure/azure-sdk/ts-naming-options */\n    options?: StoragePipelineOptions\n  ) {\n    if (credentialOrPipeline instanceof Pipeline) {\n      super(url, credentialOrPipeline);\n    } else {\n      let credential;\n      if (credentialOrPipeline === undefined) {\n        credential = new AnonymousCredential();\n      } else {\n        credential = credentialOrPipeline;\n      }\n\n      const pipeline = newPipeline(credential, options);\n      super(url, pipeline);\n    }\n\n    // this.serviceContext = new Service(this.storageClientContext);\n    this.blobServiceClient = new BlobServiceClient(this.blobEndpointUrl, this.pipeline);\n  }\n\n  /**\n   * Creates a {@link DataLakeFileSystemClient} object.\n   *\n   * @param fileSystemName - File system name.\n   */\n  // Legacy, no way to fix the eslint error without breaking. Disable the rule for this line.\n  /* eslint-disable-next-line @azure/azure-sdk/ts-naming-subclients */\n  public getFileSystemClient(fileSystemName: string): DataLakeFileSystemClient {\n    return new DataLakeFileSystemClient(\n      appendToURLPath(this.url, encodeURIComponent(fileSystemName)),\n      this.pipeline\n    );\n  }\n\n  /**\n   * ONLY AVAILABLE WHEN USING BEARER TOKEN AUTHENTICATION (TokenCredential).\n   *\n   * Retrieves a user delegation key for the Data Lake service. This is only a valid operation when using\n   * bearer token authentication.\n   *\n   * @example\n   * ```js\n   * // Generate user delegation SAS for a file system\n   * const userDelegationKey = await dataLakeServiceClient.getUserDelegationKey(startsOn, expiresOn);\n   * const fileSystemSAS = generateDataLakeSASQueryParameters({\n   *     fileSystemName, // Required\n   *     permissions: FileSystemSASPermissions.parse(\"racwdl\"), // Required\n   *     startsOn, // Required. Date type\n   *     expiresOn, // Optional. Date type\n   *     ipRange: { start: \"0.0.0.0\", end: \"255.255.255.255\" }, // Optional\n   *     protocol: SASProtocol.HttpsAndHttp, // Optional\n   *     version: \"2018-11-09\" // Must greater than or equal to 2018-11-09 to generate user delegation SAS\n   *   },\n   *   userDelegationKey, // UserDelegationKey\n   *   accountName\n   * ).toString();\n   * ```\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-user-delegation-key\n   *\n   * @param startsOn - The start time for the user delegation SAS. Must be within 7 days of the current time.\n   * @param expiresOn - The end time for the user delegation SAS. Must be within 7 days of the current time.\n   * @param options -\n   */\n  public async getUserDelegationKey(\n    startsOn: Date,\n    expiresOn: Date,\n    options: ServiceGetUserDelegationKeyOptions = {}\n  ): Promise<ServiceGetUserDelegationKeyResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"DataLakeServiceClient-getUserDelegationKey\",\n      options\n    );\n    try {\n      return await this.blobServiceClient.getUserDelegationKey(startsOn, expiresOn, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to list all the file systems\n   * under the specified account.\n   *\n   * .byPage() returns an async iterable iterator to list the file systems in pages.\n   *\n   * Example using `for await` syntax:\n   *\n   * ```js\n   * let i = 1;\n   * for await (const fileSystem of serviceClient.listFileSystems()) {\n   *   console.log(`FileSystem ${i++}: ${fileSystem.name}`);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```js\n   * let i = 1;\n   * const iter = serviceClient.listFileSystems();\n   * let fileSystemItem = await iter.next();\n   * while (!fileSystemItem.done) {\n   *   console.log(`FileSystem ${i++}: ${fileSystemItem.value.name}`);\n   *   fileSystemItem = await iter.next();\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```js\n   * // passing optional maxPageSize in the page settings\n   * let i = 1;\n   * for await (const response of serviceClient.listFileSystems().byPage({ maxPageSize: 20 })) {\n   *   if (response.fileSystemItems) {\n   *     for (const fileSystem of response.fileSystemItems) {\n   *       console.log(`FileSystem ${i++}: ${fileSystem.name}`);\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * Example using paging with a marker:\n   *\n   * ```js\n   * let i = 1;\n   * let iterator = serviceClient.listFileSystems().byPage({ maxPageSize: 2 });\n   * let response = (await iterator.next()).value;\n   *\n   * // Prints 2 file system names\n   * if (response.fileSystemItems) {\n   *   for (const fileSystem of response.fileSystemItems) {\n   *     console.log(`FileSystem ${i++}: ${fileSystem.name}`);\n   *   }\n   * }\n   *\n   * // Gets next marker\n   * let marker = response.continuationToken;\n   * // Passing next marker as continuationToken\n   * iterator = serviceClient\n   *   .listContainers()\n   *   .byPage({ continuationToken: marker, maxPageSize: 10 });\n   * response = (await iterator.next()).value;\n   *\n   * // Prints 10 file system names\n   * if (response.fileSystemItems) {\n   *   for (const fileSystem of response.fileSystemItems) {\n   *      console.log(`FileSystem ${i++}: ${fileSystem.name}`);\n   *   }\n   * }\n   * ```\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/list-containers2\n   *\n   * @param options -\n   */\n  public listFileSystems(\n    options: ServiceListFileSystemsOptions = {}\n  ): PagedAsyncIterableIterator<FileSystemItem, ServiceListFileSystemsSegmentResponse> {\n    return toFileSystemPagedAsyncIterableIterator(this.blobServiceClient.listContainers(options));\n  }\n\n  // public async createFileSystem(): Promise<DataLakeFileSystemClient> {\n  //   throw Error(\"NotImplemented\");\n  // }\n\n  // public async deleteFileSystem(fileSystem: string): Promise<ServiceDeleteFileSystemResponse> {\n  //   throw Error(\"NotImplemented\");\n  // }\n\n  /**\n   * Only available for DataLakeServiceClient constructed with a shared key credential.\n   *\n   * Generates an account Shared Access Signature (SAS) URI based on the client properties\n   * and parameters passed in. The SAS is signed by the shared key credential of the client.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/create-account-sas\n   *\n   * @param expiresOn - Optional. The time at which the shared access signature becomes invalid. Default to an hour later if not specified.\n   * @param permissions - Specifies the list of permissions to be associated with the SAS.\n   * @param resourceTypes - Specifies the resource types associated with the shared access signature.\n   * @param options - Optional parameters.\n   * @returns An account SAS URI consisting of the URI to the resource represented by this client, followed by the generated SAS token.\n   */\n  public generateAccountSasUrl(\n    expiresOn?: Date,\n    permissions: AccountSASPermissions = AccountSASPermissions.parse(\"r\"),\n    resourceTypes: string = \"sco\",\n    options: ServiceGenerateAccountSasUrlOptions = {}\n  ): string {\n    if (!(this.credential instanceof StorageSharedKeyCredential)) {\n      throw RangeError(\n        \"Can only generate the account SAS when the client is initialized with a shared key credential\"\n      );\n    }\n\n    if (expiresOn === undefined) {\n      const now = new Date();\n      expiresOn = new Date(now.getTime() + 3600 * 1000);\n    }\n\n    const sas = generateAccountSASQueryParameters(\n      {\n        permissions,\n        expiresOn,\n        resourceTypes,\n        services: AccountSASServices.parse(\"b\").toString(),\n        ...options\n      },\n      this.credential\n    ).toString();\n\n    return appendToURLQuery(this.url, sas);\n  }\n\n  /**\n   * Renames an existing File System.\n   *\n   * @param sourceFileSystemName - The name of the source File System.\n   * @param destinationContainerName - The new name of the File System.\n   * @param options - Options to configure File System Rename operation.\n   */\n  /* eslint-disable-next-line @typescript-eslint/ban-ts-comment */\n  // @ts-ignore Need to hide this interface for now. Make it public and turn on the live tests for it when the service is ready.\n  private async renameFileSystem(\n    sourceFileSystemName: string,\n    destinationFileSystemName: string,\n    options: ServiceRenameFileSystemOptions = {}\n  ): Promise<{\n    fileSystemClient: DataLakeFileSystemClient;\n    fileSystemRenameResponse: FileSystemRenameResponse;\n  }> {\n    const { span, updatedOptions } = createSpan(\"DataLakeServiceClient-renameFileSystem\", options);\n    try {\n      // const res = await this.blobServiceClient.renameContainer(\n      const res = await this.blobServiceClient[\"renameContainer\"](\n        sourceFileSystemName,\n        destinationFileSystemName,\n        updatedOptions\n      );\n\n      const fileSystemClient = this.getFileSystemClient(destinationFileSystemName);\n      return {\n        fileSystemClient,\n        fileSystemRenameResponse: res.containerRenameResponse\n      };\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Restore a previously deleted File System.\n   * This API is only functional if Container Soft Delete is enabled for the storage account.\n   *\n   * @param deletedFileSystemName - The name of the source File System.\n   * @param deleteFileSystemVersion - The new name of the File System.\n   * @param options - Options to configure File System Restore operation.\n   */\n  public async undeleteFileSystem(\n    deletedFileSystemName: string,\n    deleteFileSystemVersion: string,\n    options: ServiceUndeleteFileSystemOptions = {}\n  ): Promise<{\n    fileSystemClient: DataLakeFileSystemClient;\n    fileSystemUndeleteResponse: FileSystemUndeleteResponse;\n  }> {\n    const { span, updatedOptions } = createSpan(\n      \"DataLakeServiceClient-undeleteFileSystem\",\n      options\n    );\n    try {\n      const res = await this.blobServiceClient.undeleteContainer(\n        deletedFileSystemName,\n        deleteFileSystemVersion,\n        {\n          ...options,\n          destinationContainerName: options.destinationFileSystemName,\n          tracingOptions: updatedOptions.tracingOptions\n        }\n      );\n\n      const fileSystemClient = this.getFileSystemClient(\n        options.destinationFileSystemName || deletedFileSystemName\n      );\n      return {\n        fileSystemClient,\n        fileSystemUndeleteResponse: res.containerUndeleteResponse\n      };\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Gets the properties of a storage account’s Blob service endpoint, including properties\n   * for Storage Analytics and CORS (Cross-Origin Resource Sharing) rules.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/get-blob-service-properties\n   *\n   * @param options - Options to the Service Get Properties operation.\n   * @returns Response data for the Service Get Properties operation.\n   */\n  public async getProperties(\n    options: ServiceGetPropertiesOptions = {}\n  ): Promise<DataLakeServiceGetPropertiesResponse> {\n    const { span, updatedOptions } = createSpan(\"DataLakeServiceClient-getProperties\", options);\n    try {\n      return await this.blobServiceClient.getProperties({\n        abortSignal: options.abortSignal,\n        tracingOptions: updatedOptions.tracingOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Sets properties for a storage account’s Blob service endpoint, including properties\n   * for Storage Analytics, CORS (Cross-Origin Resource Sharing) rules and soft delete settings.\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/set-blob-service-properties\n   *\n   * @param properties -\n   * @param options - Options to the Service Set Properties operation.\n   * @returns Response data for the Service Set Properties operation.\n   */\n  public async setProperties(\n    properties: DataLakeServiceProperties,\n    options: ServiceSetPropertiesOptions = {}\n  ): Promise<ServiceSetPropertiesResponse> {\n    const { span, updatedOptions } = createSpan(\"DataLakeServiceClient-setProperties\", options);\n    try {\n      return await this.blobServiceClient.setProperties(properties, {\n        abortSignal: options.abortSignal,\n        tracingOptions: updatedOptions.tracingOptions\n      });\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { HttpResponse, TransferProgressEvent } from \"@azure/core-http\";\n\nimport {\n  LeaseAccessConditions,\n  ModifiedAccessConditions as ModifiedAccessConditionsModel,\n  UserDelegationKeyModel,\n  BlobQueryArrowConfiguration,\n  ServiceRenameContainerOptions,\n  ContainerRenameResponse,\n  ContainerUndeleteResponse\n} from \"@azure/storage-blob\";\nimport { DataLakePathClient } from \"./clients\";\nexport type ModifiedAccessConditions = Omit<ModifiedAccessConditionsModel, \"ifTags\">;\n\n/**\n * Options to query file with Apache Arrow format. Only valid for {@link FileQueryOptions.outputTextConfiguration}.\n */\nexport type FileQueryArrowConfiguration = BlobQueryArrowConfiguration;\n\n/**\n * Options to configure {@link DataLakeServiceClient.renameFileSystem}.\n */\nexport type ServiceRenameFileSystemOptions = ServiceRenameContainerOptions;\n\n/**\n * Contains response data for the {@link DataLakeServiceClient.renameFileSystem} operation.\n */\nexport type FileSystemRenameResponse = ContainerRenameResponse;\n\n/**\n * Contains response data for the {@link DataLakeServiceClient.undeleteFileSystem} operation.\n */\nexport type FileSystemUndeleteResponse = ContainerUndeleteResponse;\n\nimport {\n  FileSystemListBlobHierarchySegmentHeaders,\n  FileSystemListPathsHeaders,\n  ListBlobsHierarchySegmentResponse,\n  PathCreateResponse,\n  PathDeleteResponse,\n  PathGetPropertiesHeaders as PathGetPropertiesHeadersModel,\n  PathList as PathListModel,\n  PathUndeleteHeaders\n} from \"./generated/src/models\";\nimport { DataLakeSASPermissions } from \"./sas/DataLakeSASPermissions\";\nimport { DirectorySASPermissions } from \"./sas/DirectorySASPermissions\";\nimport { FileSystemSASPermissions } from \"./sas/FileSystemSASPermissions\";\nimport { SasIPRange } from \"./sas/SasIPRange\";\nimport { SASProtocol } from \"./sas/SASQueryParameters\";\nimport { CommonOptions } from \"./StorageClient\";\n\nexport {\n  LeaseAccessConditions,\n  UserDelegationKeyModel,\n  ServiceListContainersSegmentResponse,\n  Lease,\n  LeaseOperationOptions,\n  LeaseOperationResponse\n} from \"@azure/storage-blob\";\n\nexport {\n  BlobHierarchyListSegment,\n  BlobItemModel,\n  BlobPrefix,\n  BlobPropertiesModel,\n  FileSystemListPathsHeaders,\n  FileSystemListBlobHierarchySegmentHeaders,\n  FileSystemListPathsResponse as ListPathsSegmentResponse,\n  ListBlobsHierarchySegmentResponse,\n  Path as PathModel,\n  PathList as PathListModel,\n  PathCreateHeaders,\n  PathDeleteHeaders,\n  PathDeleteResponse,\n  PathGetPropertiesHeaders as PathGetPropertiesHeadersModel,\n  PathSetAccessControlHeaders,\n  PathSetAccessControlResponse,\n  PathSetAccessControlResponse as PathSetPermissionsResponse,\n  PathResourceType as PathResourceTypeModel,\n  PathUndeleteHeaders,\n  PathUpdateHeaders,\n  PathAppendDataHeaders,\n  PathFlushDataHeaders,\n  PathAppendDataResponse as FileAppendResponse,\n  PathFlushDataResponse as FileFlushResponse,\n  PathFlushDataResponse as FileUploadResponse,\n  PathGetPropertiesAction as PathGetPropertiesActionModel,\n  PathRenameMode as PathRenameModeModel,\n  PathExpiryOptions as FileExpiryMode,\n  PathSetExpiryResponse as FileSetExpiryResponse,\n  PathSetExpiryHeaders as FileSetExpiryHeaders\n} from \"./generated/src/models\";\n\nexport { PathCreateResponse };\n\n/**\n * Common options of the {@link FileSystemGenerateSasUrlOptions}, {@link DirectoryGenerateSasUrlOptions}\n * and {@link FileGenerateSasUrlOptions}.\n */\nexport interface CommonGenerateSasUrlOptions {\n  /**\n   * The version of the service this SAS will target. If not specified, it will default to the version targeted by the\n   * library.\n   */\n  version?: string;\n\n  /**\n   * Optional. SAS protocols, HTTPS only or HTTPSandHTTP\n   */\n  protocol?: SASProtocol;\n\n  /**\n   * Optional. When the SAS will take effect.\n   */\n  startsOn?: Date;\n\n  /**\n   * Optional only when identifier is provided. The time after which the SAS will no longer work.\n   */\n  expiresOn?: Date;\n\n  /**\n   * Optional. IP ranges allowed in this SAS.\n   */\n  ipRange?: SasIPRange;\n\n  /**\n   * Optional. The name of the access policy on the container this SAS references if any.\n   *\n   * @see https://docs.microsoft.com/en-us/rest/api/storageservices/establishing-a-stored-access-policy\n   */\n  identifier?: string;\n\n  /**\n   * Optional. The cache-control header for the SAS.\n   */\n  cacheControl?: string;\n\n  /**\n   * Optional. The content-disposition header for the SAS.\n   */\n  contentDisposition?: string;\n\n  /**\n   * Optional. The content-encoding header for the SAS.\n   */\n  contentEncoding?: string;\n\n  /**\n   * Optional. The content-language header for the SAS.\n   */\n  contentLanguage?: string;\n\n  /**\n   * Optional. The content-type header for the SAS.\n   */\n  contentType?: string;\n}\n\n/** ***********************************************************/\n/** DataLakeServiceClient option and response related models */\n/** ***********************************************************/\n\nexport interface ServiceGetUserDelegationKeyOptions extends CommonOptions {\n  abortSignal?: AbortSignalLike;\n}\n\n// TODO: Leverage interface definitions from blob package directly, or duplicate create a copy here which will not have generation benefits\nexport interface ServiceGetUserDelegationKeyHeaders {\n  clientRequestId?: string;\n  requestId?: string;\n  version?: string;\n  date?: Date;\n}\n\nexport interface UserDelegationKey {\n  signedObjectId: string;\n  signedTenantId: string;\n  signedStartsOn: Date;\n  signedExpiresOn: Date;\n  signedService: string;\n  signedVersion: string;\n  value: string;\n}\n\nexport type ServiceGetUserDelegationKeyResponse = UserDelegationKey &\n  ServiceGetUserDelegationKeyHeaders & {\n    _response: HttpResponse & {\n      parsedHeaders: ServiceGetUserDelegationKeyHeaders;\n      bodyAsText: string;\n      parsedBody: UserDelegationKeyModel;\n    };\n  };\n\nexport interface ServiceListFileSystemsOptions extends CommonOptions {\n  abortSignal?: AbortSignalLike;\n  prefix?: string;\n  includeMetadata?: boolean;\n\n  /**\n   * Specifies whether soft deleted File System should be included in the response.\n   */\n  includeDeleted?: boolean;\n}\n\nexport type LeaseStatusType = \"locked\" | \"unlocked\";\nexport type LeaseStateType = \"available\" | \"leased\" | \"expired\" | \"breaking\" | \"broken\";\nexport type LeaseDurationType = \"infinite\" | \"fixed\";\nexport type PublicAccessType = \"filesystem\" | \"file\";\n\nexport interface FileSystemProperties {\n  lastModified: Date;\n  etag: string;\n  leaseStatus?: LeaseStatusType;\n  leaseState?: LeaseStateType;\n  leaseDuration?: LeaseDurationType;\n  publicAccess?: PublicAccessType;\n  hasImmutabilityPolicy?: boolean;\n  hasLegalHold?: boolean;\n  deletedOn?: Date;\n  remainingRetentionDays?: number;\n}\n\nexport interface FileSystemItem {\n  name: string;\n  properties: FileSystemProperties;\n  metadata?: Metadata;\n  deleted?: boolean;\n  versionId?: string;\n}\n\nexport interface ListFileSystemsSegmentResponse {\n  serviceEndpoint: string;\n  prefix?: string;\n  marker?: string;\n  maxPageSize?: number;\n  fileSystemItems: FileSystemItem[];\n  continuationToken?: string;\n}\n\nexport interface ServiceListFileSystemsSegmentHeaders {\n  clientRequestId?: string;\n  requestId?: string;\n  version?: string;\n}\n\nexport type ServiceListFileSystemsSegmentResponse = ListFileSystemsSegmentResponse &\n  ServiceListFileSystemsSegmentHeaders & {\n    _response: HttpResponse & {\n      parsedHeaders: ServiceListFileSystemsSegmentHeaders;\n      bodyAsText: string;\n      parsedBody: ListFileSystemsSegmentResponse;\n    };\n  };\n\n/**\n * Options to configure {@link DataLakeServiceClient.generateAccountSasUrl} operation.\n */\nexport interface ServiceGenerateAccountSasUrlOptions {\n  /**\n   * The version of the service this SAS will target. If not specified, it will default to the version targeted by the\n   * library.\n   */\n  version?: string;\n\n  /**\n   * Optional. SAS protocols allowed.\n   */\n  protocol?: SASProtocol;\n\n  /**\n   * Optional. When the SAS will take effect.\n   */\n  startsOn?: Date;\n  /**\n   * Optional. IP range allowed.\n   */\n  ipRange?: SasIPRange;\n}\n\n/**\n * Options to configure {@link DataLakeServiceClient.undeleteFileSystem}.\n */\nexport interface ServiceUndeleteFileSystemOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n\n  /**\n   * Optional. Specifies the new name of the restored File System.\n   * Will use its original name if this is not specified.\n   * @deprecated Restore FileSystem to a different name is not supported by service anymore.\n   */\n  destinationFileSystemName?: string;\n}\n\n/** **************************************************************/\n/** DataLakeFileSystemClient option and response related models */\n/** **************************************************************/\n\nexport interface FileSystemCreateOptions extends CommonOptions {\n  abortSignal?: AbortSignalLike;\n  metadata?: Metadata;\n  access?: PublicAccessType;\n}\n\nexport interface FileSystemCreateHeaders {\n  etag?: string;\n  lastModified?: Date;\n  clientRequestId?: string;\n  requestId?: string;\n  version?: string;\n  date?: Date;\n}\n\nexport type FileSystemCreateResponse = FileSystemCreateHeaders & {\n  _response: HttpResponse & {\n    parsedHeaders: FileSystemCreateHeaders;\n  };\n};\n\nexport interface FileSystemDeleteOptions extends CommonOptions {\n  abortSignal?: AbortSignalLike;\n  conditions?: DataLakeRequestConditions;\n}\n\nexport interface FileSystemDeleteHeaders {\n  clientRequestId?: string;\n  requestId?: string;\n  version?: string;\n  date?: Date;\n}\n\nexport type FileSystemDeleteResponse = FileSystemDeleteHeaders & {\n  _response: HttpResponse & {\n    parsedHeaders: FileSystemDeleteHeaders;\n  };\n};\n\nexport interface FileSystemGetPropertiesOptions extends CommonOptions {\n  abortSignal?: AbortSignalLike;\n  conditions?: LeaseAccessConditions;\n}\n\nexport interface FileSystemGetPropertiesHeaders {\n  metadata?: Metadata;\n  etag?: string;\n  lastModified?: Date;\n  leaseDuration?: LeaseDurationType;\n  leaseState?: LeaseStateType;\n  leaseStatus?: LeaseStatusType;\n  clientRequestId?: string;\n  requestId?: string;\n  version?: string;\n  date?: Date;\n  publicAccess?: PublicAccessType;\n  hasImmutabilityPolicy?: boolean;\n  hasLegalHold?: boolean;\n}\n\nexport type FileSystemGetPropertiesResponse = FileSystemGetPropertiesHeaders & {\n  _response: HttpResponse & {\n    parsedHeaders: FileSystemGetPropertiesHeaders;\n  };\n};\n\nexport interface FileSystemSetMetadataOptions extends CommonOptions {\n  abortSignal?: AbortSignalLike;\n  conditions?: DataLakeRequestConditions;\n}\n\nexport interface FileSystemSetMetadataHeaders {\n  etag?: string;\n  lastModified?: Date;\n  clientRequestId?: string;\n  requestId?: string;\n  version?: string;\n  date?: Date;\n}\n\nexport type FileSystemSetMetadataResponse = FileSystemSetMetadataHeaders & {\n  _response: HttpResponse & {\n    parsedHeaders: FileSystemSetMetadataHeaders;\n  };\n};\n\nexport interface FileSystemGetAccessPolicyOptions extends CommonOptions {\n  abortSignal?: AbortSignalLike;\n  conditions?: LeaseAccessConditions;\n}\n\nexport interface FileSystemGetAccessPolicyHeaders {\n  publicAccess?: PublicAccessType;\n  etag?: string;\n  lastModified?: Date;\n  clientRequestId?: string;\n  requestId?: string;\n  version?: string;\n  date?: Date;\n}\n\nexport interface RawAccessPolicy {\n  startsOn?: string;\n  expiresOn?: string;\n  permissions: string;\n}\n\nexport interface AccessPolicy {\n  startsOn?: Date;\n  expiresOn?: Date;\n  permissions: string;\n}\n\nexport interface SignedIdentifier<T> {\n  id: string;\n  accessPolicy: T;\n}\n\nexport type FileSystemGetAccessPolicyResponse = {\n  signedIdentifiers: SignedIdentifier<AccessPolicy>[];\n} & FileSystemGetAccessPolicyHeaders & {\n    _response: HttpResponse & {\n      parsedHeaders: FileSystemGetAccessPolicyHeaders;\n      bodyAsText: string;\n      parsedBody: SignedIdentifier<RawAccessPolicy>[];\n    };\n  };\n\nexport interface FileSystemSetAccessPolicyOptions extends CommonOptions {\n  abortSignal?: AbortSignalLike;\n  conditions?: DataLakeRequestConditions;\n}\n\nexport interface FileSystemSetAccessPolicyHeaders {\n  etag?: string;\n  lastModified?: Date;\n  clientRequestId?: string;\n  requestId?: string;\n  version?: string;\n  date?: Date;\n}\n\nexport type FileSystemSetAccessPolicyResponse = FileSystemSetAccessPolicyHeaders & {\n  _response: HttpResponse & {\n    parsedHeaders: FileSystemSetAccessPolicyHeaders;\n  };\n};\n\nexport interface ListPathsOptions extends CommonOptions {\n  abortSignal?: AbortSignalLike;\n  recursive?: boolean;\n  path?: string;\n  userPrincipalName?: boolean;\n}\n\nexport interface ListPathsSegmentOptions extends ListPathsOptions {\n  maxResults?: number;\n}\n\nexport interface Path {\n  name?: string;\n  isDirectory?: boolean;\n  lastModified?: Date;\n  etag?: string;\n  contentLength?: number;\n  owner?: string;\n  group?: string;\n  permissions?: PathPermissions;\n}\n\nexport interface PathList {\n  pathItems?: Path[];\n}\n\nexport type FileSystemListPathsResponse = PathList &\n  FileSystemListPathsHeaders & {\n    _response: HttpResponse & {\n      parsedHeaders: FileSystemListPathsHeaders;\n      bodyAsText: string;\n      parsedBody: PathListModel;\n    };\n  };\n\nexport interface ListDeletedPathsOptions extends CommonOptions {\n  abortSignal?: AbortSignalLike;\n  /** Filters results to filesystems within the specified prefix. */\n  prefix?: string;\n}\n\nexport interface ListDeletedPathsSegmentOptions extends ListDeletedPathsOptions {\n  maxResults?: number;\n}\n\nexport interface DeletedPath {\n  name: string;\n  deletionId?: string;\n  deletedOn?: Date;\n  remainingRetentionDays?: number;\n}\n\nexport interface DeletedPathList {\n  pathItems?: DeletedPath[];\n}\n\nexport type FileSystemListDeletedPathsResponse = DeletedPathList &\n  FileSystemListBlobHierarchySegmentHeaders &\n  ListBlobsHierarchySegmentResponse & {\n    _response: HttpResponse & {\n      /** The response body as text (string format) */\n      bodyAsText: string;\n\n      /** The response body as parsed JSON or XML */\n      parsedBody: ListBlobsHierarchySegmentResponse;\n      /** The parsed HTTP response headers. */\n      parsedHeaders: FileSystemListBlobHierarchySegmentHeaders;\n    };\n\n    continuation?: string;\n  };\n\nexport interface FileSystemUndeletePathOption extends CommonOptions {\n  abortSignal?: AbortSignalLike;\n}\n\nexport type FileSystemUndeletePathResponse = PathUndeleteHeaders & {\n  _response: HttpResponse & {\n    parsedHeaders: PathUndeleteHeaders;\n  };\n  pathClient: DataLakePathClient;\n};\n\n/**\n * Option interface for Data Lake file system exists operations\n *\n * See:\n * - {@link DataLakeFileSystemClient.exists}\n */\nexport interface FileSystemExistsOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n}\n\n/**\n * Contains response data for the {@link DataLakeFileSystemClient.createIfNotExists} operation.\n */\nexport interface FileSystemCreateIfNotExistsResponse extends FileSystemCreateResponse {\n  /**\n   * Indicate whether the file system is successfully created. Is false when the file system is not changed as it already exists.\n   */\n  succeeded: boolean;\n}\n\n/**\n * Contains response data for the {@link DataLakeFileSystemClient.deleteIfExists} operation.\n */\nexport interface FileSystemDeleteIfExistsResponse extends FileSystemDeleteResponse {\n  /**\n   * Indicate whether the file system is successfully deleted. Is false if the file system doesn't exist in the first place.\n   */\n  succeeded: boolean;\n}\n\n/**\n * Options to configure {@link DataLakeFileSystemClient.generateSasUrl} operation.\n */\nexport interface FileSystemGenerateSasUrlOptions extends CommonGenerateSasUrlOptions {\n  /**\n   * Optional only when identifier is provided. Specifies the list of permissions to be associated with the SAS.\n   */\n  permissions?: FileSystemSASPermissions;\n}\n\n/** ********************************************************/\n/** DataLakePathClient option and response related models */\n/** ********************************************************/\n\nexport interface Metadata {\n  [propertyName: string]: string;\n}\n\nexport interface DataLakeRequestConditions\n  extends ModifiedAccessConditions,\n    LeaseAccessConditions {}\n\nexport interface RolePermissions {\n  read: boolean;\n  write: boolean;\n  execute: boolean;\n}\n\nexport interface PathPermissions {\n  owner: RolePermissions;\n  group: RolePermissions;\n  other: RolePermissions;\n  stickyBit: boolean;\n  extendedAcls: boolean;\n}\n\nexport type AccessControlType = \"user\" | \"group\" | \"mask\" | \"other\";\n\nexport interface RemovePathAccessControlItem {\n  /**\n   * Indicates whether this is the default entry for the ACL.\n   */\n  defaultScope: boolean;\n  /**\n   * Specifies which role this entry targets.\n   */\n  accessControlType: AccessControlType;\n  /**\n   * Specifies the entity for which this entry applies.\n   * Must be omitted for types mask or other. It must also be omitted when the user or group is the owner.\n   */\n  entityId?: string;\n}\n\nexport interface PathAccessControlItem {\n  /**\n   * Indicates whether this is the default entry for the ACL.\n   */\n  defaultScope: boolean;\n  /**\n   * Specifies which role this entry targets.\n   */\n  accessControlType: AccessControlType;\n  /**\n   * Specifies the entity for which this entry applies.\n   */\n  entityId: string;\n  /**\n   * Access control permissions.\n   */\n  permissions: RolePermissions;\n}\n\nexport interface PathCreateHttpHeaders {\n  cacheControl?: string;\n  contentEncoding?: string;\n  contentLanguage?: string;\n  contentDisposition?: string;\n  contentType?: string;\n}\n\nexport interface PathCreateOptions extends CommonOptions {\n  abortSignal?: AbortSignalLike;\n  metadata?: Metadata;\n  permissions?: string; // TODO: model or string?\n  umask?: string; // TODO: model or string?\n  conditions?: DataLakeRequestConditions;\n  pathHttpHeaders?: PathCreateHttpHeaders;\n}\n\nexport interface PathCreateIfNotExistsOptions extends CommonOptions {\n  abortSignal?: AbortSignalLike;\n  metadata?: Metadata;\n  permissions?: string;\n  umask?: string;\n  pathHttpHeaders?: PathCreateHttpHeaders;\n}\n\nexport interface PathDeleteOptions extends CommonOptions {\n  abortSignal?: AbortSignalLike;\n  conditions?: DataLakeRequestConditions;\n}\n\nexport interface PathGetAccessControlOptions extends CommonOptions {\n  abortSignal?: AbortSignalLike;\n  conditions?: DataLakeRequestConditions;\n  userPrincipalName?: boolean;\n}\n\nexport interface PathGetAccessControlHeaders {\n  date?: Date;\n  etag?: string;\n  lastModified?: Date;\n  owner?: string;\n  group?: string;\n  requestId?: string;\n  version?: string;\n}\n\nexport interface PathAccessControl {\n  owner?: string;\n  group?: string;\n  permissions?: PathPermissions;\n  acl: PathAccessControlItem[];\n}\n\nexport type PathGetAccessControlResponse = PathAccessControl &\n  PathGetAccessControlHeaders & {\n    _response: HttpResponse & {\n      parsedHeaders: PathGetPropertiesHeadersModel;\n    };\n  };\n\nexport interface PathSetAccessControlOptions extends CommonOptions {\n  abortSignal?: AbortSignalLike;\n  conditions?: DataLakeRequestConditions;\n  owner?: string;\n  group?: string;\n}\n\n/**\n * Options type for `setAccessControlRecursive`, `updateAccessControlRecursive` and `removeAccessControlRecursive`.\n */\nexport interface PathChangeAccessControlRecursiveOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Optional. If data set size exceeds batch size then operation will be split into multiple requests so that progress can be tracked.\n   * Batch size should be between 1 and 2000. The default when unspecified is 2000.\n   */\n  batchSize?: number;\n  /**\n   * Optional. Defines maximum number of batches that single change Access Control operation can execute.\n   * If maximum is reached before all subpaths are processed then continuation token can be used to resume operation.\n   * Empty value indicates that maximum number of batches in unbound and operation continues till end.\n   */\n  maxBatches?: number;\n  /**\n   * Optional. Default false. If set to false, the operation will terminate quickly on encountering user failures.\n   * If true, the operation will ignore user failures and proceed with the operation on other sub-entities of the directory.\n   */\n  continueOnFailure?: boolean;\n  /**\n   * Continuation token to continue next batch of operations.\n   */\n  continuationToken?: string;\n  /**\n   * Callback where caller can track progress of the operation\n   * as well as collect paths that failed to change Access Control.\n   */\n  onProgress?: (progress: AccessControlChanges) => void;\n}\n\n/**\n * Represents an entry that failed to update Access Control List during `setAccessControlRecursive`, `updateAccessControlRecursive` and `removeAccessControlRecursive`.\n */\nexport interface AccessControlChangeError {\n  /**\n   * Returns name of an entry.\n   */\n  name: string;\n  /**\n   * Returns whether entry is a directory.\n   */\n  isDirectory: boolean;\n  /**\n   * Returns error message that is the reason why entry failed to update.\n   */\n  message: string;\n}\n\n/**\n * AccessControlChanges contains batch and cumulative counts of operations that change Access Control Lists recursively.\n * Additionally it exposes path entries that failed to update while these operations progress.\n */\nexport interface AccessControlChanges {\n  /**\n   * Path entries that failed to update Access Control List within single batch.\n   */\n  batchFailures: AccessControlChangeError[];\n  /**\n   * Counts of paths changed within single batch.\n   */\n  batchCounters: AccessControlChangeCounters;\n  /**\n   * Counts of paths changed from start of the operation.\n   */\n  aggregateCounters: AccessControlChangeCounters;\n  /**\n   * Optional. Value is present when operation is split into multiple batches and can be used to resume progress.\n   */\n  continuationToken?: string;\n}\n\n/**\n * AccessControlChangeCounters contains counts of operations that change Access Control Lists recursively.\n */\nexport interface AccessControlChangeCounters {\n  /**\n   * Returns number of directories where Access Control List has been updated successfully.\n   */\n  changedDirectoriesCount: number;\n  /**\n   * Returns number of files where Access Control List has been updated successfully.\n   */\n  changedFilesCount: number;\n  /**\n   * Returns number of paths where Access Control List update has failed.\n   */\n  failedChangesCount: number;\n}\n\n/**\n * Response type for `setAccessControlRecursive`, `updateAccessControlRecursive` and `removeAccessControlRecursive`.\n */\nexport interface PathChangeAccessControlRecursiveResponse {\n  /**\n   * Contains counts of paths changed from start of the operation.\n   */\n  counters: AccessControlChangeCounters;\n  /**\n   * Optional. Value is present when operation is split into multiple batches and can be used to resume progress.\n   */\n  continuationToken?: string;\n}\n\nexport interface PathSetPermissionsOptions extends CommonOptions {\n  abortSignal?: AbortSignalLike;\n  conditions?: DataLakeRequestConditions;\n  owner?: string;\n  group?: string;\n}\n\nexport interface PathGetPropertiesOptions extends CommonOptions {\n  abortSignal?: AbortSignalLike;\n  conditions?: DataLakeRequestConditions;\n}\n\nexport type CopyStatusType = \"pending\" | \"success\" | \"aborted\" | \"failed\";\n\nexport interface PathGetPropertiesHeaders {\n  lastModified?: Date;\n  createdOn?: Date;\n  metadata?: Metadata;\n  copyCompletedOn?: Date;\n  copyStatusDescription?: string;\n  copyId?: string;\n  copyProgress?: string;\n  copySource?: string;\n  copyStatus?: CopyStatusType;\n  isIncrementalCopy?: boolean;\n  destinationSnapshot?: string;\n  leaseDuration?: LeaseDurationType;\n  leaseState?: LeaseStateType;\n  leaseStatus?: LeaseStatusType;\n  contentLength?: number;\n  contentType?: string;\n  etag?: string;\n  contentMD5?: Uint8Array;\n  contentEncoding?: string;\n  contentDisposition?: string;\n  contentLanguage?: string;\n  cacheControl?: string;\n  // blobSequenceNumber?: number;\n  clientRequestId?: string;\n  requestId?: string;\n  version?: string;\n  date?: Date;\n  acceptRanges?: string;\n  // blobCommittedBlockCount?: number;\n  isServerEncrypted?: boolean;\n  encryptionKeySha256?: string;\n  accessTier?: string;\n  accessTierInferred?: boolean;\n  archiveStatus?: string;\n  accessTierChangedOn?: Date;\n\n  /**\n   * The time the file will expire.\n   */\n  expiresOn?: Date;\n}\n\nexport type PathGetPropertiesResponse = PathGetPropertiesHeaders & {\n  _response: HttpResponse & {\n    parsedHeaders: PathGetPropertiesHeaders;\n  };\n};\n\nexport interface PathSetHttpHeadersOptions extends CommonOptions {\n  abortSignal?: AbortSignalLike;\n  conditions?: DataLakeRequestConditions;\n}\n\nexport interface PathHttpHeaders {\n  cacheControl?: string;\n  contentEncoding?: string;\n  contentLanguage?: string;\n  contentDisposition?: string;\n  contentType?: string;\n  contentMD5?: Uint8Array;\n}\n\nexport interface PathSetHttpHeadersHeaders {\n  etag?: string;\n  lastModified?: Date;\n  clientRequestId?: string;\n  requestId?: string;\n  version?: string;\n  date?: Date;\n}\n\nexport type PathSetHttpHeadersResponse = PathSetHttpHeadersHeaders & {\n  _response: HttpResponse & {\n    parsedHeaders: PathSetHttpHeadersHeaders;\n  };\n};\n\nexport interface PathSetMetadataOptions extends CommonOptions {\n  abortSignal?: AbortSignalLike;\n  conditions?: DataLakeRequestConditions;\n}\n\nexport interface PathSetMetadataHeaders {\n  etag?: string;\n  lastModified?: Date;\n  clientRequestId?: string;\n  requestId?: string;\n  version?: string;\n  date?: Date;\n  isServerEncrypted?: boolean;\n  encryptionKeySha256?: string;\n}\n\nexport type PathSetMetadataResponse = PathSetMetadataHeaders & {\n  _response: HttpResponse & {\n    parsedHeaders: PathSetMetadataHeaders;\n  };\n};\n\nexport interface PathMoveOptions extends CommonOptions {\n  abortSignal?: AbortSignalLike;\n  conditions?: DataLakeRequestConditions;\n  destinationConditions?: DataLakeRequestConditions;\n}\n\nexport interface PathRemoveHeaders {\n  date?: Date;\n  etag?: string;\n  lastModified?: Date;\n  requestId?: string;\n  version?: string;\n  contentLength?: number;\n}\n\nexport type PathMoveResponse = PathRemoveHeaders & {\n  _response: HttpResponse & {\n    parsedHeaders: PathRemoveHeaders;\n  };\n};\n\n/**\n * Option interface for Data Lake directory/file exists operations\n *\n * See:\n * - {@link DataLakePathClient.exists}\n */\nexport interface PathExistsOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  // customerProvidedKey?: CpkInfo; not supported yet\n}\n\n/**\n * Contains response data for the {@link DataLakePathClient.createIfNotExists} operation.\n */\nexport interface PathCreateIfNotExistsResponse extends PathCreateResponse {\n  /**\n   * Indicate whether the directory/file is successfully created. Is false when the directory/file is not changed as it already exists.\n   */\n  succeeded: boolean;\n}\n\n/**\n * Contains response data for the {@link DataLakePathClient.deleteIfExists} operation.\n */\nexport interface PathDeleteIfExistsResponse extends PathDeleteResponse {\n  /**\n   * Indicate whether the directory/file is successfully deleted. Is false if the directory/file doesn't exist in the first place.\n   */\n  succeeded: boolean;\n}\n\n// Keeping these for backward compatibility when we changed to use string unions.\n/**\n * Defines values for PathGetPropertiesAction.\n * Possible values include: 'getAccessControl', 'getStatus'\n * @readonly\n */\nexport enum PathGetPropertiesAction {\n  GetAccessControl = \"getAccessControl\",\n  GetStatus = \"getStatus\"\n}\n/**\n * Defines values for PathRenameMode.\n * Possible values include: 'legacy', 'posix'\n * @readonly\n */\nexport enum PathRenameMode {\n  Legacy = \"legacy\",\n  Posix = \"posix\"\n}\n/**\n * Defines values for PathResourceType.\n * Possible values include: 'directory', 'file'\n * @readonly\n */\nexport enum PathResourceType {\n  Directory = \"directory\",\n  File = \"file\"\n}\n\n/** **************************************************************/\n/** DataLakeDirectoryClient option and response related models **/\n/** **************************************************************/\n\nexport interface DirectoryCreateOptions extends PathCreateOptions {}\n\nexport interface DirectoryCreateIfNotExistsOptions extends PathCreateIfNotExistsOptions {}\n\nexport interface DirectoryCreateResponse extends PathCreateResponse {}\n\nexport interface DirectoryCreateIfNotExistsResponse extends PathCreateIfNotExistsResponse {}\n\n/**\n * Options to configure {@link DataLakeDirectoryClient.generateSasUrl} operation.\n */\nexport interface DirectoryGenerateSasUrlOptions extends CommonGenerateSasUrlOptions {\n  /**\n   * Optional only when identifier is provided. Specifies the list of permissions to be associated with the SAS.\n   */\n  permissions?: DirectorySASPermissions;\n}\n\n/** *********************************************************/\n/** DataLakeFileClient option and response related models **/\n/** *********************************************************/\n\nexport interface FileReadOptions extends CommonOptions {\n  abortSignal?: AbortSignalLike;\n  rangeGetContentMD5?: boolean;\n  rangeGetContentCrc64?: boolean;\n  conditions?: DataLakeRequestConditions;\n  onProgress?: (progress: TransferProgressEvent) => void;\n  maxRetryRequests?: number;\n}\n\nexport interface FileReadHeaders {\n  lastModified?: Date;\n  metadata?: Metadata;\n  contentLength?: number;\n  contentType?: string;\n  contentRange?: string;\n  etag?: string;\n  contentMD5?: Uint8Array;\n  contentEncoding?: string;\n  cacheControl?: string;\n  contentDisposition?: string;\n  contentLanguage?: string;\n  // blobSequenceNumber?: number;\n  copyCompletedOn?: Date;\n  copyStatusDescription?: string;\n  copyId?: string;\n  copyProgress?: string;\n  copySource?: string;\n  copyStatus?: CopyStatusType;\n  leaseDuration?: LeaseDurationType;\n  leaseState?: LeaseStateType;\n  leaseStatus?: LeaseStatusType;\n  clientRequestId?: string;\n  requestId?: string;\n  version?: string;\n  acceptRanges?: string;\n  date?: Date;\n  // blobCommittedBlockCount?: number;\n  isServerEncrypted?: boolean;\n  encryptionKeySha256?: string;\n  fileContentMD5?: Uint8Array; // Content MD5 for whole file\n  contentCrc64?: Uint8Array;\n}\n\nexport type FileReadResponse = FileReadHeaders & {\n  contentAsBlob?: Promise<Blob>;\n  readableStreamBody?: NodeJS.ReadableStream;\n  _response: HttpResponse & {\n    parsedHeaders: FileReadHeaders;\n  };\n};\n\nexport interface FileAppendOptions extends CommonOptions {\n  abortSignal?: AbortSignalLike;\n  conditions?: LeaseAccessConditions;\n  transactionalContentMD5?: Uint8Array;\n  onProgress?: (progress: TransferProgressEvent) => void;\n}\n\nexport interface FileFlushOptions extends CommonOptions {\n  abortSignal?: AbortSignalLike;\n  conditions?: DataLakeRequestConditions;\n  retainUncommittedData?: boolean;\n  close?: boolean;\n  pathHttpHeaders?: PathHttpHeaders;\n}\n\nexport interface FileCreateOptions extends PathCreateOptions {}\n\nexport interface FileCreateIfNotExistsOptions extends PathCreateIfNotExistsOptions {}\n\nexport interface FileCreateResponse extends PathCreateResponse {}\n\nexport interface FileCreateIfNotExistsResponse extends PathCreateIfNotExistsResponse {}\n\n/**\n * Option interface for Data Lake file - Upload operations\n *\n * See:\n * - {@link DataLakeFileClient.upload}\n * - {@link DataLakeFileClient.uploadFile}\n * - {@link DataLakeFileClient.uploadStream}\n */\nexport interface FileParallelUploadOptions extends CommonOptions {\n  // For all.\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n\n  /**\n   * Access conditions headers.\n   */\n  conditions?: DataLakeRequestConditions;\n\n  // For create and flush.\n  /**\n   * Http headers.\n   */\n  pathHttpHeaders?: PathHttpHeaders;\n\n  // For create.\n  /**\n   * A collection of key-value string pair to associate with the Data Lake file.\n   */\n  metadata?: Metadata;\n\n  /**\n   * Sets POSIX access permissions for the file owner, the file owning group, and others.\n   * Each class may be granted read, write, or execute permission. The sticky bit is also supported.\n   * Both symbolic (rwxrw-rw-) and 4-digit octal notation (e.g. 0766) are supported.\n   */\n  permissions?: string; // TODO: model or string?\n\n  /**\n   * The umask restricts the permissions of the file to be created.\n   * The resulting permission is given by p & ^u, where p is the permission and u is the umask.\n   * For example, if p is 0777 and u is 0057, then the resulting permission is 0720.\n   * The default permission is 0666 for a file. The default umask is 0027.\n   * The umask must be specified in 4-digit octal notation (e.g. 0766).\n   */\n  umask?: string; // TODO: model or string?\n\n  // For append.\n  /**\n   * Progress updater.\n   */\n  onProgress?: (progress: TransferProgressEvent) => void;\n\n  // For flush.\n  /**\n   * When Azure Storage Events are enabled, a file changed event is raised.\n   * This event has a property indicating whether this is the final change\n   * to distinguish the difference between an intermediate flush to a file stream (when close set to \"false\")\n   * and the final close of a file stream (when close set to \"true\").\n   */\n  close?: boolean;\n\n  // For parallel transfer control.\n\n  /**\n   * Data size threshold in bytes to use a single upload operation rather than parallel uploading.\n   * Data of smaller size than this limit will be transferred in a single upload.\n   * Data larger than this limit will be transferred in chunks in parallel.\n   * Its default and max value is FILE_MAX_SINGLE_UPLOAD_THRESHOLD.\n   * Note: {@link DataLakeFileClient.uploadStream} do not respect this field and always do parallel uploading.\n   */\n  singleUploadThreshold?: number;\n\n  /**\n   * The size of data in bytes that will be transferred in parallel.\n   * If set to 0 or undefined, it will be automatically calculated according\n   * to the data size. Its max value is FILE_UPLOAD_MAX_CHUNK_SIZE.\n   */\n  chunkSize?: number;\n  /**\n   * Max concurrency of parallel uploading. Must be greater than or equal to 0. Its default value is DEFAULT_HIGH_LEVEL_CONCURRENCY.\n   */\n  maxConcurrency?: number;\n}\n\n/**\n * Option interface for Data Lake file - readToBuffer operations\n *\n * See:\n * - {@link DataLakeFileClient.readToBuffer}\n */\nexport interface FileReadToBufferOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n\n  /**\n   * Access conditions headers.\n   */\n  conditions?: DataLakeRequestConditions;\n\n  /**\n   * Progress updater.\n   */\n  onProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * How many retries will perform for each read when the original chunk read stream ends unexpectedly.\n   * Above kind of ends will not trigger retry policy defined in a pipeline,\n   * because they doesn't emit network errors. Default value is 5.\n   */\n  maxRetryRequestsPerChunk?: number;\n\n  /**\n   * chunkSize is size of data every request trying to read.\n   * Must be greater than or equal to 0, if set to 0 or undefined, it will automatically calculated according\n   * to the file size.\n   */\n  chunkSize?: number;\n\n  /**\n   * Concurrency of parallel read.\n   */\n  concurrency?: number;\n}\n\n/**\n * Options to query file with JSON format.\n */\nexport interface FileQueryJsonTextConfiguration {\n  /**\n   * Record separator.\n   */\n  recordSeparator: string;\n  /**\n   * Query for a JSON format file.\n   */\n  kind: \"json\";\n}\n\n/**\n * Options to query file with CSV format.\n */\nexport interface FileQueryCsvTextConfiguration {\n  /**\n   * Record separator.\n   */\n  recordSeparator: string;\n  /**\n   * Query for a CSV format file.\n   */\n  kind: \"csv\";\n  /**\n   * Column separator. Default is \",\".\n   */\n  columnSeparator?: string;\n  /**\n   * Field quote.\n   */\n  fieldQuote?: string;\n  /**\n   * Escape character.\n   */\n  escapeCharacter?: string;\n  /**\n   * Has headers. Default is false.\n   */\n  hasHeaders?: boolean;\n}\n\n/**\n * Options to query file with Parquet format.\n */\nexport interface FileQueryParquetConfiguration {\n  /**\n   * Kind.\n   */\n  kind: \"parquet\";\n}\n\n/**\n * File query error type.\n */\nexport interface FileQueryError {\n  /**\n   * Whether the error is fatal or not. A fatal error will stop the query.\n   */\n  isFatal: boolean;\n  /**\n   * Error name.\n   */\n  name: string;\n  /**\n   * Position in bytes of the query.\n   */\n  position: number;\n  /**\n   * Error description.\n   */\n  description: string;\n}\n\n/**\n * Option interface for Data Lake file - query operations\n *\n * See:\n * - {@link DataLakeFileClient.query}\n */\nexport interface FileQueryOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Configurations for the query input.\n   */\n  inputTextConfiguration?:\n    | FileQueryJsonTextConfiguration\n    | FileQueryCsvTextConfiguration\n    | FileQueryParquetConfiguration;\n  /**\n   * Configurations for the query output.\n   */\n  outputTextConfiguration?:\n    | FileQueryJsonTextConfiguration\n    | FileQueryCsvTextConfiguration\n    | FileQueryArrowConfiguration;\n  /**\n   * Callback to receive events on the progress of query operation.\n   */\n  onProgress?: (progress: TransferProgressEvent) => void;\n  /**\n   * Callback to receive error events during the query operaiton.\n   */\n  onError?: (error: FileQueryError) => void;\n  /**\n   * Conditions to meet when uploading to the block file.\n   */\n  conditions?: DataLakeRequestConditions;\n}\n\n/**\n * Option interface for the {@link DataLakeFileClient.setExpiry} operation.\n */\nexport interface FileSetExpiryOptions extends CommonOptions {\n  /**\n   * An implementation of the `AbortSignalLike` interface to signal the request to cancel the operation.\n   * For example, use the &commat;azure/abort-controller to create an `AbortSignal`.\n   */\n  abortSignal?: AbortSignalLike;\n\n  /**\n   * The time to set the file to expire on, used in combination with the \"Absolute\" {@link FileExpiryMode}.\n   * A time in the past is not allowed and milliseconds will be dropped.\n   */\n  expiresOn?: Date;\n\n  /**\n   * The number of milliseconds to elapse before the file expires, used in combination with the \"RelativeToCreation\" or \"RelativeToNow\" {@link FileExpiryMode}.\n   */\n  timeToExpireInMs?: number;\n}\n\n/**\n * Options to configure {@link DataLakeFileClient.generateSasUrl} operation.\n */\nexport interface FileGenerateSasUrlOptions extends CommonGenerateSasUrlOptions {\n  /**\n   * Optional only when identifier is provided. Specifies the list of permissions to be associated with the SAS.\n   */\n  permissions?: DataLakeSASPermissions;\n}\n\n/** *********************************************************/\n/** DataLakeLeaseClient option and response related models */\n/** *********************************************************/\n"],"names":["BaseRequestPolicy","URLBuilder","isNode","createHmac","createSpanFunction","SpanStatusCode","QueryCollectionFormat","FileSystem","coreHttp.operationOptionsToRequestOptionsBase","coreHttp.Serializer","Mappers.FileSystemCreateHeaders","Mappers.StorageError","Mappers.FileSystemCreateExceptionHeaders","Parameters.timeout","Parameters.resource1","Parameters.url","Parameters.accept","Parameters.requestId","Parameters.version","Parameters.properties","Mappers.FileSystemSetPropertiesHeaders","Mappers.FileSystemSetPropertiesExceptionHeaders","Parameters.ifModifiedSince","Parameters.ifUnmodifiedSince","Mappers.FileSystemGetPropertiesHeaders","Mappers.FileSystemGetPropertiesExceptionHeaders","Mappers.FileSystemDeleteHeaders","Mappers.FileSystemDeleteExceptionHeaders","Mappers.PathList","Mappers.FileSystemListPathsHeaders","Mappers.FileSystemListPathsExceptionHeaders","Parameters.continuation","Parameters.maxResults","Parameters.path","Parameters.recursive","Parameters.upn","Mappers.ListBlobsHierarchySegmentResponse","Mappers.FileSystemListBlobHierarchySegmentHeaders","Mappers.FileSystemListBlobHierarchySegmentExceptionHeaders","Parameters.prefix","Parameters.restype","Parameters.comp","Parameters.delimiter","Parameters.marker","Parameters.include","Parameters.showonly","Parameters.accept1","Path","createOperationSpec","getPropertiesOperationSpec","deleteOperationSpec","serializer","Mappers.PathCreateHeaders","Mappers.PathCreateExceptionHeaders","Parameters.resource2","Parameters.mode","Parameters.cacheControl","Parameters.contentEncoding","Parameters.contentLanguage","Parameters.contentDisposition","Parameters.contentType","Parameters.renameSource","Parameters.leaseId","Parameters.sourceLeaseId","Parameters.permissions","Parameters.umask","Parameters.ifMatch","Parameters.ifNoneMatch","Parameters.sourceIfMatch","Parameters.sourceIfNoneMatch","Parameters.sourceIfModifiedSince","Parameters.sourceIfUnmodifiedSince","Mappers.SetAccessControlRecursiveResponse","Mappers.PathUpdateHeaders","Mappers.PathUpdateExceptionHeaders","Parameters.body","Parameters.action","Parameters.maxRecords","Parameters.mode1","Parameters.forceFlag","Parameters.position","Parameters.retainUncommittedData","Parameters.close","Parameters.contentType1","Parameters.accept2","Parameters.contentLength","Parameters.contentMD5","Parameters.owner","Parameters.group","Parameters.acl","Mappers.PathLeaseHeaders","Mappers.PathLeaseExceptionHeaders","Parameters.xMsLeaseAction","Parameters.xMsLeaseDuration","Parameters.xMsLeaseBreakPeriod","Parameters.proposedLeaseId","Mappers.PathReadHeaders","Mappers.PathReadExceptionHeaders","Parameters.range","Parameters.xMsRangeGetContentMd5","Mappers.PathGetPropertiesHeaders","Mappers.PathGetPropertiesExceptionHeaders","Parameters.action1","Mappers.PathDeleteHeaders","Mappers.PathDeleteExceptionHeaders","Parameters.recursive1","Mappers.PathSetAccessControlHeaders","Mappers.PathSetAccessControlExceptionHeaders","Parameters.action2","Mappers.PathSetAccessControlRecursiveHeaders","Mappers.PathSetAccessControlRecursiveExceptionHeaders","Parameters.action3","Mappers.PathFlushDataHeaders","Mappers.PathFlushDataExceptionHeaders","Parameters.action4","Mappers.PathAppendDataHeaders","Mappers.PathAppendDataExceptionHeaders","Parameters.action5","Parameters.contentType2","Parameters.transactionalContentHash","Parameters.transactionalContentCrc64","Mappers.PathSetExpiryHeaders","Mappers.PathSetExpiryExceptionHeaders","Parameters.comp1","Parameters.expiryOptions","Parameters.expiresOn","Mappers.PathUndeleteHeaders","Mappers.PathUndeleteExceptionHeaders","Parameters.comp2","Parameters.undeleteSource","createClientLogger","StorageRetryPolicyType","AbortError","HttpHeaders","os.type","os.release","DefaultHttpClient","tracingPolicy","keepAlivePolicy","generateClientRequestIdPolicy","deserializationPolicy","logPolicy","proxyPolicy","disableResponseDecompressionPolicy","isTokenCredential","bearerTokenAuthenticationPolicy","coreHttp.ServiceClient","coreHttp.getDefaultUserAgentValue","Readable","EventEmitter","SASProtocol","util.promisify","fs.stat","fs.createReadStream","BlobClient","BlockBlobClient","ContainerClient","__asyncValues","__asyncDelegator","BlobServiceClient","getDefaultProxySettings","PathGetPropertiesAction","PathRenameMode","PathResourceType"],"mappings":"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"}