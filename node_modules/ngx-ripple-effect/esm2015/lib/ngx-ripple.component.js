import { Component, HostListener } from '@angular/core';
import * as i0 from "@angular/core";
export class NgxRippleComponent {
    constructor(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.initialPosition = '';
        this.initialOverflow = '';
    }
    onClick(event) {
        this.initialPosition = this.element.nativeElement.style.position;
        this.initialOverflow = this.element.nativeElement.style.overflow;
        this.element.nativeElement.style.position = 'relative';
        this.element.nativeElement.style.overflow = 'hidden';
        this.createChild(event);
    }
    createChild(event) {
        const span = this.renderer.createElement('span');
        this.renderer.addClass(span, 'ripple');
        const bounds = this.element.nativeElement.getBoundingClientRect();
        // Get position on X Axis
        const x = event.clientX - bounds.left;
        // Get position on Y Axis
        const y = event.clientY - bounds.top;
        this.renderer.setStyle(span, 'left', `${x}px`);
        this.renderer.setStyle(span, 'top', `${y}px`);
        this.renderer.appendChild(this.element.nativeElement, span);
        this.removeChild(span);
    }
    removeChild(childElement) {
        setTimeout(() => {
            this.renderer.removeChild(this.element.nativeElement, childElement);
            this.element.nativeElement.style.position = this.initialPosition;
            this.element.nativeElement.style.overflow = this.initialOverflow;
        }, 300);
    }
}
NgxRippleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.7", ngImport: i0, type: NgxRippleComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
NgxRippleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.7", type: NgxRippleComponent, selector: "[ripple]", host: { listeners: { "click": "onClick($event)" } }, exportAs: ["ripple"], ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: ["\n    /* Add animation */\n    @keyframes ripple-effect {\n      from {\n        opacity: 1;\n        transform: scale(0);\n      }\n      to {\n        opacity: 0;\n        transform: scale(10);\n      }\n    }\n    .ripple {\n      position: absolute;\n      /* ripple effect should be in round shape */\n      border-radius: 50%;\n      background-color: rgba(0, 0, 0, 0.3);\n      width: 100px;\n      height: 100px;\n      margin-top: -50px;\n      margin-left: -50px;\n      animation: ripple-effect 1s;\n      opacity: 0;\n    }\n  "] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.7", ngImport: i0, type: NgxRippleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[ripple]',
                    template: '<ng-content></ng-content>',
                    styles: [`
    /* Add animation */
    @keyframes ripple-effect {
      from {
        opacity: 1;
        transform: scale(0);
      }
      to {
        opacity: 0;
        transform: scale(10);
      }
    }
    .ripple {
      position: absolute;
      /* ripple effect should be in round shape */
      border-radius: 50%;
      background-color: rgba(0, 0, 0, 0.3);
      width: 100px;
      height: 100px;
      margin-top: -50px;
      margin-left: -50px;
      animation: ripple-effect 1s;
      opacity: 0;
    }
  `],
                    exportAs: 'ripple'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { onClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXJpcHBsZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtcmlwcGxlL3NyYy9saWIvbmd4LXJpcHBsZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBYyxZQUFZLEVBQWEsTUFBTSxlQUFlLENBQUM7O0FBZ0MvRSxNQUFNLE9BQU8sa0JBQWtCO0lBSzdCLFlBQW9CLE9BQW1CLEVBQVUsUUFBbUI7UUFBaEQsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVc7UUFIN0Qsb0JBQWUsR0FBVyxFQUFFLENBQUM7UUFDN0Isb0JBQWUsR0FBVyxFQUFFLENBQUM7SUFFbUMsQ0FBQztJQUdqRSxPQUFPLENBQUMsS0FBaUI7UUFDOUIsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO1FBQ2pFLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztRQUNqRSxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQztRQUN2RCxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUNyRCxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFTyxXQUFXLENBQUMsS0FBaUI7UUFDbkMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLHFCQUFxQixFQUFFLENBQUM7UUFDbEUseUJBQXlCO1FBQ3pCLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztRQUN0Qyx5QkFBeUI7UUFDekIsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUVPLFdBQVcsQ0FBQyxZQUFpQjtRQUNuQyxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ2QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFDcEUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDO1lBQ2pFLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQztRQUNuRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDVixDQUFDOzsrR0FwQ1Usa0JBQWtCO21HQUFsQixrQkFBa0IsMkhBNUJuQiwyQkFBMkI7MkZBNEIxQixrQkFBa0I7a0JBOUI5QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxVQUFVO29CQUNwQixRQUFRLEVBQUUsMkJBQTJCO29CQUNyQyxNQUFNLEVBQUUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBd0JSLENBQUM7b0JBQ0YsUUFBUSxFQUFFLFFBQVE7aUJBQ25CO3lIQVNRLE9BQU87c0JBRGIsWUFBWTt1QkFBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ1tyaXBwbGVdJyxcclxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxyXG4gIHN0eWxlczogW2BcclxuICAgIC8qIEFkZCBhbmltYXRpb24gKi9cclxuICAgIEBrZXlmcmFtZXMgcmlwcGxlLWVmZmVjdCB7XHJcbiAgICAgIGZyb20ge1xyXG4gICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgwKTtcclxuICAgICAgfVxyXG4gICAgICB0byB7XHJcbiAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEwKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLnJpcHBsZSB7XHJcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgLyogcmlwcGxlIGVmZmVjdCBzaG91bGQgYmUgaW4gcm91bmQgc2hhcGUgKi9cclxuICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xyXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMyk7XHJcbiAgICAgIHdpZHRoOiAxMDBweDtcclxuICAgICAgaGVpZ2h0OiAxMDBweDtcclxuICAgICAgbWFyZ2luLXRvcDogLTUwcHg7XHJcbiAgICAgIG1hcmdpbi1sZWZ0OiAtNTBweDtcclxuICAgICAgYW5pbWF0aW9uOiByaXBwbGUtZWZmZWN0IDFzO1xyXG4gICAgICBvcGFjaXR5OiAwO1xyXG4gICAgfVxyXG4gIGBdLFxyXG4gIGV4cG9ydEFzOiAncmlwcGxlJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd4UmlwcGxlQ29tcG9uZW50IHtcclxuXHJcbiAgcHVibGljIGluaXRpYWxQb3NpdGlvbjogc3RyaW5nID0gJyc7XHJcbiAgcHVibGljIGluaXRpYWxPdmVyZmxvdzogc3RyaW5nID0gJyc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxyXG5cclxuICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50J10pXHJcbiAgcHVibGljIG9uQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgIHRoaXMuaW5pdGlhbFBvc2l0aW9uID0gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuc3R5bGUucG9zaXRpb247XHJcbiAgICB0aGlzLmluaXRpYWxPdmVyZmxvdyA9IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LnN0eWxlLm92ZXJmbG93O1xyXG4gICAgdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xyXG4gICAgdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcclxuICAgIHRoaXMuY3JlYXRlQ2hpbGQoZXZlbnQpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVDaGlsZChldmVudDogTW91c2VFdmVudCkge1xyXG4gICAgY29uc3Qgc3BhbiA9IHRoaXMucmVuZGVyZXIuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyhzcGFuLCAncmlwcGxlJyk7XHJcbiAgICBjb25zdCBib3VuZHMgPSB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgIC8vIEdldCBwb3NpdGlvbiBvbiBYIEF4aXNcclxuICAgIGNvbnN0IHggPSBldmVudC5jbGllbnRYIC0gYm91bmRzLmxlZnQ7XHJcbiAgICAvLyBHZXQgcG9zaXRpb24gb24gWSBBeGlzXHJcbiAgICBjb25zdCB5ID0gZXZlbnQuY2xpZW50WSAtIGJvdW5kcy50b3A7XHJcbiAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHNwYW4sICdsZWZ0JywgYCR7eH1weGApO1xyXG4gICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShzcGFuLCAndG9wJywgYCR7eX1weGApO1xyXG4gICAgdGhpcy5yZW5kZXJlci5hcHBlbmRDaGlsZCh0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudCwgc3Bhbik7XHJcbiAgICB0aGlzLnJlbW92ZUNoaWxkKHNwYW4pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZW1vdmVDaGlsZChjaGlsZEVsZW1lbnQ6IGFueSkge1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7ICAgICAgXHJcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2hpbGQodGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIGNoaWxkRWxlbWVudCk7XHJcbiAgICAgIHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gdGhpcy5pbml0aWFsUG9zaXRpb247XHJcbiAgICAgIHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gdGhpcy5pbml0aWFsT3ZlcmZsb3c7XHJcbiAgICB9LCAzMDApO1xyXG4gIH1cclxuXHJcbn1cclxuIl19