(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
  typeof define === 'function' && define.amd ? define('ngx-ripple-effect', ['exports', '@angular/core'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["ngx-ripple-effect"] = {}, global.ng.core));
})(this, (function (exports, i0) { 'use strict';

  function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
      Object.keys(e).forEach(function (k) {
        if (k !== 'default') {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function () { return e[k]; }
          });
        }
      });
    }
    n["default"] = e;
    return Object.freeze(n);
  }

  var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

  var NgxRippleComponent = /** @class */ (function () {
      function NgxRippleComponent(element, renderer) {
          this.element = element;
          this.renderer = renderer;
          this.initialPosition = '';
          this.initialOverflow = '';
      }
      NgxRippleComponent.prototype.onClick = function (event) {
          this.initialPosition = this.element.nativeElement.style.position;
          this.initialOverflow = this.element.nativeElement.style.overflow;
          this.element.nativeElement.style.position = 'relative';
          this.element.nativeElement.style.overflow = 'hidden';
          this.createChild(event);
      };
      NgxRippleComponent.prototype.createChild = function (event) {
          var span = this.renderer.createElement('span');
          this.renderer.addClass(span, 'ripple');
          var bounds = this.element.nativeElement.getBoundingClientRect();
          // Get position on X Axis
          var x = event.clientX - bounds.left;
          // Get position on Y Axis
          var y = event.clientY - bounds.top;
          this.renderer.setStyle(span, 'left', x + "px");
          this.renderer.setStyle(span, 'top', y + "px");
          this.renderer.appendChild(this.element.nativeElement, span);
          this.removeChild(span);
      };
      NgxRippleComponent.prototype.removeChild = function (childElement) {
          var _this = this;
          setTimeout(function () {
              _this.renderer.removeChild(_this.element.nativeElement, childElement);
              _this.element.nativeElement.style.position = _this.initialPosition;
              _this.element.nativeElement.style.overflow = _this.initialOverflow;
          }, 300);
      };
      return NgxRippleComponent;
  }());
  NgxRippleComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.7", ngImport: i0__namespace, type: NgxRippleComponent, deps: [{ token: i0__namespace.ElementRef }, { token: i0__namespace.Renderer2 }], target: i0__namespace.ɵɵFactoryTarget.Component });
  NgxRippleComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.7", type: NgxRippleComponent, selector: "[ripple]", host: { listeners: { "click": "onClick($event)" } }, exportAs: ["ripple"], ngImport: i0__namespace, template: '<ng-content></ng-content>', isInline: true, styles: ["\n    /* Add animation */\n    @keyframes ripple-effect {\n      from {\n        opacity: 1;\n        transform: scale(0);\n      }\n      to {\n        opacity: 0;\n        transform: scale(10);\n      }\n    }\n    .ripple {\n      position: absolute;\n      /* ripple effect should be in round shape */\n      border-radius: 50%;\n      background-color: rgba(0, 0, 0, 0.3);\n      width: 100px;\n      height: 100px;\n      margin-top: -50px;\n      margin-left: -50px;\n      animation: ripple-effect 1s;\n      opacity: 0;\n    }\n  "] });
  i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.7", ngImport: i0__namespace, type: NgxRippleComponent, decorators: [{
              type: i0.Component,
              args: [{
                      selector: '[ripple]',
                      template: '<ng-content></ng-content>',
                      styles: ["\n    /* Add animation */\n    @keyframes ripple-effect {\n      from {\n        opacity: 1;\n        transform: scale(0);\n      }\n      to {\n        opacity: 0;\n        transform: scale(10);\n      }\n    }\n    .ripple {\n      position: absolute;\n      /* ripple effect should be in round shape */\n      border-radius: 50%;\n      background-color: rgba(0, 0, 0, 0.3);\n      width: 100px;\n      height: 100px;\n      margin-top: -50px;\n      margin-left: -50px;\n      animation: ripple-effect 1s;\n      opacity: 0;\n    }\n  "],
                      exportAs: 'ripple'
                  }]
          }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }, { type: i0__namespace.Renderer2 }]; }, propDecorators: { onClick: [{
                  type: i0.HostListener,
                  args: ['click', ['$event']]
              }] } });

  var NgxRippleModule = /** @class */ (function () {
      function NgxRippleModule() {
      }
      return NgxRippleModule;
  }());
  NgxRippleModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.7", ngImport: i0__namespace, type: NgxRippleModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
  NgxRippleModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.7", ngImport: i0__namespace, type: NgxRippleModule, declarations: [NgxRippleComponent], exports: [NgxRippleComponent] });
  NgxRippleModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.7", ngImport: i0__namespace, type: NgxRippleModule, imports: [[]] });
  i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.7", ngImport: i0__namespace, type: NgxRippleModule, decorators: [{
              type: i0.NgModule,
              args: [{
                      imports: [],
                      declarations: [NgxRippleComponent],
                      exports: [NgxRippleComponent]
                  }]
          }] });

  /*
   * Public API Surface of ngx-ripple
   */

  /**
   * Generated bundle index. Do not edit.
   */

  exports.NgxRippleComponent = NgxRippleComponent;
  exports.NgxRippleModule = NgxRippleModule;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngx-ripple-effect.umd.js.map
