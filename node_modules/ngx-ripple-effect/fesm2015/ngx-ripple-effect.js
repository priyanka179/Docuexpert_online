import * as i0 from '@angular/core';
import { Component, HostListener, NgModule } from '@angular/core';

class NgxRippleComponent {
    constructor(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.initialPosition = '';
        this.initialOverflow = '';
    }
    onClick(event) {
        this.initialPosition = this.element.nativeElement.style.position;
        this.initialOverflow = this.element.nativeElement.style.overflow;
        this.element.nativeElement.style.position = 'relative';
        this.element.nativeElement.style.overflow = 'hidden';
        this.createChild(event);
    }
    createChild(event) {
        const span = this.renderer.createElement('span');
        this.renderer.addClass(span, 'ripple');
        const bounds = this.element.nativeElement.getBoundingClientRect();
        // Get position on X Axis
        const x = event.clientX - bounds.left;
        // Get position on Y Axis
        const y = event.clientY - bounds.top;
        this.renderer.setStyle(span, 'left', `${x}px`);
        this.renderer.setStyle(span, 'top', `${y}px`);
        this.renderer.appendChild(this.element.nativeElement, span);
        this.removeChild(span);
    }
    removeChild(childElement) {
        setTimeout(() => {
            this.renderer.removeChild(this.element.nativeElement, childElement);
            this.element.nativeElement.style.position = this.initialPosition;
            this.element.nativeElement.style.overflow = this.initialOverflow;
        }, 300);
    }
}
NgxRippleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.7", ngImport: i0, type: NgxRippleComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
NgxRippleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.7", type: NgxRippleComponent, selector: "[ripple]", host: { listeners: { "click": "onClick($event)" } }, exportAs: ["ripple"], ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: ["\n    /* Add animation */\n    @keyframes ripple-effect {\n      from {\n        opacity: 1;\n        transform: scale(0);\n      }\n      to {\n        opacity: 0;\n        transform: scale(10);\n      }\n    }\n    .ripple {\n      position: absolute;\n      /* ripple effect should be in round shape */\n      border-radius: 50%;\n      background-color: rgba(0, 0, 0, 0.3);\n      width: 100px;\n      height: 100px;\n      margin-top: -50px;\n      margin-left: -50px;\n      animation: ripple-effect 1s;\n      opacity: 0;\n    }\n  "] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.7", ngImport: i0, type: NgxRippleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[ripple]',
                    template: '<ng-content></ng-content>',
                    styles: [`
    /* Add animation */
    @keyframes ripple-effect {
      from {
        opacity: 1;
        transform: scale(0);
      }
      to {
        opacity: 0;
        transform: scale(10);
      }
    }
    .ripple {
      position: absolute;
      /* ripple effect should be in round shape */
      border-radius: 50%;
      background-color: rgba(0, 0, 0, 0.3);
      width: 100px;
      height: 100px;
      margin-top: -50px;
      margin-left: -50px;
      animation: ripple-effect 1s;
      opacity: 0;
    }
  `],
                    exportAs: 'ripple'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { onClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });

class NgxRippleModule {
}
NgxRippleModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.7", ngImport: i0, type: NgxRippleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NgxRippleModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.7", ngImport: i0, type: NgxRippleModule, declarations: [NgxRippleComponent], exports: [NgxRippleComponent] });
NgxRippleModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.7", ngImport: i0, type: NgxRippleModule, imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.7", ngImport: i0, type: NgxRippleModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [NgxRippleComponent],
                    exports: [NgxRippleComponent]
                }]
        }] });

/*
 * Public API Surface of ngx-ripple
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgxRippleComponent, NgxRippleModule };
//# sourceMappingURL=ngx-ripple-effect.js.map
