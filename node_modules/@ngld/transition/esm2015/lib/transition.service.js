import { __awaiter } from "tslib";
import { Injectable, Optional } from '@angular/core';
export class InvalidTriggerRegisterError extends Error {
    constructor() {
        super('Could not find triggers registered in the transition.');
    }
}
export class TransitionService {
    constructor(triggers) {
        this.triggers = triggers;
    }
    /**
     * animate
     */
    animate(triggerName, from, to, param) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!Array.isArray(this.triggers)) {
                return Promise.reject(new InvalidTriggerRegisterError());
            }
            const trigger = this.triggers.find(trig => trig.name === triggerName);
            if (!trigger) {
                console.warn(`Trigger ${triggerName} is not defined.`);
                return Promise.resolve();
            }
            const transition = trigger.transitions.find(trans => trans.validate(from, to));
            if (!transition) {
                console.warn(`Transition ${from} => ${to} is not defined`);
                return Promise.resolve();
            }
            if (!requestAnimationFrame) {
                // requestAnimationFrame API is not available in current browser.
                // https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame
                transition.steps.forEach(step => step(1, param));
                return Promise.resolve();
            }
            return Promise.all(transition.steps.map(render => new Promise((resolve) => {
                const start = Date.now();
                (function loop() {
                    const p = (Date.now() - start) / transition.duration;
                    if (p > 1) {
                        render(1, param);
                        resolve(render);
                    }
                    else {
                        requestAnimationFrame(loop);
                        render(transition.easing(p), param);
                    }
                })();
            })));
        });
    }
}
TransitionService.decorators = [
    { type: Injectable }
];
TransitionService.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNpdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi90cmFuc2l0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR3JELE1BQU0sT0FBTywyQkFBNEIsU0FBUSxLQUFLO0lBRXBEO1FBQ0UsS0FBSyxDQUFDLHVEQUF1RCxDQUFDLENBQUM7SUFDakUsQ0FBQztDQUNGO0FBR0QsTUFBTSxPQUFPLGlCQUFpQjtJQUU1QixZQUNxQixRQUFtQjtRQUFuQixhQUFRLEdBQVIsUUFBUSxDQUFXO0lBQ3BDLENBQUM7SUFFTDs7T0FFRztJQUNVLE9BQU8sQ0FBQyxXQUFtQixFQUFFLElBQVksRUFBRSxFQUFVLEVBQUUsS0FBVTs7WUFDNUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUNqQyxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSwyQkFBMkIsRUFBRSxDQUFDLENBQUM7YUFDMUQ7WUFDRCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssV0FBVyxDQUFDLENBQUM7WUFDdEUsSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDWixPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsV0FBVyxrQkFBa0IsQ0FBQyxDQUFDO2dCQUN2RCxPQUFPLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUMxQjtZQUNELE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUMvRSxJQUFJLENBQUMsVUFBVSxFQUFFO2dCQUNmLE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBYyxJQUFJLE9BQU8sRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO2dCQUMzRCxPQUFPLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUMxQjtZQUNELElBQUksQ0FBQyxxQkFBcUIsRUFBRTtnQkFDMUIsaUVBQWlFO2dCQUNqRSxnRkFBZ0Y7Z0JBQ2hGLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNqRCxPQUFPLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUMxQjtZQUNELE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7Z0JBQ3hFLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztnQkFDekIsQ0FBQyxTQUFTLElBQUk7b0JBQ1osTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFDLEdBQUcsVUFBVSxDQUFDLFFBQVEsQ0FBQztvQkFDckQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO3dCQUNULE1BQU0sQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7d0JBQ2pCLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztxQkFDakI7eUJBQU07d0JBQ0wscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7d0JBQzVCLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO3FCQUNyQztnQkFDSCxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ1AsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQztLQUFBOzs7WUEzQ0YsVUFBVTs7O3dDQUlOLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVHJpZ2dlciB9IGZyb20gJy4vdHJpZ2dlci5jbGFzcyc7XG5cbmV4cG9ydCBjbGFzcyBJbnZhbGlkVHJpZ2dlclJlZ2lzdGVyRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoJ0NvdWxkIG5vdCBmaW5kIHRyaWdnZXJzIHJlZ2lzdGVyZWQgaW4gdGhlIHRyYW5zaXRpb24uJyk7XG4gIH1cbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRyYW5zaXRpb25TZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBAT3B0aW9uYWwoKSBwdWJsaWMgdHJpZ2dlcnM6IFRyaWdnZXJbXSxcbiAgKSB7IH1cblxuICAvKipcbiAgICogYW5pbWF0ZVxuICAgKi9cbiAgcHVibGljIGFzeW5jIGFuaW1hdGUodHJpZ2dlck5hbWU6IHN0cmluZywgZnJvbTogc3RyaW5nLCB0bzogc3RyaW5nLCBwYXJhbTogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodGhpcy50cmlnZ2VycykpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgSW52YWxpZFRyaWdnZXJSZWdpc3RlckVycm9yKCkpO1xuICAgIH1cbiAgICBjb25zdCB0cmlnZ2VyID0gdGhpcy50cmlnZ2Vycy5maW5kKHRyaWcgPT4gdHJpZy5uYW1lID09PSB0cmlnZ2VyTmFtZSk7XG4gICAgaWYgKCF0cmlnZ2VyKSB7XG4gICAgICBjb25zb2xlLndhcm4oYFRyaWdnZXIgJHt0cmlnZ2VyTmFtZX0gaXMgbm90IGRlZmluZWQuYCk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGNvbnN0IHRyYW5zaXRpb24gPSB0cmlnZ2VyLnRyYW5zaXRpb25zLmZpbmQodHJhbnMgPT4gdHJhbnMudmFsaWRhdGUoZnJvbSwgdG8pKTtcbiAgICBpZiAoIXRyYW5zaXRpb24pIHtcbiAgICAgIGNvbnNvbGUud2FybihgVHJhbnNpdGlvbiAke2Zyb219ID0+ICR7dG99IGlzIG5vdCBkZWZpbmVkYCk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGlmICghcmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICAvLyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgQVBJIGlzIG5vdCBhdmFpbGFibGUgaW4gY3VycmVudCBicm93c2VyLlxuICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL3dpbmRvdy9yZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgICAgIHRyYW5zaXRpb24uc3RlcHMuZm9yRWFjaChzdGVwID0+IHN0ZXAoMSwgcGFyYW0pKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHRyYW5zaXRpb24uc3RlcHMubWFwKHJlbmRlciA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgICAgKGZ1bmN0aW9uIGxvb3AoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHAgPSAoRGF0ZS5ub3coKSAtIHN0YXJ0KSAvIHRyYW5zaXRpb24uZHVyYXRpb247XG4gICAgICAgIGlmIChwID4gMSkge1xuICAgICAgICAgIHJlbmRlcigxLCBwYXJhbSk7XG4gICAgICAgICAgcmVzb2x2ZShyZW5kZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTtcbiAgICAgICAgICByZW5kZXIodHJhbnNpdGlvbi5lYXNpbmcocCksIHBhcmFtKTtcbiAgICAgICAgfVxuICAgICAgfSkoKTtcbiAgICB9KSkpO1xuICB9XG59XG4iXX0=