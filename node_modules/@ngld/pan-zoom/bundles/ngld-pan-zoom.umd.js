(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/cdk/platform')) :
    typeof define === 'function' && define.amd ? define('@ngld/pan-zoom', ['exports', '@angular/core', '@angular/common', '@angular/cdk/platform'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.ngld = global.ngld || {}, global.ngld["pan-zoom"] = {}), global.ng.core, global.ng.common, global.ng.cdk.platform));
})(this, (function (exports, core, common, platform) { 'use strict';

    var activeCapturingEventOptions = platform.normalizePassiveListenerOptions({
        passive: false,
        capture: true,
    });
    function isTouch(event) {
        return !!event.targetTouches;
    }
    function getCoordinate(event, clientRect) {
        if (isTouch(event)) {
            return {
                x: event.targetTouches[0].clientX,
                y: event.targetTouches[1].clientY,
            };
        }
        return {
            x: event.clientX - clientRect.left,
            y: event.clientY - clientRect.top,
        };
    }
    var PanZoomDirective = /** @class */ (function () {
        function PanZoomDirective(el, 
        // Avoid ngcc error:
        // https://github.com/angular/components/blob/2b1d84e2bc1d7295e53a753211e99a0e73110b45/src/cdk/drag-drop/drag-drop-registry.ts#L64
        $document) {
            var _this = this;
            this.el = el;
            this.pointerOrigin = { x: 0, y: 0 };
            this.isPointerDown = false;
            this.previousViewBox = {
                minX: 0, minY: 0, width: 500, height: 500,
            };
            this.excludeChildrenElements = [];
            this.viewBox = {
                minX: 0, minY: 0, width: 500, height: 500,
            };
            this.scaleFactor = 1.3;
            this.viewBoxChanged = new core.EventEmitter();
            this.pointerDownListener = function (event) {
                if (!_this.el.nativeElement.contains(event.target)) {
                    return;
                }
                if (_this.excludeChildrenElements.find(function (c) { return c.checkExclusion(event.target); })) {
                    _this.isPointerDown = false;
                    return;
                }
                _this.isPointerDown = true;
                _this.pointerOrigin = getCoordinate(event, { top: 0, left: 0 });
                _this.previousViewBox = Object.assign({}, _this.viewBox);
                _this.boundingSize = undefined;
            };
            this.pointerUpListener = function (event) {
                _this.isPointerDown = false;
                _this.previousViewBox = undefined;
            };
            this.pointerMoveListener = function (event) {
                if (!_this.isPointerDown) {
                    return;
                }
                if (!_this.boundingSize) {
                    _this.boundingSize = _this.el.nativeElement.getBoundingClientRect();
                }
                // Prevent user to do a selection on the page
                event.preventDefault();
                // Get the current pointer position
                var pointerPosition = getCoordinate(event, { top: 0, left: 0 });
                var ratio = _this.previousViewBox.width / _this.boundingSize.width;
                var newViewBox = {
                    minX: _this.previousViewBox.minX - ((pointerPosition.x - _this.pointerOrigin.x) * ratio),
                    minY: _this.previousViewBox.minY - ((pointerPosition.y - _this.pointerOrigin.y) * ratio)
                };
                _this.viewBoxChanged.emit(Object.assign(Object.assign({}, _this.viewBox), newViewBox));
            };
            this.document = $document;
        }
        PanZoomDirective.prototype.ngOnInit = function () {
            this.document.addEventListener('touchstart', this.pointerDownListener, activeCapturingEventOptions);
            this.document.addEventListener('mousedown', this.pointerDownListener, activeCapturingEventOptions);
            this.document.addEventListener('pointerdown', this.pointerDownListener, activeCapturingEventOptions);
            this.document.addEventListener('touchend', this.pointerUpListener, activeCapturingEventOptions);
            this.document.addEventListener('mouseup', this.pointerUpListener, activeCapturingEventOptions);
            this.document.addEventListener('pointerup', this.pointerUpListener, activeCapturingEventOptions);
            this.document.addEventListener('touchmove', this.pointerMoveListener, activeCapturingEventOptions);
            this.document.addEventListener('mousemove', this.pointerMoveListener, activeCapturingEventOptions);
            this.document.addEventListener('pointermove', this.pointerMoveListener, activeCapturingEventOptions);
        };
        PanZoomDirective.prototype.ngOnDestroy = function () {
            this.document.removeEventListener('touchstart', this.pointerDownListener, activeCapturingEventOptions);
            this.document.removeEventListener('mousedown', this.pointerDownListener, activeCapturingEventOptions);
            this.document.removeEventListener('pointerdown', this.pointerDownListener, activeCapturingEventOptions);
            this.document.removeEventListener('touchend', this.pointerUpListener, activeCapturingEventOptions);
            this.document.removeEventListener('mouseup', this.pointerUpListener, activeCapturingEventOptions);
            this.document.removeEventListener('pointerup', this.pointerUpListener, activeCapturingEventOptions);
            this.document.removeEventListener('touchmove', this.pointerMoveListener, activeCapturingEventOptions);
            this.document.removeEventListener('mousemove', this.pointerMoveListener, activeCapturingEventOptions);
            this.document.removeEventListener('pointermove', this.pointerMoveListener, activeCapturingEventOptions);
        };
        /**
         * excludeChild
         */
        PanZoomDirective.prototype.excludeChild = function (component) {
            this.excludeChildrenElements.push(component);
        };
        /**
         * onExcludeDestroyed
         */
        PanZoomDirective.prototype.onExcludeDestroyed = function (component) {
            this.excludeChildrenElements = this.excludeChildrenElements
                .filter(function (c) { return c !== component; });
        };
        PanZoomDirective.prototype.onZoom = function (e) {
            e.preventDefault();
            var position = getCoordinate(e, this.el.nativeElement.getBoundingClientRect());
            var scale = Math.pow(this.scaleFactor, e.deltaY < 0 ? 1 : -1);
            var sx = position.x / this.el.nativeElement.clientWidth;
            var sy = position.y / this.el.nativeElement.clientHeight;
            var x = this.viewBox.minX + this.viewBox.width * sx;
            var y = this.viewBox.minY + this.viewBox.height * sy;
            this.viewBoxChanged.emit({
                minX: x + scale * (this.viewBox.minX - x),
                minY: y + scale * (this.viewBox.minY - y),
                width: this.viewBox.width * scale,
                height: this.viewBox.height * scale,
            });
        };
        return PanZoomDirective;
    }());
    PanZoomDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[ngldPanZoom]'
                },] }
    ];
    PanZoomDirective.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] }] }
    ]; };
    PanZoomDirective.propDecorators = {
        viewBox: [{ type: core.Input }],
        scaleFactor: [{ type: core.Input }],
        viewBoxChanged: [{ type: core.Output }],
        onZoom: [{ type: core.HostListener, args: ['wheel', ['$event'],] }]
    };

    var PanZoomExcludeDirective = /** @class */ (function () {
        function PanZoomExcludeDirective(el, parentCanvas) {
            this.el = el;
            this.parentCanvas = parentCanvas;
        }
        /**
         * checkExclusion
         */
        PanZoomExcludeDirective.prototype.checkExclusion = function (target) {
            return this.el.nativeElement.contains(target);
        };
        PanZoomExcludeDirective.prototype.ngOnDestroy = function () {
            this.parentCanvas.onExcludeDestroyed(this);
        };
        PanZoomExcludeDirective.prototype.ngOnInit = function () {
            this.parentCanvas.excludeChild(this);
        };
        return PanZoomExcludeDirective;
    }());
    PanZoomExcludeDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[ngldPanZoomExclude]'
                },] }
    ];
    PanZoomExcludeDirective.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: PanZoomDirective }
    ]; };

    var PanZoomDirectiveModule = /** @class */ (function () {
        function PanZoomDirectiveModule() {
        }
        return PanZoomDirectiveModule;
    }());
    PanZoomDirectiveModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [PanZoomDirective, PanZoomExcludeDirective],
                    imports: [],
                    exports: [PanZoomDirective, PanZoomExcludeDirective]
                },] }
    ];

    /*
     * Public API Surface of pan-zoom-directive
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.PanZoomDirective = PanZoomDirective;
    exports.PanZoomDirectiveModule = PanZoomDirectiveModule;
    exports.PanZoomExcludeDirective = PanZoomExcludeDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngld-pan-zoom.umd.js.map
