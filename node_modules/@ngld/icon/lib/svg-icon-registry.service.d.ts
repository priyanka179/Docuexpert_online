import { ErrorHandler, InjectionToken, ValueProvider } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { MatIconRegistry } from '@angular/material/icon';
import { DomSanitizer } from '@angular/platform-browser';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare const SVG_ICONS: InjectionToken<SvgIconInfo[]>;
export interface SvgIconInfoProvider extends ValueProvider {
    useValue: SvgIconInfo;
}
export interface SvgIconInfo {
    namespace?: string;
    name: string;
    svgSource: string;
}
/**
 * An exception to be thrown when the consumer attempts to use `<ngld-icon>`
 * without including @angular/common/http.
 */
export declare class SvgIconNoHttpProviderError extends Error {
    constructor();
}
/**
 * https://github.com/angular/angular/blob/f8096d499324cf0961f092944bbaedd05364eea1/aio/src/app/shared/custom-icon-registry.ts
 */
export declare class SvgIconRegistry extends MatIconRegistry {
    private http;
    private svgIcons;
    private cachedSvgElements;
    constructor(http: HttpClient, sanitizer: DomSanitizer, document: any, errorHandler: ErrorHandler, svgIcons: SvgIconInfo[]);
    /**
     * Returns an Observable that produces the icon (as an `<svg>` DOM element)
     * with the given name and namespace.
     * The icon must have been previously registered with addIcon or addIconSet;
     * if not, the observable will throw an error.
     */
    getNamedSvgIcon(iconName: string, namespace?: string): Observable<SVGElement>;
    private loadSvgElement;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<SvgIconRegistry, [{ optional: true; }, null, { optional: true; }, null, { optional: true; }]>;
}

//# sourceMappingURL=svg-icon-registry.service.d.ts.map