import { Attribute, Component, ElementRef, ErrorHandler, Inject, Input } from '@angular/core';
import { MAT_ICON_LOCATION } from '@angular/material/icon';
import { Subscription } from 'rxjs';
import { take } from 'rxjs/operators';
import { SvgIconRegistry } from './svg-icon-registry.service';
/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */
const funcIriAttributes = [
    'clip-path',
    'color-profile',
    'src',
    'cursor',
    'fill',
    'filter',
    'marker',
    'marker-start',
    'marker-mid',
    'marker-end',
    'mask',
    'stroke'
];
const ɵ0 = attr => `[${attr}]`;
/** Selector that can be used to find all elements that are using a `FuncIRI`. */
const funcIriAttributeSelector = funcIriAttributes.map(ɵ0).join(', ');
/** Regex that can be used to extract the id out of a FuncIRI. */
const funcIriPattern = /^url\(['"]?#(.*?)['"]?\)$/;
/**
 * ngld-icon component
 * Greatly inspired by @angular/material icon component:
 * https://github.com/angular/components/blob/master/src/material/icon/icon.ts
 */
export class IconComponent {
    constructor(elementRef, iconRegistry, ariaHidden, location, errorHandler) {
        this.elementRef = elementRef;
        this.iconRegistry = iconRegistry;
        this.location = location;
        this.errorHandler = errorHandler;
        /**
         * Subscription to the current in-progress SVG icon request.
         */
        this.currentIconFetch = Subscription.EMPTY;
        this.svgIcon = 'expand_node';
        // If the user has not explicitly set aria-hidden, mark the icon as hidden,
        // as this is the right thing to do for the majority of icon use-cases.
        if (!ariaHidden) {
            elementRef.nativeElement.setAttribute('aria-hidden', 'true');
        }
    }
    /**
     * the value given on svgIcon property is obtained from SimpleChanges event.
     */
    ngOnChanges(changes) {
        // Only update the inline SVG icon if the inputs changed,
        // to avoid unnecessary DOM operations.
        const svgIconChanges = changes.svgIcon;
        this.svgNamespace = null;
        this.svgName = null;
        if (svgIconChanges) {
            this.currentIconFetch.unsubscribe();
            if (this.svgIcon) {
                const [namespace, iconName] = this.splitIconName(this.svgIcon);
                if (namespace) {
                    this.svgNamespace = namespace;
                }
                if (iconName) {
                    this.svgName = iconName;
                }
                this.currentIconFetch = this.iconRegistry.getNamedSvgIcon(iconName, namespace)
                    .pipe(take(1))
                    .subscribe(svg => this.setSvgElement(svg), (err) => {
                    const errorMessage = `Error retrieving icon ${namespace}:${iconName} ! ${err.message}`;
                    this.errorHandler.handleError(new Error(errorMessage));
                });
            }
            else if (changes.previousValue) {
                this.clearSvgElement();
            }
        }
        // updateFontIconClasses when usingFontIcon
    }
    ngOnDestroy() {
        this.currentIconFetch.unsubscribe();
        if (this.elementsWithExternalReferences) {
            this.elementsWithExternalReferences.clear();
        }
    }
    splitIconName(iconName) {
        if (!iconName) {
            return ['', ''];
        }
        const parts = iconName.split(':');
        switch (parts.length) {
            case 1:
                return ['', parts[0]]; // Use default namespace.
            case 2:
                return parts;
            default:
                throw Error(`Invalid icon name: "${iconName}"`);
        }
    }
    setSvgElement(svg) {
        this.clearSvgElement();
        // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.
        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/
        // Do this before inserting the element into the DOM,
        // in order to avoid a style recalculation.
        const styleTags = svg.querySelectorAll('style');
        styleTags.forEach(styleTag => styleTag.textContent += ' ');
        // Note: we do this fix here, rather than the icon registry,
        // because the references have to point to the URL at the time
        // that the icon was created.
        const path = this.location.getPathname();
        this.cacheChildrenWithExternalReferences(svg);
        this.elementRef.nativeElement.appendChild(svg);
    }
    clearSvgElement() {
        const layoutElement = this.elementRef.nativeElement;
        let childCount = layoutElement.childNodes.length;
        if (this.elementsWithExternalReferences) {
            this.elementsWithExternalReferences.clear();
        }
        // Remove existing non-element child nodes and SVGs,
        // and add the new SVG element. Note that we can't use innerHTML,
        // because IE will throw if the element has a data binding.
        // --> I'm not caring IE at present...
        while (childCount--) {
            const child = layoutElement.childNodes[childCount];
            // 1 corresponds to Node.ELEMENT_NODE.
            // We remove all non-element nodes in order to get rid of any loose text nodes,
            // as well as any SVG elements in order to remove any old icons.
            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {
                layoutElement.removeChild(child);
            }
        }
    }
    /**
     * Caches the children of an SVG element that have `url()`
     * references that we need to prefix with the current path.
     */
    cacheChildrenWithExternalReferences(element) {
        const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);
        const elements = this.elementsWithExternalReferences
            = this.elementsWithExternalReferences || new Map();
        elementsWithFuncIri.forEach(elementWithReference => {
            funcIriAttributes.forEach(attr => {
                const value = elementWithReference.getAttribute(attr);
                const match = value ? value.match(funcIriPattern) : null;
                if (match) {
                    let attributes = elements.get(elementWithReference);
                    if (!attributes) {
                        attributes = [];
                        elements.set(elementWithReference, attributes);
                    }
                    attributes.push({ name: attr, value: match[1] });
                }
            });
        });
    }
}
IconComponent.decorators = [
    { type: Component, args: [{
                selector: 'g[ngld-icon]',
                template: '<svg><text> Empty Icon </text></svg>'
            },] }
];
IconComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: SvgIconRegistry },
    { type: String, decorators: [{ type: Attribute, args: ['aria-hidden',] }] },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_ICON_LOCATION,] }] },
    { type: ErrorHandler }
];
IconComponent.propDecorators = {
    svgIcon: [{ type: Input }]
};
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,