{"version":3,"file":"ngld-icon.js","sources":["../../src/lib/svg-icon-registry.service.ts","../../src/lib/icon.component.ts","../../src/lib/svg-icon.module.ts","../../src/public-api.ts","../../src/ngld-icon.ts"],"sourcesContent":["import { ErrorHandler, Inject, Injectable, InjectionToken, Optional, ValueProvider } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { HttpClient } from '@angular/common/http';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { Observable, of } from 'rxjs';\n\nexport const SVG_ICONS = new InjectionToken<Array<SvgIconInfo>>('SvgIcons');\n\nexport interface SvgIconInfoProvider extends ValueProvider {\n  useValue: SvgIconInfo;\n}\n\nexport interface SvgIconInfo {\n  namespace?: string;\n  name: string;\n  svgSource: string;\n}\n\ninterface SvgIconMap {\n  [namespace: string]: {\n    [iconName: string]: SVGElement;\n  };\n}\n\n/**\n * An exception to be thrown when the consumer attempts to use `<ngld-icon>`\n * without including @angular/common/http.\n */\nexport class SvgIconNoHttpProviderError extends Error {\n\n  constructor() {\n    super('Could not find HttpClient provider for use with Angular Material icons.'\n      + 'Please include the HttpClientModule from @angular/common/http in your '\n      + 'app imports.');\n  }\n}\n\nconst DEFAULT_NS = '$$default';\n\n/**\n * https://github.com/angular/angular/blob/f8096d499324cf0961f092944bbaedd05364eea1/aio/src/app/shared/custom-icon-registry.ts\n */\n@Injectable({ providedIn: 'root' })\nexport class SvgIconRegistry extends MatIconRegistry {\n\n  private cachedSvgElements: SvgIconMap = { [DEFAULT_NS]: {} };\n\n  constructor(\n    @Optional() private http: HttpClient,\n    sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any,\n    errorHandler: ErrorHandler,\n    @Optional() @Inject(SVG_ICONS) private svgIcons: SvgIconInfo[],\n  ) {\n    super(http, sanitizer, document, errorHandler);\n    if (svgIcons == null) {\n      this.svgIcons = [];\n    }\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element)\n   * with the given name and namespace.\n   * The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the observable will throw an error.\n   */\n  public getNamedSvgIcon(iconName: string, namespace?: string): Observable<SVGElement> {\n    if (!this.http) {\n      throw new SvgIconNoHttpProviderError();\n    }\n    const nsIconMap = this.cachedSvgElements[namespace || DEFAULT_NS];\n    let preloadedElement: SVGElement | undefined = nsIconMap && nsIconMap[iconName];\n    if (!preloadedElement) {\n      preloadedElement = this.loadSvgElement(iconName, namespace);\n    }\n    return preloadedElement\n      ? of(preloadedElement.cloneNode(true) as SVGElement)\n      : super.getNamedSvgIcon(iconName, namespace);\n\n  }\n\n  private loadSvgElement(iconName: string, namespace?: string): SVGElement | undefined {\n    const svgIcon = this.svgIcons.find(icon => {\n      return namespace\n        ? icon.name === iconName && icon.namespace === namespace\n        : icon.name === iconName;\n    });\n    if (!svgIcon) {\n      return;\n    }\n\n    const ns = svgIcon.namespace || DEFAULT_NS;\n    const nsIconMap = this.cachedSvgElements[ns] || (this.cachedSvgElements[ns] = {});\n\n    // Creating a new `<div>` per icon is necessary for the SVGs to work correctly in IE11.\n    const div = document.createElement('DIV');\n\n    // SECURITY: the source for the SVG icons is provided in code by trusted developers\n    div.innerHTML = svgIcon.svgSource;\n\n    const svgElement = div.querySelector('svg');\n    nsIconMap[svgIcon.name] = svgElement;\n\n    return svgElement;\n  }\n}\n","import { Attribute, Component, ElementRef, ErrorHandler, Inject, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { MatIconLocation, MAT_ICON_LOCATION } from '@angular/material/icon';\nimport { Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { SvgIconRegistry } from './svg-icon-registry.service';\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * ngld-icon component\n * Greatly inspired by @angular/material icon component:\n * https://github.com/angular/components/blob/master/src/material/icon/icon.ts\n */\n@Component({\n  selector: 'g[ngld-icon]',\n  template: '<svg><text> Empty Icon </text></svg>',\n})\nexport class IconComponent implements OnChanges, OnDestroy {\n\n  @Input() svgIcon: string;\n\n  private svgName: string | null;\n  private svgNamespace: string | null;\n\n  private elementsWithExternalReferences?: Map<Element, { name: string, value: string }[]>;\n\n  /**\n   * Subscription to the current in-progress SVG icon request.\n   */\n  private currentIconFetch = Subscription.EMPTY;\n\n  constructor(\n    private elementRef: ElementRef<SVGGElement>,\n    private iconRegistry: SvgIconRegistry,\n    @Attribute('aria-hidden') ariaHidden: string,\n    @Inject(MAT_ICON_LOCATION) private location: MatIconLocation,\n    private readonly errorHandler: ErrorHandler,\n  ) {\n    this.svgIcon = 'expand_node';\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden,\n    // as this is the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * the value given on svgIcon property is obtained from SimpleChanges event.\n   */\n  ngOnChanges(changes: SimpleChanges & { svgIcon?: string, previousValue?: string }): void {\n    // Only update the inline SVG icon if the inputs changed,\n    // to avoid unnecessary DOM operations.\n\n    const svgIconChanges = changes.svgIcon;\n\n    this.svgNamespace = null;\n    this.svgName = null;\n    if (svgIconChanges) {\n      this.currentIconFetch.unsubscribe();\n      if (this.svgIcon) {\n        const [namespace, iconName] = this.splitIconName(this.svgIcon);\n        if (namespace) {\n          this.svgNamespace = namespace;\n        }\n        if (iconName) {\n          this.svgName = iconName;\n        }\n\n        this.currentIconFetch = this.iconRegistry.getNamedSvgIcon(iconName, namespace)\n          .pipe(take(1))\n          .subscribe(svg => this.setSvgElement(svg), (err: Error) => {\n            const errorMessage = `Error retrieving icon ${namespace}:${iconName} ! ${err.message}`;\n            this.errorHandler.handleError(new Error(errorMessage));\n          });\n      } else if (changes.previousValue) {\n        this.clearSvgElement();\n      }\n    }\n    // updateFontIconClasses when usingFontIcon\n  }\n\n  ngOnDestroy(): void {\n    this.currentIconFetch.unsubscribe();\n    if (this.elementsWithExternalReferences) {\n      this.elementsWithExternalReferences.clear();\n    }\n  }\n\n  private splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1:\n        return ['', parts[0]]; // Use default namespace.\n      case 2:\n        return parts as [string, string];\n      default:\n        throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  private setSvgElement(svg: SVGElement): void {\n    this.clearSvgElement();\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM,\n    // in order to avoid a style recalculation.\n\n    const styleTags = svg.querySelectorAll('style');\n    styleTags.forEach(styleTag => styleTag.textContent += ' ');\n\n    // Note: we do this fix here, rather than the icon registry,\n    // because the references have to point to the URL at the time\n    // that the icon was created.\n    const path = this.location.getPathname();\n    this.cacheChildrenWithExternalReferences(svg);\n    this.elementRef.nativeElement.appendChild(svg);\n  }\n\n  private clearSvgElement(): void {\n    const layoutElement: SVGGElement = this.elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n    if (this.elementsWithExternalReferences) {\n      this.elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs,\n    // and add the new SVG element. Note that we can't use innerHTML,\n    // because IE will throw if the element has a data binding.\n    // --> I'm not caring IE at present...\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n      // 1 corresponds to Node.ELEMENT_NODE.\n      // We remove all non-element nodes in order to get rid of any loose text nodes,\n      // as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private cacheChildrenWithExternalReferences(element: SVGElement): void {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this.elementsWithExternalReferences\n      = this.elementsWithExternalReferences || new Map();\n    elementsWithFuncIri.forEach(elementWithReference => {\n      funcIriAttributes.forEach(attr => {\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes.push({ name: attr, value: match[1] });\n        }\n      });\n    });\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { IconComponent } from './icon.component';\n\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [],\n  exports: [IconComponent]\n})\nexport class SvgIconModule { }\n","/*\n * Public API Surface of icon\n */\n\nexport * from './lib/icon.component';\nexport * from './lib/svg-icon.module';\nexport * from './lib/svg-icon-registry.service';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}