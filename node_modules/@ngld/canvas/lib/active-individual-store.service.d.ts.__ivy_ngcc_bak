import { D3Node, D3Relationship } from './data-interface';
export declare class ActiveIndividualStoreService {
    private activeIndividualSubject;
    /**
     * Active individual$ of active individual cast service
     * shareReplay does two things:
     *  * caches the last emitted value,
     * so components that subscribe after a value been emitted can still display the value,
     *  * shares the same observable between all observables,
     * instead of creating new observables on each subscription
     */
    readonly activeIndividual$: import("rxjs").Observable<D3Node | D3Relationship>;
    constructor();
    get activeIndividual(): D3Node | D3Relationship;
    /**
     * Sets active individual
     * Assigning a value to this.activeIndividualSubject
     * push it onto the observable and down to all of its subscribers
     */
    set activeIndividual(v: D3Node | D3Relationship);
    /**
     * clearActiveIndividual
     */
    clearActiveIndividual(): void;
}
