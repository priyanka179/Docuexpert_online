import { D3Relationship, D3Node } from './data-interface';
import { ColorProviderService } from './color-provider.service';
/**
 * Not sure whether a service would be better to maintain a graphic data for
 * underlying component
 */
declare type COLOR_HEX = string;
export interface D3SVGCalculated<PATH> {
    translate: {
        x: number;
        y: number;
    };
    rotate: number;
    pathDrawn: PATH;
    controlledByDragging: boolean;
    isLongPressing: boolean;
    selected: boolean;
    textTranslate: {
        x: number;
        y: number;
    };
    color: {
        fill: COLOR_HEX;
        stroke: COLOR_HEX;
    };
}
export interface ArrowPath {
    A1: {
        x: number;
        y: number;
    };
    B1: {
        x: number;
        y: number;
    };
    C1: {
        x: number;
        y: number;
    };
    D1: {
        x: number;
        y: number;
    };
    A2: {
        x: number;
        y: number;
    };
    B2: {
        x: number;
        y: number;
    };
    C2: {
        x: number;
        y: number;
    };
    D2: {
        x: number;
        y: number;
    };
    E2: {
        x: number;
        y: number;
    };
    F2: {
        x: number;
        y: number;
    };
    G2: {
        x: number;
        y: number;
    };
    A3: {
        x: number;
        y: number;
    };
    B3: {
        x: number;
        y: number;
    };
    C3: {
        x: number;
        y: number;
    };
    D3: {
        x: number;
        y: number;
    };
}
export interface CirclePath {
    A1: {
        x: number;
        y: number;
    };
    B1: {
        x: number;
        y: number;
    };
    C1: {
        x: number;
        y: number;
    };
    D1: {
        x: number;
        y: number;
    };
    R1: {
        inner: number;
        outer: number;
    };
}
export interface BoxSize {
    width: number;
    height: number;
}
export declare class GraphContainer {
    private colorGetter;
    relationships: (D3Relationship & D3SVGCalculated<ArrowPath> & {
        textBoxSize: BoxSize;
    })[];
    nodes: (D3Node & D3SVGCalculated<CirclePath>)[];
    private rawGraph;
    constructor(colorGetter: ColorProviderService);
    /**
     * addRelation
     */
    addRelation(rel: D3Relationship): GraphContainer;
    removeRelationById(id: string): void;
    /**
     * addNode
     */
    addNode(node: D3Node): GraphContainer;
    removeNodeById(id: string): void;
}
export {};
