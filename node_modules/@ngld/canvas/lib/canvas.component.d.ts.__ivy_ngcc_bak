import { OnInit, ElementRef, EventEmitter } from '@angular/core';
import { CdkDragEnd, CdkDragMove } from '@angular/cdk/drag-drop';
import { TransitionService } from '@ngld/transition';
import { SimpleGraph, D3Node } from './data-interface';
import { GraphContainer } from './graph.container';
import { ColorProviderService } from './color-provider.service';
import { ActiveIndividualStoreService } from './active-individual-store.service';
export declare class AnimationTranstion extends TransitionService {
    constructor();
}
export declare class LinkedDataGraphicComponent implements OnInit {
    private transitionService;
    private colorProvider;
    private activeIndividualStore;
    mainCanvas: ElementRef<SVGSVGElement>;
    nodeRadius: number;
    arrowSize: number;
    minCollision: number;
    zoomFit: boolean;
    set debug(state: boolean);
    set graph(g: SimpleGraph);
    set relationRemove(state: boolean);
    graphUpdated: EventEmitter<SimpleGraph>;
    $states: {
        debug: boolean;
        dashedArrow: {
            from: D3Node;
            to: D3Node;
            id?: string;
        };
        relationRemove: boolean;
    };
    d3Graph: GraphContainer;
    canvasViewBox: {
        minX: number;
        minY: number;
        width: number;
        height: number;
    };
    private simulation;
    private initGraph;
    private initialLoad;
    private selectedNode;
    highlightChecker: (node: D3Node) => boolean;
    constructor(transitionService: TransitionService, colorProvider: ColorProviderService, activeIndividualStore: ActiveIndividualStoreService);
    ngOnInit(): Promise<void>;
    private getMainCanvasSize;
    private newSimulation;
    private reloadSimulation;
    private zoomSvgScale;
    onNodeDragging(e: CdkDragMove, node: GraphContainer['nodes'][0]): void;
    onNodeDragStart(node: GraphContainer['nodes'][0]): void;
    onNodeDragEnd(e: CdkDragEnd, node: GraphContainer['nodes'][0]): void;
    onNodeClick(e: MouseEvent, node: GraphContainer['nodes'][0]): void;
    updateDashedArrowSource(node: GraphContainer['nodes'][0]): void;
    updateDashedArrowTarget(to: GraphContainer['nodes'][0]): void;
    clearDashedArrow(ev: MouseEvent): void;
    plusDashedArrow(ev: MouseEvent): void;
    /**
     * TODO: Should be moved into a service
     */
    addNode(node: D3Node): void;
    updateActiveIndividual(node: GraphContainer['nodes'][0]): void;
    clearActiveIndividual(): void;
    updateViewBox(e: {
        minX: number;
        minY: number;
        width: number;
        height: number;
    }): void;
    removeRelation(ev: MouseEvent, rel: GraphContainer['relationships'][0]): void;
}
