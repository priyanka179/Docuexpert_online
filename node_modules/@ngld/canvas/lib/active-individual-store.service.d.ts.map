{"version":3,"file":"active-individual-store.service.d.ts","sources":["active-individual-store.service.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { D3Node, D3Relationship } from './data-interface';\nexport declare class ActiveIndividualStoreService {\n    private activeIndividualSubject;\n    /**\n     * Active individual$ of active individual cast service\n     * shareReplay does two things:\n     *  * caches the last emitted value,\n     * so components that subscribe after a value been emitted can still display the value,\n     *  * shares the same observable between all observables,\n     * instead of creating new observables on each subscription\n     */\n    readonly activeIndividual$: import(\"rxjs\").Observable<D3Node | D3Relationship>;\n    constructor();\n    get activeIndividual(): D3Node | D3Relationship;\n    /**\n     * Sets active individual\n     * Assigning a value to this.activeIndividualSubject\n     * push it onto the observable and down to all of its subscribers\n     */\n    set activeIndividual(v: D3Node | D3Relationship);\n    /**\n     * clearActiveIndividual\n     */\n    clearActiveIndividual(): void;\n}\n"]}