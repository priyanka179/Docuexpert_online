{"version":3,"file":"canvas.component.d.ts","sources":["canvas.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { OnInit, ElementRef, EventEmitter } from '@angular/core';\nimport { CdkDragEnd, CdkDragMove } from '@angular/cdk/drag-drop';\nimport { TransitionService } from '@ngld/transition';\nimport { SimpleGraph, D3Node } from './data-interface';\nimport { GraphContainer } from './graph.container';\nimport { ColorProviderService } from './color-provider.service';\nimport { ActiveIndividualStoreService } from './active-individual-store.service';\nexport declare class AnimationTranstion extends TransitionService {\n    constructor();\n}\nexport declare class LinkedDataGraphicComponent implements OnInit {\n    private transitionService;\n    private colorProvider;\n    private activeIndividualStore;\n    mainCanvas: ElementRef<SVGSVGElement>;\n    nodeRadius: number;\n    arrowSize: number;\n    minCollision: number;\n    zoomFit: boolean;\n    set debug(state: boolean);\n    set graph(g: SimpleGraph);\n    set relationRemove(state: boolean);\n    graphUpdated: EventEmitter<SimpleGraph>;\n    $states: {\n        debug: boolean;\n        dashedArrow: {\n            from: D3Node;\n            to: D3Node;\n            id?: string;\n        };\n        relationRemove: boolean;\n    };\n    d3Graph: GraphContainer;\n    canvasViewBox: {\n        minX: number;\n        minY: number;\n        width: number;\n        height: number;\n    };\n    private simulation;\n    private initGraph;\n    private initialLoad;\n    private selectedNode;\n    highlightChecker: (node: D3Node) => boolean;\n    constructor(transitionService: TransitionService, colorProvider: ColorProviderService, activeIndividualStore: ActiveIndividualStoreService);\n    ngOnInit(): Promise<void>;\n    private getMainCanvasSize;\n    private newSimulation;\n    private reloadSimulation;\n    private zoomSvgScale;\n    onNodeDragging(e: CdkDragMove, node: GraphContainer['nodes'][0]): void;\n    onNodeDragStart(node: GraphContainer['nodes'][0]): void;\n    onNodeDragEnd(e: CdkDragEnd, node: GraphContainer['nodes'][0]): void;\n    onNodeClick(e: MouseEvent, node: GraphContainer['nodes'][0]): void;\n    updateDashedArrowSource(node: GraphContainer['nodes'][0]): void;\n    updateDashedArrowTarget(to: GraphContainer['nodes'][0]): void;\n    clearDashedArrow(ev: MouseEvent): void;\n    plusDashedArrow(ev: MouseEvent): void;\n    /**\n     * TODO: Should be moved into a service\n     */\n    addNode(node: D3Node): void;\n    updateActiveIndividual(node: GraphContainer['nodes'][0]): void;\n    clearActiveIndividual(): void;\n    updateViewBox(e: {\n        minX: number;\n        minY: number;\n        width: number;\n        height: number;\n    }): void;\n    removeRelation(ev: MouseEvent, rel: GraphContainer['relationships'][0]): void;\n}\n"]}