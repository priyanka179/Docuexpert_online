import { darkenColor } from './utils';
export class GraphContainer {
    constructor(colorGetter) {
        this.colorGetter = colorGetter;
        this.relationships = [];
        this.nodes = [];
        this.rawGraph = {
            nodes: [],
            relationships: [],
        };
    }
    /**
     * addRelation
     */
    addRelation(rel) {
        this.rawGraph.relationships.push(rel);
        this.relationships.push(Object.assign({ translate: { x: 0, y: 0 }, rotate: 0, controlledByDragging: false, isLongPressing: false, selected: false, textTranslate: { x: 0, y: 0 }, pathDrawn: {
                A1: { x: 0, y: 0 }, B1: { x: 0, y: 0 }, C1: { x: 0, y: 0 },
                D1: { x: 0, y: 0 },
                A2: { x: 0, y: 0 }, B2: { x: 0, y: 0 }, C2: { x: 0, y: 0 },
                D2: { x: 0, y: 0 }, E2: { x: 0, y: 0 }, F2: { x: 0, y: 0 },
                G2: { x: 0, y: 0 },
                A3: { x: 0, y: 0 }, B3: { x: 0, y: 0 }, C3: { x: 0, y: 0 },
                D3: { x: 0, y: 0 },
            }, color: { fill: '#68bdf6', stroke: '#4984ac' }, textBoxSize: { width: 1, height: 1 } }, rel));
        return this;
    }
    removeRelationById(id) {
        const temp = [];
        while (true) {
            const rel = this.relationships.shift();
            if (!rel) {
                break;
            }
            if (rel.id === id) {
                break;
            }
            temp.unshift(rel);
        }
        temp.forEach(rel => this.relationships.unshift(rel));
        const tempRawRelationship = [];
        while (true) {
            const rel = this.rawGraph.relationships.shift();
            if (!rel) {
                break;
            }
            if (rel.id === id) {
                break;
            }
            tempRawRelationship.unshift(rel);
        }
        tempRawRelationship.forEach(rel => this.rawGraph.relationships.unshift(rel));
    }
    /**
     * addNode
     */
    addNode(node) {
        this.rawGraph.nodes.push(node);
        const color = this.colorGetter.nextColorByName(node.labels[0]);
        this.nodes.push(Object.assign({ translate: { x: 0, y: 0 }, rotate: 0, controlledByDragging: false, isLongPressing: false, selected: false, textTranslate: { x: 0, y: 0 }, pathDrawn: {
                A1: { x: 0, y: 0 }, B1: { x: 0, y: 0 }, C1: { x: 0, y: 0 },
                D1: { x: 0, y: 0 }, R1: { inner: 33, outer: 33 },
            }, color: { fill: color, stroke: darkenColor(color).formatHex() } }, node));
        return this;
    }
    removeNodeById(id) {
        const temp = [];
        while (true) {
            const node = this.nodes.shift();
            if (!node) {
                break;
            }
            if (node.id === id) {
                break;
            }
            temp.unshift(node);
        }
        temp.forEach(node => this.nodes.unshift(node));
    }
}
//# sourceMappingURL=data:application/json;base64,