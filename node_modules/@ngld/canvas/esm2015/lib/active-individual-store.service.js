import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { shareReplay } from 'rxjs/operators';
export class ActiveIndividualStoreService {
    constructor() {
        this.activeIndividualSubject = new BehaviorSubject(null);
        /**
         * Active individual$ of active individual cast service
         * shareReplay does two things:
         *  * caches the last emitted value,
         * so components that subscribe after a value been emitted can still display the value,
         *  * shares the same observable between all observables,
         * instead of creating new observables on each subscription
         */
        this.activeIndividual$ = this.activeIndividualSubject.asObservable().pipe(shareReplay(1));
    }
    get activeIndividual() {
        return this.activeIndividualSubject.getValue();
    }
    /**
     * Sets active individual
     * Assigning a value to this.activeIndividualSubject
     * push it onto the observable and down to all of its subscribers
     */
    set activeIndividual(v) {
        this.activeIndividualSubject.next(v);
    }
    /**
     * clearActiveIndividual
     */
    clearActiveIndividual() {
        this.activeIndividualSubject.next(null);
    }
}
ActiveIndividualStoreService.decorators = [
    { type: Injectable }
];
ActiveIndividualStoreService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aXZlLWluZGl2aWR1YWwtc3RvcmUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvYWN0aXZlLWluZGl2aWR1YWwtc3RvcmUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBSTdDLE1BQU0sT0FBTyw0QkFBNEI7SUFnQnZDO1FBZFEsNEJBQXVCLEdBQUcsSUFBSSxlQUFlLENBQTBCLElBQUksQ0FBQyxDQUFDO1FBRXJGOzs7Ozs7O1dBT0c7UUFDTSxzQkFBaUIsR0FBRyxJQUFJLENBQUMsdUJBQXVCLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUMzRSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQ2YsQ0FBQztJQUVjLENBQUM7SUFHakIsSUFBVyxnQkFBZ0I7UUFDekIsT0FBTyxJQUFJLENBQUMsdUJBQXVCLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDakQsQ0FBQztJQUdEOzs7O09BSUc7SUFDSCxJQUFXLGdCQUFnQixDQUFDLENBQTBCO1FBQ3BELElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUVEOztPQUVHO0lBQ0kscUJBQXFCO1FBQzFCLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUMsQ0FBQzs7O1lBdkNGLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHNoYXJlUmVwbGF5IH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgRDNOb2RlLCBEM1JlbGF0aW9uc2hpcCB9IGZyb20gJy4vZGF0YS1pbnRlcmZhY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQWN0aXZlSW5kaXZpZHVhbFN0b3JlU2VydmljZSB7XG5cbiAgcHJpdmF0ZSBhY3RpdmVJbmRpdmlkdWFsU3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8RDNOb2RlIHwgRDNSZWxhdGlvbnNoaXA+KG51bGwpO1xuXG4gIC8qKlxuICAgKiBBY3RpdmUgaW5kaXZpZHVhbCQgb2YgYWN0aXZlIGluZGl2aWR1YWwgY2FzdCBzZXJ2aWNlXG4gICAqIHNoYXJlUmVwbGF5IGRvZXMgdHdvIHRoaW5nczpcbiAgICogICogY2FjaGVzIHRoZSBsYXN0IGVtaXR0ZWQgdmFsdWUsXG4gICAqIHNvIGNvbXBvbmVudHMgdGhhdCBzdWJzY3JpYmUgYWZ0ZXIgYSB2YWx1ZSBiZWVuIGVtaXR0ZWQgY2FuIHN0aWxsIGRpc3BsYXkgdGhlIHZhbHVlLFxuICAgKiAgKiBzaGFyZXMgdGhlIHNhbWUgb2JzZXJ2YWJsZSBiZXR3ZWVuIGFsbCBvYnNlcnZhYmxlcyxcbiAgICogaW5zdGVhZCBvZiBjcmVhdGluZyBuZXcgb2JzZXJ2YWJsZXMgb24gZWFjaCBzdWJzY3JpcHRpb25cbiAgICovXG4gIHJlYWRvbmx5IGFjdGl2ZUluZGl2aWR1YWwkID0gdGhpcy5hY3RpdmVJbmRpdmlkdWFsU3ViamVjdC5hc09ic2VydmFibGUoKS5waXBlKFxuICAgIHNoYXJlUmVwbGF5KDEpLFxuICApO1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cblxuICBwdWJsaWMgZ2V0IGFjdGl2ZUluZGl2aWR1YWwoKTogRDNOb2RlIHwgRDNSZWxhdGlvbnNoaXAge1xuICAgIHJldHVybiB0aGlzLmFjdGl2ZUluZGl2aWR1YWxTdWJqZWN0LmdldFZhbHVlKCk7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBTZXRzIGFjdGl2ZSBpbmRpdmlkdWFsXG4gICAqIEFzc2lnbmluZyBhIHZhbHVlIHRvIHRoaXMuYWN0aXZlSW5kaXZpZHVhbFN1YmplY3RcbiAgICogcHVzaCBpdCBvbnRvIHRoZSBvYnNlcnZhYmxlIGFuZCBkb3duIHRvIGFsbCBvZiBpdHMgc3Vic2NyaWJlcnNcbiAgICovXG4gIHB1YmxpYyBzZXQgYWN0aXZlSW5kaXZpZHVhbCh2OiBEM05vZGUgfCBEM1JlbGF0aW9uc2hpcCkge1xuICAgIHRoaXMuYWN0aXZlSW5kaXZpZHVhbFN1YmplY3QubmV4dCh2KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBjbGVhckFjdGl2ZUluZGl2aWR1YWxcbiAgICovXG4gIHB1YmxpYyBjbGVhckFjdGl2ZUluZGl2aWR1YWwoKTogdm9pZCB7XG4gICAgdGhpcy5hY3RpdmVJbmRpdmlkdWFsU3ViamVjdC5uZXh0KG51bGwpO1xuICB9XG5cbn1cbiJdfQ==