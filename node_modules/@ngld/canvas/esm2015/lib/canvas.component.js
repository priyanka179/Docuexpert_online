import { __awaiter } from "tslib";
import { Component, ViewChild, Input, Optional, Output, EventEmitter, Injectable } from '@angular/core';
import { Easing, trigger, transition, render, TransitionService, animate } from '@ngld/transition';
import { PLUS_ICON_PROVIDER } from '@ngld/icon/plus.icon';
import { REMOVE_ICON_PROVIDER } from '@ngld/icon/remove.icon';
import { UNLOCK_ICON_PROVIDER } from '@ngld/icon/unlock.icon';
import { SvgIconRegistry } from '@ngld/icon';
import { nanoid } from 'nanoid';
import * as rfdc from 'rfdc';
import { forceSimulation, forceCollide, forceManyBody, forceLink, forceCenter } from 'd3-force';
import { interpolateZoom } from 'd3-interpolate';
import { GraphContainer } from './graph.container';
import { ColorProviderService, DefaultColorProviderService } from './color-provider.service';
import { ActiveIndividualStoreService } from './active-individual-store.service';
import { rotatePoint, rotation, unitaryNormalVector, unitaryVector } from './utils';
const clone = rfdc();
const interpolateRadius = interpolateZoom([0, 0, 33], [0, 0, 66]);
const cosineStart = Math.cos(2 * Math.PI / 180);
const sineStart = Math.sin(2 * Math.PI / 180);
const cosineEnd = Math.cos(120 * Math.PI / 180);
const sineEnd = Math.sin(120 * Math.PI / 180);
export class AnimationTranstion extends TransitionService {
    constructor() {
        super([
            trigger('openClose', [
                transition((from, to) => from === 'void' && to === 'open', [
                    render((p, node) => {
                        const radiusOuter = interpolateRadius(p)[2];
                        // sin(2) * 33, cos(2) * 33
                        node.pathDrawn.A1 = { x: sineStart * 33, y: -cosineStart * 33 };
                        // sin(120) * 33, cos(120) * 33
                        node.pathDrawn.B1 = { x: sineEnd * 33, y: -cosineEnd * 33 };
                        // sin(120) * 63, cos(120) * 63
                        node.pathDrawn.C1 = { x: sineEnd * radiusOuter, y: -cosineEnd * radiusOuter };
                        // sin(2) * 63, cos(2) * 63
                        node.pathDrawn.D1 = { x: sineStart * radiusOuter, y: -cosineStart * radiusOuter };
                        node.pathDrawn.R1.outer = radiusOuter;
                    }),
                    animate(200, Easing.easeInCubic),
                ]),
                transition((from, to) => from === 'open' && to === 'void', [
                    render((p, node) => {
                        const radiusOuter = interpolateRadius(1 - p)[2];
                        // sin(2) * 33, cos(2) * 33
                        node.pathDrawn.A1 = { x: sineStart * 33, y: -cosineStart * 33 };
                        // sin(120) * 33, cos(120) * 33
                        node.pathDrawn.B1 = { x: sineEnd * 33, y: -cosineEnd * 33 };
                        // sin(120) * 63, cos(120) * 63
                        node.pathDrawn.C1 = { x: sineEnd * radiusOuter, y: -cosineEnd * radiusOuter };
                        // sin(2) * 63, cos(2) * 63
                        node.pathDrawn.D1 = { x: sineStart * radiusOuter, y: -cosineStart * radiusOuter };
                        node.pathDrawn.R1.outer = radiusOuter;
                    }),
                    animate(200, Easing.easeOutCubic),
                ]),
            ]),
        ]);
    }
}
AnimationTranstion.decorators = [
    { type: Injectable }
];
AnimationTranstion.ctorParameters = () => [];
export class LinkedDataGraphicComponent {
    constructor(transitionService, colorProvider, activeIndividualStore) {
        this.transitionService = transitionService;
        this.colorProvider = colorProvider;
        this.activeIndividualStore = activeIndividualStore;
        this.nodeRadius = 25;
        this.arrowSize = 4;
        this.minCollision = 60;
        this.zoomFit = false;
        this.graphUpdated = new EventEmitter();
        this.$states = {
            debug: false,
            dashedArrow: null,
            relationRemove: false,
        };
        this.canvasViewBox = {
            minX: 0,
            minY: 0,
            width: 800,
            height: 500,
        };
        this.initialLoad = true;
        this.highlightChecker = (node) => false;
        if (!this.activeIndividualStore) {
            this.activeIndividualStore = new ActiveIndividualStoreService();
        }
        if (!this.colorProvider) {
            this.colorProvider = new DefaultColorProviderService();
        }
        this.d3Graph = new GraphContainer(this.colorProvider);
    }
    set debug(state) {
        this.$states.debug = state;
    }
    set graph(g) {
        this.initGraph = g;
    }
    set relationRemove(state) {
        this.$states.relationRemove = state;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.simulation = this.newSimulation();
            this.initGraph.nodes.forEach(node => this.d3Graph.addNode(clone(node)));
            this.initGraph.relationships.forEach(rel => this.d3Graph.addRelation(clone(rel)));
            this.reloadSimulation();
            const mainCanvasSize = this.getMainCanvasSize();
            this.canvasViewBox = {
                minX: 0, minY: 0, width: mainCanvasSize.width, height: mainCanvasSize.height,
            };
        });
    }
    getMainCanvasSize() {
        return this.mainCanvas.nativeElement.getBoundingClientRect();
    }
    newSimulation() {
        const simulation = forceSimulation();
        const mainCanvasSize = this.getMainCanvasSize();
        simulation
            .force('collide', forceCollide()
            .radius(d => this.minCollision).iterations(2))
            .force('charge', forceManyBody())
            .force('link', forceLink().id(d => d.id + ''))
            .force('center', forceCenter(mainCanvasSize.width / 2, mainCanvasSize.height / 2))
            .on('tick', () => {
            this.d3Graph.nodes.forEach(node => {
                if (!node.controlledByDragging) {
                    node.translate.x = node.x;
                    node.translate.y = node.y;
                }
            });
            this.d3Graph.relationships.forEach(rel => {
                const center = { x: 0, y: 0 };
                const source = rel.source;
                const target = rel.target;
                const angle = rotation(source, target);
                rel.rotate = rotation(source, rel.target);
                // [SOURCE] --textMargin--[TEXT]--textMargin-->[TARGET]
                // [SOURCE] --textMargin--textMargin--[TEXT]-->[TARGET]
                // --textMargin--textMargin--[TEXT]-- = [SOURCE]-->[TARGET]
                const n = unitaryNormalVector(source, target);
                const u = unitaryVector(source, target);
                const textMargin = {
                    y: (target.y - source.y - (rel.textBoxSize.width + 10) * u.y) * 0.5,
                    x: (target.x - source.x - (rel.textBoxSize.width + 10) * u.x) * 0.5,
                };
                // => u is simple scale of textMargin
                // => n is perpendicular to textMargin
                rel.pathDrawn.A1 = rotatePoint(center, {
                    x: 0 + (this.nodeRadius + 1) * u.x - n.x,
                    y: 0 + (this.nodeRadius + 1) * u.y - n.y,
                }, angle);
                rel.pathDrawn.B1 = rotatePoint(center, {
                    x: textMargin.x - n.x,
                    y: textMargin.y - n.y,
                }, angle);
                rel.pathDrawn.C1 = rotatePoint(center, {
                    x: textMargin.x,
                    y: textMargin.y,
                }, angle);
                rel.pathDrawn.D1 = rotatePoint(center, {
                    x: 0 + (this.nodeRadius + 1) * u.x,
                    y: 0 + (this.nodeRadius + 1) * u.y,
                }, angle);
                // length(C-B) = length(D-A) = length(n) = 1
                rel.pathDrawn.A2 = rotatePoint(center, {
                    x: target.x - source.x - textMargin.x - n.x,
                    y: target.y - source.y - textMargin.y - n.y,
                }, angle);
                rel.pathDrawn.B2 = rotatePoint(center, {
                    x: target.x - source.x - (this.nodeRadius + 1) * u.x - n.x - u.x * this.arrowSize,
                    y: target.y - source.y - (this.nodeRadius + 1) * u.y - n.y - u.y * this.arrowSize,
                }, angle);
                rel.pathDrawn.C2 = rotatePoint(center, {
                    x: target.x - source.x - (this.nodeRadius + 1) * u.x - n.x + (n.x - u.x) * this.arrowSize,
                    y: target.y - source.y - (this.nodeRadius + 1) * u.y - n.y + (n.y - u.y) * this.arrowSize,
                }, angle);
                rel.pathDrawn.D2 = rotatePoint(center, {
                    x: target.x - source.x - (this.nodeRadius + 1) * u.x,
                    y: target.y - source.y - (this.nodeRadius + 1) * u.y,
                }, angle);
                rel.pathDrawn.E2 = rotatePoint(center, {
                    x: target.x - source.x - (this.nodeRadius + 1) * u.x + (-n.x - u.x) * this.arrowSize,
                    y: target.y - source.y - (this.nodeRadius + 1) * u.y + (-n.y - u.y) * this.arrowSize,
                }, angle);
                rel.pathDrawn.F2 = rotatePoint(center, {
                    x: target.x - source.x - (this.nodeRadius + 1) * u.x - u.x * this.arrowSize,
                    y: target.y - source.y - (this.nodeRadius + 1) * u.y - u.y * this.arrowSize,
                }, angle);
                rel.pathDrawn.G2 = rotatePoint(center, {
                    x: target.x - source.x - textMargin.x,
                    y: target.y - source.y - textMargin.y,
                }, angle);
                const n1 = unitaryNormalVector(source, target, 50);
                rel.pathDrawn.A3 = rotatePoint(center, {
                    x: 0 - n1.x,
                    y: 0 - n1.y,
                }, angle);
                rel.pathDrawn.B3 = rotatePoint(center, {
                    x: target.x - source.x - n1.x,
                    y: target.y - source.y - n1.y,
                }, angle);
                rel.pathDrawn.C3 = rotatePoint(center, {
                    x: target.x - source.x + n1.x - n.x,
                    y: target.y - source.y + n1.y - n.y,
                }, angle);
                rel.pathDrawn.D3 = rotatePoint(center, {
                    x: 0 + n1.x - n.x,
                    y: 0 + n1.y - n.y,
                }, angle);
                rel.textTranslate = rotatePoint(center, {
                    x: (target.x - source.x) * 0.5
                        + n.x * ((rel.rotate > 90 && rel.rotate < 270) ? 2 : -3),
                    y: (target.y - source.y) * 0.5
                        + n.y * ((rel.rotate > 90 && rel.rotate < 270) ? 2 : -3),
                }, angle);
            });
        }).on('end', () => {
            if (this.zoomFit && this.initialLoad) {
                this.initialLoad = false;
                this.zoomSvgScale();
            }
        });
        return simulation;
    }
    reloadSimulation() {
        this.simulation.nodes(this.d3Graph.nodes);
        this.simulation.force('link')
            .links(this.d3Graph.relationships);
        this.simulation.alphaTarget(0).restart();
    }
    zoomSvgScale() {
        const bounds = this.mainCanvas.nativeElement.getBBox();
        if (bounds.width * bounds.height === 0) {
            return; // nothing to fit
        }
        this.canvasViewBox = {
            minX: bounds.x, minY: bounds.y,
            width: bounds.width, height: bounds.height,
        };
    }
    onNodeDragging(e, node) {
        node.fx = e.pointerPosition.x;
        node.fy = e.pointerPosition.y;
    }
    onNodeDragStart(node) {
        if (node.controlledByDragging || node.isLongPressing) {
            return;
        }
        this.simulation.alphaTarget(0.1).restart();
    }
    onNodeDragEnd(e, node) {
        node.controlledByDragging = true;
        this.simulation.alphaTarget(0);
    }
    onNodeClick(e, node) {
        e.stopPropagation();
        if (node.controlledByDragging || node.isLongPressing) {
            node.controlledByDragging = false;
            node.isLongPressing = false;
            return;
        }
        node.fx = node.fy = null;
        if (node.selected) {
            this.selectedNode = null;
            this.transitionService.animate('openClose', 'open', 'void', node)
                .then(_ => node.selected = false);
        }
        else {
            node.selected = true;
            if (this.selectedNode) {
                const previousNode = this.selectedNode;
                this.transitionService
                    .animate('openClose', 'open', 'void', this.selectedNode)
                    .then(_ => previousNode.selected = false);
            }
            this.selectedNode = node;
            this.transitionService.animate('openClose', 'void', 'open', node);
        }
    }
    updateDashedArrowSource(node) {
        this.$states.dashedArrow = { from: node, to: null };
    }
    updateDashedArrowTarget(to) {
        if (!to) {
            // to is empty or removed ==> dashedArrow should not appear
            if (this.$states.dashedArrow && this.$states.dashedArrow.id) {
                const removeId = this.$states.dashedArrow.id;
                this.$states.dashedArrow.id = null;
                this.d3Graph.removeRelationById(removeId);
                this.reloadSimulation();
            }
            if (this.$states.dashedArrow && this.$states.dashedArrow.from) {
                this.$states.dashedArrow.to = null;
                return;
            }
            this.$states.dashedArrow = null;
            return;
        }
        if (this.$states.dashedArrow.from.id === to.id) {
            return;
        }
        if (!this.$states.dashedArrow) {
            this.$states.dashedArrow = { from: null, to };
        }
        else {
            // both from and to suffice dashedArrow appearing
            const regId = nanoid();
            this.$states.dashedArrow.to = to;
            this.$states.dashedArrow.id = regId;
            const source = this.$states.dashedArrow.from.id;
            this.d3Graph.addRelation({
                id: regId, type: 'for',
                source, target: to.id, properties: { from: 1 }
            });
            this.reloadSimulation();
            this.graphUpdated.emit(this.d3Graph);
        }
    }
    clearDashedArrow(ev) {
        this.$states.dashedArrow = null;
    }
    plusDashedArrow(ev) {
        ev.preventDefault();
        this.$states.dashedArrow = null;
    }
    /**
     * TODO: Should be moved into a service
     */
    addNode(node) {
        this.d3Graph.addNode(node);
        this.reloadSimulation();
    }
    updateActiveIndividual(node) {
        this.activeIndividualStore.activeIndividual = node;
    }
    clearActiveIndividual() {
        this.activeIndividualStore.clearActiveIndividual();
    }
    updateViewBox(e) {
        this.canvasViewBox.minX = e.minX;
        this.canvasViewBox.minY = e.minY;
        this.canvasViewBox.width = e.width;
        this.canvasViewBox.height = e.height;
    }
    removeRelation(ev, rel) {
        ev.preventDefault();
        this.d3Graph.removeRelationById(rel.id);
        this.graphUpdated.emit(this.d3Graph);
        this.reloadSimulation();
    }
}
LinkedDataGraphicComponent.decorators = [
    { type: Component, args: [{
                providers: [
                    { provide: TransitionService, useClass: AnimationTranstion, },
                    [PLUS_ICON_PROVIDER, REMOVE_ICON_PROVIDER, UNLOCK_ICON_PROVIDER],
                    SvgIconRegistry
                ],
                selector: 'ngld-canvas',
                template: "<svg #mainCanvas ngldPanZoom class=\"neo4jd3-graph mainCanvas\"\n    [attr.viewBox]=\"canvasViewBox.minX\n                  + ' ' + canvasViewBox.minY\n                  + ' ' + canvasViewBox.width\n                  + ' ' + canvasViewBox.height\"\n    [viewBox]=\"canvasViewBox\"\n    (click)=\"clearDashedArrow($event)\"\n    (viewBoxChanged)=\"updateViewBox($event)\">\n  <g class=\"relationships\">\n    <g *ngFor=\"let rel of d3Graph.relationships\" class=\"relationship\"\n      [attr.transform]=\"'translate(' + rel.source.x + ',' + rel.source.y\n                        +') rotate(' + rel.rotate + ')'\"\n      (click)=\"$states.relationRemove ? removeRelation($event, rel) : null\">\n      <text ngldBoxSizeListener [listenValue]=\"rel.pathDrawn.A1.x\"\n        (boxSize)=\"rel.textBoxSize=$event\"\n        class=\"text\" fill=\"#000000\" font-size=\"8px\" pointer-events=\"none\"\n        text-anchor=\"middle\"\n        [attr.transform]=\"'translate('\n            + rel.textTranslate.x + ',' + rel.textTranslate.y\n            + ') rotate('\n              + ((rel.rotate > 90 && rel.rotate < 270 )? 180:0)\n            + ')'\">\n        {{ rel.type }}\n      </text>\n      <path class=\"outline\" fill=\"#a5abb6\" stroke=\"none\"\n          [attr.d]=\"'M ' + rel.pathDrawn.A1.x + ' ' + rel.pathDrawn.A1.y\n          + ' L ' + rel.pathDrawn.B1.x + ' ' + rel.pathDrawn.B1.y\n          + ' L ' + rel.pathDrawn.C1.x + ' ' + rel.pathDrawn.C1.y\n          + ' L ' + rel.pathDrawn.D1.x + ' ' + rel.pathDrawn.D1.y\n          + ' Z'\n          + ' M ' + rel.pathDrawn.A2.x + ' ' + rel.pathDrawn.A2.y\n          + ' L ' + rel.pathDrawn.B2.x + ' ' + rel.pathDrawn.B2.y\n          + ' L ' + rel.pathDrawn.C2.x + ' ' + rel.pathDrawn.C2.y\n          + ' L ' + rel.pathDrawn.D2.x + ' ' + rel.pathDrawn.D2.y\n          + ' L ' + rel.pathDrawn.E2.x + ' ' + rel.pathDrawn.E2.y\n          + ' L ' + rel.pathDrawn.F2.x + ' ' + rel.pathDrawn.F2.y\n          + ' L ' + rel.pathDrawn.G2.x + ' ' + rel.pathDrawn.G2.y\n          + ' Z'\"></path>\n      <path class=\"overlay\"\n          [attr.d]=\"'M ' + rel.pathDrawn.A3.x + ' ' + rel.pathDrawn.A3.y\n          + ' L ' + rel.pathDrawn.B3.x + ' ' + rel.pathDrawn.B3.y\n          + ' L ' + rel.pathDrawn.C3.x + ' ' + rel.pathDrawn.C3.y\n          + ' L ' + rel.pathDrawn.D3.x + ' ' + rel.pathDrawn.D3.y\n          + ' Z'\"></path>\n    </g>\n  </g>\n  <g class=\"nodes\">\n    <g cdkDrag ngldLongPress ngldPanZoomExclude\n      *ngFor=\"let node of d3Graph.nodes\" class=\"node\" [class.selected]=\"node.selected\"\n      [class.node-highlighted]=\"highlightChecker(node)\"\n      [cdkDragFreeDragPosition]=\"{ x: node.translate.x, y: node.translate.y }\"\n      (cdkDragStarted)=\"onNodeDragStart(node);node.controlledByDragging=true\"\n      (cdkDragEnded)=\"onNodeDragEnd($event, node)\"\n      (cdkDragMoved)=\"onNodeDragging($event, node)\"\n      (longPressing)=\"onNodeDragStart(node);node.isLongPressing=true;node.fx=node.x;node.fy=node.y\"\n      (click)=\"($states.dashedArrow && $states.dashedArrow.id) ? plusDashedArrow($event) : onNodeClick($event, node)\"\n      (mouseenter)=\"$states.dashedArrow ? updateDashedArrowTarget(node) : updateActiveIndividual(node)\"\n      (mouseleave)=\"$states.dashedArrow ? updateDashedArrowTarget(null) : clearActiveIndividual()\">\n      <circle class=\"ring\" [attr.r]=\"nodeRadius * 1.16\">\n        <title> {{ node.labels[0] }} [{{node.id}}] </title>\n      </circle>\n      <circle class=\"outline\" [attr.r]=\"nodeRadius\" [attr.fill]=\"node.color.fill\" [attr.stroke]=\"node.color.stroke\">\n        <title> {{ node.labels[0] }} [{{node.id}}]  </title>\n      </circle>\n      <text class=\"text\" fill=\"#ffffff\" pointer-events=\"none\" y=\"4px\">\n        {{ node.labels.join(' ') }}</text>\n      <ng-container *ngIf=\"node.selected\">\n        <path *ngFor=\"let panelRotate of [0,120,240]\" class=\"context-menu-item\"\n             (click)=\"updateDashedArrowSource(node)\"\n              [attr.transform]=\"'rotate(' + panelRotate + ')'\"\n              [attr.d]=\"'M ' + node.pathDrawn.D1.x + ' ' + node.pathDrawn.D1.y\n                    + ' A ' + node.pathDrawn.R1.outer + ' ' + node.pathDrawn.R1.outer + ' 0 0,1 ' + node.pathDrawn.C1.x + ' ' + node.pathDrawn.C1.y\n                    + ' L ' + node.pathDrawn.B1.x + ' ' + node.pathDrawn.B1.y\n                    + ' A 33 33 0 0,0 ' + node.pathDrawn.A1.x + ' ' + node.pathDrawn.A1.y\n                    + ' Z'\"></path>\n        <g ngld-icon svgIcon=\"unlock_node\" transform=\"translate(-52,-30) scale(0.7)\" color=\"#2A2C34\"></g>\n        <g ngld-icon svgIcon=\"remove_node\" transform=\"translate(33,-24) scale(0.7)\" color=\"#2A2C34\"></g>\n        <g ngld-icon svgIcon=\"plus_node\"\n          (click)=\"updateDashedArrowSource(node)\"\n          transform=\"translate(-8,38) scale(0.7)\" color=\"#2A2C34\"></g>\n      </ng-container>\n    </g>\n  </g>\n\n  <ng-container *ngIf=\"$states.debug\">\n    <path *ngFor=\"let node of d3Graph.nodes\" class=\"outline\" stroke=\"green\" stroke-width=\"1\"\n            [attr.d]=\"'M 0 0 '\n            + ' L ' + node.x + ' ' + node.y\n            + ' Z'\"></path>\n  </ng-container>\n</svg>\n",
                styles: ["svg.mainCanvas{border:1px solid #ddd;border-radius:5px;width:100%;height:100%;cursor:move}path.context-menu-item{stroke-width:2px;fill:#d2d5da;cursor:pointer}path.context-menu-item:hover{fill:#b9b9b9}.node{touch-action:none;-webkit-tap-highlight-color:#fff}.node.node-highlighted .ring{-ms-filter:\"progid:DXImageTransform.Microsoft.Alpha(Opacity=50)\";filter:alpha(opacity=50);opacity:.5;stroke:#888;stroke-width:12px}.node .outline{cursor:pointer;pointer-events:all;stroke-width:2px}.node .ring{fill:none;-ms-filter:\"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)\";filter:alpha(opacity=0);opacity:0;stroke:#6ac6ff;stroke-width:8px}.node .text{font-size:10px;text-anchor:middle}.node .text.icon{font-family:FontAwesome}.node:hover .ring{-ms-filter:\"progid:DXImageTransform.Microsoft.Alpha(Opacity=30)\";filter:alpha(opacity=30);opacity:.3}.node.selected .ring{stroke:#fdcc59;opacity:.4}.relationship{cursor:default}.relationship line{stroke:#aaa}.relationship .outline{cursor:default}.relationship .overlay{cursor:default;fill:#6ac6ff;-ms-filter:\"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)\";filter:alpha(opacity=0);opacity:0}.relationship text{cursor:default}.relationship:hover .overlay{-ms-filter:\"progid:DXImageTransform.Microsoft.Alpha(Opacity=30)\";filter:alpha(opacity=30);opacity:.3}\n"]
            },] }
];
LinkedDataGraphicComponent.ctorParameters = () => [
    { type: TransitionService },
    { type: ColorProviderService, decorators: [{ type: Optional }] },
    { type: ActiveIndividualStoreService, decorators: [{ type: Optional }] }
];
LinkedDataGraphicComponent.propDecorators = {
    mainCanvas: [{ type: ViewChild, args: ['mainCanvas', { static: true },] }],
    nodeRadius: [{ type: Input }],
    arrowSize: [{ type: Input }],
    minCollision: [{ type: Input }],
    zoomFit: [{ type: Input }],
    debug: [{ type: Input }],
    graph: [{ type: Input }],
    relationRemove: [{ type: Input }],
    graphUpdated: [{ type: Output }],
    highlightChecker: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,