import { __awaiter } from 'tslib';
import { Injectable, EventEmitter, Component, Optional, ViewChild, Input, Output, Directive, ElementRef, HostBinding, HostListener, NgModule } from '@angular/core';
import { TransitionService, trigger, transition, render, animate, Easing } from '@ngld/transition';
import { PLUS_ICON_PROVIDER } from '@ngld/icon/plus.icon';
import { REMOVE_ICON_PROVIDER } from '@ngld/icon/remove.icon';
import { UNLOCK_ICON_PROVIDER } from '@ngld/icon/unlock.icon';
import { SvgIconRegistry, SvgIconModule } from '@ngld/icon';
import { nanoid } from 'nanoid';
import * as rfdc from 'rfdc';
import { forceSimulation, forceCollide, forceManyBody, forceLink, forceCenter } from 'd3-force';
import { interpolateZoom } from 'd3-interpolate';
import { rgb } from 'd3-color';
import { BehaviorSubject } from 'rxjs';
import { shareReplay } from 'rxjs/operators';
import { BrowserModule } from '@angular/platform-browser';
import { DragDropModule } from '@angular/cdk/drag-drop';
import { PanZoomDirectiveModule } from '@ngld/pan-zoom';

const COLORS = [
    '#68bdf6',
    '#6dce9e',
    '#faafc2',
    '#f2baf6',
    '#ff928c',
    '#fcea7e',
    '#ffc766',
    '#405f9e',
    '#a5abb6',
    '#78cecb',
    '#b88cbb',
    '#ced2d9',
    '#e84646',
    '#fa5f86',
    '#ffab1a',
    '#fcda19',
    '#797b80',
    '#c9d96f',
    '#47991f',
    '#70edee',
    '#ff75ea' // pink
];
function darkenColor(color) {
    return rgb(color).darker(1);
}
/**
 * @returns degree of rotation
 */
function rotation(source, target) {
    return (Math.atan2(target.y - source.y, target.x - source.x)
        * 180 / Math.PI + 360) % 360;
}
/**
 * Get the vector perpendicular to the given vector.
 *
 * @export
 */
function unitaryNormalVector(source, target, newLength = 1) {
    const center = { x: 0, y: 0 };
    const vector = unitaryVector(source, target, newLength);
    return rotatePoint(center, vector, 90);
}
function unitaryVector(source, target, newLength = 1) {
    const scale = Math.sqrt(Math.pow(target.x - source.x, 2) + Math.pow(target.y - source.y, 2)) / Math.sqrt(newLength);
    return {
        x: (target.x - source.x) / scale,
        y: (target.y - source.y) / scale,
    };
}
/**
 * Clockwise Rotate the given point on Cartesian coordinate system.
 */
function rotatePoint(center, pointToRotate, angle) {
    const radian = (Math.PI / 180) * angle;
    const cos = Math.cos(radian);
    const sin = Math.sin(radian);
    return {
        x: cos * (pointToRotate.x - center.x) + sin * (pointToRotate.y - center.y) + center.x,
        y: cos * (pointToRotate.y - center.y) - sin * (pointToRotate.x - center.x) + center.y,
    };
}
/**
 * Fonts awesome icons
 * @returns string
 * @remove
 */
function fontAwesomeIcons() {
    return {
        glass: 'f000', music: 'f001',
        search: 'f002', 'envelope-o': 'f003', heart: 'f004',
        star: 'f005', 'star-o': 'f006', user: 'f007',
        film: 'f008', 'th-large': 'f009', th: 'f00a', 'th-list': 'f00b',
        check: 'f00c', 'remove,close,times': 'f00d',
        'search-plus': 'f00e', 'search-minus': 'f010', 'power-off': 'f011',
        signal: 'f012', 'gear,cog': 'f013', 'trash-o': 'f014', home: 'f015',
        'file-o': 'f016', 'clock-o': 'f017', road: 'f018', download: 'f019',
        'arrow-circle-o-down': 'f01a', 'arrow-circle-o-up': 'f01b',
        inbox: 'f01c', 'play-circle-o': 'f01d', 'rotate-right,repeat': 'f01e',
        refresh: 'f021', 'list-alt': 'f022', lock: 'f023', flag: 'f024',
        headphones: 'f025', 'volume-off': 'f026', 'volume-down': 'f027',
        'volume-up': 'f028', qrcode: 'f029', barcode: 'f02a', tag: 'f02b',
        tags: 'f02c', book: 'f02d', bookmark: 'f02e', print: 'f02f',
        camera: 'f030', font: 'f031', bold: 'f032', italic: 'f033',
        'text-height': 'f034', 'text-width': 'f035', 'align-left': 'f036',
        'align-center': 'f037', 'align-right': 'f038', 'align-justify': 'f039',
        list: 'f03a', 'dedent,outdent': 'f03b', indent: 'f03c',
        'video-camera': 'f03d', 'photo,image,picture-o': 'f03e', pencil: 'f040',
        'map-marker': 'f041', adjust: 'f042', tint: 'f043',
        'edit,pencil-square-o': 'f044', 'share-square-o': 'f045',
        // eslint-disable-next-line max-len
        'check-square-o': 'f046', arrows: 'f047', 'step-backward': 'f048', 'fast-backward': 'f049', backward: 'f04a', play: 'f04b', pause: 'f04c', stop: 'f04d', forward: 'f04e', 'fast-forward': 'f050', 'step-forward': 'f051', eject: 'f052', 'chevron-left': 'f053', 'chevron-right': 'f054', 'plus-circle': 'f055', 'minus-circle': 'f056', 'times-circle': 'f057', 'check-circle': 'f058', 'question-circle': 'f059', 'info-circle': 'f05a', crosshairs: 'f05b', 'times-circle-o': 'f05c', 'check-circle-o': 'f05d', ban: 'f05e', 'arrow-left': 'f060', 'arrow-right': 'f061', 'arrow-up': 'f062', 'arrow-down': 'f063', 'mail-forward,share': 'f064', expand: 'f065', compress: 'f066', plus: 'f067', minus: 'f068', asterisk: 'f069', 'exclamation-circle': 'f06a', gift: 'f06b', leaf: 'f06c', fire: 'f06d', eye: 'f06e', 'eye-slash': 'f070', 'warning,exclamation-triangle': 'f071', plane: 'f072', calendar: 'f073', random: 'f074', comment: 'f075', magnet: 'f076', 'chevron-up': 'f077', 'chevron-down': 'f078', retweet: 'f079', 'shopping-cart': 'f07a', folder: 'f07b', 'folder-open': 'f07c', 'arrows-v': 'f07d', 'arrows-h': 'f07e', 'bar-chart-o,bar-chart': 'f080', 'twitter-square': 'f081', 'facebook-square': 'f082', 'camera-retro': 'f083', key: 'f084', 'gears,cogs': 'f085', comments: 'f086', 'thumbs-o-up': 'f087', 'thumbs-o-down': 'f088', 'star-half': 'f089', 'heart-o': 'f08a', 'sign-out': 'f08b', 'linkedin-square': 'f08c', 'thumb-tack': 'f08d', 'external-link': 'f08e', 'sign-in': 'f090', trophy: 'f091', 'github-square': 'f092', upload: 'f093', 'lemon-o': 'f094', phone: 'f095', 'square-o': 'f096', 'bookmark-o': 'f097', 'phone-square': 'f098', twitter: 'f099', 'facebook-f,facebook': 'f09a', github: 'f09b', unlock: 'f09c', 'credit-card': 'f09d', 'feed,rss': 'f09e', 'hdd-o': 'f0a0', bullhorn: 'f0a1', bell: 'f0f3', certificate: 'f0a3', 'hand-o-right': 'f0a4', 'hand-o-left': 'f0a5', 'hand-o-up': 'f0a6', 'hand-o-down': 'f0a7', 'arrow-circle-left': 'f0a8', 'arrow-circle-right': 'f0a9', 'arrow-circle-up': 'f0aa', 'arrow-circle-down': 'f0ab', globe: 'f0ac', wrench: 'f0ad', tasks: 'f0ae', filter: 'f0b0', briefcase: 'f0b1', 'arrows-alt': 'f0b2', 'group,users': 'f0c0', 'chain,link': 'f0c1', cloud: 'f0c2', flask: 'f0c3', 'cut,scissors': 'f0c4', 'copy,files-o': 'f0c5', paperclip: 'f0c6', 'save,floppy-o': 'f0c7', square: 'f0c8', 'navicon,reorder,bars': 'f0c9', 'list-ul': 'f0ca', 'list-ol': 'f0cb', strikethrough: 'f0cc', underline: 'f0cd', table: 'f0ce', magic: 'f0d0', truck: 'f0d1', pinterest: 'f0d2', 'pinterest-square': 'f0d3', 'google-plus-square': 'f0d4', 'google-plus': 'f0d5', money: 'f0d6', 'caret-down': 'f0d7', 'caret-up': 'f0d8', 'caret-left': 'f0d9', 'caret-right': 'f0da', columns: 'f0db', 'unsorted,sort': 'f0dc', 'sort-down,sort-desc': 'f0dd', 'sort-up,sort-asc': 'f0de', envelope: 'f0e0', linkedin: 'f0e1', 'rotate-left,undo': 'f0e2', 'legal,gavel': 'f0e3', 'dashboard,tachometer': 'f0e4', 'comment-o': 'f0e5', 'comments-o': 'f0e6', 'flash,bolt': 'f0e7', sitemap: 'f0e8', umbrella: 'f0e9', 'paste,clipboard': 'f0ea', 'lightbulb-o': 'f0eb', exchange: 'f0ec', 'cloud-download': 'f0ed', 'cloud-upload': 'f0ee', 'user-md': 'f0f0', stethoscope: 'f0f1', suitcase: 'f0f2', 'bell-o': 'f0a2', coffee: 'f0f4', cutlery: 'f0f5', 'file-text-o': 'f0f6', 'building-o': 'f0f7', 'hospital-o': 'f0f8', ambulance: 'f0f9', medkit: 'f0fa', 'fighter-jet': 'f0fb', beer: 'f0fc', 'h-square': 'f0fd', 'plus-square': 'f0fe', 'angle-double-left': 'f100', 'angle-double-right': 'f101', 'angle-double-up': 'f102', 'angle-double-down': 'f103', 'angle-left': 'f104', 'angle-right': 'f105', 'angle-up': 'f106', 'angle-down': 'f107', desktop: 'f108', laptop: 'f109', tablet: 'f10a', 'mobile-phone,mobile': 'f10b', 'circle-o': 'f10c', 'quote-left': 'f10d', 'quote-right': 'f10e', spinner: 'f110', circle: 'f111', 'mail-reply,reply': 'f112', 'github-alt': 'f113', 'folder-o': 'f114', 'folder-open-o': 'f115', 'smile-o': 'f118', 'frown-o': 'f119', 'meh-o': 'f11a', gamepad: 'f11b', 'keyboard-o': 'f11c', 'flag-o': 'f11d', 'flag-checkered': 'f11e', terminal: 'f120', code: 'f121', 'mail-reply-all,reply-all': 'f122', 'star-half-empty,star-half-full,star-half-o': 'f123', 'location-arrow': 'f124', crop: 'f125', 'code-fork': 'f126', 'unlink,chain-broken': 'f127', question: 'f128', info: 'f129', exclamation: 'f12a', superscript: 'f12b', subscript: 'f12c', eraser: 'f12d', 'puzzle-piece': 'f12e', microphone: 'f130', 'microphone-slash': 'f131', shield: 'f132', 'calendar-o': 'f133', 'fire-extinguisher': 'f134', rocket: 'f135', maxcdn: 'f136', 'chevron-circle-left': 'f137', 'chevron-circle-right': 'f138', 'chevron-circle-up': 'f139', 'chevron-circle-down': 'f13a', html5: 'f13b', css3: 'f13c', anchor: 'f13d', 'unlock-alt': 'f13e', bullseye: 'f140', 'ellipsis-h': 'f141', 'ellipsis-v': 'f142', 'rss-square': 'f143', 'play-circle': 'f144', ticket: 'f145', 'minus-square': 'f146', 'minus-square-o': 'f147', 'level-up': 'f148', 'level-down': 'f149', 'check-square': 'f14a', 'pencil-square': 'f14b', 'external-link-square': 'f14c', 'share-square': 'f14d', compass: 'f14e', 'toggle-down,caret-square-o-down': 'f150', 'toggle-up,caret-square-o-up': 'f151', 'toggle-right,caret-square-o-right': 'f152', 'euro,eur': 'f153', gbp: 'f154', 'dollar,usd': 'f155', 'rupee,inr': 'f156', 'cny,rmb,yen,jpy': 'f157', 'ruble,rouble,rub': 'f158', 'won,krw': 'f159', 'bitcoin,btc': 'f15a', file: 'f15b', 'file-text': 'f15c', 'sort-alpha-asc': 'f15d', 'sort-alpha-desc': 'f15e', 'sort-amount-asc': 'f160', 'sort-amount-desc': 'f161', 'sort-numeric-asc': 'f162', 'sort-numeric-desc': 'f163', 'thumbs-up': 'f164', 'thumbs-down': 'f165', 'youtube-square': 'f166', youtube: 'f167', xing: 'f168', 'xing-square': 'f169', 'youtube-play': 'f16a', dropbox: 'f16b', 'stack-overflow': 'f16c', instagram: 'f16d', flickr: 'f16e', adn: 'f170', bitbucket: 'f171', 'bitbucket-square': 'f172', tumblr: 'f173', 'tumblr-square': 'f174', 'long-arrow-down': 'f175', 'long-arrow-up': 'f176', 'long-arrow-left': 'f177', 'long-arrow-right': 'f178', apple: 'f179', windows: 'f17a', android: 'f17b', linux: 'f17c', dribbble: 'f17d', skype: 'f17e', foursquare: 'f180', trello: 'f181', female: 'f182', male: 'f183', 'gittip,gratipay': 'f184', 'sun-o': 'f185', 'moon-o': 'f186', archive: 'f187', bug: 'f188', vk: 'f189', weibo: 'f18a', renren: 'f18b', pagelines: 'f18c', 'stack-exchange': 'f18d', 'arrow-circle-o-right': 'f18e', 'arrow-circle-o-left': 'f190', 'toggle-left,caret-square-o-left': 'f191', 'dot-circle-o': 'f192', wheelchair: 'f193', 'vimeo-square': 'f194', 'turkish-lira,try': 'f195', 'plus-square-o': 'f196', 'space-shuttle': 'f197', slack: 'f198', 'envelope-square': 'f199', wordpress: 'f19a', openid: 'f19b', 'institution,bank,university': 'f19c', 'mortar-board,graduation-cap': 'f19d', yahoo: 'f19e', google: 'f1a0', reddit: 'f1a1', 'reddit-square': 'f1a2', 'stumbleupon-circle': 'f1a3', stumbleupon: 'f1a4', delicious: 'f1a5', digg: 'f1a6', 'pied-piper-pp': 'f1a7', 'pied-piper-alt': 'f1a8', drupal: 'f1a9', joomla: 'f1aa', language: 'f1ab', fax: 'f1ac', building: 'f1ad', child: 'f1ae', paw: 'f1b0', spoon: 'f1b1', cube: 'f1b2', cubes: 'f1b3', behance: 'f1b4', 'behance-square': 'f1b5', steam: 'f1b6', 'steam-square': 'f1b7', recycle: 'f1b8', 'automobile,car': 'f1b9', 'cab,taxi': 'f1ba', tree: 'f1bb', spotify: 'f1bc', deviantart: 'f1bd', soundcloud: 'f1be', database: 'f1c0', 'file-pdf-o': 'f1c1', 'file-word-o': 'f1c2', 'file-excel-o': 'f1c3', 'file-powerpoint-o': 'f1c4', 'file-photo-o,file-picture-o,file-image-o': 'f1c5', 'file-zip-o,file-archive-o': 'f1c6', 'file-sound-o,file-audio-o': 'f1c7', 'file-movie-o,file-video-o': 'f1c8', 'file-code-o': 'f1c9', vine: 'f1ca', codepen: 'f1cb', jsfiddle: 'f1cc', 'life-bouy,life-buoy,life-saver,support,life-ring': 'f1cd', 'circle-o-notch': 'f1ce', 'ra,resistance,rebel': 'f1d0', 'ge,empire': 'f1d1', 'git-square': 'f1d2', git: 'f1d3', 'y-combinator-square,yc-square,hacker-news': 'f1d4', 'tencent-weibo': 'f1d5', qq: 'f1d6', 'wechat,weixin': 'f1d7', 'send,paper-plane': 'f1d8', 'send-o,paper-plane-o': 'f1d9', history: 'f1da', 'circle-thin': 'f1db', header: 'f1dc', paragraph: 'f1dd', sliders: 'f1de', 'share-alt': 'f1e0', 'share-alt-square': 'f1e1', bomb: 'f1e2', 'soccer-ball-o,futbol-o': 'f1e3', tty: 'f1e4', binoculars: 'f1e5', plug: 'f1e6', slideshare: 'f1e7', twitch: 'f1e8', yelp: 'f1e9', 'newspaper-o': 'f1ea', wifi: 'f1eb', calculator: 'f1ec', paypal: 'f1ed', 'google-wallet': 'f1ee', 'cc-visa': 'f1f0', 'cc-mastercard': 'f1f1', 'cc-discover': 'f1f2', 'cc-amex': 'f1f3', 'cc-paypal': 'f1f4', 'cc-stripe': 'f1f5', 'bell-slash': 'f1f6', 'bell-slash-o': 'f1f7', trash: 'f1f8', copyright: 'f1f9', at: 'f1fa', eyedropper: 'f1fb', 'paint-brush': 'f1fc', 'birthday-cake': 'f1fd', 'area-chart': 'f1fe', 'pie-chart': 'f200', 'line-chart': 'f201', lastfm: 'f202', 'lastfm-square': 'f203', 'toggle-off': 'f204', 'toggle-on': 'f205', bicycle: 'f206', bus: 'f207', ioxhost: 'f208', angellist: 'f209', cc: 'f20a', 'shekel,sheqel,ils': 'f20b', meanpath: 'f20c', buysellads: 'f20d', connectdevelop: 'f20e', dashcube: 'f210', forumbee: 'f211', leanpub: 'f212', sellsy: 'f213', shirtsinbulk: 'f214', simplybuilt: 'f215', skyatlas: 'f216', 'cart-plus': 'f217', 'cart-arrow-down': 'f218', diamond: 'f219', ship: 'f21a', 'user-secret': 'f21b', motorcycle: 'f21c', 'street-view': 'f21d', heartbeat: 'f21e', venus: 'f221', mars: 'f222', mercury: 'f223', 'intersex,transgender': 'f224', 'transgender-alt': 'f225', 'venus-double': 'f226', 'mars-double': 'f227', 'venus-mars': 'f228', 'mars-stroke': 'f229', 'mars-stroke-v': 'f22a', 'mars-stroke-h': 'f22b', neuter: 'f22c', genderless: 'f22d', 'facebook-official': 'f230', 'pinterest-p': 'f231', whatsapp: 'f232', server: 'f233', 'user-plus': 'f234', 'user-times': 'f235', 'hotel,bed': 'f236', viacoin: 'f237', train: 'f238', subway: 'f239', medium: 'f23a', 'yc,y-combinator': 'f23b', 'optin-monster': 'f23c', opencart: 'f23d', expeditedssl: 'f23e', 'battery-4,battery-full': 'f240', 'battery-3,battery-three-quarters': 'f241', 'battery-2,battery-half': 'f242', 'battery-1,battery-quarter': 'f243', 'battery-0,battery-empty': 'f244', 'mouse-pointer': 'f245', 'i-cursor': 'f246', 'object-group': 'f247', 'object-ungroup': 'f248', 'sticky-note': 'f249', 'sticky-note-o': 'f24a', 'cc-jcb': 'f24b', 'cc-diners-club': 'f24c', clone: 'f24d', 'balance-scale': 'f24e', 'hourglass-o': 'f250', 'hourglass-1,hourglass-start': 'f251', 'hourglass-2,hourglass-half': 'f252', 'hourglass-3,hourglass-end': 'f253', hourglass: 'f254', 'hand-grab-o,hand-rock-o': 'f255', 'hand-stop-o,hand-paper-o': 'f256', 'hand-scissors-o': 'f257', 'hand-lizard-o': 'f258', 'hand-spock-o': 'f259', 'hand-pointer-o': 'f25a', 'hand-peace-o': 'f25b', trademark: 'f25c', registered: 'f25d', 'creative-commons': 'f25e', gg: 'f260', 'gg-circle': 'f261', tripadvisor: 'f262', odnoklassniki: 'f263', 'odnoklassniki-square': 'f264', 'get-pocket': 'f265', 'wikipedia-w': 'f266', safari: 'f267', chrome: 'f268', firefox: 'f269', opera: 'f26a', 'internet-explorer': 'f26b', 'tv,television': 'f26c', contao: 'f26d', '500px': 'f26e', amazon: 'f270', 'calendar-plus-o': 'f271', 'calendar-minus-o': 'f272', 'calendar-times-o': 'f273', 'calendar-check-o': 'f274', industry: 'f275', 'map-pin': 'f276', 'map-signs': 'f277', 'map-o': 'f278', map: 'f279', commenting: 'f27a', 'commenting-o': 'f27b', houzz: 'f27c', vimeo: 'f27d', 'black-tie': 'f27e', fonticons: 'f280', 'reddit-alien': 'f281', edge: 'f282', 'credit-card-alt': 'f283', codiepie: 'f284', modx: 'f285', 'fort-awesome': 'f286', usb: 'f287', 'product-hunt': 'f288', mixcloud: 'f289', scribd: 'f28a', 'pause-circle': 'f28b', 'pause-circle-o': 'f28c', 'stop-circle': 'f28d', 'stop-circle-o': 'f28e', 'shopping-bag': 'f290', 'shopping-basket': 'f291', hashtag: 'f292', bluetooth: 'f293', 'bluetooth-b': 'f294', percent: 'f295', gitlab: 'f296', wpbeginner: 'f297', wpforms: 'f298', envira: 'f299', 'universal-access': 'f29a', 'wheelchair-alt': 'f29b', 'question-circle-o': 'f29c', blind: 'f29d', 'audio-description': 'f29e', 'volume-control-phone': 'f2a0', braille: 'f2a1', 'assistive-listening-systems': 'f2a2', 'asl-interpreting,american-sign-language-interpreting': 'f2a3', 'deafness,hard-of-hearing,deaf': 'f2a4', glide: 'f2a5', 'glide-g': 'f2a6', 'signing,sign-language': 'f2a7', 'low-vision': 'f2a8', viadeo: 'f2a9', 'viadeo-square': 'f2aa', snapchat: 'f2ab', 'snapchat-ghost': 'f2ac', 'snapchat-square': 'f2ad', 'pied-piper': 'f2ae', 'first-order': 'f2b0', yoast: 'f2b1', themeisle: 'f2b2', 'google-plus-circle,google-plus-official': 'f2b3', 'fa,font-awesome': 'f2b4'
    };
}

class GraphContainer {
    constructor(colorGetter) {
        this.colorGetter = colorGetter;
        this.relationships = [];
        this.nodes = [];
        this.rawGraph = {
            nodes: [],
            relationships: [],
        };
    }
    /**
     * addRelation
     */
    addRelation(rel) {
        this.rawGraph.relationships.push(rel);
        this.relationships.push(Object.assign({ translate: { x: 0, y: 0 }, rotate: 0, controlledByDragging: false, isLongPressing: false, selected: false, textTranslate: { x: 0, y: 0 }, pathDrawn: {
                A1: { x: 0, y: 0 }, B1: { x: 0, y: 0 }, C1: { x: 0, y: 0 },
                D1: { x: 0, y: 0 },
                A2: { x: 0, y: 0 }, B2: { x: 0, y: 0 }, C2: { x: 0, y: 0 },
                D2: { x: 0, y: 0 }, E2: { x: 0, y: 0 }, F2: { x: 0, y: 0 },
                G2: { x: 0, y: 0 },
                A3: { x: 0, y: 0 }, B3: { x: 0, y: 0 }, C3: { x: 0, y: 0 },
                D3: { x: 0, y: 0 },
            }, color: { fill: '#68bdf6', stroke: '#4984ac' }, textBoxSize: { width: 1, height: 1 } }, rel));
        return this;
    }
    removeRelationById(id) {
        const temp = [];
        while (true) {
            const rel = this.relationships.shift();
            if (!rel) {
                break;
            }
            if (rel.id === id) {
                break;
            }
            temp.unshift(rel);
        }
        temp.forEach(rel => this.relationships.unshift(rel));
        const tempRawRelationship = [];
        while (true) {
            const rel = this.rawGraph.relationships.shift();
            if (!rel) {
                break;
            }
            if (rel.id === id) {
                break;
            }
            tempRawRelationship.unshift(rel);
        }
        tempRawRelationship.forEach(rel => this.rawGraph.relationships.unshift(rel));
    }
    /**
     * addNode
     */
    addNode(node) {
        this.rawGraph.nodes.push(node);
        const color = this.colorGetter.nextColorByName(node.labels[0]);
        this.nodes.push(Object.assign({ translate: { x: 0, y: 0 }, rotate: 0, controlledByDragging: false, isLongPressing: false, selected: false, textTranslate: { x: 0, y: 0 }, pathDrawn: {
                A1: { x: 0, y: 0 }, B1: { x: 0, y: 0 }, C1: { x: 0, y: 0 },
                D1: { x: 0, y: 0 }, R1: { inner: 33, outer: 33 },
            }, color: { fill: color, stroke: darkenColor(color).formatHex() } }, node));
        return this;
    }
    removeNodeById(id) {
        const temp = [];
        while (true) {
            const node = this.nodes.shift();
            if (!node) {
                break;
            }
            if (node.id === id) {
                break;
            }
            temp.unshift(node);
        }
        temp.forEach(node => this.nodes.unshift(node));
    }
}

class ColorProviderService {
}
class DefaultColorProviderService extends ColorProviderService {
    constructor() {
        super();
        this.classes2colors = {};
    }
    nextColor() {
        return '#68bdf6';
    }
    nextColorByName(name) {
        const color = this.classes2colors[name];
        if (color) {
            return color;
        }
        this.classes2colors[name] = COLORS[Object.keys(this.classes2colors).length % COLORS.length];
        return this.classes2colors[name];
    }
}
DefaultColorProviderService.decorators = [
    { type: Injectable }
];
DefaultColorProviderService.ctorParameters = () => [];

class ActiveIndividualStoreService {
    constructor() {
        this.activeIndividualSubject = new BehaviorSubject(null);
        /**
         * Active individual$ of active individual cast service
         * shareReplay does two things:
         *  * caches the last emitted value,
         * so components that subscribe after a value been emitted can still display the value,
         *  * shares the same observable between all observables,
         * instead of creating new observables on each subscription
         */
        this.activeIndividual$ = this.activeIndividualSubject.asObservable().pipe(shareReplay(1));
    }
    get activeIndividual() {
        return this.activeIndividualSubject.getValue();
    }
    /**
     * Sets active individual
     * Assigning a value to this.activeIndividualSubject
     * push it onto the observable and down to all of its subscribers
     */
    set activeIndividual(v) {
        this.activeIndividualSubject.next(v);
    }
    /**
     * clearActiveIndividual
     */
    clearActiveIndividual() {
        this.activeIndividualSubject.next(null);
    }
}
ActiveIndividualStoreService.decorators = [
    { type: Injectable }
];
ActiveIndividualStoreService.ctorParameters = () => [];

const clone = rfdc();
const interpolateRadius = interpolateZoom([0, 0, 33], [0, 0, 66]);
const cosineStart = Math.cos(2 * Math.PI / 180);
const sineStart = Math.sin(2 * Math.PI / 180);
const cosineEnd = Math.cos(120 * Math.PI / 180);
const sineEnd = Math.sin(120 * Math.PI / 180);
class AnimationTranstion extends TransitionService {
    constructor() {
        super([
            trigger('openClose', [
                transition((from, to) => from === 'void' && to === 'open', [
                    render((p, node) => {
                        const radiusOuter = interpolateRadius(p)[2];
                        // sin(2) * 33, cos(2) * 33
                        node.pathDrawn.A1 = { x: sineStart * 33, y: -cosineStart * 33 };
                        // sin(120) * 33, cos(120) * 33
                        node.pathDrawn.B1 = { x: sineEnd * 33, y: -cosineEnd * 33 };
                        // sin(120) * 63, cos(120) * 63
                        node.pathDrawn.C1 = { x: sineEnd * radiusOuter, y: -cosineEnd * radiusOuter };
                        // sin(2) * 63, cos(2) * 63
                        node.pathDrawn.D1 = { x: sineStart * radiusOuter, y: -cosineStart * radiusOuter };
                        node.pathDrawn.R1.outer = radiusOuter;
                    }),
                    animate(200, Easing.easeInCubic),
                ]),
                transition((from, to) => from === 'open' && to === 'void', [
                    render((p, node) => {
                        const radiusOuter = interpolateRadius(1 - p)[2];
                        // sin(2) * 33, cos(2) * 33
                        node.pathDrawn.A1 = { x: sineStart * 33, y: -cosineStart * 33 };
                        // sin(120) * 33, cos(120) * 33
                        node.pathDrawn.B1 = { x: sineEnd * 33, y: -cosineEnd * 33 };
                        // sin(120) * 63, cos(120) * 63
                        node.pathDrawn.C1 = { x: sineEnd * radiusOuter, y: -cosineEnd * radiusOuter };
                        // sin(2) * 63, cos(2) * 63
                        node.pathDrawn.D1 = { x: sineStart * radiusOuter, y: -cosineStart * radiusOuter };
                        node.pathDrawn.R1.outer = radiusOuter;
                    }),
                    animate(200, Easing.easeOutCubic),
                ]),
            ]),
        ]);
    }
}
AnimationTranstion.decorators = [
    { type: Injectable }
];
AnimationTranstion.ctorParameters = () => [];
class LinkedDataGraphicComponent {
    constructor(transitionService, colorProvider, activeIndividualStore) {
        this.transitionService = transitionService;
        this.colorProvider = colorProvider;
        this.activeIndividualStore = activeIndividualStore;
        this.nodeRadius = 25;
        this.arrowSize = 4;
        this.minCollision = 60;
        this.zoomFit = false;
        this.graphUpdated = new EventEmitter();
        this.$states = {
            debug: false,
            dashedArrow: null,
            relationRemove: false,
        };
        this.canvasViewBox = {
            minX: 0,
            minY: 0,
            width: 800,
            height: 500,
        };
        this.initialLoad = true;
        this.highlightChecker = (node) => false;
        if (!this.activeIndividualStore) {
            this.activeIndividualStore = new ActiveIndividualStoreService();
        }
        if (!this.colorProvider) {
            this.colorProvider = new DefaultColorProviderService();
        }
        this.d3Graph = new GraphContainer(this.colorProvider);
    }
    set debug(state) {
        this.$states.debug = state;
    }
    set graph(g) {
        this.initGraph = g;
    }
    set relationRemove(state) {
        this.$states.relationRemove = state;
    }
    ngOnInit() {
        return __awaiter(this, void 0, void 0, function* () {
            this.simulation = this.newSimulation();
            this.initGraph.nodes.forEach(node => this.d3Graph.addNode(clone(node)));
            this.initGraph.relationships.forEach(rel => this.d3Graph.addRelation(clone(rel)));
            this.reloadSimulation();
            const mainCanvasSize = this.getMainCanvasSize();
            this.canvasViewBox = {
                minX: 0, minY: 0, width: mainCanvasSize.width, height: mainCanvasSize.height,
            };
        });
    }
    getMainCanvasSize() {
        return this.mainCanvas.nativeElement.getBoundingClientRect();
    }
    newSimulation() {
        const simulation = forceSimulation();
        const mainCanvasSize = this.getMainCanvasSize();
        simulation
            .force('collide', forceCollide()
            .radius(d => this.minCollision).iterations(2))
            .force('charge', forceManyBody())
            .force('link', forceLink().id(d => d.id + ''))
            .force('center', forceCenter(mainCanvasSize.width / 2, mainCanvasSize.height / 2))
            .on('tick', () => {
            this.d3Graph.nodes.forEach(node => {
                if (!node.controlledByDragging) {
                    node.translate.x = node.x;
                    node.translate.y = node.y;
                }
            });
            this.d3Graph.relationships.forEach(rel => {
                const center = { x: 0, y: 0 };
                const source = rel.source;
                const target = rel.target;
                const angle = rotation(source, target);
                rel.rotate = rotation(source, rel.target);
                // [SOURCE] --textMargin--[TEXT]--textMargin-->[TARGET]
                // [SOURCE] --textMargin--textMargin--[TEXT]-->[TARGET]
                // --textMargin--textMargin--[TEXT]-- = [SOURCE]-->[TARGET]
                const n = unitaryNormalVector(source, target);
                const u = unitaryVector(source, target);
                const textMargin = {
                    y: (target.y - source.y - (rel.textBoxSize.width + 10) * u.y) * 0.5,
                    x: (target.x - source.x - (rel.textBoxSize.width + 10) * u.x) * 0.5,
                };
                // => u is simple scale of textMargin
                // => n is perpendicular to textMargin
                rel.pathDrawn.A1 = rotatePoint(center, {
                    x: 0 + (this.nodeRadius + 1) * u.x - n.x,
                    y: 0 + (this.nodeRadius + 1) * u.y - n.y,
                }, angle);
                rel.pathDrawn.B1 = rotatePoint(center, {
                    x: textMargin.x - n.x,
                    y: textMargin.y - n.y,
                }, angle);
                rel.pathDrawn.C1 = rotatePoint(center, {
                    x: textMargin.x,
                    y: textMargin.y,
                }, angle);
                rel.pathDrawn.D1 = rotatePoint(center, {
                    x: 0 + (this.nodeRadius + 1) * u.x,
                    y: 0 + (this.nodeRadius + 1) * u.y,
                }, angle);
                // length(C-B) = length(D-A) = length(n) = 1
                rel.pathDrawn.A2 = rotatePoint(center, {
                    x: target.x - source.x - textMargin.x - n.x,
                    y: target.y - source.y - textMargin.y - n.y,
                }, angle);
                rel.pathDrawn.B2 = rotatePoint(center, {
                    x: target.x - source.x - (this.nodeRadius + 1) * u.x - n.x - u.x * this.arrowSize,
                    y: target.y - source.y - (this.nodeRadius + 1) * u.y - n.y - u.y * this.arrowSize,
                }, angle);
                rel.pathDrawn.C2 = rotatePoint(center, {
                    x: target.x - source.x - (this.nodeRadius + 1) * u.x - n.x + (n.x - u.x) * this.arrowSize,
                    y: target.y - source.y - (this.nodeRadius + 1) * u.y - n.y + (n.y - u.y) * this.arrowSize,
                }, angle);
                rel.pathDrawn.D2 = rotatePoint(center, {
                    x: target.x - source.x - (this.nodeRadius + 1) * u.x,
                    y: target.y - source.y - (this.nodeRadius + 1) * u.y,
                }, angle);
                rel.pathDrawn.E2 = rotatePoint(center, {
                    x: target.x - source.x - (this.nodeRadius + 1) * u.x + (-n.x - u.x) * this.arrowSize,
                    y: target.y - source.y - (this.nodeRadius + 1) * u.y + (-n.y - u.y) * this.arrowSize,
                }, angle);
                rel.pathDrawn.F2 = rotatePoint(center, {
                    x: target.x - source.x - (this.nodeRadius + 1) * u.x - u.x * this.arrowSize,
                    y: target.y - source.y - (this.nodeRadius + 1) * u.y - u.y * this.arrowSize,
                }, angle);
                rel.pathDrawn.G2 = rotatePoint(center, {
                    x: target.x - source.x - textMargin.x,
                    y: target.y - source.y - textMargin.y,
                }, angle);
                const n1 = unitaryNormalVector(source, target, 50);
                rel.pathDrawn.A3 = rotatePoint(center, {
                    x: 0 - n1.x,
                    y: 0 - n1.y,
                }, angle);
                rel.pathDrawn.B3 = rotatePoint(center, {
                    x: target.x - source.x - n1.x,
                    y: target.y - source.y - n1.y,
                }, angle);
                rel.pathDrawn.C3 = rotatePoint(center, {
                    x: target.x - source.x + n1.x - n.x,
                    y: target.y - source.y + n1.y - n.y,
                }, angle);
                rel.pathDrawn.D3 = rotatePoint(center, {
                    x: 0 + n1.x - n.x,
                    y: 0 + n1.y - n.y,
                }, angle);
                rel.textTranslate = rotatePoint(center, {
                    x: (target.x - source.x) * 0.5
                        + n.x * ((rel.rotate > 90 && rel.rotate < 270) ? 2 : -3),
                    y: (target.y - source.y) * 0.5
                        + n.y * ((rel.rotate > 90 && rel.rotate < 270) ? 2 : -3),
                }, angle);
            });
        }).on('end', () => {
            if (this.zoomFit && this.initialLoad) {
                this.initialLoad = false;
                this.zoomSvgScale();
            }
        });
        return simulation;
    }
    reloadSimulation() {
        this.simulation.nodes(this.d3Graph.nodes);
        this.simulation.force('link')
            .links(this.d3Graph.relationships);
        this.simulation.alphaTarget(0).restart();
    }
    zoomSvgScale() {
        const bounds = this.mainCanvas.nativeElement.getBBox();
        if (bounds.width * bounds.height === 0) {
            return; // nothing to fit
        }
        this.canvasViewBox = {
            minX: bounds.x, minY: bounds.y,
            width: bounds.width, height: bounds.height,
        };
    }
    onNodeDragging(e, node) {
        node.fx = e.pointerPosition.x;
        node.fy = e.pointerPosition.y;
    }
    onNodeDragStart(node) {
        if (node.controlledByDragging || node.isLongPressing) {
            return;
        }
        this.simulation.alphaTarget(0.1).restart();
    }
    onNodeDragEnd(e, node) {
        node.controlledByDragging = true;
        this.simulation.alphaTarget(0);
    }
    onNodeClick(e, node) {
        e.stopPropagation();
        if (node.controlledByDragging || node.isLongPressing) {
            node.controlledByDragging = false;
            node.isLongPressing = false;
            return;
        }
        node.fx = node.fy = null;
        if (node.selected) {
            this.selectedNode = null;
            this.transitionService.animate('openClose', 'open', 'void', node)
                .then(_ => node.selected = false);
        }
        else {
            node.selected = true;
            if (this.selectedNode) {
                const previousNode = this.selectedNode;
                this.transitionService
                    .animate('openClose', 'open', 'void', this.selectedNode)
                    .then(_ => previousNode.selected = false);
            }
            this.selectedNode = node;
            this.transitionService.animate('openClose', 'void', 'open', node);
        }
    }
    updateDashedArrowSource(node) {
        this.$states.dashedArrow = { from: node, to: null };
    }
    updateDashedArrowTarget(to) {
        if (!to) {
            // to is empty or removed ==> dashedArrow should not appear
            if (this.$states.dashedArrow && this.$states.dashedArrow.id) {
                const removeId = this.$states.dashedArrow.id;
                this.$states.dashedArrow.id = null;
                this.d3Graph.removeRelationById(removeId);
                this.reloadSimulation();
            }
            if (this.$states.dashedArrow && this.$states.dashedArrow.from) {
                this.$states.dashedArrow.to = null;
                return;
            }
            this.$states.dashedArrow = null;
            return;
        }
        if (this.$states.dashedArrow.from.id === to.id) {
            return;
        }
        if (!this.$states.dashedArrow) {
            this.$states.dashedArrow = { from: null, to };
        }
        else {
            // both from and to suffice dashedArrow appearing
            const regId = nanoid();
            this.$states.dashedArrow.to = to;
            this.$states.dashedArrow.id = regId;
            const source = this.$states.dashedArrow.from.id;
            this.d3Graph.addRelation({
                id: regId, type: 'for',
                source, target: to.id, properties: { from: 1 }
            });
            this.reloadSimulation();
            this.graphUpdated.emit(this.d3Graph);
        }
    }
    clearDashedArrow(ev) {
        this.$states.dashedArrow = null;
    }
    plusDashedArrow(ev) {
        ev.preventDefault();
        this.$states.dashedArrow = null;
    }
    /**
     * TODO: Should be moved into a service
     */
    addNode(node) {
        this.d3Graph.addNode(node);
        this.reloadSimulation();
    }
    updateActiveIndividual(node) {
        this.activeIndividualStore.activeIndividual = node;
    }
    clearActiveIndividual() {
        this.activeIndividualStore.clearActiveIndividual();
    }
    updateViewBox(e) {
        this.canvasViewBox.minX = e.minX;
        this.canvasViewBox.minY = e.minY;
        this.canvasViewBox.width = e.width;
        this.canvasViewBox.height = e.height;
    }
    removeRelation(ev, rel) {
        ev.preventDefault();
        this.d3Graph.removeRelationById(rel.id);
        this.graphUpdated.emit(this.d3Graph);
        this.reloadSimulation();
    }
}
LinkedDataGraphicComponent.decorators = [
    { type: Component, args: [{
                providers: [
                    { provide: TransitionService, useClass: AnimationTranstion, },
                    [PLUS_ICON_PROVIDER, REMOVE_ICON_PROVIDER, UNLOCK_ICON_PROVIDER],
                    SvgIconRegistry
                ],
                selector: 'ngld-canvas',
                template: "<svg #mainCanvas ngldPanZoom class=\"neo4jd3-graph mainCanvas\"\n    [attr.viewBox]=\"canvasViewBox.minX\n                  + ' ' + canvasViewBox.minY\n                  + ' ' + canvasViewBox.width\n                  + ' ' + canvasViewBox.height\"\n    [viewBox]=\"canvasViewBox\"\n    (click)=\"clearDashedArrow($event)\"\n    (viewBoxChanged)=\"updateViewBox($event)\">\n  <g class=\"relationships\">\n    <g *ngFor=\"let rel of d3Graph.relationships\" class=\"relationship\"\n      [attr.transform]=\"'translate(' + rel.source.x + ',' + rel.source.y\n                        +') rotate(' + rel.rotate + ')'\"\n      (click)=\"$states.relationRemove ? removeRelation($event, rel) : null\">\n      <text ngldBoxSizeListener [listenValue]=\"rel.pathDrawn.A1.x\"\n        (boxSize)=\"rel.textBoxSize=$event\"\n        class=\"text\" fill=\"#000000\" font-size=\"8px\" pointer-events=\"none\"\n        text-anchor=\"middle\"\n        [attr.transform]=\"'translate('\n            + rel.textTranslate.x + ',' + rel.textTranslate.y\n            + ') rotate('\n              + ((rel.rotate > 90 && rel.rotate < 270 )? 180:0)\n            + ')'\">\n        {{ rel.type }}\n      </text>\n      <path class=\"outline\" fill=\"#a5abb6\" stroke=\"none\"\n          [attr.d]=\"'M ' + rel.pathDrawn.A1.x + ' ' + rel.pathDrawn.A1.y\n          + ' L ' + rel.pathDrawn.B1.x + ' ' + rel.pathDrawn.B1.y\n          + ' L ' + rel.pathDrawn.C1.x + ' ' + rel.pathDrawn.C1.y\n          + ' L ' + rel.pathDrawn.D1.x + ' ' + rel.pathDrawn.D1.y\n          + ' Z'\n          + ' M ' + rel.pathDrawn.A2.x + ' ' + rel.pathDrawn.A2.y\n          + ' L ' + rel.pathDrawn.B2.x + ' ' + rel.pathDrawn.B2.y\n          + ' L ' + rel.pathDrawn.C2.x + ' ' + rel.pathDrawn.C2.y\n          + ' L ' + rel.pathDrawn.D2.x + ' ' + rel.pathDrawn.D2.y\n          + ' L ' + rel.pathDrawn.E2.x + ' ' + rel.pathDrawn.E2.y\n          + ' L ' + rel.pathDrawn.F2.x + ' ' + rel.pathDrawn.F2.y\n          + ' L ' + rel.pathDrawn.G2.x + ' ' + rel.pathDrawn.G2.y\n          + ' Z'\"></path>\n      <path class=\"overlay\"\n          [attr.d]=\"'M ' + rel.pathDrawn.A3.x + ' ' + rel.pathDrawn.A3.y\n          + ' L ' + rel.pathDrawn.B3.x + ' ' + rel.pathDrawn.B3.y\n          + ' L ' + rel.pathDrawn.C3.x + ' ' + rel.pathDrawn.C3.y\n          + ' L ' + rel.pathDrawn.D3.x + ' ' + rel.pathDrawn.D3.y\n          + ' Z'\"></path>\n    </g>\n  </g>\n  <g class=\"nodes\">\n    <g cdkDrag ngldLongPress ngldPanZoomExclude\n      *ngFor=\"let node of d3Graph.nodes\" class=\"node\" [class.selected]=\"node.selected\"\n      [class.node-highlighted]=\"highlightChecker(node)\"\n      [cdkDragFreeDragPosition]=\"{ x: node.translate.x, y: node.translate.y }\"\n      (cdkDragStarted)=\"onNodeDragStart(node);node.controlledByDragging=true\"\n      (cdkDragEnded)=\"onNodeDragEnd($event, node)\"\n      (cdkDragMoved)=\"onNodeDragging($event, node)\"\n      (longPressing)=\"onNodeDragStart(node);node.isLongPressing=true;node.fx=node.x;node.fy=node.y\"\n      (click)=\"($states.dashedArrow && $states.dashedArrow.id) ? plusDashedArrow($event) : onNodeClick($event, node)\"\n      (mouseenter)=\"$states.dashedArrow ? updateDashedArrowTarget(node) : updateActiveIndividual(node)\"\n      (mouseleave)=\"$states.dashedArrow ? updateDashedArrowTarget(null) : clearActiveIndividual()\">\n      <circle class=\"ring\" [attr.r]=\"nodeRadius * 1.16\">\n        <title> {{ node.labels[0] }} [{{node.id}}] </title>\n      </circle>\n      <circle class=\"outline\" [attr.r]=\"nodeRadius\" [attr.fill]=\"node.color.fill\" [attr.stroke]=\"node.color.stroke\">\n        <title> {{ node.labels[0] }} [{{node.id}}]  </title>\n      </circle>\n      <text class=\"text\" fill=\"#ffffff\" pointer-events=\"none\" y=\"4px\">\n        {{ node.labels.join(' ') }}</text>\n      <ng-container *ngIf=\"node.selected\">\n        <path *ngFor=\"let panelRotate of [0,120,240]\" class=\"context-menu-item\"\n             (click)=\"updateDashedArrowSource(node)\"\n              [attr.transform]=\"'rotate(' + panelRotate + ')'\"\n              [attr.d]=\"'M ' + node.pathDrawn.D1.x + ' ' + node.pathDrawn.D1.y\n                    + ' A ' + node.pathDrawn.R1.outer + ' ' + node.pathDrawn.R1.outer + ' 0 0,1 ' + node.pathDrawn.C1.x + ' ' + node.pathDrawn.C1.y\n                    + ' L ' + node.pathDrawn.B1.x + ' ' + node.pathDrawn.B1.y\n                    + ' A 33 33 0 0,0 ' + node.pathDrawn.A1.x + ' ' + node.pathDrawn.A1.y\n                    + ' Z'\"></path>\n        <g ngld-icon svgIcon=\"unlock_node\" transform=\"translate(-52,-30) scale(0.7)\" color=\"#2A2C34\"></g>\n        <g ngld-icon svgIcon=\"remove_node\" transform=\"translate(33,-24) scale(0.7)\" color=\"#2A2C34\"></g>\n        <g ngld-icon svgIcon=\"plus_node\"\n          (click)=\"updateDashedArrowSource(node)\"\n          transform=\"translate(-8,38) scale(0.7)\" color=\"#2A2C34\"></g>\n      </ng-container>\n    </g>\n  </g>\n\n  <ng-container *ngIf=\"$states.debug\">\n    <path *ngFor=\"let node of d3Graph.nodes\" class=\"outline\" stroke=\"green\" stroke-width=\"1\"\n            [attr.d]=\"'M 0 0 '\n            + ' L ' + node.x + ' ' + node.y\n            + ' Z'\"></path>\n  </ng-container>\n</svg>\n",
                styles: ["svg.mainCanvas{border:1px solid #ddd;border-radius:5px;width:100%;height:100%;cursor:move}path.context-menu-item{stroke-width:2px;fill:#d2d5da;cursor:pointer}path.context-menu-item:hover{fill:#b9b9b9}.node{touch-action:none;-webkit-tap-highlight-color:#fff}.node.node-highlighted .ring{-ms-filter:\"progid:DXImageTransform.Microsoft.Alpha(Opacity=50)\";filter:alpha(opacity=50);opacity:.5;stroke:#888;stroke-width:12px}.node .outline{cursor:pointer;pointer-events:all;stroke-width:2px}.node .ring{fill:none;-ms-filter:\"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)\";filter:alpha(opacity=0);opacity:0;stroke:#6ac6ff;stroke-width:8px}.node .text{font-size:10px;text-anchor:middle}.node .text.icon{font-family:FontAwesome}.node:hover .ring{-ms-filter:\"progid:DXImageTransform.Microsoft.Alpha(Opacity=30)\";filter:alpha(opacity=30);opacity:.3}.node.selected .ring{stroke:#fdcc59;opacity:.4}.relationship{cursor:default}.relationship line{stroke:#aaa}.relationship .outline{cursor:default}.relationship .overlay{cursor:default;fill:#6ac6ff;-ms-filter:\"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)\";filter:alpha(opacity=0);opacity:0}.relationship text{cursor:default}.relationship:hover .overlay{-ms-filter:\"progid:DXImageTransform.Microsoft.Alpha(Opacity=30)\";filter:alpha(opacity=30);opacity:.3}\n"]
            },] }
];
LinkedDataGraphicComponent.ctorParameters = () => [
    { type: TransitionService },
    { type: ColorProviderService, decorators: [{ type: Optional }] },
    { type: ActiveIndividualStoreService, decorators: [{ type: Optional }] }
];
LinkedDataGraphicComponent.propDecorators = {
    mainCanvas: [{ type: ViewChild, args: ['mainCanvas', { static: true },] }],
    nodeRadius: [{ type: Input }],
    arrowSize: [{ type: Input }],
    minCollision: [{ type: Input }],
    zoomFit: [{ type: Input }],
    debug: [{ type: Input }],
    graph: [{ type: Input }],
    relationRemove: [{ type: Input }],
    graphUpdated: [{ type: Output }],
    highlightChecker: [{ type: Input }]
};

class BoxSizeListenerDirective {
    constructor(el) {
        this.el = el;
        this.boxSize = new EventEmitter();
    }
    set listenValue(a) {
        this.boxSize.emit(this.el.nativeElement.getBBox());
    }
}
BoxSizeListenerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngldBoxSizeListener]'
            },] }
];
BoxSizeListenerDirective.ctorParameters = () => [
    { type: ElementRef }
];
BoxSizeListenerDirective.propDecorators = {
    listenValue: [{ type: Input }],
    boxSize: [{ type: Output }]
};

class LongPressDirective {
    constructor() {
        this.longPress = new EventEmitter();
        this.longPressing = new EventEmitter();
    }
    get clsPress() { return this.isPressing; }
    get clsLongPress() { return this.isLongPressing; }
    onMouseDown(event) {
        this.isPressing = true;
        this.isLongPressing = false;
        this.timeout = setTimeout(() => {
            this.isLongPressing = true;
            this.longPress.emit(event);
            this.interval = setInterval(() => {
                this.longPressing.emit(event);
            }, 50);
        }, 500);
    }
    endPress() {
        clearTimeout(this.timeout);
        clearInterval(this.interval);
        this.isLongPressing = false;
        this.isPressing = false;
    }
}
LongPressDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ngldLongPress]'
            },] }
];
LongPressDirective.propDecorators = {
    longPress: [{ type: Output }],
    longPressing: [{ type: Output }],
    clsPress: [{ type: HostBinding, args: ['class.press',] }],
    clsLongPress: [{ type: HostBinding, args: ['class.longpress',] }],
    onMouseDown: [{ type: HostListener, args: ['touchstart', ['$event'],] }, { type: HostListener, args: ['mousedown', ['$event'],] }],
    endPress: [{ type: HostListener, args: ['touchend',] }, { type: HostListener, args: ['mouseup',] }, { type: HostListener, args: ['mouseleave',] }]
};

class InfoPanelComponent {
    constructor(activeIndividualStore, colorGetter) {
        this.activeIndividualStore = activeIndividualStore;
        this.colorGetter = colorGetter;
    }
}
InfoPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngld-info-panel',
                template: "<div *ngIf=\"activeIndividualStore.activeIndividual$ | async as active;\">\n  <ng-container *ngTemplateOutlet=\"infoPanel; context: {data: active}\"></ng-container>\n</div>\n\n\n<ng-template #infoPanel let-data='data'>\n  <a href=\"#\" class=\"class\" [style.backgroundColor]=\"colorGetter.nextColorByName(data.labels[0])\">\n    <strong> {{ data.labels || data.type }} </strong>\n  </a>\n  <a href=\"#\" class=\"property\">\n    <strong> {{ data.id }} </strong>\n  </a>\n</ng-template>\n",
                styles: [":host{font-size:16px;padding:10px}a{border:1px solid;display:inline-block;font-size:14px;line-height:1.428571429;margin-left:5px;margin-top:5px;padding:6px 12px}a.class{color:#fff}a.property{background-color:#fff;border-color:#ccc;color:#333}a.btn{margin-left:5px;margin-top:5px;opacity:1}a.info{background-color:#a5abb6;border:1px solid #9aa1ac;color:#fff}\n"]
            },] }
];
InfoPanelComponent.ctorParameters = () => [
    { type: ActiveIndividualStoreService },
    { type: ColorProviderService }
];

class LinkedDataGraphicModule {
}
LinkedDataGraphicModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    LinkedDataGraphicComponent,
                    BoxSizeListenerDirective,
                    LongPressDirective,
                    InfoPanelComponent
                ],
                imports: [
                    BrowserModule, DragDropModule, PanZoomDirectiveModule,
                    SvgIconModule
                ],
                exports: [LinkedDataGraphicComponent, InfoPanelComponent]
            },] }
];

/*
 * Public API Surface of linked-data-graphic
 */

/**
 * Generated bundle index. Do not edit.
 */

export { ActiveIndividualStoreService, AnimationTranstion, ColorProviderService, DefaultColorProviderService, InfoPanelComponent, LinkedDataGraphicComponent, LinkedDataGraphicModule, BoxSizeListenerDirective as ɵa, LongPressDirective as ɵb };
//# sourceMappingURL=ngld-canvas.js.map
