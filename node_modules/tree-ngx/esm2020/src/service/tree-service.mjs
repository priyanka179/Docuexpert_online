import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { debounceTime, distinctUntilChanged } from 'rxjs/operators';
import { NodeSelectedState } from '../model/node-selected-state';
import { TreeMode } from '../model/tree-mode';
import { TreeUtil } from '../util/util';
import * as i0 from "@angular/core";
export class TreeService {
    constructor() {
        this.callbacks = {};
        this.treeState = [];
        this.selectedItems = [];
        this.selectedStates = [];
        this.filterValue = '';
        this.selectedItemsSubject = new BehaviorSubject(this.selectedItems);
        this.filterChangeSubject = new BehaviorSubject(this.filterValue);
        this.filterChangeSubject.pipe(debounceTime(300), distinctUntilChanged()).subscribe(it => {
            this.filterTraverse(this.treeState, this.filterValue);
        });
    }
    toggleSelected(state) {
        this.toggleSelectedState(state, false);
        if (this.callbacks.toggle) {
            this.callbacks.toggle(state.nodeItem);
        }
    }
    toggleSelectedState(state, ignoreDisabled) {
        if (this.isDisabled(state, ignoreDisabled)) {
            return;
        }
        if (state.selectedState === NodeSelectedState.unChecked) {
            if (this.options.mode === TreeMode.SingleSelect) {
                this.clear();
                this.setChecked(state, false, true, ignoreDisabled);
            }
            else {
                this.setChecked(state, true, false, ignoreDisabled);
            }
        }
        else if (state.selectedState === NodeSelectedState.checked) {
            if (this.options.mode === TreeMode.SingleSelect) {
                this.setUnchecked(state, false, true, ignoreDisabled);
            }
            else {
                this.setUnchecked(state, true, false, ignoreDisabled);
            }
        }
        else {
            if (this.anyActiveSelected(state) && !state.selected) {
                this.setUnchecked(state, true, false, ignoreDisabled);
            }
            else {
                this.setChecked(state, true, false, ignoreDisabled);
            }
        }
        if (state.parent && this.options.mode !== TreeMode.SingleSelect) {
            this.childStateChanged(state.parent);
        }
    }
    setInitialState() {
        this.setInitialSelectedState(this.treeState);
    }
    childStateChanged(state) {
        if (this.anyChildSelected(state)) {
            if (this.allChildrenSelected(state)) {
                this.setChecked(state, false);
            }
            else {
                this.setIndeterminate(state);
            }
        }
        else {
            this.setUnchecked(state, false);
        }
        if (state.parent) {
            this.childStateChanged(state.parent);
        }
    }
    checkBoxClick(state) {
        if (this.options.mode !== TreeMode.HideSelected) {
            this.toggleSelected(state);
        }
    }
    nameClick(state) {
        if (this.callbacks.nameClick) {
            this.callbacks.nameClick(state.nodeItem);
        }
        if (this.canToggleChildrenOnName()) {
            this.toggleSelected(state);
        }
    }
    toggleExpanded(value) {
        this.toggleExpandedTraverse(this.treeState, value);
    }
    clear() {
        for (let state of this.selectedStates) {
            state.selected = false;
            state.selectedState = NodeSelectedState.unChecked;
        }
        this.selectedItems.length = 0;
        this.selectedStates.length = 0;
    }
    addNodeById(nodeState, id) {
        let result = this.getNodeState(this.treeState, id, this.findById);
        if (result) {
            if (!result.children) {
                result.children = [];
            }
            this.addNewNode(nodeState, result);
            if (result.nodeItem.item && this.options.mode === TreeMode.MultiSelect) {
                this.removeSelected(result.nodeItem.item);
            }
        }
    }
    selectById(id) {
        let result = this.getNodeState(this.treeState, id, this.findById);
        if (result) {
            this.toggleSelected(result);
        }
    }
    editNameById(id, name) {
        const nodeState = this.getNodeState(this.treeState, id, this.findById);
        if (nodeState && nodeState.nodeItem) {
            nodeState.nodeItem.name = name;
        }
    }
    editItemById(id, item) {
        const nodeState = this.getNodeState(this.treeState, id, this.findById);
        if (nodeState && nodeState.nodeItem) {
            if (this.selectedItems.includes(nodeState.nodeItem.item)) {
                this.removeSelected(nodeState.nodeItem.item);
                this.selectedItems.push(item);
                this.selectedItemsSubject.next(this.selectedItems);
            }
            nodeState.nodeItem.item = item;
        }
    }
    deleteById(id) {
        let result = this.getNodeState(this.treeState, id, this.findById);
        if (result) {
            this.deleteByState(result);
        }
    }
    deleteByState(state) {
        this.delete(state);
        this.childStateChanged(state);
        this.filterTraverse(this.treeState, this.filterValue);
    }
    expandById(id) {
        const result = this.getNodeState(this.treeState, id, this.findById);
        if (result) {
            this.toggleExpandedTraverseAsc(result, true);
        }
    }
    collapseById(id) {
        const result = this.getNodeState(this.treeState, id, this.findById);
        if (result) {
            result.expanded = false;
        }
    }
    reEvaluateSelectedState(state) {
        if (this.options.mode !== TreeMode.SingleSelect) {
            if (!this.hasNoChildren(state)) {
                this.childStateChanged(state);
                for (const child of state.children) {
                    this.reEvaluateSelectedState(child);
                }
            }
        }
    }
    filterChanged(value) {
        this.filterValue = value;
        this.filterChangeSubject.next(value);
    }
    canToggleChildrenOnName() {
        if (this.options.checkboxes === false) {
            if (this.options.mode === TreeMode.SingleSelect || this.options.mode === TreeMode.MultiSelect) {
                return true;
            }
        }
        return false;
    }
    getParentById(id) {
        const result = this.getNodeState(this.treeState, id, this.findById);
        if (result) {
            return result.parent.nodeItem;
        }
        return null;
    }
    forceFilterTraverse() {
        this.filterTraverse(this.treeState, this.filterValue);
    }
    setInitialSelectedState(nodeStates) {
        for (const state of nodeStates) {
            if (this.options.mode === TreeMode.MultiSelect) {
                if (state.nodeItem.selected && (!state.children || state.children.length === 0)) {
                    this.toggleSelectedState(state, true);
                }
            }
            else {
                if (state.nodeItem.selected) {
                    this.toggleSelectedState(state, true);
                }
            }
            this.setInitialSelectedState(state.children);
        }
    }
    delete(state) {
        while (state.children.length > 0) {
            this.delete(state.children.pop());
        }
        this.removeSelected(state.nodeItem.item);
        this.remove(state);
        if (!state.parent) {
            this.deleteRoot(state, this.treeState, this.nodeItems);
        }
    }
    toggleExpandedTraverse(nodeStates, value) {
        for (let state of nodeStates) {
            state.expanded = value;
            this.toggleExpandedTraverse(state.children, value);
        }
    }
    deleteRoot(state, nodeStates, nodeItems) {
        let itemIndex = nodeItems.indexOf(state.nodeItem);
        if (itemIndex !== -1) {
            nodeItems.splice(itemIndex, 1);
        }
        let index = nodeStates.indexOf(state);
        if (index !== -1) {
            nodeStates.splice(index, 1);
        }
    }
    isDisabled(state, ignoreDisabled) {
        return (this.options.mode === TreeMode.NoSelect || (state.disabled && !ignoreDisabled));
    }
    addNewNode(nodeState, parent) {
        nodeState.parent = parent;
        parent.children.push(nodeState);
        parent.nodeItem.children.push(nodeState.nodeItem);
        parent.markSelected = TreeUtil.getMarkSelected(parent.nodeItem, this.options);
        if (this.options.mode === TreeMode.MultiSelect) {
            this.childStateChanged(parent);
        }
        this.filterTraverse(this.treeState, this.filterValue);
    }
    remove(state) {
        if (state.parent) {
            state.parent.hasFilteredChildren = false;
            let itemIndex = state.parent.nodeItem.children.indexOf(state.nodeItem);
            if (itemIndex !== -1) {
                state.parent.nodeItem.children.splice(itemIndex, 1);
            }
            let index = state.parent.children.indexOf(state);
            if (index !== -1) {
                state.parent.children.splice(index, 1);
            }
            let filteredIndex = state.parent.filteredChildren.indexOf(state);
            if (filteredIndex !== -1) {
                state.parent.filteredChildren.splice(filteredIndex, 1);
            }
        }
    }
    anyChildSelected(state) {
        return state.children.find(it => {
            return it.selectedState === NodeSelectedState.checked || it.selectedState === NodeSelectedState.indeterminate;
        }) != null ? true : false;
    }
    allChildrenSelected(state) {
        return state.children.every(it => it.selectedState === NodeSelectedState.checked)
            && state.children.length === state.nodeItem.children.length;
    }
    toggleExpandedTraverseAsc(nodeState, value) {
        nodeState.expanded = value;
        if (nodeState.parent) {
            this.toggleExpandedTraverseAsc(nodeState.parent, value);
        }
    }
    setUnchecked(state, propogate, force, ignoreDisabled) {
        if (state.disabled && !ignoreDisabled) {
            return;
        }
        state.selectedState = NodeSelectedState.unChecked;
        state.selected = false;
        if (this.hasNoChildren(state) || force) {
            this.removeSelected(state.nodeItem.item);
            if (this.options.alwaysEmitSelected === true) {
                this.selectedItemsSubject.next(this.selectedItems);
            }
            if (this.callbacks.unSelect) {
                this.callbacks.unSelect(state.nodeItem);
            }
        }
        else if (propogate === true) {
            for (const child of state.children) {
                this.setUnchecked(child, propogate, force, ignoreDisabled);
            }
        }
    }
    setIndeterminate(state) {
        state.selectedState = NodeSelectedState.indeterminate;
        state.selected = false;
    }
    anyActiveSelected(state) {
        let result = state.children.filter(it => !it.disabled && it.selected).length > 0;
        for (const child of state.children) {
            if (!this.hasNoChildren(child) && this.anyActiveSelected(child)) {
                result = true;
            }
        }
        return result;
    }
    hasNoChildren(state) {
        return (!state.children || state.children.length === 0);
    }
    setChecked(state, propogate, force, ignoreDisabled) {
        if (state.disabled && !ignoreDisabled) {
            return;
        }
        state.selectedState = NodeSelectedState.checked;
        state.selected = true;
        if (this.hasNoChildren(state) || force) {
            this.addSelected(state);
        }
        else if (propogate === true) {
            for (const child of state.children) {
                this.setChecked(child, propogate, force, ignoreDisabled);
            }
        }
    }
    addSelected(state) {
        this.selectedItems.push(state.nodeItem.item);
        this.selectedStates.push(state);
        if (this.options.alwaysEmitSelected === true) {
            this.selectedItemsSubject.next(this.selectedItems);
        }
        if (this.callbacks.select) {
            this.callbacks.select(state.nodeItem);
        }
    }
    removeSelected(item) {
        let index = this.selectedItems.indexOf(item);
        if (index !== -1) {
            this.selectedItems.splice(index, 1);
        }
    }
    findById(state, arg) {
        return state.nodeItem.id === arg;
    }
    getNodeState(nodeStates, arg, compare) {
        let result = nodeStates.find(it => compare(it, arg));
        if (result) {
            return result;
        }
        else {
            for (let state of nodeStates) {
                result = this.getNodeState(state.children, arg, compare);
                if (result) {
                    return result;
                }
            }
        }
        return result;
    }
    connect() {
        return this.selectedItemsSubject.asObservable();
    }
    applyFilter(state, filter) {
        state.filteredChildren = this.filter(state.children, filter);
        return state.filteredChildren.length > 0;
    }
    filter(states, value) {
        return states.filter(it => {
            if (this.options.mode === TreeMode.HideSelected && !it.selected) {
                return false;
            }
            if ((it.hasFilteredChildren || value === '' || it.nodeItem.name.toLowerCase().indexOf(value) !== -1)) {
                return true;
            }
        });
    }
    filterTraverse(states, filter) {
        let results = [];
        for (let state of states) {
            if (state.children.length > 0) {
                state.hasFilteredChildren = false;
                state.hasFilteredChildren = this.filterTraverse(state.children, filter);
                let res = this.applyFilter(state, filter);
                if (res) {
                    state.hasFilteredChildren = true;
                }
                results.push(state.hasFilteredChildren);
            }
        }
        return results.some(it => it === true);
    }
}
TreeService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: TreeService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
TreeService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: TreeService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: TreeService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,