import { Component, Input, EventEmitter, Output, ContentChild } from '@angular/core';
import { TreeService } from '../service/tree-service';
import { TreeMode } from '../model/tree-mode';
import { timer } from 'rxjs';
import { TreeUtil } from '../util/util';
import * as i0 from "@angular/core";
import * as i1 from "../service/tree-service";
import * as i2 from "../node/node.component";
import * as i3 from "@angular/common";
export class TreeNgxComponent {
    constructor(treeService) {
        this.treeService = treeService;
        this.defaultOptions = {
            mode: TreeMode.SingleSelect,
            checkboxes: false,
            alwaysEmitSelected: false
        };
        this.options = this.defaultOptions;
        this.callbacks = this.treeService.callbacks;
        this.filter = '';
        this.selectedItems = new EventEmitter();
    }
    ngOnInit() {
        this.subscription = this.treeService.connect().subscribe(it => {
            const sub = timer(0).subscribe(() => {
                this.selectedItems.emit(it);
                sub.unsubscribe();
            });
        });
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    ngOnChanges(changes) {
        if (changes.filter) {
            this.treeService.filterChanged(this.filter.toLowerCase());
        }
        if (changes.options) {
            this.setOptions();
            if (this.treeService.nodeItems) {
                this.treeService.treeState = this.initTreeStructure(null, this.treeService.nodeItems, this.treeService.options);
                this.treeService.clear();
                this.treeService.setInitialState();
                this.treeService.forceFilterTraverse();
            }
        }
        if (changes.callbacks) {
            this.treeService.callbacks = this.callbacks;
        }
        if (changes.nodeItems) {
            this.initialize();
        }
    }
    addNodeById(nodeItem, id) {
        const newNodeState = TreeUtil.initState(null, nodeItem, this.options);
        this.treeService.addNodeById(newNodeState, id);
    }
    deleteById(id) {
        this.treeService.deleteById(id);
    }
    editNameById(id, name) {
        this.treeService.editNameById(id, name);
    }
    editItemById(id, item) {
        this.treeService.editItemById(id, item);
    }
    getParentById(id) {
        return this.treeService.getParentById(id);
    }
    expandAll() {
        this.treeService.toggleExpanded(true);
    }
    collapseAll() {
        this.treeService.toggleExpanded(false);
    }
    expandById(id) {
        this.treeService.expandById(id);
    }
    collapseById(id) {
        this.treeService.collapseById(id);
    }
    selectById(id) {
        this.treeService.selectById(id);
    }
    initialize() {
        this.setOptions();
        this.treeService.callbacks = this.callbacks;
        this.treeService.nodeItems = this.nodeItems;
        this.treeService.treeState = this.initTreeStructure(null, this.treeService.nodeItems, this.treeService.options);
        this.treeService.clear();
        this.treeService.setInitialState();
    }
    initTreeStructure(parent, nodeItems, options) {
        let treeStructure = [];
        for (let nodeItem of nodeItems) {
            const nodeState = TreeUtil.initState(parent, nodeItem, options);
            if (nodeItem.children) {
                nodeState.children = this.initTreeStructure(nodeState, nodeItem.children, options);
                nodeState.filteredChildren = nodeState.children;
            }
            treeStructure.push(nodeState);
        }
        return treeStructure;
    }
    setOptions() {
        if (this.options.mode === TreeMode.NoSelect) {
            this.treeService.options = { ...this.options, checkboxes: false };
        }
        else {
            this.treeService.options = { ...this.options };
        }
    }
}
TreeNgxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: TreeNgxComponent, deps: [{ token: i1.TreeService }], target: i0.ɵɵFactoryTarget.Component });
TreeNgxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.2", type: TreeNgxComponent, selector: "tree-ngx", inputs: { options: "options", callbacks: "callbacks", nodeItems: "nodeItems", filter: "filter" }, outputs: { selectedItems: "selectedItems" }, providers: [TreeService], queries: [{ propertyName: "nodeNameTemplate", first: true, predicate: ["nodeNameTemplate"], descendants: true }, { propertyName: "nodeCollapsibleTemplate", first: true, predicate: ["nodeCollapsibleTemplate"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div class=\"tree-ngx\">\r\n  <node class=\"node-root\" [state]=\"state\" [selectedState]=\"state.selectedState\" [nodeCollapsibleTemplate]=\"nodeCollapsibleTemplate\"\r\n    [nodeNameTemplate]=\"nodeNameTemplate\" *ngFor=\"let state of treeService.treeState\"></node>\r\n</div>\r\n", components: [{ type: i2.NodeComponent, selector: "node", inputs: ["state", "selectedState", "nodeNameTemplate", "nodeCollapsibleTemplate"] }], directives: [{ type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: TreeNgxComponent, decorators: [{
            type: Component,
            args: [{ selector: 'tree-ngx', providers: [TreeService], template: "<div class=\"tree-ngx\">\r\n  <node class=\"node-root\" [state]=\"state\" [selectedState]=\"state.selectedState\" [nodeCollapsibleTemplate]=\"nodeCollapsibleTemplate\"\r\n    [nodeNameTemplate]=\"nodeNameTemplate\" *ngFor=\"let state of treeService.treeState\"></node>\r\n</div>\r\n" }]
        }], ctorParameters: function () { return [{ type: i1.TreeService }]; }, propDecorators: { nodeNameTemplate: [{
                type: ContentChild,
                args: ['nodeNameTemplate', { static: false }]
            }], nodeCollapsibleTemplate: [{
                type: ContentChild,
                args: ['nodeCollapsibleTemplate', { static: false }]
            }], options: [{
                type: Input
            }], callbacks: [{
                type: Input
            }], nodeItems: [{
                type: Input
            }], filter: [{
                type: Input
            }], selectedItems: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,